ODataFilterGrammarParser = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          " ",
          { type: "literal", value: " ", description: "\" \"" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function(a) { return a.join(''); },
          /^[0-9a-fA-F]/,
          { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
          "%x27",
          { type: "literal", value: "%x27", description: "\"%x27\"" },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          "null",
          { type: "literal", value: "null", description: "\"null\"" },
          "%d88",
          { type: "literal", value: "%d88", description: "\"%d88\"" },
          "binary",
          { type: "literal", value: "binary", description: "\"binary\"" },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          function() { return true; },
          "1",
          { type: "literal", value: "1", description: "\"1\"" },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          function() { return false; },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          "datetime",
          { type: "literal", value: "datetime", description: "\"datetime\"" },
          function(a) { return new Date(a); },
          "datetimeoffset",
          { type: "literal", value: "datetimeoffset", description: "\"datetimeoffset\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "T",
          { type: "literal", value: "T", description: "\"T\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          "Z",
          { type: "literal", value: "Z", description: "\"Z\"" },
          function(a, b, c, d, e) {
                                              return a + '-' + b + '-' + c + "T" + d + ":" + e;
                                          },
          function(a, b) { return a + ":" + b; },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(a, b) { return a + "." + b; },
          function(a, b, c) {
                                              return a + "-" + b + ":" + c;
                                          },
          ":00",
          { type: "literal", value: ":00", description: "\":00\"" },
          "M",
          { type: "literal", value: "M", description: "\"M\"" },
          "m",
          { type: "literal", value: "m", description: "\"m\"" },
          function(sign, digit, decimal) { return Number((sign || '') + digit.join('') + '.' + decimal.join('')); },
          function(sign, digit) { return Number((sign || '') + digit.join('')); },
          "e",
          { type: "literal", value: "e", description: "\"e\"" },
          "E",
          { type: "literal", value: "E", description: "\"E\"" },
          "D",
          { type: "literal", value: "D", description: "\"D\"" },
          "d",
          { type: "literal", value: "d", description: "\"d\"" },
          function(sign, digit, decimal, signexp, exp) { return Number((sign || '') + digit + '.' + decimal.join('') + 'e' + (signexp || '') + exp.join('')); },
          "guid",
          { type: "literal", value: "guid", description: "\"guid\"" },
          function(sign, digit) { return parseInt(digit.join('')) * (sign === '-' ? -1 : 1); },
          "L",
          { type: "literal", value: "L", description: "\"L\"" },
          "l",
          { type: "literal", value: "l", description: "\"l\"" },
          function(sign, digit) { return Number(digit.join('')) * (sign === '-' ? -1 : 1); },
          "F",
          { type: "literal", value: "F", description: "\"F\"" },
          "f",
          { type: "literal", value: "f", description: "\"f\"" },
          function(l, v, r) { return v; },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          function(a, b) { return a + b;},
          /^[0-2]/,
          { type: "class", value: "[0-2]", description: "[0-2]" },
          function(a, b) { return a + b; },
          "13",
          { type: "literal", value: "13", description: "\"13\"" },
          "60",
          { type: "literal", value: "60", description: "\"60\"" },
          /^[0-5]/,
          { type: "class", value: "[0-5]", description: "[0-5]" },
          "3",
          { type: "literal", value: "3", description: "\"3\"" },
          /^[0-1]/,
          { type: "class", value: "[0-1]", description: "[0-1]" },
          function(a) { return "3" + a; },
          "2",
          { type: "literal", value: "2", description: "\"2\"" },
          /^[0-4]/,
          { type: "class", value: "[0-4]", description: "[0-4]" },
          function(a) { return "2" + a; },
          function(a, b, c, d) { return a + b + c + d; },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "NaN",
          { type: "literal", value: "NaN", description: "\"NaN\"" },
          "-INF",
          { type: "literal", value: "-INF", description: "\"-INF\"" },
          "INF",
          { type: "literal", value: "INF", description: "\"INF\"" },
          /^[a-zA-Z0-9\-_]/,
          { type: "class", value: "[a-zA-Z0-9-_]", description: "[a-zA-Z0-9-_]" },
          /^[^']/,
          { type: "class", value: "[^']", description: "[^']" },
          /^[a-zA-Z]/,
          { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
          function(a, b) { if(!b) { return a; } return a + b; },
          function(a, i) {return i;},
          function(a, list) {
                                              if (!list) list = [];
                                              if (list && list[0] && Object.prototype.toString.call( list[0] ) === '[object Array]') {
                                                  list = list[0];
                                              }
                                              list.unshift(a);
                                              return list.join('.');
                                          },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          function(i, list) {
                                              if (list && list[0] && Object.prototype.toString.call( list[0] ) === '[object Array]') {
                                                  list = list[0];
                                              }
          									if(list)  
          										return "/" + i + list;
          									return "/" + i;
                                          },
          function(a, b) { if(!b) return a; return a + b; },
          function(list) { 
                                              return list;
                                          },
          "$filter=",
          { type: "literal", value: "$filter=", description: "\"$filter=\"" },
          { type: "any", description: "any character" },
          function() { return {"error": 'invalid $filter parameter'}; },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "and",
          { type: "literal", value: "and", description: "\"and\"" },
          "or",
          { type: "literal", value: "or", description: "\"or\"" },
          function(left, type, value) {
                                              return { type: type, value: value}
                                        },
          function(left, right) {

                                          if (right) {
                                              return {
                                                  type: right.type,
                                                  left: left,
                                                  right: right.value
                                              }
                                          } else {
                                              return left;
                                          }
                                        },
          "substringof",
          { type: "literal", value: "substringof", description: "\"substringof\"" },
          "endswith",
          { type: "literal", value: "endswith", description: "\"endswith\"" },
          "startswith",
          { type: "literal", value: "startswith", description: "\"startswith\"" },
          "IsOf",
          { type: "literal", value: "IsOf", description: "\"IsOf\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(f, arg0, arg1) {
                                              return {
                                                  type: "functioncall",
                                                  func: f,
                                                  args: [arg0, arg1]
                                              }
                                          },
          "IsOf(",
          { type: "literal", value: "IsOf(", description: "\"IsOf(\"" },
          function(arg0) {
                                              return {
                                                  type: "functioncall",
                                                  func: "IsOf",
                                                  args: [arg0]
                                              }
                                          },
          "tolower",
          { type: "literal", value: "tolower", description: "\"tolower\"" },
          "toupper",
          { type: "literal", value: "toupper", description: "\"toupper\"" },
          "trim",
          { type: "literal", value: "trim", description: "\"trim\"" },
          "length",
          { type: "literal", value: "length", description: "\"length\"" },
          "year",
          { type: "literal", value: "year", description: "\"year\"" },
          "month",
          { type: "literal", value: "month", description: "\"month\"" },
          "day",
          { type: "literal", value: "day", description: "\"day\"" },
          "hour",
          { type: "literal", value: "hour", description: "\"hour\"" },
          "minute",
          { type: "literal", value: "minute", description: "\"minute\"" },
          "second",
          { type: "literal", value: "second", description: "\"second\"" },
          "round",
          { type: "literal", value: "round", description: "\"round\"" },
          "floor",
          { type: "literal", value: "floor", description: "\"floor\"" },
          "ceiling",
          { type: "literal", value: "ceiling", description: "\"ceiling\"" },
          function(f, arg0) {
                                            return {
                                                type: "functioncall",
                                                func: f,
                                                args: [arg0]
                                            }
                                        },
          "indexof",
          { type: "literal", value: "indexof", description: "\"indexof\"" },
          "concat",
          { type: "literal", value: "concat", description: "\"concat\"" },
          "substring",
          { type: "literal", value: "substring", description: "\"substring\"" },
          "replace",
          { type: "literal", value: "replace", description: "\"replace\"" },
          function(f, arg0, arg1) {
                                            return {
                                                type: "functioncall",
                                                func: f,
                                                args: [arg0, arg1]
                                            }
                                        },
          "substring(",
          { type: "literal", value: "substring(", description: "\"substring(\"" },
          function(arg0, arg1, arg2) {
                                            return {
                                                type: "functioncall",
                                                func: "substring",
                                                args: [arg0, arg1, ag2]
                                            }
                                        },
          "replace(",
          { type: "literal", value: "replace(", description: "\"replace(\"" },
          function(arg0, arg1, arg2) {
                                            return {
                                                type: "functioncall",
                                                func: "replace",
                                                args: [arg0, arg1, ag2]
                                            }
                                        },
          function(a, op, b) {
                                              return {
                                                  type: op,
                                                  left: a,
                                                  right: b
                                              };
                                          },
          function(l) {
                                              return {
                                                  type: 'literal',
                                                  value: l
                                              };
                                          },
          function(u) {
                                              return { 
                                                  type: 'property', name: u
                                              }; 
                                          },
          "eq",
          { type: "literal", value: "eq", description: "\"eq\"" },
          "ne",
          { type: "literal", value: "ne", description: "\"ne\"" },
          "lt",
          { type: "literal", value: "lt", description: "\"lt\"" },
          "le",
          { type: "literal", value: "le", description: "\"le\"" },
          "gt",
          { type: "literal", value: "gt", description: "\"gt\"" },
          "ge",
          { type: "literal", value: "ge", description: "\"ge\"" },
          "add",
          { type: "literal", value: "add", description: "\"add\"" },
          "sub",
          { type: "literal", value: "sub", description: "\"sub\"" },
          "mul",
          { type: "literal", value: "mul", description: "\"mul\"" },
          "div",
          { type: "literal", value: "div", description: "\"div\"" },
          "mod",
          { type: "literal", value: "mod", description: "\"mod\"" }
        ],

        peg$bytecode = [
          peg$decode(";P"),
          peg$decode("2 \"\"6 7!"),
          peg$decode("4\"\"\"5!7#"),
          peg$decode("%$;\"/&#0#*;\"&&&#/' 8!:$!! )"),
          peg$decode("4%\"\"5!7&"),
          peg$decode("%;$/,#;$/#$+\")(\"'#&'#"),
          peg$decode("%;%/,#;%/#$+\")(\"'#&'#"),
          peg$decode("%;&/,#;'/#$+\")(\"'#&'#"),
          peg$decode("2'\"\"6'7(.) &2)\"\"6)7*"),
          peg$decode(";*.k &;+.e &;.._ &;/.Y &;8.S &;<.M &;6.G &;7.A &;:.; &;9.5 &;-./ &;;.) &;,.# &;="),
          peg$decode("%2+\"\"6+7,/Y#%2)\"\"6)7*/;#;M/2$2)\"\"6)7*/#$+#)(#'#(\"'#&'#.\" &\"/#$+\")(\"'#&'#"),
          peg$decode("%2-\"\"6-7..) &2/\"\"6/70/G#;(/>$;$/5$;$/,$;(/#$+%)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%21\"\"6172/& 8!:3! ).b &%24\"\"6475/& 8!:3! ).K &%26\"\"6677/& 8!:8! ).4 &%29\"\"697:/& 8!:8! )"),
          peg$decode("%;\"/5#;\"/,$;\"/#$+#)(#'#(\"'#&'#"),
          peg$decode("%2;\"\"6;7</C#;(/:$;4/1$;(/($8$:=$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%2>\"\"6>7?/>#;(/5$;5/,$;(/#$+$)($'#(#'#(\"'#&'#"),
          peg$decode("%;D/\xA0#2@\"\"6@7A/\x91$;?/\x88$2@\"\"6@7A/y$;B/p$2B\"\"6B7C/a$;C/X$2D\"\"6D7E/I$;A/@$2F\"\"6F7G.\" &\"/,$8*:H*%)'%#!)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;0/U#2D\"\"6D7E/F$;A/=$2F\"\"6F7G.\" &\"/)$8$:I$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;1/A#2J\"\"6J7K/2$;#/)$8#:L#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;2/Z#2@\"\"6@7A/K$;C/B$2D\"\"6D7E/3$;A/*$8%:M%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";3./ &;2.) &;1.# &;0"),
          peg$decode("%;4/2#2F\"\"6F7G/#$+\")(\"'#&'#.\xCC &%;4/D#;E/;$;@/2$2N\"\"6N7O/#$+$)($'#(#'#(\"'#&'#.\x9B &%;4/5#;E/,$;@/#$+#)(#'#(\"'#&'#.y &%;4/M#;E/D$;?/;$2D\"\"6D7E/,$;A/#$+%)(%'#($'#(#'#(\"'#&'#.? &%;4/5#;E/,$;?/#$+#)(#'#(\"'#&'#"),
          peg$decode("%;E.\" &\"/\x80#$;\"/&#0#*;\"&&&#/j$2J\"\"6J7K/[$$;\"/&#0#*;\"&&&#/E$2P\"\"6P7Q.) &2R\"\"6R7S/*$8%:T%#$#!)(%'#($'#(#'#(\"'#&'#.i &%;E.\" &\"/Z#$;\"/&#0#*;\"&&&#/D$2P\"\"6P7Q.) &2R\"\"6R7S/)$8#:U#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%;E.\" &\"/\xB9#;\"/\xB0$2J\"\"6J7K/\xA1$$;\"/&#0#*;\"&&&#/\x8B$2V\"\"6V7W.) &2X\"\"6X7Y/p$;E.\" &\"/b$$;\"/&#0#*;\"&&&#/L$2Z\"\"6Z7[.) &2\\\"\"6\\7].\" &\"/,$8(:^(%'&$\"!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0110 &%;E.\" &\"/\x85#$;\"/&#0#*;\"&&&#/o$2J\"\"6J7K/`$$;\"/&#0#*;\"&&&#/J$2Z\"\"6Z7[.) &2\\\"\"6\\7].\" &\"/*$8%:T%#$#!)(%'#($'#(#'#(\"'#&'#.\x99 &%;E.\" &\"/Z#$;\"/&#0#*;\"&&&#/D$2Z\"\"6Z7[.) &2\\\"\"6\\7]/)$8#:U#\"\"!)(#'#(\"'#&'#.M &%;I/C#2Z\"\"6Z7[.) &2\\\"\"6\\7].\" &\"/#$+\")(\"'#&'#"),
          peg$decode("%2_\"\"6_7`/\x8F#;(/\x86$;'/}$2@\"\"6@7A/n$;&/e$2@\"\"6@7A/V$;&/M$2@\"\"6@7A/>$;'/5$;&/,$;(/#$++)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;E.\" &\"/?#$;\"/&#0#*;\"&&&#/)$8\":a\"\"! )(\"'#&'#"),
          peg$decode("%;E.\" &\"/_#$;\"/&#0#*;\"&&&#/I$2b\"\"6b7c.) &2d\"\"6d7e.\" &\"/)$8#:f#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%;E.\" &\"/H#;\"/?$;\".\" &\"/1$;\".\" &\"/#$+$)($'#(#'#(\"'#&'#"),
          peg$decode("%;E.\" &\"/\xB4#;\"/\xAB$2J\"\"6J7K/\x9C$$;\"/&#0#*;\"&&&#/\x86$2V\"\"6V7W.) &2X\"\"6X7Y/k$;E.\" &\"/]$$;\"/&#0#*;\"&&&#/G$2g\"\"6g7h.) &2i\"\"6i7j/,$8(:^(%'&$\"!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0100 &%;E.\" &\"/z#$;\"0#*;\"&/j$2J\"\"6J7K/[$$;\"/&#0#*;\"&&&#/E$2g\"\"6g7h.) &2i\"\"6i7j/*$8%:T%#$#!)(%'#($'#(#'#(\"'#&'#.\x94 &%;E.\" &\"/Z#$;\"/&#0#*;\"&&&#/D$2g\"\"6g7h.) &2i\"\"6i7j/)$8#:U#\"\"!)(#'#(\"'#&'#.H &%;I/>#2g\"\"6g7h.) &2i\"\"6i7j/#$+\")(\"'#&'#"),
          peg$decode("%;(/<#;K/3$;(/*$8#:k##\"! )(#'#(\"'#&'#"),
          peg$decode("4l\"\"5!7m"),
          peg$decode("%29\"\"697:/8#4l\"\"5!7m/)$8\":n\"\"! )(\"'#&'#.H &%24\"\"6475/8#4o\"\"5!7p/)$8\":q\"\"! )(\"'#&'#"),
          peg$decode(";?.) &2r\"\"6r7s"),
          peg$decode("2t\"\"6t7u.B &%4v\"\"5!7w/2#;\"/)$8\":q\"\"! )(\"'#&'#"),
          peg$decode("%2x\"\"6x7y/7#4z\"\"5!7{/($8\":|\"! )(\"'#&'#.B &%4o\"\"5!7p/2#;\"/)$8\":q\"\"! )(\"'#&'#"),
          peg$decode("%2}\"\"6}7~/7#4\"\"5!7\x80/($8\":\x81\"! )(\"'#&'#.B &%4z\"\"5!7{/2#;\"/)$8\":q\"\"! )(\"'#&'#"),
          peg$decode("%;\"/F#;\"/=$;\"/4$;\"/+$8$:\x82$$#\"! )($'#(#'#(\"'#&'#"),
          peg$decode("2\x83\"\"6\x837\x84.) &2@\"\"6@7A"),
          peg$decode("2\x85\"\"6\x857\x86"),
          peg$decode("2\x87\"\"6\x877\x88"),
          peg$decode("2\x89\"\"6\x897\x8A"),
          peg$decode(";F.) &;G.# &;H"),
          peg$decode("%$4\x8B\"\"5!7\x8C/,#0)*4\x8B\"\"5!7\x8C&&&#/' 8!:$!! )"),
          peg$decode("%$4\x8D\"\"5!7\x8E0)*4\x8D\"\"5!7\x8E&/' 8!:$!! )"),
          peg$decode("%4\x8F\"\"5!7\x90/2#;J/)$8\":\x91\"\"! )(\"'#&'#"),
          peg$decode("%;L/V#%2J\"\"6J7K/2#;M/)$8\":\x92\"\"# )(\"'#&'#.\" &\"/)$8\":\x93\"\"! )(\"'#&'#"),
          peg$decode("%2\x94\"\"6\x947\x95/@#;L/7$;N.\" &\"/)$8#:\x96#\"! )(#'#(\"'#&'#"),
          peg$decode("%;M/7#;N.\" &\"/)$8\":\x97\"\"! )(\"'#&'#"),
          peg$decode("%;Q/' 8!:\x98!! ).Q &%2\x99\"\"6\x997\x9A/A#$1\"\"5!7\x9B0(*1\"\"5!7\x9B&/'$8\":\x9C\" )(\"'#&'#"),
          peg$decode("%2\x9D\"\"6\x9D7\x9E/\x9C#;!.\" &\"/\x8E$;Q/\x85$;!.\" &\"/w$2\x9F\"\"6\x9F7\xA0/h$%;!/P#2\xA1\"\"6\xA17\xA2.) &2\xA3\"\"6\xA37\xA4/5$;!/,$;Q/#$+$)($'#(#'#(\"'#&'#.\" &\"/#$+&)(&'#(%'#($'#(#'#(\"'#&'#. &%;X/u#%;!/W#2\xA1\"\"6\xA17\xA2.) &2\xA3\"\"6\xA37\xA4/<$;!/3$;Q/*$8$:\xA5$#%\" )($'#(#'#(\"'#&'#.\" &\"/)$8\":\xA6\"\"! )(\"'#&'#"),
          peg$decode("2\xA7\"\"6\xA77\xA8.A &2\xA9\"\"6\xA97\xAA.5 &2\xAB\"\"6\xAB7\xAC.) &2\xAD\"\"6\xAD7\xAE"),
          peg$decode("%;R/w#2\x9D\"\"6\x9D7\x9E/h$;Y/_$2\xAF\"\"6\xAF7\xB0/P$;!.\" &\"/B$;Y/9$2\x9F\"\"6\x9F7\xA0/*$8':\xB1'#&$!)(''#(&'#(%'#($'#(#'#(\"'#&'#.P &%2\xB2\"\"6\xB27\xB3/@#;Y/7$2\x9F\"\"6\x9F7\xA0/($8#:\xB4#!!)(#'#(\"'#&'#"),
          peg$decode("2\xB5\"\"6\xB57\xB6.\xAD &2\xB7\"\"6\xB77\xB8.\xA1 &2\xB9\"\"6\xB97\xBA.\x95 &2\xBB\"\"6\xBB7\xBC.\x89 &2\xBD\"\"6\xBD7\xBE.} &2\xBF\"\"6\xBF7\xC0.q &2\xC1\"\"6\xC17\xC2.e &2\xC3\"\"6\xC37\xC4.Y &2\xC5\"\"6\xC57\xC6.M &2\xC7\"\"6\xC77\xC8.A &2\xC9\"\"6\xC97\xCA.5 &2\xCB\"\"6\xCB7\xCC.) &2\xCD\"\"6\xCD7\xCE"),
          peg$decode("%;T/P#2\x9D\"\"6\x9D7\x9E/A$;Y/8$2\x9F\"\"6\x9F7\xA0/)$8$:\xCF$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("2\xD0\"\"6\xD07\xD1.A &2\xD2\"\"6\xD27\xD3.5 &2\xD4\"\"6\xD47\xD5.) &2\xD6\"\"6\xD67\xD7"),
          peg$decode("%;V/w#2\x9D\"\"6\x9D7\x9E/h$;Y/_$2\xAF\"\"6\xAF7\xB0/P$;!.\" &\"/B$;Y/9$2\x9F\"\"6\x9F7\xA0/*$8':\xD8'#&$!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u013D &%2\xD9\"\"6\xD97\xDA/\x9D#2\x9D\"\"6\x9D7\x9E/\x8E$;Y/\x85$2\xAF\"\"6\xAF7\xB0/v$;!.\" &\"/h$;Y/_$2\xAF\"\"6\xAF7\xB0/P$;!.\" &\"/B$;Y/9$2\x9F\"\"6\x9F7\xA0/*$8*:\xDB*#'$!)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAD &%2\xDC\"\"6\xDC7\xDD/\x9D#2\x9D\"\"6\x9D7\x9E/\x8E$;Y/\x85$2\xAF\"\"6\xAF7\xB0/v$;!.\" &\"/h$;Y/_$2\xAF\"\"6\xAF7\xB0/P$;!.\" &\"/B$;Y/9$2\x9F\"\"6\x9F7\xA0/*$8*:\xDE*#'$!)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;Y/N#;!/E$;Z/<$;!/3$;Y/*$8%:\xDF%#$\" )(%'#($'#(#'#(\"'#&'#.# &;S"),
          peg$decode(";S.M &;W.G &;U.A &%;)/' 8!:\xE0!! )./ &%;O/' 8!:\xE1!! )"),
          peg$decode("2\xE2\"\"6\xE27\xE3.\x95 &2\xE4\"\"6\xE47\xE5.\x89 &2\xE6\"\"6\xE67\xE7.} &2\xE8\"\"6\xE87\xE9.q &2\xEA\"\"6\xEA7\xEB.e &2\xEC\"\"6\xEC7\xED.Y &2\xEE\"\"6\xEE7\xEF.M &2\xF0\"\"6\xF07\xF1.A &2\xF2\"\"6\xF27\xF3.5 &2\xF4\"\"6\xF47\xF5.) &2\xF6\"\"6\xF67\xF7")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }

    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();