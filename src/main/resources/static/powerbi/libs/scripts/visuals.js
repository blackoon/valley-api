'use strict';
"use strict";
window.parseTimeMarkers = window.parseTimeMarkers || {};
window.parseTimeMarkers['powerbi-visuals.nonmin.js'] = {
    nominalStart: Date.now(),
    start: Date.now()
};


var powerbi;

!(function(powerbi) {
    var VisualDataRoleKind;
    !(function(VisualDataRoleKind) {
        VisualDataRoleKind[VisualDataRoleKind.Grouping = 0] = "Grouping", VisualDataRoleKind[VisualDataRoleKind.Measure = 1] = "Measure", 
        VisualDataRoleKind[VisualDataRoleKind.GroupingOrMeasure = 2] = "GroupingOrMeasure";
    })(VisualDataRoleKind = powerbi.VisualDataRoleKind || (powerbi.VisualDataRoleKind = {}));
    var VisualDataChangeOperationKind;
    !(function(VisualDataChangeOperationKind) {
        VisualDataChangeOperationKind[VisualDataChangeOperationKind.Create = 0] = "Create", 
        VisualDataChangeOperationKind[VisualDataChangeOperationKind.Append = 1] = "Append";
    })(VisualDataChangeOperationKind = powerbi.VisualDataChangeOperationKind || (powerbi.VisualDataChangeOperationKind = {}));
    var VisualUpdateType;
    !(function(VisualUpdateType) {
        VisualUpdateType[VisualUpdateType.Data = 2] = "Data", VisualUpdateType[VisualUpdateType.Resize = 4] = "Resize", 
        VisualUpdateType[VisualUpdateType.ViewMode = 8] = "ViewMode", VisualUpdateType[VisualUpdateType.Style = 16] = "Style", 
        VisualUpdateType[VisualUpdateType.ResizeEnd = 32] = "ResizeEnd", VisualUpdateType[VisualUpdateType.All = 62] = "All";
    })(VisualUpdateType = powerbi.VisualUpdateType || (powerbi.VisualUpdateType = {}));
    var VisualPermissions;
    !(function(VisualPermissions) {})(VisualPermissions = powerbi.VisualPermissions || (powerbi.VisualPermissions = {}));
})(powerbi || (powerbi = {}));;"use strict";

function focusable(element, isTabIndexNotNaN) {
    var map, mapName, img, nodeName = element.nodeName.toLowerCase();
    return "area" === nodeName ? (map = element.parentNode, mapName = map.name, !(!element.href || !mapName || "map" !== map.nodeName.toLowerCase()) && (img = $("img[usemap='#" + mapName + "']")[0], 
    !!img && visible(img))) : (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
}

function visible(element) {
    return $.expr.filters.visible(element) && !$(element).parents().addBack().filter((function() {
        return "hidden" === $(this).css("visibility");
    })).length;
}

window.DEBUG = !1;

var debug;

!(function(debug) {
    function assert(condition, message) {
        condition !== !0 && assertFail(message || "condition: " + condition);
    }
    function assertValue(value, message) {
        null !== value && void 0 !== value || assertFail(message || "condition: " + value);
    }
    function assertNonEmpty(value, message) {
        null != value && value.length > 0 || assertFail(message || "condition: " + value);
    }
    function assertAnyValue(value, message) {}
    function assertFail(message) {
        (debug.assertFailFunction || alert)("Debug Assert failed: " + message);
    }
    function log(message) {
        for (var optionalParams = [], _i = 1; _i < arguments.length; _i++) optionalParams[_i - 1] = arguments[_i];
    }
    function warn(message) {
        for (var optionalParams = [], _i = 1; _i < arguments.length; _i++) optionalParams[_i - 1] = arguments[_i];
        console && console.warn || log.apply(void 0, [ message ].concat(optionalParams));
    }
    debug.assert = assert, debug.assertValue = assertValue, debug.assertNonEmpty = assertNonEmpty, 
    debug.assertAnyValue = assertAnyValue, debug.assertFail = assertFail, debug.log = log, 
    debug.warn = warn;
})(debug || (debug = {}));

var powerbi;

!(function(powerbi) {
    function define(name, factory) {
        items[name] = {
            fn: factory
        };
    }
    var items = {};
    powerbi.define = define, powerbi.requireSync = function(name) {
        var syncModule = items[name], factory = syncModule.fn;
        if (factory) {
            var value = syncModule.v = factory(powerbi.requireSync);
            return syncModule.fn = null, value;
        }
        return syncModule.v;
    };
})(powerbi || (powerbi = {}));

var jsCommon;

!(function(jsCommon) {
    var DOMConstants;
    !(function(DOMConstants) {
        var KeyDictionary;
        !(function(KeyDictionary) {
            KeyDictionary.F6 = 117, KeyDictionary.F10 = 121;
        })(KeyDictionary = DOMConstants.KeyDictionary || (DOMConstants.KeyDictionary = {})), 
        DOMConstants.DocumentBody = "body", DOMConstants.Anchor = "a", DOMConstants.EditableTextElements = ":text, textarea", 
        DOMConstants.EditableNumericElements = '[type="number"]', DOMConstants.disabledAttributeOrValue = "disabled", 
        DOMConstants.readonlyAttributeOrValue = "readonly", DOMConstants.idAttribute = "id", 
        DOMConstants.styleAttribute = "style", DOMConstants.hrefAttribute = "href", DOMConstants.targetAttribute = "target", 
        DOMConstants.blankValue = "_blank", DOMConstants.selfValue = "_self", DOMConstants.classAttribute = "class", 
        DOMConstants.titleAttribute = "title", DOMConstants.srcAttribute = "src", DOMConstants.contextmenuEventName = "contextmenu", 
        DOMConstants.blurEventName = "blur", DOMConstants.keyUpEventName = "keyup", DOMConstants.inputEventName = "input", 
        DOMConstants.changeEventName = "change", DOMConstants.cutEventName = "cut", DOMConstants.keyDownEventName = "keydown", 
        DOMConstants.mouseMoveEventName = "mousemove", DOMConstants.mouseDownEventName = "mousedown", 
        DOMConstants.mouseEnterEventName = "mouseenter", DOMConstants.mouseLeaveEventName = "mouseleave", 
        DOMConstants.mouseOverEventName = "mouseover", DOMConstants.mouseOutEventName = "mouseout", 
        DOMConstants.mouseClickEventName = "click", DOMConstants.pasteEventName = "paste", 
        DOMConstants.scrollEventName = "scroll", DOMConstants.dropEventName = "drop", DOMConstants.focusEventName = "focus", 
        DOMConstants.focusInEventName = "focusin", DOMConstants.focusOutEventName = "focusout", 
        DOMConstants.selectEventName = "select", DOMConstants.messageEventName = "message", 
        DOMConstants.loadEventName = "load", DOMConstants.beforeUnload = "beforeunload", 
        DOMConstants.inputAndSelectEventNames = "input, select";
    })(DOMConstants = jsCommon.DOMConstants || (jsCommon.DOMConstants = {}));
})(jsCommon || (jsCommon = {}));

var powerbi;

!(function(powerbi) {
    powerbi.RS_AccessDeniedDueToRLSGroup = "rsAccessDeniedDueToRLSGroup", powerbi.RS_CannotRetrieveModel = "rsCannotRetrieveModel", 
    powerbi.DMTS_NoGatewayWithAllDatasourcesToBindError = "DMTS_NoGatewayWithAllDatasourcesToBindError", 
    powerbi.DM_GWPipeline_UnknownError = "DM_GWPipeline_UnknownError", powerbi.PBID_AccessDenied = "pbidAccessDenied", 
    powerbi.PBI_PowerBIServiceLiveConnectModelNotFound = "PowerBIServiceLiveConnectModelNotFound";
    var PowerBIErrorResourceType;
    !(function(PowerBIErrorResourceType) {
        PowerBIErrorResourceType[PowerBIErrorResourceType.ResourceCodeReference = 0] = "ResourceCodeReference", 
        PowerBIErrorResourceType[PowerBIErrorResourceType.EmbeddedString = 1] = "EmbeddedString";
    })(PowerBIErrorResourceType = powerbi.PowerBIErrorResourceType || (powerbi.PowerBIErrorResourceType = {}));
    var ServiceErrorToClientError = (function() {
        function ServiceErrorToClientError(serviceError) {
            this.m_serviceError = serviceError;
        }
        return Object.defineProperty(ServiceErrorToClientError.prototype, "code", {
            get: function() {
                return ServiceErrorToClientError.codeName;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ServiceErrorToClientError.prototype, "ignorable", {
            get: function() {
                return !1;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ServiceErrorToClientError.prototype, "requestId", {
            get: function() {
                return this.httpRequestId;
            },
            set: function(value) {
                this.httpRequestId = value;
            },
            enumerable: !0,
            configurable: !0
        }), ServiceErrorToClientError.prototype.getDetails = function(resourceProvider) {
            var errorDetails;
            return errorDetails = 6 === this.m_serviceError.statusCode ? PowerBIErrorDetailHelper.GetDetailsFromTransformError(resourceProvider, this.m_serviceError) : PowerBIErrorDetailHelper.GetDetailsFromServerError(resourceProvider, this.m_serviceError), 
            PowerBIErrorDetailHelper.addAdditionalInfo(errorDetails, this.m_serviceError.errorDetails, resourceProvider), 
            PowerBIErrorDetailHelper.addDebugErrorInfo(errorDetails, this.code, this.m_serviceError.message || null, this.m_serviceError.stackTrace || null, this.httpRequestId), 
            errorDetails;
        }, ServiceErrorToClientError.codeName = "ServiceErrorToClientError", ServiceErrorToClientError;
    })();
    powerbi.ServiceErrorToClientError = ServiceErrorToClientError;
    var PowerBIErrorDetailHelper = (function() {
        function PowerBIErrorDetailHelper() {}
        return PowerBIErrorDetailHelper.addAdditionalInfo = function(errorDetails, pbiErrorDetails, localize) {
            if (pbiErrorDetails) for (var _i = 0, pbiErrorDetails_1 = pbiErrorDetails; _i < pbiErrorDetails_1.length; _i++) {
                var element = pbiErrorDetails_1[_i], localizedCode = localize.getOptional(PowerBIErrorDetailHelper.serverErrorPrefix + element.code), additionErrorInfoKeyValuePair = {
                    errorInfoKey: localizedCode ? localizedCode : element.code,
                    errorInfoValue: element.detail.type === PowerBIErrorResourceType.ResourceCodeReference ? localize.get(PowerBIErrorDetailHelper.serverErrorPrefix + element.detail.value) : element.detail.value
                };
                errorDetails.displayableErrorInfo.push(additionErrorInfoKeyValuePair);
            }
            return errorDetails;
        }, PowerBIErrorDetailHelper.addDebugErrorInfo = function(errorDetails, errorCode, message, stackTrace, httpRequestId) {
            return errorDetails.debugErrorInfo = errorDetails.debugErrorInfo || [], httpRequestId && errorDetails.debugErrorInfo.push({
                errorInfoKey: powerbi.ClientErrorStrings.HttpRequestId,
                errorInfoValue: httpRequestId
            }), errorCode && errorDetails.debugErrorInfo.push({
                errorInfoKey: powerbi.ClientErrorStrings.ClientErrorCode,
                errorInfoValue: errorCode
            }), message && errorDetails.debugErrorInfo.push({
                errorInfoKey: powerbi.ClientErrorStrings.ErrorDetails,
                errorInfoValue: message
            }), stackTrace && errorDetails.debugErrorInfo.push({
                errorInfoKey: powerbi.ClientErrorStrings.StackTrace,
                errorInfoValue: stackTrace
            }), errorDetails;
        }, PowerBIErrorDetailHelper.GetDetailsFromTransformError = function(localize, serviceError) {
            var message = localize.get("ServiceError_CannotLoadVisual"), key = localize.get("ServiceError_CannotLoadVisual"), val = serviceError.message, additionalInfo = [];
            additionalInfo.push({
                errorInfoKey: key,
                errorInfoValue: val
            });
            var errorDetails = {
                message: message,
                displayableErrorInfo: additionalInfo
            };
            return errorDetails;
        }, PowerBIErrorDetailHelper.GetDetailsFromServerError = function(localize, serviceError) {
            var message = "", key = "", val = "", errorCodeHandled = !1;
            switch (serviceError.errorCode) {
              case powerbi.RS_AccessDeniedDueToRLSGroup:
                message = localize.get("ServiceError_ModelCannotLoad"), key = localize.get("ServiceError_ModelFetchingFailureKey"), 
                val = localize.get("DsrError_NoPermissionDueToRLSGroupMessage"), errorCodeHandled = !0;
                break;

              case powerbi.RS_CannotRetrieveModel:
                message = localize.get("ServiceError_ModelCannotLoad"), key = localize.get("ServiceError_ModelFetchingFailureKey"), 
                val = localize.get("DsrError_CanNotRetrieveModelMessage"), errorCodeHandled = !0;
                break;

              case powerbi.DMTS_NoGatewayWithAllDatasourcesToBindError:
                message = localize.get("ServiceError_ModelCannotLoad"), key = localize.get("ServiceError_ModelFetchingFailureKey"), 
                val = localize.get("ServerError_DM_GWPipeline_Gateway_DataSourceConnectionError"), 
                errorCodeHandled = !0;
                break;

              case powerbi.DM_GWPipeline_UnknownError:
                message = localize.get("ServiceError_ModelCannotLoad"), key = localize.get("ServiceError_ModelFetchingFailureKey"), 
                val = localize.get("ServerError_DM_GWPipeline_Client_GatewayUnreachable"), errorCodeHandled = !0;
                break;

              case powerbi.PBID_AccessDenied:
                message = localize.get("ServiceError_CannotLoadVisual"), key = localize.get("ServiceError_AuthenticationErrorKey"), 
                val = localize.get("ServiceError_AuthenticationErrorValue"), errorCodeHandled = !0;
                break;

              case powerbi.PBI_PowerBIServiceLiveConnectModelNotFound:
                message = localize.get("UploadPowerBICompanion_AccessDatasetWarning"), errorCodeHandled = !0;
            }
            if (!errorCodeHandled) switch (serviceError.statusCode) {
              case 2:
                message = localize.get("ServiceError_ModelCannotLoad"), key = localize.get("ServiceError_ModelConvertFailureKey"), 
                val = localize.get("ServiceError_ModelConvertFailureValue");
                break;

              case 3:
                message = localize.get("ServiceError_ModelCannotLoad"), key = localize.get("ServiceError_ModelCreationFailureKey"), 
                val = localize.get("ServiceError_ModelCreationFailureValue");
                break;

              case 1:
                message = localize.get("ServiceError_ModelCannotLoad"), key = localize.get("ServiceError_ModelFetchingFailureKey"), 
                val = localize.get("ServiceError_ModelFetchingFailureValue");
                break;

              case 4:
                message = localize.get("ServiceError_CannotLoadVisual"), key = localize.get("ServiceError_ExecuteSemanticQueryErrorKey"), 
                val = localize.get("ServiceError_ExecuteSemanticQueryErrorValue");
                break;

              case 5:
                message = localize.get("ServiceError_CannotLoadVisual"), key = localize.get("ServiceError_ExecuteSemanticQueryInvalidStreamFormatKey"), 
                val = localize.get("ServiceError_ExecuteSemanticQueryInvalidStreamFormatValue");
                break;

              case 0:
              default:
                message = localize.get("ServiceError_GeneralError"), key = localize.get("ServiceError_GeneralErrorKey"), 
                val = localize.get("ServiceError_GeneralErrorValue");
            }
            var additionalInfo = [];
            additionalInfo.push({
                errorInfoKey: key,
                errorInfoValue: val
            });
            var errorDetails = {
                message: message,
                displayableErrorInfo: additionalInfo
            };
            return errorDetails;
        }, PowerBIErrorDetailHelper.serverErrorPrefix = "ServerError_", PowerBIErrorDetailHelper;
    })();
    powerbi.PowerBIErrorDetailHelper = PowerBIErrorDetailHelper;
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {})(powerbi || (powerbi = {})), powerbi.define("VisualsCommon/services/geoTaggingAnalyzerService", (function(imports) {
    var CategoryTypes = {
        Address: "Address",
        City: "City",
        Continent: "Continent",
        CountryRegion: "Country",
        County: "County",
        Longitude: "Longitude",
        Latitude: "Latitude",
        Place: "Place",
        PostalCode: "PostalCode",
        StateOrProvince: "StateOrProvince"
    }, EnglishBackup = {
        GeotaggingString_Continent: "continent",
        GeotaggingString_Continents: "continents",
        GeotaggingString_Country: "country",
        GeotaggingString_Countries: "countries",
        GeotaggingString_State: "state",
        GeotaggingString_States: "states",
        GeotaggingString_City: "city",
        GeotaggingString_Cities: "cities",
        GeotaggingString_Town: "town",
        GeotaggingString_Towns: "towns",
        GeotaggingString_Province: "province",
        GeotaggingString_Provinces: "provinces",
        GeotaggingString_County: "county",
        GeotaggingString_Counties: "counties",
        GeotaggingString_Village: "village",
        GeotaggingString_Villages: "villages",
        GeotaggingString_Post: "post",
        GeotaggingString_Zip: "zip",
        GeotaggingString_Code: "code",
        GeotaggingString_Place: "place",
        GeotaggingString_Places: "places",
        GeotaggingString_Address: "address",
        GeotaggingString_Addresses: "addresses",
        GeotaggingString_Street: "street",
        GeotaggingString_Streets: "streets",
        GeotaggingString_Longitude: "longitude",
        GeotaggingString_Longitude_Short: "lon",
        GeotaggingString_Longitude_Short2: "long",
        GeotaggingString_Latitude: "latitude",
        GeotaggingString_Latitude_Short: "lat",
        GeotaggingString_PostalCode: "postal code",
        GeotaggingString_PostalCodes: "postal codes",
        GeotaggingString_ZipCode: "zip code",
        GeotaggingString_ZipCodes: "zip codes",
        GeotaggingString_Territory: "territory",
        GeotaggingString_Territories: "territories",
        GeotaggingString_VRMBackCompat_CountryRegion: "CountryRegion",
        GeotaggingString_VRMBackCompat_StateOrProvince: "StateOrProvince"
    }, GeoTaggingAnalyzerService = (function() {
        function GeoTaggingAnalyzerService(getLocalized) {
            this.GeotaggingString_VRMBackCompat_CountryRegion = "CountryRegion", this.GeotaggingString_VRMBackCompat_StateOrProvince = "StateOrProvince", 
            this.GeotaggingString_Continent = getLocalized("GeotaggingString_Continent").toLowerCase(), 
            this.GeotaggingString_Continents = getLocalized("GeotaggingString_Continents").toLowerCase(), 
            this.GeotaggingString_Country = getLocalized("GeotaggingString_Country").toLowerCase(), 
            this.GeotaggingString_Countries = getLocalized("GeotaggingString_Countries").toLowerCase(), 
            this.GeotaggingString_State = getLocalized("GeotaggingString_State").toLowerCase(), 
            this.GeotaggingString_States = getLocalized("GeotaggingString_States").toLowerCase(), 
            this.GeotaggingString_City = getLocalized("GeotaggingString_City").toLowerCase(), 
            this.GeotaggingString_Cities = getLocalized("GeotaggingString_Cities").toLowerCase(), 
            this.GeotaggingString_Town = getLocalized("GeotaggingString_Town").toLowerCase(), 
            this.GeotaggingString_Towns = getLocalized("GeotaggingString_Towns").toLowerCase(), 
            this.GeotaggingString_Province = getLocalized("GeotaggingString_Province").toLowerCase(), 
            this.GeotaggingString_Provinces = getLocalized("GeotaggingString_Provinces").toLowerCase(), 
            this.GeotaggingString_County = getLocalized("GeotaggingString_County").toLowerCase(), 
            this.GeotaggingString_Counties = getLocalized("GeotaggingString_Counties").toLowerCase(), 
            this.GeotaggingString_Village = getLocalized("GeotaggingString_Village").toLowerCase(), 
            this.GeotaggingString_Villages = getLocalized("GeotaggingString_Villages").toLowerCase(), 
            this.GeotaggingString_Post = getLocalized("GeotaggingString_Post").toLowerCase(), 
            this.GeotaggingString_Zip = getLocalized("GeotaggingString_Zip").toLowerCase(), 
            this.GeotaggingString_Code = getLocalized("GeotaggingString_Code").toLowerCase(), 
            this.GeotaggingString_Place = getLocalized("GeotaggingString_Place").toLowerCase(), 
            this.GeotaggingString_Places = getLocalized("GeotaggingString_Places").toLowerCase(), 
            this.GeotaggingString_Address = getLocalized("GeotaggingString_Address").toLowerCase(), 
            this.GeotaggingString_Addresses = getLocalized("GeotaggingString_Addresses").toLowerCase(), 
            this.GeotaggingString_Street = getLocalized("GeotaggingString_Street").toLowerCase(), 
            this.GeotaggingString_Streets = getLocalized("GeotaggingString_Streets").toLowerCase(), 
            this.GeotaggingString_Longitude = getLocalized("GeotaggingString_Longitude").toLowerCase(), 
            this.GeotaggingString_Longitude_Short = getLocalized("GeotaggingString_Longitude_Short").toLowerCase(), 
            this.GeotaggingString_Longitude_Short2 = getLocalized("GeotaggingString_Longitude_Short2").toLowerCase(), 
            this.GeotaggingString_Latitude = getLocalized("GeotaggingString_Latitude").toLowerCase(), 
            this.GeotaggingString_Latitude_Short = getLocalized("GeotaggingString_Latitude_Short").toLowerCase(), 
            this.GeotaggingString_PostalCode = getLocalized("GeotaggingString_PostalCode").toLowerCase(), 
            this.GeotaggingString_PostalCodes = getLocalized("GeotaggingString_PostalCodes").toLowerCase(), 
            this.GeotaggingString_ZipCode = getLocalized("GeotaggingString_ZipCode").toLowerCase(), 
            this.GeotaggingString_ZipCodes = getLocalized("GeotaggingString_ZipCodes").toLowerCase(), 
            this.GeotaggingString_Territory = getLocalized("GeotaggingString_Territory").toLowerCase(), 
            this.GeotaggingString_Territories = getLocalized("GeotaggingString_Territories").toLowerCase();
        }
        return GeoTaggingAnalyzerService.prototype.isLongitudeOrLatitude = function(fieldRefName) {
            return this.isLongitude(fieldRefName) || this.isLatitude(fieldRefName);
        }, GeoTaggingAnalyzerService.prototype.isGeographic = function(fieldRefName) {
            return this.isLongitudeOrLatitude(fieldRefName) || this.isGeocodable(fieldRefName);
        }, GeoTaggingAnalyzerService.prototype.isGeocodable = function(fieldRefName) {
            return this.isAddress(fieldRefName) || this.isCity(fieldRefName) || this.isContinent(fieldRefName) || this.isCountry(fieldRefName) || this.isCounty(fieldRefName) || this.isStateOrProvince(fieldRefName) || this.isPlace(fieldRefName) || this.isPostalCode(fieldRefName) || this.isTerritory(fieldRefName);
        }, GeoTaggingAnalyzerService.prototype.isGeoshapable = function(fieldRefName) {
            return this.isCity(fieldRefName) || this.isCountry(fieldRefName) || this.isCounty(fieldRefName) || this.isStateOrProvince(fieldRefName) || this.isPostalCode(fieldRefName) || this.isTerritory(fieldRefName) || this.isGeoshapableEnglish(fieldRefName);
        }, GeoTaggingAnalyzerService.prototype.isGeoshapableEnglish = function(fieldRefName) {
            return this.isEnglishCity(fieldRefName) || this.isEnglishCountry(fieldRefName) || this.isEnglishCounty(fieldRefName) || this.isEnglishStateOrProvince(fieldRefName) || this.isEnglishPostalCode(fieldRefName) || this.isEnglishTerritory(fieldRefName);
        }, GeoTaggingAnalyzerService.prototype.isAddress = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Address, this.GeotaggingString_Addresses, this.GeotaggingString_Street, this.GeotaggingString_Streets ]);
        }, GeoTaggingAnalyzerService.prototype.isPlace = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Place, this.GeotaggingString_Places ]);
        }, GeoTaggingAnalyzerService.prototype.isCity = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_City, this.GeotaggingString_Cities, this.GeotaggingString_Town, this.GeotaggingString_Towns, this.GeotaggingString_Village, this.GeotaggingString_Villages ]);
        }, GeoTaggingAnalyzerService.prototype.isStateOrProvince = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_State, this.GeotaggingString_States, this.GeotaggingString_Province, this.GeotaggingString_Provinces, this.GeotaggingString_VRMBackCompat_StateOrProvince ]);
        }, GeoTaggingAnalyzerService.prototype.isCountry = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Country, this.GeotaggingString_Countries, this.GeotaggingString_VRMBackCompat_CountryRegion ]);
        }, GeoTaggingAnalyzerService.prototype.isCounty = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_County, this.GeotaggingString_Counties ]);
        }, GeoTaggingAnalyzerService.prototype.isContinent = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Continent, this.GeotaggingString_Continents ]);
        }, GeoTaggingAnalyzerService.prototype.isPostalCode = function(fieldRefName) {
            var result = GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Post, this.GeotaggingString_Zip ]) && GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Code ]) || GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_PostalCode, this.GeotaggingString_PostalCodes, this.GeotaggingString_ZipCode, this.GeotaggingString_ZipCodes ]);
            if (!result) {
                var whiteSpaceRegex = /\s+/, fieldNameWithoutWhitespace = fieldRefName.replace(whiteSpaceRegex, "");
                result = GeoTaggingAnalyzerService.hasMatches(fieldNameWithoutWhitespace, [ this.GeotaggingString_PostalCode.replace(whiteSpaceRegex, ""), this.GeotaggingString_PostalCodes.replace(whiteSpaceRegex, ""), this.GeotaggingString_ZipCode.replace(whiteSpaceRegex, ""), this.GeotaggingString_ZipCodes.replace(whiteSpaceRegex, "") ]);
            }
            return result;
        }, GeoTaggingAnalyzerService.prototype.isLongitude = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Longitude ]) || GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Longitude_Short ], !0) || GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Longitude_Short2 ], !0);
        }, GeoTaggingAnalyzerService.prototype.isLatitude = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Latitude ]) || GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Latitude_Short ], !0);
        }, GeoTaggingAnalyzerService.prototype.isTerritory = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Territory, this.GeotaggingString_Territories ]);
        }, GeoTaggingAnalyzerService.hasMatches = function(fieldName, possibleMatches, useStrict) {
            for (var nonWordRegex = /\W/, value = fieldName.toLowerCase(), i = 0, len = possibleMatches.length; i < len; i++) {
                var possibleMatch = possibleMatches[i].toLowerCase();
                if (useStrict) {
                    var indexofpossibleMatch = value.indexOf(possibleMatch);
                    if (indexofpossibleMatch > -1) {
                        var wordEndFlag = void 0, wordBeginFlag = void 0;
                        if (wordEndFlag = wordBeginFlag = !0, indexofpossibleMatch - 1 > 0 && (wordBeginFlag = nonWordRegex.test(value[indexofpossibleMatch - 1])), 
                        indexofpossibleMatch + possibleMatch.length < value.length && (wordEndFlag = nonWordRegex.test(value[indexofpossibleMatch + possibleMatch.length])), 
                        wordBeginFlag && wordEndFlag) return !0;
                    }
                } else if (value.indexOf(possibleMatch) > -1) return !0;
            }
            return !1;
        }, GeoTaggingAnalyzerService.prototype.getFieldType = function(fieldName) {
            if (null != fieldName) return this.isLatitude(fieldName) ? CategoryTypes.Latitude : this.isLongitude(fieldName) ? CategoryTypes.Longitude : this.isPostalCode(fieldName) ? CategoryTypes.PostalCode : this.isAddress(fieldName) ? CategoryTypes.Address : this.isPlace(fieldName) ? CategoryTypes.Place : this.isCity(fieldName) ? CategoryTypes.City : this.isCountry(fieldName) ? CategoryTypes.CountryRegion : this.isCounty(fieldName) ? CategoryTypes.County : this.isStateOrProvince(fieldName) ? CategoryTypes.StateOrProvince : this.isContinent(fieldName) ? CategoryTypes.Continent : this.getEnglishFieldType(fieldName);
        }, GeoTaggingAnalyzerService.prototype.getFieldTypeFromDescriptor = function(typeDescriptor) {
            if (null != typeDescriptor && null != typeDescriptor.geography) {
                var geography = typeDescriptor.geography;
                return geography.latitude ? CategoryTypes.Latitude : geography.longitude ? CategoryTypes.Longitude : geography.postalCode ? CategoryTypes.PostalCode : geography.address ? CategoryTypes.Address : geography.place ? CategoryTypes.Place : geography.city ? CategoryTypes.City : geography.country ? CategoryTypes.CountryRegion : geography.county ? CategoryTypes.County : geography.stateOrProvince ? CategoryTypes.StateOrProvince : geography.continent ? CategoryTypes.Continent : void 0;
            }
        }, GeoTaggingAnalyzerService.prototype.isEnglishAddress = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Address, EnglishBackup.GeotaggingString_Addresses, EnglishBackup.GeotaggingString_Street, EnglishBackup.GeotaggingString_Streets ]);
        }, GeoTaggingAnalyzerService.prototype.isEnglishPlace = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Place, EnglishBackup.GeotaggingString_Places ]);
        }, GeoTaggingAnalyzerService.prototype.isEnglishCity = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_City, EnglishBackup.GeotaggingString_Cities, EnglishBackup.GeotaggingString_Town, EnglishBackup.GeotaggingString_Towns, EnglishBackup.GeotaggingString_Village, EnglishBackup.GeotaggingString_Villages ]);
        }, GeoTaggingAnalyzerService.prototype.isEnglishStateOrProvince = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_State, EnglishBackup.GeotaggingString_States, EnglishBackup.GeotaggingString_Province, EnglishBackup.GeotaggingString_Provinces, EnglishBackup.GeotaggingString_VRMBackCompat_StateOrProvince ]);
        }, GeoTaggingAnalyzerService.prototype.isEnglishCountry = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Country, EnglishBackup.GeotaggingString_Countries, EnglishBackup.GeotaggingString_VRMBackCompat_CountryRegion ]);
        }, GeoTaggingAnalyzerService.prototype.isEnglishCounty = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_County, EnglishBackup.GeotaggingString_Counties ]);
        }, GeoTaggingAnalyzerService.prototype.isEnglishContinent = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Continent, EnglishBackup.GeotaggingString_Continents ]);
        }, GeoTaggingAnalyzerService.prototype.isEnglishPostalCode = function(fieldRefName) {
            var result = GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Post, EnglishBackup.GeotaggingString_Zip ]) && GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ this.GeotaggingString_Code ]) || GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_PostalCode, EnglishBackup.GeotaggingString_PostalCodes, EnglishBackup.GeotaggingString_ZipCode, EnglishBackup.GeotaggingString_ZipCodes ]);
            if (!result) {
                var whiteSpaceRegexPattern = new RegExp("s");
                result = GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_PostalCode.replace(whiteSpaceRegexPattern, ""), EnglishBackup.GeotaggingString_PostalCodes.replace(whiteSpaceRegexPattern, ""), EnglishBackup.GeotaggingString_ZipCode.replace(whiteSpaceRegexPattern, ""), EnglishBackup.GeotaggingString_ZipCodes.replace(whiteSpaceRegexPattern, "") ]);
            }
            return result;
        }, GeoTaggingAnalyzerService.prototype.isEnglishLongitude = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Longitude ]) || GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Longitude_Short ], !0) || GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Longitude_Short2 ], !0);
        }, GeoTaggingAnalyzerService.prototype.isEnglishLatitude = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Latitude ]) || GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Latitude_Short ], !0);
        }, GeoTaggingAnalyzerService.prototype.isEnglishTerritory = function(fieldRefName) {
            return GeoTaggingAnalyzerService.hasMatches(fieldRefName, [ EnglishBackup.GeotaggingString_Territory, EnglishBackup.GeotaggingString_Territories ]);
        }, GeoTaggingAnalyzerService.prototype.getEnglishFieldType = function(fieldName) {
            if (null != fieldName) return this.isEnglishLatitude(fieldName) ? CategoryTypes.Latitude : this.isEnglishLongitude(fieldName) ? CategoryTypes.Longitude : this.isEnglishPostalCode(fieldName) ? CategoryTypes.PostalCode : this.isEnglishAddress(fieldName) ? CategoryTypes.Address : this.isEnglishPlace(fieldName) ? CategoryTypes.Place : this.isEnglishCity(fieldName) ? CategoryTypes.City : this.isEnglishCountry(fieldName) ? CategoryTypes.CountryRegion : this.isEnglishCounty(fieldName) ? CategoryTypes.County : this.isEnglishStateOrProvince(fieldName) ? CategoryTypes.StateOrProvince : this.isEnglishContinent(fieldName) ? CategoryTypes.Continent : void 0;
        }, GeoTaggingAnalyzerService;
    })();
    return {
        create: function(getLocalized) {
            return new GeoTaggingAnalyzerService(getLocalized);
        }
    };
}));

var powerbi;

!(function(powerbi) {
    var ClientErrorStrings;
    !(function(ClientErrorStrings) {
        ClientErrorStrings.ClientErrorCode = "Client Error Code", ClientErrorStrings.ErrorCode = "Error Code", 
        ClientErrorStrings.ErrorDetails = "Error Details", ClientErrorStrings.HttpRequestId = "HTTP Request Id", 
        ClientErrorStrings.JobId = "Job Id", ClientErrorStrings.ODataErrorMessage = "OData Error Message", 
        ClientErrorStrings.StackTrace = "Stack Trace";
    })(ClientErrorStrings = powerbi.ClientErrorStrings || (powerbi.ClientErrorStrings = {}));
    var UnknownClientError = (function() {
        function UnknownClientError(code) {
            this.errorCode = code;
        }
        return Object.defineProperty(UnknownClientError.prototype, "code", {
            get: function() {
                return this.errorCode;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(UnknownClientError.prototype, "ignorable", {
            get: function() {
                return !1;
            },
            enumerable: !0,
            configurable: !0
        }), UnknownClientError.prototype.getDetails = function(resourceProvider) {
            var details = {
                message: resourceProvider.get("ClientError_UnknownClientErrorValue"),
                displayableErrorInfo: [ {
                    errorInfoKey: resourceProvider.get("ClientError_UnknownClientErrorKey"),
                    errorInfoValue: resourceProvider.get("ClientError_UnknownClientErrorValue")
                } ],
                debugErrorInfo: [ {
                    errorInfoKey: ClientErrorStrings.ClientErrorCode,
                    errorInfoValue: this.code
                } ]
            };
            return details;
        }, UnknownClientError;
    })();
    powerbi.UnknownClientError = UnknownClientError;
    var HttpClientError = (function() {
        function HttpClientError(httpStatusCode, requestId, errorCode, message) {
            this.httpStatusCode = httpStatusCode, this.httpRequestId = requestId, this.detailedErrorCode = errorCode, 
            this.detailedMessage = message;
        }
        return Object.defineProperty(HttpClientError.prototype, "code", {
            get: function() {
                return "HttpClientError";
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(HttpClientError.prototype, "ignorable", {
            get: function() {
                return !1;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(HttpClientError.prototype, "requestId", {
            get: function() {
                return this.httpRequestId;
            },
            enumerable: !0,
            configurable: !0
        }), HttpClientError.prototype.getDetails = function(resourceProvider) {
            var details = {
                message: null,
                displayableErrorInfo: [ {
                    errorInfoKey: resourceProvider.get("DsrError_Key"),
                    errorInfoValue: resourceProvider.get("DsrError_UnknownErrorValue")
                }, {
                    errorInfoKey: resourceProvider.get("ClientError_HttpResponseStatusCodeKey"),
                    errorInfoValue: this.httpStatusCode.toString()
                } ],
                debugErrorInfo: [ {
                    errorInfoKey: ClientErrorStrings.HttpRequestId,
                    errorInfoValue: this.httpRequestId
                }, {
                    errorInfoKey: ClientErrorStrings.ClientErrorCode,
                    errorInfoValue: this.code
                } ]
            };
            return this.detailedMessage && details.debugErrorInfo.push({
                errorInfoKey: ClientErrorStrings.ErrorDetails,
                errorInfoValue: this.detailedMessage
            }), this.detailedErrorCode && details.debugErrorInfo.push({
                errorInfoKey: ClientErrorStrings.ErrorCode,
                errorInfoValue: this.detailedErrorCode
            }), details;
        }, HttpClientError;
    })();
    powerbi.HttpClientError = HttpClientError;
    var IgnorableClientError = (function() {
        function IgnorableClientError() {}
        return Object.defineProperty(IgnorableClientError.prototype, "code", {
            get: function() {
                return "IgnorableClientError";
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(IgnorableClientError.prototype, "ignorable", {
            get: function() {
                return !0;
            },
            enumerable: !0,
            configurable: !0
        }), IgnorableClientError.prototype.getDetails = function(resourceProvider) {
            var details = {
                message: "",
                displayableErrorInfo: []
            };
            return details;
        }, IgnorableClientError;
    })();
    powerbi.IgnorableClientError = IgnorableClientError;
})(powerbi || (powerbi = {}));

var jsCommon;

!(function(jsCommon) {
    var ArrayExtensions;
    !(function(ArrayExtensions) {
        function intersect(target, other) {
            for (var result = [], i = target.length - 1; i >= 0; --i) other.indexOf(target[i]) !== -1 && result.push(target[i]);
            return result;
        }
        function diff(target, other) {
            for (var result = [], i = target.length - 1; i >= 0; --i) {
                var value = target[i];
                other.indexOf(value) === -1 && result.push(value);
            }
            return result;
        }
        function distinct(source) {
            for (var result = [], i = 0, len = source.length; i < len; i++) {
                var value = source[i];
                result.indexOf(value) === -1 && result.push(value);
            }
            return result;
        }
        function union(target, source) {
            for (var i = 0, len = source.length; i < len; ++i) unionSingle(target, source[i]);
        }
        function unionSingle(target, value) {
            target.indexOf(value) < 0 && target.push(value);
        }
        function range(source, startIndex, endIndex) {
            for (var result = [], i = startIndex; i <= endIndex; ++i) result.push(source[i]);
            return result;
        }
        function take(source, count) {
            for (var result = [], i = 0; i < count; ++i) result.push(source[i]);
            return result;
        }
        function copy(source) {
            return take(source, source.length);
        }
        function sequenceEqual(left, right, comparison) {
            if (left || (left = null), right || (right = null), left === right) return !0;
            if (!!left != !!right) return !1;
            var len = left.length;
            if (len !== right.length) return !1;
            for (var i = 0; i < len && comparison(left[i], right[i]); ) ++i;
            return i === len;
        }
        function emptyToNull(array) {
            return array && 0 === array.length ? null : array;
        }
        function indexOf(array, predicate) {
            for (var i = 0, len = array.length; i < len; ++i) if (predicate(array[i])) return i;
            return -1;
        }
        function rotate(array, offset) {
            if (0 === offset) return array.slice();
            var rotated = array.slice(offset);
            return Array.prototype.push.apply(rotated, array.slice(0, offset)), rotated;
        }
        function createWithId() {
            return extendWithId([]);
        }
        function extendWithId(array) {
            var extended = array;
            return extended.withId = withId, extended;
        }
        function findWithId(array, id) {
            for (var i = 0, len = array.length; i < len; i++) {
                var item = array[i];
                if (item.id === id) return item;
            }
        }
        function withId(id) {
            return ArrayExtensions.findWithId(this, id);
        }
        function createWithName() {
            return extendWithName([]);
        }
        function extendWithName(array) {
            var extended = array;
            return extended.withName = withName, extended;
        }
        function findItemWithName(array, name) {
            var index = indexWithName(array, name);
            if (index >= 0) return array[index];
        }
        function indexWithName(array, name) {
            for (var i = 0, len = array.length; i < len; i++) {
                var item = array[i];
                if (item.name === name) return i;
            }
            return -1;
        }
        function insertSorted(list, value) {
            for (var len = list.length, i = len - 1; i >= 0; i--) {
                var diff_1 = list[i] - value;
                if (0 === diff_1) return !1;
                if (!(diff_1 > 0)) return list.splice(i + 1, 0, value), !0;
            }
            return list.unshift(value), !0;
        }
        function removeFirst(list, value) {
            var index = list.indexOf(value);
            return !(index < 0) && (list.splice(index, 1), !0);
        }
        function withName(name) {
            var array = this;
            return findItemWithName(array, name);
        }
        function clear(array) {
            if (array) for (;array.length > 0; ) array.pop();
        }
        function isUndefinedOrEmpty(array) {
            return !array || 0 === array.length;
        }
        function swap(array, firstIndex, secondIndex) {
            var temp = array[firstIndex];
            array[firstIndex] = array[secondIndex], array[secondIndex] = temp;
        }
        function isInArray(array, lookupItem, compareCallback) {
            return _.any(array, (function(item) {
                return compareCallback(item, lookupItem);
            }));
        }
        function isArrayOrInheritedArray(obj) {
            for (var nextPrototype = obj; null != nextPrototype; ) {
                if (_.isArray(nextPrototype)) return !0;
                nextPrototype = Object.getPrototypeOf(nextPrototype);
            }
            return !1;
        }
        function isSorted(values, compareFunction) {
            var ilen = values.length;
            if (ilen >= 2) for (var i = 1; i < ilen; i++) if (compareFunction(values[i - 1], values[i]) > 0) return !1;
            return !0;
        }
        function isSortedNumeric(values, descendingOrder) {
            var compareFunction = descendingOrder ? function(a, b) {
                return b - a;
            } : function(a, b) {
                return a - b;
            };
            return isSorted(values, compareFunction);
        }
        function ensureArray(value) {
            return _.isArray(value) ? value : [ value ];
        }
        function hasUniqueNames(items) {
            return _.uniq(items, (function(pod) {
                return pod.name;
            })).length === items.length;
        }
        ArrayExtensions.intersect = intersect, ArrayExtensions.diff = diff, ArrayExtensions.distinct = distinct, 
        ArrayExtensions.union = union, ArrayExtensions.unionSingle = unionSingle, ArrayExtensions.range = range, 
        ArrayExtensions.take = take, ArrayExtensions.copy = copy, ArrayExtensions.sequenceEqual = sequenceEqual, 
        ArrayExtensions.emptyToNull = emptyToNull, ArrayExtensions.indexOf = indexOf, ArrayExtensions.rotate = rotate, 
        ArrayExtensions.createWithId = createWithId, ArrayExtensions.extendWithId = extendWithId, 
        ArrayExtensions.findWithId = findWithId, ArrayExtensions.createWithName = createWithName, 
        ArrayExtensions.extendWithName = extendWithName, ArrayExtensions.findItemWithName = findItemWithName, 
        ArrayExtensions.indexWithName = indexWithName, ArrayExtensions.insertSorted = insertSorted, 
        ArrayExtensions.removeFirst = removeFirst, ArrayExtensions.clear = clear, ArrayExtensions.isUndefinedOrEmpty = isUndefinedOrEmpty, 
        ArrayExtensions.swap = swap, ArrayExtensions.isInArray = isInArray, ArrayExtensions.isArrayOrInheritedArray = isArrayOrInheritedArray, 
        ArrayExtensions.isSorted = isSorted, ArrayExtensions.isSortedNumeric = isSortedNumeric, 
        ArrayExtensions.ensureArray = ensureArray, ArrayExtensions.hasUniqueNames = hasUniqueNames;
    })(ArrayExtensions = jsCommon.ArrayExtensions || (jsCommon.ArrayExtensions = {}));
})(jsCommon || (jsCommon = {}));

var InJs;

!(function(InJs) {
    var DomFactory;
    !(function(DomFactory) {
        function div() {
            return $("<div/>");
        }
        function span() {
            return $("<span/>");
        }
        function checkbox() {
            return $('<input type="checkbox"/>');
        }
        function ul() {
            return $("<ul/>");
        }
        function li() {
            return $("<li/>");
        }
        function button() {
            return $('<input type="button"/>');
        }
        function select() {
            return $("<select/>");
        }
        function textBox() {
            return $('<input type="text"/>');
        }
        function img() {
            return $("<img/>");
        }
        function iframe() {
            return $("<iframe/>");
        }
        DomFactory.div = div, DomFactory.span = span, DomFactory.checkbox = checkbox, DomFactory.ul = ul, 
        DomFactory.li = li, DomFactory.button = button, DomFactory.select = select, DomFactory.textBox = textBox, 
        DomFactory.img = img, DomFactory.iframe = iframe;
    })(DomFactory = InJs.DomFactory || (InJs.DomFactory = {}));
})(InJs || (InJs = {}));

var powerbi;

!(function(powerbi) {
    var Double;
    !(function(Double) {
        function pow10(exp) {
            return exp >= 0 ? exp < Double.POSITIVE_POWERS.length ? Double.POSITIVE_POWERS[exp] : 1 / 0 : (exp = -exp, 
            exp > 0 && exp < Double.NEGATIVE_POWERS.length ? Double.NEGATIVE_POWERS[exp] : 0);
        }
        function log10(val) {
            if (val > 1 && val < 1e16) return val < 1e8 ? val < 1e4 ? val < 100 ? val < 10 ? 0 : 1 : val < 1e3 ? 2 : 3 : val < 1e6 ? val < 1e5 ? 4 : 5 : val < 1e7 ? 6 : 7 : val < 1e12 ? val < 1e10 ? val < 1e9 ? 8 : 9 : val < 1e11 ? 10 : 11 : val < 1e14 ? val < 1e13 ? 12 : 13 : val < 1e15 ? 14 : 15;
            if (val > 1e-16 && val < 1) return val < 1e-8 ? val < 1e-12 ? val < 1e-14 ? val < 1e-15 ? -16 : -15 : val < 1e-13 ? -14 : -13 : val < 1e-10 ? val < 1e-11 ? -12 : -11 : val < 1e-9 ? -10 : -9 : val < 1e-4 ? val < 1e-6 ? val < 1e-7 ? -8 : -7 : val < 1e-5 ? -6 : -5 : val < .01 ? val < .001 ? -4 : -3 : val < .1 ? -2 : -1;
            var log10 = Math.log(val) / Double.LOG_E_10;
            return Double.floorWithPrecision(log10);
        }
        function getPrecision(x, decimalDigits) {
            if (void 0 === decimalDigits && (decimalDigits = Double.DEFAULT_PRECISION_IN_DECIMAL_DIGITS), 
            x && isFinite(x)) {
                var exp = Double.log10(Math.abs(x));
                if (exp < Double.MIN_EXP) return 0;
                var precisionExp = Math.max(exp - decimalDigits, -Double.NEGATIVE_POWERS.length + 1);
                return Double.pow10(precisionExp);
            }
        }
        function equalWithPrecision(x, y, precision) {
            return precision = detectPrecision(precision, x, y), x === y || Math.abs(x - y) < precision;
        }
        function lessWithPrecision(x, y, precision) {
            return precision = detectPrecision(precision, x, y), x < y && Math.abs(x - y) > precision;
        }
        function lessOrEqualWithPrecision(x, y, precision) {
            return precision = detectPrecision(precision, x, y), x < y || Math.abs(x - y) < precision;
        }
        function greaterWithPrecision(x, y, precision) {
            return precision = detectPrecision(precision, x, y), x > y && Math.abs(x - y) > precision;
        }
        function greaterOrEqualWithPrecision(x, y, precision) {
            return precision = detectPrecision(precision, x, y), x > y || Math.abs(x - y) < precision;
        }
        function floorWithPrecision(x, precision) {
            precision = null != precision ? precision : Double.DEFAULT_PRECISION;
            var roundX = Math.round(x);
            return Math.abs(x - roundX) < precision ? roundX : Math.floor(x);
        }
        function ceilWithPrecision(x, precision) {
            precision = detectPrecision(precision, Double.DEFAULT_PRECISION);
            var roundX = Math.round(x);
            return Math.abs(x - roundX) < precision ? roundX : Math.ceil(x);
        }
        function floorToPrecision(x, precision) {
            return precision = detectPrecision(precision, Double.DEFAULT_PRECISION), 0 === precision || 0 === x ? x : Math.floor(x / precision) * precision;
        }
        function ceilToPrecision(x, precision) {
            return precision = detectPrecision(precision, Double.DEFAULT_PRECISION), 0 === precision || 0 === x ? x : Math.ceil(x / precision) * precision;
        }
        function roundToPrecision(x, precision) {
            if (precision = detectPrecision(precision, Double.DEFAULT_PRECISION), 0 === precision || 0 === x) return x;
            var result = Math.round(x / precision) * precision, decimalDigits = Math.round(Double.log10(Math.abs(x)) - Double.log10(precision)) + 1;
            return decimalDigits > 0 && decimalDigits < 16 && (result = parseFloat(result.toPrecision(decimalDigits))), 
            result;
        }
        function ensureInRange(x, min, max) {
            return void 0 === x || null === x ? x : x < min ? min : x > max ? max : x;
        }
        function round(x) {
            return .5 + x << 0;
        }
        function project(value, fromMin, fromSize, toMin, toSize) {
            if (0 === fromSize || 0 === toSize) return fromMin <= value && value <= fromMin + fromSize ? toMin : NaN;
            var relativeX = (value - fromMin) / fromSize, projectedX = toMin + relativeX * toSize;
            return projectedX;
        }
        function removeDecimalNoise(value) {
            return roundToPrecision(value, getPrecision(value));
        }
        function isInteger(value) {
            return null !== value && value % 1 === 0;
        }
        function toIncrement(value, increment) {
            return Math.round(value / increment) * increment;
        }
        function detectPrecision(precision, x, y) {
            if (void 0 !== precision) return precision;
            var calculatedPrecision;
            return calculatedPrecision = y ? x ? Double.getPrecision(Math.min(Math.abs(x), Math.abs(y))) : Double.getPrecision(y) : Double.getPrecision(x), 
            calculatedPrecision || Double.DEFAULT_PRECISION;
        }
        Double.MIN_VALUE = -Number.MAX_VALUE, Double.MAX_VALUE = Number.MAX_VALUE, Double.MIN_EXP = -308, 
        Double.MAX_EXP = 308, Double.EPSILON = 1e-323, Double.DEFAULT_PRECISION = 1e-4, 
        Double.DEFAULT_PRECISION_IN_DECIMAL_DIGITS = 12, Double.LOG_E_10 = Math.log(10), 
        Double.POSITIVE_POWERS = [ 1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19, 1e20, 1e21, 1e22, 1e23, 1e24, 1e25, 1e26, 1e27, 1e28, 1e29, 1e30, 1e31, 1e32, 1e33, 1e34, 1e35, 1e36, 1e37, 1e38, 1e39, 1e40, 1e41, 1e42, 1e43, 1e44, 1e45, 1e46, 1e47, 1e48, 1e49, 1e50, 1e51, 1e52, 1e53, 1e54, 1e55, 1e56, 1e57, 1e58, 1e59, 1e60, 1e61, 1e62, 1e63, 1e64, 1e65, 1e66, 1e67, 1e68, 1e69, 1e70, 1e71, 1e72, 1e73, 1e74, 1e75, 1e76, 1e77, 1e78, 1e79, 1e80, 1e81, 1e82, 1e83, 1e84, 1e85, 1e86, 1e87, 1e88, 1e89, 1e90, 1e91, 1e92, 1e93, 1e94, 1e95, 1e96, 1e97, 1e98, 1e99, 1e100, 1e101, 1e102, 1e103, 1e104, 1e105, 1e106, 1e107, 1e108, 1e109, 1e110, 1e111, 1e112, 1e113, 1e114, 1e115, 1e116, 1e117, 1e118, 1e119, 1e120, 1e121, 1e122, 1e123, 1e124, 1e125, 1e126, 1e127, 1e128, 1e129, 1e130, 1e131, 1e132, 1e133, 1e134, 1e135, 1e136, 1e137, 1e138, 1e139, 1e140, 1e141, 1e142, 1e143, 1e144, 1e145, 1e146, 1e147, 1e148, 1e149, 1e150, 1e151, 1e152, 1e153, 1e154, 1e155, 1e156, 1e157, 1e158, 1e159, 1e160, 1e161, 1e162, 1e163, 1e164, 1e165, 1e166, 1e167, 1e168, 1e169, 1e170, 1e171, 1e172, 1e173, 1e174, 1e175, 1e176, 1e177, 1e178, 1e179, 1e180, 1e181, 1e182, 1e183, 1e184, 1e185, 1e186, 1e187, 1e188, 1e189, 1e190, 1e191, 1e192, 1e193, 1e194, 1e195, 1e196, 1e197, 1e198, 1e199, 1e200, 1e201, 1e202, 1e203, 1e204, 1e205, 1e206, 1e207, 1e208, 1e209, 1e210, 1e211, 1e212, 1e213, 1e214, 1e215, 1e216, 1e217, 1e218, 1e219, 1e220, 1e221, 1e222, 1e223, 1e224, 1e225, 1e226, 1e227, 1e228, 1e229, 1e230, 1e231, 1e232, 1e233, 1e234, 1e235, 1e236, 1e237, 1e238, 1e239, 1e240, 1e241, 1e242, 1e243, 1e244, 1e245, 1e246, 1e247, 1e248, 1e249, 1e250, 1e251, 1e252, 1e253, 1e254, 1e255, 1e256, 1e257, 1e258, 1e259, 1e260, 1e261, 1e262, 1e263, 1e264, 1e265, 1e266, 1e267, 1e268, 1e269, 1e270, 1e271, 1e272, 1e273, 1e274, 1e275, 1e276, 1e277, 1e278, 1e279, 1e280, 1e281, 1e282, 1e283, 1e284, 1e285, 1e286, 1e287, 1e288, 1e289, 1e290, 1e291, 1e292, 1e293, 1e294, 1e295, 1e296, 1e297, 1e298, 1e299, 1e300, 1e301, 1e302, 1e303, 1e304, 1e305, 1e306, 1e307, 1e308 ], 
        Double.NEGATIVE_POWERS = [ 1, .1, .01, .001, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9, 1e-10, 1e-11, 1e-12, 1e-13, 1e-14, 1e-15, 1e-16, 1e-17, 1e-18, 1e-19, 1e-20, 1e-21, 1e-22, 1e-23, 1e-24, 1e-25, 1e-26, 1e-27, 1e-28, 1e-29, 1e-30, 1e-31, 1e-32, 1e-33, 1e-34, 1e-35, 1e-36, 1e-37, 1e-38, 1e-39, 1e-40, 1e-41, 1e-42, 1e-43, 1e-44, 1e-45, 1e-46, 1e-47, 1e-48, 1e-49, 1e-50, 1e-51, 1e-52, 1e-53, 1e-54, 1e-55, 1e-56, 1e-57, 1e-58, 1e-59, 1e-60, 1e-61, 1e-62, 1e-63, 1e-64, 1e-65, 1e-66, 1e-67, 1e-68, 1e-69, 1e-70, 1e-71, 1e-72, 1e-73, 1e-74, 1e-75, 1e-76, 1e-77, 1e-78, 1e-79, 1e-80, 1e-81, 1e-82, 1e-83, 1e-84, 1e-85, 1e-86, 1e-87, 1e-88, 1e-89, 1e-90, 1e-91, 1e-92, 1e-93, 1e-94, 1e-95, 1e-96, 1e-97, 1e-98, 1e-99, 1e-100, 1e-101, 1e-102, 1e-103, 1e-104, 1e-105, 1e-106, 1e-107, 1e-108, 1e-109, 1e-110, 1e-111, 1e-112, 1e-113, 1e-114, 1e-115, 1e-116, 1e-117, 1e-118, 1e-119, 1e-120, 1e-121, 1e-122, 1e-123, 1e-124, 1e-125, 1e-126, 1e-127, 1e-128, 1e-129, 1e-130, 1e-131, 1e-132, 1e-133, 1e-134, 1e-135, 1e-136, 1e-137, 1e-138, 1e-139, 1e-140, 1e-141, 1e-142, 1e-143, 1e-144, 1e-145, 1e-146, 1e-147, 1e-148, 1e-149, 1e-150, 1e-151, 1e-152, 1e-153, 1e-154, 1e-155, 1e-156, 1e-157, 1e-158, 1e-159, 1e-160, 1e-161, 1e-162, 1e-163, 1e-164, 1e-165, 1e-166, 1e-167, 1e-168, 1e-169, 1e-170, 1e-171, 1e-172, 1e-173, 1e-174, 1e-175, 1e-176, 1e-177, 1e-178, 1e-179, 1e-180, 1e-181, 1e-182, 1e-183, 1e-184, 1e-185, 1e-186, 1e-187, 1e-188, 1e-189, 1e-190, 1e-191, 1e-192, 1e-193, 1e-194, 1e-195, 1e-196, 1e-197, 1e-198, 1e-199, 1e-200, 1e-201, 1e-202, 1e-203, 1e-204, 1e-205, 1e-206, 1e-207, 1e-208, 1e-209, 1e-210, 1e-211, 1e-212, 1e-213, 1e-214, 1e-215, 1e-216, 1e-217, 1e-218, 1e-219, 1e-220, 1e-221, 1e-222, 1e-223, 1e-224, 1e-225, 1e-226, 1e-227, 1e-228, 1e-229, 1e-230, 1e-231, 1e-232, 1e-233, 1e-234, 1e-235, 1e-236, 1e-237, 1e-238, 1e-239, 1e-240, 1e-241, 1e-242, 1e-243, 1e-244, 1e-245, 1e-246, 1e-247, 1e-248, 1e-249, 1e-250, 1e-251, 1e-252, 1e-253, 1e-254, 1e-255, 1e-256, 1e-257, 1e-258, 1e-259, 1e-260, 1e-261, 1e-262, 1e-263, 1e-264, 1e-265, 1e-266, 1e-267, 1e-268, 1e-269, 1e-270, 1e-271, 1e-272, 1e-273, 1e-274, 1e-275, 1e-276, 1e-277, 1e-278, 1e-279, 1e-280, 1e-281, 1e-282, 1e-283, 1e-284, 1e-285, 1e-286, 1e-287, 1e-288, 1e-289, 1e-290, 1e-291, 1e-292, 1e-293, 1e-294, 1e-295, 1e-296, 1e-297, 1e-298, 1e-299, 1e-300, 1e-301, 1e-302, 1e-303, 1e-304, 1e-305, 1e-306, 1e-307, 1e-308, 1e-309, 1e-310, 1e-311, 1e-312, 1e-313, 1e-314, 1e-315, 1e-316, 1e-317, 1e-318, 1e-319, 1e-320, 1e-321, 1e-322, 1e-323, 0 ], 
        Double.pow10 = pow10, Double.log10 = log10, Double.getPrecision = getPrecision, 
        Double.equalWithPrecision = equalWithPrecision, Double.lessWithPrecision = lessWithPrecision, 
        Double.lessOrEqualWithPrecision = lessOrEqualWithPrecision, Double.greaterWithPrecision = greaterWithPrecision, 
        Double.greaterOrEqualWithPrecision = greaterOrEqualWithPrecision, Double.floorWithPrecision = floorWithPrecision, 
        Double.ceilWithPrecision = ceilWithPrecision, Double.floorToPrecision = floorToPrecision, 
        Double.ceilToPrecision = ceilToPrecision, Double.roundToPrecision = roundToPrecision, 
        Double.ensureInRange = ensureInRange, Double.round = round, Double.project = project, 
        Double.removeDecimalNoise = removeDecimalNoise, Double.isInteger = isInteger, Double.toIncrement = toIncrement, 
        Double.detectPrecision = detectPrecision;
    })(Double = powerbi.Double || (powerbi.Double = {}));
})(powerbi || (powerbi = {}));

var jsCommon;

!(function(jsCommon) {
    var Color, Double = powerbi.Double;
    !(function(Color) {
        function rotate(rgbString, rotateFactor) {
            if (0 === rotateFactor) return rgbString;
            var originalRgb = parseColorString(rgbString), originalHsv = rgbToHsv(originalRgb), rotatedHsv = rotateHsv(originalHsv, rotateFactor), rotatedRgb = hsvToRgb(rotatedHsv);
            return hexString(rotatedRgb);
        }
        function normalizeToHexString(color) {
            var rgb = parseColorString(color);
            return hexString(rgb);
        }
        function parseColorString(color) {
            if (color.indexOf("#") >= 0) {
                if (7 === color.length) {
                    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
                    if (null == result || result.length < 4) return;
                    return {
                        R: parseInt(result[1], 16),
                        G: parseInt(result[2], 16),
                        B: parseInt(result[3], 16)
                    };
                }
                if (4 === color.length) {
                    var result = /^#?([a-f\d])([a-f\d])([a-f\d])$/i.exec(color);
                    if (null == result || result.length < 4) return;
                    return {
                        R: parseInt(result[1] + result[1], 16),
                        G: parseInt(result[2] + result[2], 16),
                        B: parseInt(result[3] + result[3], 16)
                    };
                }
            } else {
                if (color.indexOf("rgb(") >= 0) {
                    var result = /^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/.exec(color);
                    if (null == result || result.length < 4) return;
                    return {
                        R: parseInt(result[1], 10),
                        G: parseInt(result[2], 10),
                        B: parseInt(result[3], 10)
                    };
                }
                if (color.indexOf("rgba(") >= 0) {
                    var result = /^rgba\((\d+),\s*(\d+),\s*(\d+),\s*(\d*(?:\.\d+)?)\)$/.exec(color);
                    if (null == result || result.length < 5) return;
                    return {
                        R: parseInt(result[1], 10),
                        G: parseInt(result[2], 10),
                        B: parseInt(result[3], 10),
                        A: parseFloat(result[4])
                    };
                }
            }
        }
        function rgbToHsv(rgbColor) {
            var s, h, r = rgbColor.R / 255, g = rgbColor.G / 255, b = rgbColor.B / 255, min = Math.min(r, Math.min(g, b)), max = Math.max(r, Math.max(g, b)), v = max, delta = max - min;
            return 0 === max || 0 === delta ? (s = 0, h = 0) : (s = delta / max, h = r === max ? (g - b) / delta : g === max ? 2 + (b - r) / delta : 4 + (r - g) / delta), 
            h /= 6, h < 0 && (h += 1), {
                H: h,
                S: s,
                V: v
            };
        }
        function hsvToRgb(hsvColor) {
            var r, g, b, h = hsvColor.H, s = hsvColor.S, v = hsvColor.V;
            if (0 === s) r = v, g = v, b = v; else {
                var p = void 0, q = void 0, t = void 0, fractionalSector = void 0, sectorNumber = void 0, sectorPos = void 0;
                switch (sectorPos = 6 * h, sectorNumber = Math.floor(sectorPos), fractionalSector = sectorPos - sectorNumber, 
                p = v * (1 - s), q = v * (1 - s * fractionalSector), t = v * (1 - s * (1 - fractionalSector)), 
                sectorNumber) {
                  case 0:
                    r = v, g = t, b = p;
                    break;

                  case 1:
                    r = q, g = v, b = p;
                    break;

                  case 2:
                    r = p, g = v, b = t;
                    break;

                  case 3:
                    r = p, g = q, b = v;
                    break;

                  case 4:
                    r = t, g = p, b = v;
                    break;

                  case 5:
                    r = v, g = p, b = q;
                }
            }
            return {
                R: Math.floor(255 * r),
                G: Math.floor(255 * g),
                B: Math.floor(255 * b)
            };
        }
        function rotateHsv(hsvColor, rotateFactor) {
            var newH = hsvColor.H + rotateFactor;
            return {
                H: newH > 1 ? newH - 1 : newH,
                S: hsvColor.S,
                V: hsvColor.V
            };
        }
        function darken(color, diff) {
            var flooredNumber = Math.floor(diff);
            return {
                R: Math.max(0, color.R - flooredNumber),
                G: Math.max(0, color.G - flooredNumber),
                B: Math.max(0, color.B - flooredNumber)
            };
        }
        function rgbString(color) {
            return null == color.A ? "rgb(" + color.R + "," + color.G + "," + color.B + ")" : "rgba(" + color.R + "," + color.G + "," + color.B + "," + color.A + ")";
        }
        function hexString(color) {
            return "#" + componentToHex(color.R) + componentToHex(color.G) + componentToHex(color.B);
        }
        function isFullHexString(color) {
            return /^#[0-9a-f]{6}$/i.test(color);
        }
        function hexBlend(foreColor, opacity, backColor) {
            return hexString(rgbBlend(parseColorString(foreColor), opacity, parseColorString(backColor)));
        }
        function rgbBlend(foreColor, opacity, backColor) {
            return opacity = Double.ensureInRange(opacity, 0, 1), {
                R: channelBlend(foreColor.R, opacity, backColor.R),
                G: channelBlend(foreColor.G, opacity, backColor.G),
                B: channelBlend(foreColor.B, opacity, backColor.B)
            };
        }
        function channelBlend(foreChannel, opacity, backChannel) {
            return opacity = Double.ensureInRange(opacity, 0, 1), foreChannel = Double.ensureInRange(foreChannel, 0, 255), 
            backChannel = Double.ensureInRange(backChannel, 0, 255), Math.round(opacity * foreChannel + (1 - opacity) * backChannel);
        }
        function calculateHighlightColor(rgbColor, lumianceThreshold, delta) {
            var hsvColor = rgbToHsv(rgbColor);
            return (lumianceThreshold + delta > 1 || lumianceThreshold <= 0 || delta <= 0) && (lumianceThreshold = .8, 
            delta = .2), hsvColor.V < lumianceThreshold ? hsvColor.V = hsvColor.V + delta : hsvColor.V = hsvColor.V - delta, 
            hexString(hsvToRgb(hsvColor));
        }
        function componentToHex(hexComponent) {
            var clamped = Double.ensureInRange(hexComponent, 0, 255), hex = clamped.toString(16).toUpperCase();
            return 1 === hex.length ? "0" + hex : hex;
        }
        function createLinearColorScale(domain, range, clamp) {
            var rangeColors = range.map((function(v) {
                return Color.parseColorString(v);
            }));
            return function(value) {
                if (null == value && (value = 0), !isNaN(value)) {
                    if (clamp) {
                        if (value >= _.last(domain)) return _.last(range);
                        if (value <= domain[0]) return range[0];
                    }
                    for (var domainMin, domainMax, rangeMin, rangeMax, i = 1, len = domain.length; i < len; i++) {
                        if (domainMin = domain[i - 1], domainMax = domain[i], domainMin === Number.NEGATIVE_INFINITY && isNaN(domainMax)) return range[i];
                        if (isNaN(domainMin) || isNaN(domainMax)) return;
                        if (value === domainMax) return range[i];
                        if (value >= domainMin && value <= domainMax) {
                            rangeMin = rangeColors[i - 1], rangeMax = rangeColors[i];
                            break;
                        }
                    }
                    var newValue = {
                        R: interpolateValue(value, domainMin, domainMax, rangeMin.R, rangeMax.R),
                        G: interpolateValue(value, domainMin, domainMax, rangeMin.G, rangeMax.G),
                        B: interpolateValue(value, domainMin, domainMax, rangeMin.B, rangeMax.B)
                    };
                    return Color.hexString(newValue);
                }
            };
        }
        function interpolateValue(value, domainMin, domainMax, rangeMin, rangeMax) {
            return domainMin === Number.NEGATIVE_INFINITY && domainMax === Number.POSITIVE_INFINITY ? Math.round((rangeMax + rangeMin) / 2) : domainMin === Number.NEGATIVE_INFINITY ? rangeMax : domainMax === Number.POSITIVE_INFINITY ? rangeMin : Math.round(rangeMin + (value - domainMin) * (rangeMax - rangeMin) / (domainMax - domainMin));
        }
        function shadeColor(color, percent) {
            var hexNum = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = hexNum >> 16, G = hexNum >> 8 & 255, B = 255 & hexNum, hexString = "#" + (16777216 + 65536 * (Math.round((t - R) * p) + R) + 256 * (Math.round((t - G) * p) + G) + (Math.round((t - B) * p) + B)).toString(16).slice(1);
            return hexString;
        }
        function expandDataColorSet(colors, desiredCount) {
            var colorsCount = colors.length;
            if (colorsCount < desiredCount) {
                colors = _.clone(colors);
                for (var hsvColors_1 = _.chain(colors).map((function(color) {
                    return rgbToHsv(Color.parseColorString(color));
                })).sortBy((function(color) {
                    return color.H;
                })).value(), hsvGaps = _.chain(hsvColors_1).map((function(color, index) {
                    return {
                        color1: color,
                        color2: hsvColors_1[index + 1 === hsvColors_1.length ? 0 : index + 1]
                    };
                })).value(), lastColor_1 = rgbToHsv(Color.parseColorString(_.last(colors))); ;) {
                    hsvGaps.sort((function(a, b) {
                        return comparePairs(a, b, lastColor_1);
                    }));
                    var gap = hsvGaps[0];
                    hsvGaps.splice(0, 1);
                    var color1 = gap.color1, color2 = gap.color2, newColor = pickColorBetween(gap);
                    if (colors.push(hexString(hsvToRgb(newColor))), colors.length >= desiredCount) break;
                    hsvGaps.push({
                        color1: color1,
                        color2: newColor
                    }), hsvGaps.push({
                        color1: newColor,
                        color2: color2
                    }), lastColor_1 = newColor;
                }
            }
            return colors;
        }
        function comparePairs(a, b, lastColor) {
            var h = hNormalize(lastColor.H - .1), apenalty = Math.sqrt(2 * dhUnordered(hCenter(a), h)), bpenalty = Math.sqrt(2 * dhUnordered(hCenter(b), h));
            return bpenalty * dhOrdered(b) - apenalty * dhOrdered(a);
        }
        function dhOrdered(pair) {
            return hNormalize(pair.color2.H - pair.color1.H);
        }
        function dhUnordered(h1, h2) {
            var gap = Math.abs(h2 - h1);
            return gap > .5 && (gap -= 1), gap;
        }
        function hCenter(pair) {
            var dh = dhOrdered(pair);
            return 0 === dh && (dh = 1), (pair.color1.H + dh / 2) % 1;
        }
        function hNormalize(h) {
            return h %= 1, h < 0 && (h += 1), h;
        }
        function pickColorBetween(pair) {
            var h, s, v, color1 = pair.color1, color2 = pair.color2;
            return h = hCenter(pair), s = (color1.S + color2.S) / 2, v = (color1.V + color2.V) / 2, 
            {
                H: h,
                S: s,
                V: v
            };
        }
        Color.rotate = rotate, Color.normalizeToHexString = normalizeToHexString, Color.parseColorString = parseColorString, 
        Color.darken = darken, Color.rgbString = rgbString, Color.hexString = hexString, 
        Color.isFullHexString = isFullHexString, Color.hexBlend = hexBlend, Color.rgbBlend = rgbBlend, 
        Color.channelBlend = channelBlend, Color.calculateHighlightColor = calculateHighlightColor, 
        Color.createLinearColorScale = createLinearColorScale, Color.shadeColor = shadeColor, 
        Color.expandDataColorSet = expandDataColorSet;
    })(Color = jsCommon.Color || (jsCommon.Color = {}));
})(jsCommon || (jsCommon = {}));

var powerbi;

!(function(powerbi) {
    var contract;
    !(function(contract) {
        function check(condition, message) {
            condition !== !0 && fail(message || "condition: " + condition);
        }
        function checkValue(value, message) {
            null !== value && void 0 !== value || fail(message || "condition: " + value);
        }
        function checkNonEmpty(value, message) {
            _.isEmpty(value) && fail(message || "condition: " + value);
        }
        function fail(message) {
            throw new Error("Contract check failed: " + message);
        }
        contract.check = check, contract.checkValue = checkValue, contract.checkNonEmpty = checkNonEmpty, 
        contract.fail = fail;
    })(contract = powerbi.contract || (powerbi.contract = {}));
})(powerbi || (powerbi = {}));

var jsCommon;

!(function(jsCommon) {
    var CssConstants;
    !(function(CssConstants) {
        function createClassAndSelector(className) {
            return {
                class: className,
                selector: "." + className
            };
        }
        CssConstants.createClassAndSelector = createClassAndSelector, CssConstants.styleAttribute = "style", 
        CssConstants.pixelUnits = "px", CssConstants.heightProperty = "height", CssConstants.widthProperty = "width", 
        CssConstants.topProperty = "top", CssConstants.bottomProperty = "bottom", CssConstants.leftProperty = "left", 
        CssConstants.rightProperty = "right", CssConstants.marginTopProperty = "margin-top", 
        CssConstants.marginLeftProperty = "margin-left", CssConstants.displayProperty = "display", 
        CssConstants.backgroundProperty = "background", CssConstants.backgroundColorProperty = "background-color", 
        CssConstants.backgroundRepeatProperty = "background-repeat", CssConstants.backgroundSizeProperty = "background-size", 
        CssConstants.backgroundImageProperty = "background-image", CssConstants.textShadowProperty = "text-shadow", 
        CssConstants.textAlignProperty = "text-align", CssConstants.borderProperty = "border", 
        CssConstants.borderTopWidthProperty = "border-top-width", CssConstants.borderBottomWidthProperty = "border-bottom-width", 
        CssConstants.borderLeftWidthProperty = "border-left-width", CssConstants.borderRightWidthProperty = "border-right-width", 
        CssConstants.fontFamilyProperty = "font-family", CssConstants.fontSizeProperty = "font-size", 
        CssConstants.fontWeightProperty = "font-weight", CssConstants.colorProperty = "color", 
        CssConstants.opacityProperty = "opacity", CssConstants.paddingLeftProperty = "padding-left", 
        CssConstants.paddingRightProperty = "padding-right", CssConstants.positionProperty = "position", 
        CssConstants.maxWidthProperty = "max-width", CssConstants.minWidthProperty = "min-width", 
        CssConstants.overflowProperty = "overflow", CssConstants.overflowXProperty = "overflow-x", 
        CssConstants.overflowYProperty = "overflow-y", CssConstants.transformProperty = "transform", 
        CssConstants.webkitTransformProperty = "-webkit-transform", CssConstants.cursorProperty = "cursor", 
        CssConstants.visibilityProperty = "visibility", CssConstants.absoluteValue = "absolute", 
        CssConstants.zeroPixelValue = "0px", CssConstants.autoValue = "auto", CssConstants.hiddenValue = "hidden", 
        CssConstants.noneValue = "none", CssConstants.blockValue = "block", CssConstants.inlineBlockValue = "inline-block", 
        CssConstants.transparentValue = "transparent", CssConstants.boldValue = "bold", 
        CssConstants.visibleValue = "visible", CssConstants.tableRowValue = "table-row", 
        CssConstants.coverValue = "cover", CssConstants.pointerValue = "pointer", CssConstants.scrollValue = "scroll";
    })(CssConstants = jsCommon.CssConstants || (jsCommon.CssConstants = {}));
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    var Deprecated;
    !(function(Deprecated) {
        Deprecated.escape = window.escape, Deprecated.unescape = window.unescape;
    })(Deprecated = jsCommon.Deprecated || (jsCommon.Deprecated = {}));
    var API;
    !(function(API) {
        function deprecated(message) {}
        API.deprecated = deprecated;
    })(API = jsCommon.API || (jsCommon.API = {}));
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    function getStackTrace(leadingFramesToRemove) {
        void 0 === leadingFramesToRemove && (leadingFramesToRemove = 1);
        var stackTrace, stackSegments;
        try {
            throw new Error();
        } catch (error) {
            stackTrace = error.stack, null != stackTrace && (stackSegments = stackTrace.split("\n"), 
            stackSegments.splice(1, leadingFramesToRemove), stackTrace = stackSegments.join("\n"));
        }
        return stackTrace;
    }
    var Errors;
    !(function(Errors) {
        function argumentNull(argumentName) {
            return {
                name: "argumentNull",
                argument: argumentName,
                message: "Argument was null",
                stack: getExceptionStackTrace()
            };
        }
        function argumentUndefined(argumentName) {
            return {
                name: "argumentUndefined",
                argument: argumentName,
                message: "Argument was undefined",
                stack: getExceptionStackTrace()
            };
        }
        function argumentOutOfRange(argumentName) {
            return {
                name: "argumentOutOfRange",
                argument: argumentName,
                message: "Argument was out of range",
                stack: getExceptionStackTrace()
            };
        }
        function notImplementedException(message) {
            return {
                name: "notImplementedException",
                message: message,
                stack: getExceptionStackTrace()
            };
        }
        function getExceptionStackTrace() {
            return getStackTrace(2);
        }
        Errors.argumentNull = argumentNull, Errors.argumentUndefined = argumentUndefined, 
        Errors.argumentOutOfRange = argumentOutOfRange, Errors.notImplementedException = notImplementedException;
    })(Errors = jsCommon.Errors || (jsCommon.Errors = {})), jsCommon.getStackTrace = getStackTrace;
})(jsCommon || (jsCommon = {})), $.fn.multiline = function(text) {
    return this.text(text), this.html(this.html().replace(/\n/g, "<br/>")), this;
}, $.extend($.expr[":"], {
    tabbable: function(element) {
        var tabIndex = parseInt($(element).attr("tabindex"), 10), isTabIndexNaN = isNaN(tabIndex);
        return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
    }
});

var jsCommon;

!(function(jsCommon) {
    var Lazy = (function() {
        function Lazy(factoryMethod) {
            this.factoryMethod = factoryMethod;
        }
        return Lazy.prototype.getValue = function() {
            return null !== this.factoryMethod && (this.value = this.factoryMethod(), this.factoryMethod = null), 
            this.value;
        }, Lazy;
    })();
    jsCommon.Lazy = Lazy;
})(jsCommon || (jsCommon = {}));

var powerbi;

!(function(powerbi) {
    var Prototype;
    !(function(Prototype) {
        function inherit(obj, extension) {
            function wrapCtor() {}
            wrapCtor.prototype = obj;
            var inherited = new wrapCtor();
            return extension && extension(inherited), inherited;
        }
        function inheritSingle(obj) {
            var proto = Object.getPrototypeOf(obj);
            return proto !== Object.prototype && proto !== Array.prototype || (obj = inherit(obj)), 
            obj;
        }
        function overrideArray(prototype, override) {
            if (prototype) {
                for (var overwritten, i = 0, len = prototype.length; i < len; i++) {
                    var value = override(prototype[i]);
                    value && (overwritten || (overwritten = inherit(prototype)), overwritten[i] = value);
                }
                return overwritten;
            }
        }
        function copyPrototypeDeep(from, to) {
            if (from && to && "object" == typeof from) {
                Object.getPrototypeOf(from) !== Object.getPrototypeOf(to) && (to.__proto__ = from.__proto__);
                for (var _i = 0, _a = Object.getOwnPropertyNames(from); _i < _a.length; _i++) {
                    var key = _a[_i];
                    copyPrototypeDeep(from[key], to[key]);
                }
            }
        }
        Prototype.inherit = inherit, Prototype.inheritSingle = inheritSingle, Prototype.overrideArray = overrideArray, 
        Prototype.copyPrototypeDeep = copyPrototypeDeep;
    })(Prototype = powerbi.Prototype || (powerbi.Prototype = {}));
})(powerbi || (powerbi = {}));

var jsCommon;

!(function(jsCommon) {
    var Formatting;
    !(function(Formatting) {
        function findDateFormat(value, format, cultureName) {
            switch (format) {
              case "m":
                format = "M";
                break;

              case "O":
              case "o":
                format = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'0000'";
                break;

              case "R":
              case "r":
                value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds()), 
                format = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
                break;

              case "s":
                format = "S";
                break;

              case "u":
                value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds()), 
                format = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
                break;

              case "U":
                value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds()), 
                format = "F";
                break;

              case "y":
              case "Y":
                switch (cultureName) {
                  case "default":
                  case "en":
                  case "en-US":
                    format = "MMMM, yyyy";
                    break;

                  default:
                    format = "Y";
                }
            }
            return {
                value: value,
                format: format
            };
        }
        function fixDateTimeFormat(format) {
            if (format = format.replace(/%K/g, "zzz"), format = format.replace(/K/g, "zzz"), 
            format = format.replace(/fffffff/g, "fff0000"), format = format.replace(/ffffff/g, "fff000"), 
            format = format.replace(/fffff/g, "fff00"), format = format.replace(/ffff/g, "fff0"), 
            format = format.replace(/yyyyy/g, "0yyyy"), format = format.replace(/(^y|^)yyy(^y|$)/g, "yyyy"), 
            regexCache || (regexCache = [ "d", "f", "F", "g", "h", "H", "K", "m", "M", "s", "t", "y", "z", ":", "/" ].map((function(s) {
                return {
                    r: new RegExp("%" + s + "(?!" + s + ")", "g"),
                    s: s
                };
            }))), format.indexOf("%") !== -1 && format.length > 2) for (var _i = 0, regexCache_1 = regexCache; _i < regexCache_1.length; _i++) {
                var cacheItem = regexCache_1[_i];
                format = format.replace(cacheItem.r, cacheItem.s);
            }
            return format;
        }
        var regexCache;
        Formatting.findDateFormat = findDateFormat, Formatting.fixDateTimeFormat = fixDateTimeFormat;
    })(Formatting = jsCommon.Formatting || (jsCommon.Formatting = {}));
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    var HttpStatusCode;
    !(function(HttpStatusCode) {
        HttpStatusCode[HttpStatusCode.OK = 200] = "OK", HttpStatusCode[HttpStatusCode.BadRequest = 400] = "BadRequest", 
        HttpStatusCode[HttpStatusCode.Unauthorized = 401] = "Unauthorized", HttpStatusCode[HttpStatusCode.Forbidden = 403] = "Forbidden", 
        HttpStatusCode[HttpStatusCode.RequestEntityTooLarge = 413] = "RequestEntityTooLarge";
    })(HttpStatusCode = jsCommon.HttpStatusCode || (jsCommon.HttpStatusCode = {}));
    var HttpConstants;
    !(function(HttpConstants) {
        HttpConstants.ApplicationOctetStream = "application/octet-stream", HttpConstants.JsonContentType = "application/json", 
        HttpConstants.JpegContentType = "image/jpeg", HttpConstants.Blob = "blob", HttpConstants.ArrayBuffer = "arraybuffer", 
        HttpConstants.Accept = "Accept";
    })(HttpConstants = jsCommon.HttpConstants || (jsCommon.HttpConstants = {}));
    var StringExtensions;
    !(function(StringExtensions) {
        function format() {
            for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
            var s = args[0];
            if (isNullOrUndefinedOrWhiteSpaceString(s)) return s;
            for (var i = 0; i < args.length - 1; i++) {
                var reg = new RegExp("\\{" + i + "\\}", "gm");
                s = s.replace(reg, args[i + 1]);
            }
            return s;
        }
        function equalIgnoreCase(a, b) {
            return StringExtensions.normalizeCase(a) === StringExtensions.normalizeCase(b);
        }
        function startsWithIgnoreCase(a, b) {
            var normalizedSearchString = StringExtensions.normalizeCase(b);
            return 0 === StringExtensions.normalizeCase(a).indexOf(normalizedSearchString);
        }
        function contains(source, substring) {
            return null != source && source.indexOf(substring) !== -1;
        }
        function containsIgnoreCase(source, substring) {
            return null != source && contains(normalizeCase(source), normalizeCase(substring));
        }
        function normalizeCase(value) {
            return Utility.throwIfNullOrUndefined(value, StringExtensions, "normalizeCase", "value"), 
            value.toUpperCase();
        }
        function isNullOrUndefinedOrWhiteSpaceString(str) {
            return _.isEmpty(str) || _.isEmpty(str.trim());
        }
        function containsWhitespace(str) {
            Utility.throwIfNullOrUndefined(str, Utility, "containsWhitespace", "str");
            var expr = /\s/;
            return expr.test(str);
        }
        function isWhitespace(str) {
            return "" === _.trim(str);
        }
        function trimTrailingWhitespace(str) {
            return Utility.throwIfNullOrUndefined(str, Utility, "trimTrailingWhitespace", "str"), 
            str.replace(/\s+$/, "");
        }
        function trimWhitespace(str) {
            return Utility.throwIfNullOrUndefined(str, Utility, "trimWhitespace", "str"), str.replace(/^\s+/, "").replace(/\s+$/, "");
        }
        function replaceAll(text, textToFind, textToReplace) {
            if (!textToFind) return text;
            var pattern = escapeStringForRegex(textToFind);
            return text.replace(new RegExp(pattern, "gi"), textToReplace);
        }
        function ensureUniqueNames(names) {
            for (var usedNames = {}, _i = 0, names_1 = names; _i < names_1.length; _i++) {
                var name_1 = names_1[_i];
                usedNames[name_1] = !1;
            }
            for (var uniqueNames = [], _a = 0, names_2 = names; _a < names_2.length; _a++) {
                var name_2 = names_2[_a], uniqueName = name_2;
                if (usedNames[uniqueName]) for (var counter = 0; void 0 !== usedNames[uniqueName]; ) uniqueName = name_2 + "." + ++counter;
                uniqueNames.push(uniqueName), usedNames[uniqueName] = !0;
            }
            return uniqueNames;
        }
        function findUniqueName(usedNames, baseName, startSuffix) {
            var i = startSuffix || 0, uniqueName = baseName;
            for (startSuffix && (uniqueName += startSuffix); usedNames[uniqueName]; ) uniqueName = baseName + ++i;
            return uniqueName;
        }
        function constructNameFromList(list, separator, maxCharacter) {
            for (var exceeded, labels = [], length = 0, _i = 0, list_1 = list; _i < list_1.length; _i++) {
                var item = list_1[_i];
                if (length + item.length > maxCharacter && labels.length > 0) {
                    exceeded = !0;
                    break;
                }
                labels.push(item), length += item.length;
            }
            var separatorWithSpace = " " + separator + " ", name = labels.join(separatorWithSpace);
            return exceeded && (name += separatorWithSpace + "..."), name;
        }
        function constructCommaSeparatedList(list, resourceProvider, maxValue) {
            if (!list || 0 === list.length) return "";
            null !== maxValue && void 0 !== maxValue || (maxValue = Number.MAX_VALUE);
            for (var length = Math.min(maxValue, list.length), replacedList = [], j = 0; j < 2; j++) for (var targetValue = "{" + j + "}", replaceValue = "_|_<" + j + ">_|_", i = 0; i < length; i++) list[i].indexOf(targetValue) > -1 && (list[i] = list[i].replace(targetValue, replaceValue), 
            replacedList.push({
                targetValue: targetValue,
                replaceValue: replaceValue
            }));
            for (var commaSeparatedList = "", i = 0; i < length; i++) commaSeparatedList = 0 === i ? list[i] : StringExtensions.format(resourceProvider.get("FilterRestatement_Comma"), commaSeparatedList, list[i]);
            for (var _i = 0, replacedList_1 = replacedList; _i < replacedList_1.length; _i++) {
                var replacedItem = replacedList_1[_i];
                commaSeparatedList = commaSeparatedList.replace(replacedItem.replaceValue, replacedItem.targetValue);
            }
            return commaSeparatedList;
        }
        function escapeStringForRegex(s) {
            return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1");
        }
        function normalizeFileName(fileName) {
            return fileName.replace(/[\<\>\:"\/\\\|\?*]/g, "");
        }
        function stringifyAsPrettyJSON(object) {
            return JSON.stringify(object);
        }
        function deriveClsCompliantName(input, fallback) {
            var result = input.replace(/^[^A-Za-z]*/g, "").replace(/[ :\.\/\\\-\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000]/g, "_").replace(/[\W]/g, "");
            return result.length > 0 ? result : fallback;
        }
        function stripTagDelimiters(s) {
            return s.replace(HtmlTagRegex, "");
        }
        function encodeHtml(value, encodeSpaces) {
            if (void 0 === encodeSpaces && (encodeSpaces = !1), !value) return value;
            var result = value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\"/g, "&quot;").replace(/\'/g, "&#39;").replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, (function(match) {
                var hi = match.charCodeAt(0), low = match.charCodeAt(1);
                return "&#" + (1024 * (hi - 55296) + (low - 56320) + 65536) + ";";
            })).replace(/([^!-~ ])/g, (function(match) {
                return "&#" + match.charCodeAt(0) + ";";
            }));
            return encodeSpaces && (result = result.replace(/\ /g, "&nbsp;")), result;
        }
        var HtmlTagRegex = new RegExp("[<>]", "g");
        StringExtensions.format = format, StringExtensions.equalIgnoreCase = equalIgnoreCase, 
        StringExtensions.startsWithIgnoreCase = startsWithIgnoreCase, StringExtensions.contains = contains, 
        StringExtensions.containsIgnoreCase = containsIgnoreCase, StringExtensions.normalizeCase = normalizeCase, 
        StringExtensions.isNullOrUndefinedOrWhiteSpaceString = isNullOrUndefinedOrWhiteSpaceString, 
        StringExtensions.containsWhitespace = containsWhitespace, StringExtensions.isWhitespace = isWhitespace, 
        StringExtensions.trimTrailingWhitespace = trimTrailingWhitespace, StringExtensions.trimWhitespace = trimWhitespace, 
        StringExtensions.replaceAll = replaceAll, StringExtensions.ensureUniqueNames = ensureUniqueNames, 
        StringExtensions.findUniqueName = findUniqueName, StringExtensions.constructNameFromList = constructNameFromList, 
        StringExtensions.constructCommaSeparatedList = constructCommaSeparatedList, StringExtensions.escapeStringForRegex = escapeStringForRegex, 
        StringExtensions.normalizeFileName = normalizeFileName, StringExtensions.stringifyAsPrettyJSON = stringifyAsPrettyJSON, 
        StringExtensions.deriveClsCompliantName = deriveClsCompliantName, StringExtensions.stripTagDelimiters = stripTagDelimiters, 
        StringExtensions.encodeHtml = encodeHtml;
    })(StringExtensions = jsCommon.StringExtensions || (jsCommon.StringExtensions = {}));
    var Utility;
    !(function(Utility) {
        function throwIfNullOrUndefined(value, context, methodName, parameterName) {
            null === value ? Utility.throwException(jsCommon.Errors.argumentNull(Utility.getComponentName(context) + methodName + "." + parameterName)) : void 0 === value && Utility.throwException(jsCommon.Errors.argumentUndefined(Utility.getComponentName(context) + methodName + "." + parameterName));
        }
        function throwIfNullOrEmptyString(value, context, methodName, parameterName) {
            Utility.throwIfNullOrUndefined(value, context, methodName, parameterName), value.length < 1 && Utility.throwException(jsCommon.Errors.argumentOutOfRange(Utility.getComponentName(context) + methodName + "." + parameterName));
        }
        function valueOrDefault(value, defaultValue) {
            return null != value ? value : defaultValue;
        }
        function urlCombine(baseUrl, path) {
            if (Utility.throwIfNullOrUndefined(baseUrl, null, "urlCombine", "baseUrl"), Utility.throwIfNullOrUndefined(path, null, "urlCombine", "path"), 
            StringExtensions.isNullOrUndefinedOrWhiteSpaceString(path)) return baseUrl;
            if (StringExtensions.isNullOrUndefinedOrWhiteSpaceString(baseUrl)) return path;
            var finalUrl = baseUrl;
            return "/" === finalUrl.charAt(finalUrl.length - 1) ? "/" === path.charAt(0) && (path = path.slice(1)) : "/" !== path.charAt(0) && (path = "/" + path), 
            finalUrl + path;
        }
        function getAbsoluteUri(path) {
            Utility.throwIfNullOrUndefined(path, null, "getAbsoluteUri", "path");
            var url = path;
            return url && url.indexOf("http") === -1 && (url = Utility.urlCombine(clusterUri, url)), 
            url;
        }
        function getStaticResourceUri(path) {
            Utility.throwIfNullOrUndefined(path, null, "getStaticResourceUri", "path");
            var url = path;
            return url && url.indexOf("http") === -1 && (url = jsCommon.Utility.urlCombine(staticContentLocation, url)), 
            url;
        }
        function getComponentName(context) {
            return context ? (typeof context).toString() + "." : "";
        }
        function throwException(e) {
            throw jsCommon.Trace.error("Throwing exception: " + JSON.stringify(e), null == e.stack), 
            e;
        }
        function createClassSelector(className) {
            return Utility.throwIfNullOrEmptyString(className, null, "CreateClassSelector", "className"), 
            "." + className;
        }
        function createIdSelector(id) {
            return Utility.throwIfNullOrEmptyString(id, null, "CreateIdSelector", "id"), "#" + id;
        }
        function clampValue(value, min, max) {
            return value = Math.min(value, max), value = Math.max(value, min);
        }
        function generateGuid() {
            var guid = "", idx = 0;
            for (idx = 0; idx < 32; idx += 1) {
                var guidDigitsItem = 16 * Math.random() | 0;
                switch (idx) {
                  case 8:
                  case 12:
                  case 16:
                  case 20:
                    guid += "-";
                }
                guid += guidDigitsItem.toString(16);
            }
            return guid;
        }
        function getCookieValue(key) {
            for (var keyValuePairs = document.cookie.split(";"), _i = 0, keyValuePairs_1 = keyValuePairs; _i < keyValuePairs_1.length; _i++) {
                var keyValue = keyValuePairs_1[_i], split = keyValue.split("=");
                if (split.length > 0 && split[0].trim() === key) return keyValue.substr(keyValue.indexOf("=") + 1);
            }
            return null;
        }
        function getDomainForUrl(url) {
            var hrefObject = Utility.getHrefObjectFromUrl(url);
            return hrefObject.prop("protocol") + "//" + hrefObject.prop("hostname");
        }
        function getHostNameForUrl(url) {
            var hrefObject = Utility.getHrefObjectFromUrl(url);
            return Utility.urlCombine(hrefObject.prop("hostname"), hrefObject.prop("pathname"));
        }
        function getUrlWithoutQueryString(url) {
            var hrefObject = Utility.getHrefObjectFromUrl(url);
            return hrefObject.prop("protocol") + "//" + Utility.urlCombine(hrefObject.prop("host"), hrefObject.prop("pathname"));
        }
        function getProtocolFromUrl(url) {
            return Utility.getHrefObjectFromUrl(url).prop("protocol").replace(":", "");
        }
        function getHrefObjectFromUrl(url) {
            var aObject = $("<a>");
            return aObject = aObject.prop("href", url);
        }
        function getDateFromWcfJsonString(jsonDate, fromUtcMilliseconds) {
            if (_.isEmpty(jsonDate)) return null;
            var begIndex = jsonDate.indexOf("("), endIndex = jsonDate.indexOf(")");
            if (begIndex !== -1 && endIndex !== -1) {
                var milliseconds = parseInt(jsonDate.substring(begIndex + 1, endIndex), 10);
                if (isNaN(milliseconds) && (milliseconds = 0), fromUtcMilliseconds) return new Date(milliseconds);
                var retValue = new Date(0);
                return retValue.setUTCMilliseconds(milliseconds), retValue;
            }
            return null;
        }
        function isValidImageDataUrl(url) {
            var regex = new RegExp("data:(image/(png|jpg|jpeg|gif|svg))");
            return regex.test(url);
        }
        function isLocalUrl(url) {
            return _.startsWith(url, "data:") || _.startsWith(url, "blob:");
        }
        function extractFileNameFromPath(filePath) {
            return filePath.replace(/^.*[\\\/]/, "");
        }
        function canUseClipboard() {
            return "undefined" == typeof MSApp;
        }
        function is64BitOperatingSystem() {
            return navigator.userAgent.indexOf("WOW64") !== -1 || navigator.userAgent.indexOf("Win64") !== -1;
        }
        function parseNumber(value, defaultValue) {
            if (null === value) return null;
            if (void 0 === value) return defaultValue;
            var result = Number(value);
            return isFinite(result) ? result : isNaN(result) && "number" != typeof value && "NaN" !== value ? defaultValue : result;
        }
        function getURLParamValue(name) {
            var results = new RegExp("[?&]" + name + "=([^&#]*)").exec(window.location.href);
            return null == results ? null : results[1] || 0;
        }
        function getLocalTimeZoneString() {
            var localTimeZoneString, timeSummer = new Date(Date.UTC(2005, 6, 30, 0, 0, 0, 0)), summerOffset = -1 * timeSummer.getTimezoneOffset(), timeWinter = new Date(Date.UTC(2005, 12, 30, 0, 0, 0, 0)), winterOffset = -1 * timeWinter.getTimezoneOffset();
            return localTimeZoneString = -720 === summerOffset && -720 === winterOffset ? "Dateline Standard Time" : -660 === summerOffset && -660 === winterOffset ? "UTC-11" : -660 === summerOffset && -660 === winterOffset ? "Samoa Standard Time" : -600 === summerOffset && -600 === winterOffset ? "Hawaiian Standard Time" : -480 === summerOffset && -540 === winterOffset ? "Alaskan Standard Time" : -420 === summerOffset && -480 === winterOffset ? "Pacific Standard Time" : -420 === summerOffset && -420 === winterOffset ? "US Mountain Standard Time" : -360 === summerOffset && -420 === winterOffset ? "Mountain Standard Time" : -360 === summerOffset && -360 === winterOffset ? "Central America Standard Time" : -300 === summerOffset && -360 === winterOffset ? "Central Standard Time" : -300 === summerOffset && -300 === winterOffset ? "SA Pacific Standard Time" : -240 === summerOffset && -300 === winterOffset ? "Eastern Standard Time" : -270 === summerOffset && -270 === winterOffset ? "Venezuela Standard Time" : -240 === summerOffset && -240 === winterOffset ? "SA Western Standard Time" : -240 === summerOffset && -180 === winterOffset ? "Central Brazilian Standard Time" : -180 === summerOffset && -240 === winterOffset ? "Atlantic Standard Time" : -180 === summerOffset && -180 === winterOffset ? "Montevideo Standard Time" : -180 === summerOffset && -120 === winterOffset ? "E. South America Standard Time" : -150 === summerOffset && -210 === winterOffset ? "Mid-Atlantic Standard Time" : -120 === summerOffset && -120 === winterOffset ? "SA Eastern Standard Time" : 0 === summerOffset && 0 === winterOffset ? "UTC" : 60 === summerOffset && 0 === winterOffset ? "GMT Standard Time" : 60 === summerOffset && 120 === winterOffset ? "Namibia Standard Time" : 120 === summerOffset && 60 === winterOffset ? "Romance Standard Time" : 120 === summerOffset && 120 === winterOffset ? "South Africa Standard Time" : 180 === summerOffset && 120 === winterOffset ? "GTB Standard Time" : 180 === summerOffset && 180 === winterOffset ? "E. Africa Standard Time" : 240 === summerOffset && 180 === winterOffset ? "Russian Standard Time" : 240 === summerOffset && 240 === winterOffset ? "Arabian Standard Time" : 270 === summerOffset && 210 === winterOffset ? "Iran Standard Time" : 270 === summerOffset && 270 === winterOffset ? "Afghanistan Standard Time" : 300 === summerOffset && 240 === winterOffset ? "Pakistan Standard Time" : 300 === summerOffset && 300 === winterOffset ? "West Asia Standard Time" : 330 === summerOffset && 330 === winterOffset ? "India Standard Time" : 345 === summerOffset && 345 === winterOffset ? "Nepal Standard Time" : 360 === summerOffset && 300 === winterOffset ? "N. Central Asia Standard Time" : 360 === summerOffset && 360 === winterOffset ? "Central Asia Standard Time" : 390 === summerOffset && 390 === winterOffset ? "Myanmar Standard Time" : 420 === summerOffset && 360 === winterOffset ? "North Asia Standard Time" : 420 === summerOffset && 420 === winterOffset ? "SE Asia Standard Time" : 480 === summerOffset && 420 === winterOffset ? "North Asia East Standard Time" : 480 === summerOffset && 480 === winterOffset ? "China Standard Time" : 540 === summerOffset && 480 === winterOffset ? "Yakutsk Standard Time" : 540 === summerOffset && 540 === winterOffset ? "Tokyo Standard Time" : 570 === summerOffset && 570 === winterOffset ? "Cen. Australia Standard Time" : 600 === summerOffset && 600 === winterOffset ? "E. Australia Standard Time" : 600 === summerOffset && 660 === winterOffset ? "AUS Eastern Standard Time" : 660 === summerOffset && 600 === winterOffset ? "Tasmania Standard Time" : 660 === summerOffset && 660 === winterOffset ? "West Pacific Standard Time" : 690 === summerOffset && 690 === winterOffset ? "Central Pacific Standard Time" : 720 === summerOffset && 660 === winterOffset ? "Magadan Standard Time" : 720 === summerOffset && 720 === winterOffset ? "Fiji Standard Time" : 720 === summerOffset && 780 === winterOffset ? "New Zealand Standard Time" : 780 === summerOffset && 780 === winterOffset ? "Tonga Standard Time" : "UTC";
        }
        var staticContentLocation = window.location.protocol + "//" + window.location.host;
        Utility.throwIfNullOrUndefined = throwIfNullOrUndefined, Utility.throwIfNullOrEmptyString = throwIfNullOrEmptyString, 
        Utility.valueOrDefault = valueOrDefault, Utility.urlCombine = urlCombine, Utility.getAbsoluteUri = getAbsoluteUri, 
        Utility.getStaticResourceUri = getStaticResourceUri, Utility.getComponentName = getComponentName, 
        Utility.throwException = throwException, Utility.createClassSelector = createClassSelector, 
        Utility.createIdSelector = createIdSelector, Utility.clampValue = clampValue, Utility.generateGuid = generateGuid, 
        Utility.getCookieValue = getCookieValue, Utility.getDomainForUrl = getDomainForUrl, 
        Utility.getHostNameForUrl = getHostNameForUrl, Utility.getUrlWithoutQueryString = getUrlWithoutQueryString, 
        Utility.getProtocolFromUrl = getProtocolFromUrl, Utility.getHrefObjectFromUrl = getHrefObjectFromUrl, 
        Utility.getDateFromWcfJsonString = getDateFromWcfJsonString, Utility.isValidImageDataUrl = isValidImageDataUrl, 
        Utility.isLocalUrl = isLocalUrl, Utility.extractFileNameFromPath = extractFileNameFromPath, 
        Utility.canUseClipboard = canUseClipboard, Utility.is64BitOperatingSystem = is64BitOperatingSystem, 
        Utility.parseNumber = parseNumber, Utility.getURLParamValue = getURLParamValue, 
        Utility.getLocalTimeZoneString = getLocalTimeZoneString;
    })(Utility = jsCommon.Utility || (jsCommon.Utility = {}));
    var VersionUtility = (function() {
        function VersionUtility() {}
        return VersionUtility.compareVersions = function(versionA, versionB) {
            for (var a = versionA.split(".").map(parseFloat), b = versionB.split(".").map(parseFloat), versionParts = Math.max(a.length, b.length), i = 0; i < versionParts; i++) {
                var partA = a[i] || 0, partB = b[i] || 0;
                if (partA > partB) return 1;
                if (partA < partB) return -1;
            }
            return 0;
        }, VersionUtility;
    })();
    jsCommon.VersionUtility = VersionUtility;
    var PerfTimer;
    !(function(PerfTimer) {
        function start(name) {
            var performance = window.performance;
            if (!performance || !performance.mark) return _.noop;
            console.time;
            var startMark = "Begin " + name;
            return performance.mark(startMark), function() {
                var end = "End " + name;
                performance.mark(end), performance.measure && performance.measure(name, startMark, end), 
                console.timeEnd;
            };
        }
        PerfTimer.start = start;
    })(PerfTimer = jsCommon.PerfTimer || (jsCommon.PerfTimer = {}));
    var DeferUtility;
    !(function(DeferUtility) {
        function deferUntilNextFrame(callback) {
            var isWaiting, args, context;
            return window.requestAnimationFrame || (window.requestAnimationFrame = function(func) {
                return setTimeout(func, 20);
            }), function() {
                isWaiting || (isWaiting = !0, args = arguments, context = this, window.requestAnimationFrame((function() {
                    isWaiting = !1, callback.apply(context, args);
                })));
            };
        }
        DeferUtility.deferUntilNextFrame = deferUntilNextFrame;
    })(DeferUtility = jsCommon.DeferUtility || (jsCommon.DeferUtility = {}));
})(jsCommon || (jsCommon = {}));

var powerbi;

!(function(powerbi) {
    function createModuleLoader(promiseFactory, loadTelemetry, config, rjs) {
        return new ModuleLoader(promiseFactory, loadTelemetry, config, rjs);
    }
    function loadJavaScript(rjs, telemetry, script, success, failure) {
        if (rjs.defined(script)) return void success(rjs(script));
        var timer = PerfTimer.start("moduleLoader.require('" + script + "')"), startTimeIso = new Date().toISOString();
        rjs([ script ], (function() {
            telemetry(script, void 0, startTimeIso, new Date().toISOString()), timer(), success(arguments[0]);
        }), (function(error) {
            telemetry(script, error.requireType, startTimeIso, new Date().toISOString()), timer(), 
            failure(error);
        }));
    }
    function getBundleName(script, bundles) {
        for (var name_3 in bundles) if (_.contains(bundles[name_3], script)) return name_3;
    }
    function loadStyleSheets(cssPaths, hrefList) {
        if (hrefList) for (var _i = 0, hrefList_1 = hrefList; _i < hrefList_1.length; _i++) {
            var href = hrefList_1[_i];
            href = cssPaths[href] || href, _.endsWith(href, ".css") || (href += ".css"), styleSheetLoaded.indexOf(href) === -1 && (styleSheetLoaded.push(href), 
            loadStyleSheet(href));
        }
    }
    function loadStyleSheet(href) {
        var link = linkElement.cloneNode();
        link.href = href, firstScriptInHeadElement ? headElement.insertBefore(link, firstScriptInHeadElement) : headElement.appendChild(link);
    }
    var PerfTimer = jsCommon.PerfTimer;
    powerbi.createModuleLoader = createModuleLoader;
    var ModuleLoader = (function() {
        function ModuleLoader(promiseFactory, telemetry, config, rjs) {
            this.promiseFactory = promiseFactory, this.telemetry = telemetry, this.rjs = rjs || window.require, 
            this.active = {}, config ? (this.rjs.config(config), this.cssPaths = config.cssPaths, 
            this.bundles = config.bundles) : (this.cssPaths = {}, this.bundles = {});
        }
        return ModuleLoader.prototype.require = function(dependency) {
            var _this = this;
            loadStyleSheets(this.cssPaths, dependency.css);
            var script = dependency.javascript, activeRequests = this.active, previousRequest = activeRequests[script];
            if (previousRequest) return previousRequest;
            var bundleName = getBundleName(script, this.bundles), defer = this.promiseFactory.defer();
            activeRequests[script] = defer.promise, defer.promise.finally((function() {
                return delete activeRequests[script];
            }));
            var loadRequestedScript = function() {
                return loadJavaScript(_this.rjs, _this.telemetry, script, (function(result) {
                    return defer.resolve(result);
                }), (function(error) {
                    return defer.reject(error);
                }));
            };
            return null == bundleName || this.rjs.defined(bundleName) ? loadRequestedScript() : loadJavaScript(this.rjs, this.telemetry, bundleName, loadRequestedScript, (function(error) {
                return defer.reject(error);
            })), defer.promise;
        }, ModuleLoader;
    })(), doc = document, headElement = doc.head, firstScriptInHeadElement = headElement.getElementsByTagName("script")[0], linkElement = doc.createElement("link"), styleSheetLoaded = [];
    linkElement.setAttribute("rel", "stylesheet");
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    function createJQueryPromiseFactory() {
        return new JQueryPromiseFactory();
    }
    powerbi.createJQueryPromiseFactory = createJQueryPromiseFactory;
    var JQueryPromiseState;
    !(function(JQueryPromiseState) {
        JQueryPromiseState[JQueryPromiseState.pending = 0] = "pending", JQueryPromiseState[JQueryPromiseState.resolved = 1] = "resolved", 
        JQueryPromiseState[JQueryPromiseState.rejected = 2] = "rejected";
    })(JQueryPromiseState = powerbi.JQueryPromiseState || (powerbi.JQueryPromiseState = {}));
    var JQueryPromiseFactory = (function() {
        function JQueryPromiseFactory() {}
        return JQueryPromiseFactory.prototype.defer = function() {
            return new JQueryDeferredWrapper($.Deferred());
        }, JQueryPromiseFactory.prototype.reject = function(reason) {
            var deferred = this.defer();
            return deferred.reject(reason), deferred.promise;
        }, JQueryPromiseFactory.prototype.resolve = function(value) {
            var deferred = this.defer();
            return deferred.resolve(value), deferred.promise;
        }, JQueryPromiseFactory.prototype.all = function(promises) {
            var unwrappedPromises = jQuery.map(promises, (function(value) {
                return value && value.promise ? value.promise : value;
            }));
            return new JQueryPromiseWrapper($.when.apply($, unwrappedPromises).then((function() {
                return Array.prototype.slice.call(arguments);
            })));
        }, JQueryPromiseFactory.prototype.allSettled = function(promises) {
            var deferred = this.defer(), promiseCount = promises.length;
            if (promiseCount > 0) for (var resolvedCount_1 = 0, results_1 = [], _loop_1 = function(i) {
                promises[i].then((function(result) {
                    results_1[i] = {
                        value: result,
                        type: 0
                    };
                })).catch((function(result) {
                    results_1[i] = {
                        value: result,
                        type: 1
                    };
                })).finally((function() {
                    resolvedCount_1++, resolvedCount_1 === promiseCount && deferred.resolve(results_1);
                }));
            }, i = 0; i < promiseCount; i++) _loop_1(i); else deferred.resolve([]);
            return deferred.promise;
        }, JQueryPromiseFactory.prototype.when = function(value) {
            var unwrappedPromise = value && value.promise ? value.promise : value;
            return new JQueryPromiseWrapper($.when(unwrappedPromise));
        }, JQueryPromiseFactory;
    })(), JQueryDeferredWrapper = (function() {
        function JQueryDeferredWrapper(deferred) {
            this.deferred = deferred, this.promise = new JQueryPromiseWrapper(deferred.promise());
        }
        return JQueryDeferredWrapper.prototype.resolve = function(value) {
            this.deferred.resolve(value);
        }, JQueryDeferredWrapper.prototype.reject = function(reason) {
            this.deferred.reject(reason);
        }, JQueryDeferredWrapper;
    })(), JQueryPromiseWrapper = (function() {
        function JQueryPromiseWrapper(promise) {
            this.promise = promise;
        }
        return JQueryPromiseWrapper.prototype.then = function(a, b) {
            return new JQueryPromiseWrapper(this.promise.then(JQueryPromiseWrapper.wrapCallback(a), JQueryPromiseWrapper.wrapCallback(b)));
        }, JQueryPromiseWrapper.prototype.catch = function(callback) {
            return this.then(null, callback);
        }, JQueryPromiseWrapper.prototype.finally = function(callback) {
            return this.promise.always(JQueryPromiseWrapper.wrapCallback(callback)), this;
        }, JQueryPromiseWrapper.wrapCallback = function(callback) {
            return callback ? function() {
                var value = callback.apply(this, arguments);
                return value instanceof JQueryPromiseWrapper ? value.promise : value;
            } : callback;
        }, JQueryPromiseWrapper;
    })();
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var LocalStorageService = (function() {
        function LocalStorageService() {}
        return LocalStorageService.prototype.getData = function(key) {
            try {
                if (localStorage) {
                    var value = localStorage[key];
                    if (value) return JSON.parse(value);
                }
            } catch (exception) {}
            return null;
        }, LocalStorageService.prototype.setData = function(key, data) {
            try {
                localStorage && (localStorage[key] = JSON.stringify(data));
            } catch (e) {}
        }, LocalStorageService;
    })(), EphemeralStorageService = (function() {
        function EphemeralStorageService(clearCacheInterval) {
            this.cache = {}, this.clearCacheInterval = null != clearCacheInterval ? clearCacheInterval : EphemeralStorageService.defaultClearCacheInterval, 
            this.clearCache();
        }
        return EphemeralStorageService.prototype.getData = function(key) {
            return this.cache[key];
        }, EphemeralStorageService.prototype.setData = function(key, data) {
            var _this = this;
            this.cache[key] = data, null == this.clearCacheTimerId && (this.clearCacheTimerId = setTimeout((function() {
                return _this.clearCache();
            }), this.clearCacheInterval));
        }, EphemeralStorageService.prototype.clearCache = function() {
            this.cache = {}, this.clearCacheTimerId = void 0;
        }, EphemeralStorageService.defaultClearCacheInterval = 864e5, EphemeralStorageService;
    })();
    powerbi.EphemeralStorageService = EphemeralStorageService, powerbi.localStorageService = new LocalStorageService(), 
    powerbi.ephemeralStorageService = new EphemeralStorageService();
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var WorkScheduler = (function() {
        function WorkScheduler() {
            this.timeoutHandles = {}, this.animationFrameHandles = {};
        }
        return WorkScheduler.prototype.scheduleTimeoutTask = function(callback, timeout) {
            var _this = this, handle = setTimeout((function() {
                callback(), _this.removeTimeoutTask(handle);
            }), timeout);
            this.timeoutHandles[handle] = handle;
        }, WorkScheduler.prototype.scheduleAnimationFrameTask = function(callback) {
            var _this = this, handle = requestAnimationFrame((function() {
                callback(), _this.removeAnimationFrameTask(handle);
            }));
            this.animationFrameHandles[handle] = handle;
        }, WorkScheduler.prototype.removeTimeoutTask = function(handle) {
            delete this.timeoutHandles[handle], this.checkOnIdle();
        }, WorkScheduler.prototype.removeAnimationFrameTask = function(handle) {
            delete this.animationFrameHandles[handle], this.checkOnIdle();
        }, WorkScheduler.prototype.clear = function() {
            for (var handle in this.timeoutHandles) clearTimeout(this.timeoutHandles[handle]);
            this.timeoutHandles = {};
            for (var handle in this.animationFrameHandles) cancelAnimationFrame(this.animationFrameHandles[handle]);
            this.animationFrameHandles = {};
        }, WorkScheduler.prototype.checkOnIdle = function() {
            this.onIdle && _.isEmpty(this.timeoutHandles) && _.isEmpty(this.animationFrameHandles) && this.onIdle();
        }, WorkScheduler;
    })();
    powerbi.WorkScheduler = WorkScheduler;
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    function isPromise(value) {
        return value && _.isFunction(value.then);
    }
    var Promise = (function() {
        function Promise(init) {
            var _this = this;
            this.defer = Promise.ensureFactory().defer(), init((function(value) {
                return _this.onResolve(value);
            }), (function(reason) {
                return _this.onReject(reason);
            }));
        }
        return Promise.prototype.then = function(successCallback, errorCallback) {
            return this.defer.promise.then(successCallback, errorCallback);
        }, Promise.prototype.catch = function(onRejected) {
            return this.defer.promise.catch(onRejected);
        }, Promise.prototype.finally = function(finallyCallback) {
            return this.defer.promise.finally(finallyCallback);
        }, Promise.init = function(promiseFactory, exceptionHandler) {
            Promise.factory = promiseFactory, Promise.exceptions = exceptionHandler;
        }, Promise.ensureFactory = function() {
            var factory = Promise.factory;
            return factory || (factory = Promise.factory = powerbi.createJQueryPromiseFactory()), 
            factory;
        }, Promise.prototype.onResolve = function(value) {
            var _this = this;
            isPromise(value) ? value.then((function(chainedValue) {
                return _this.onResolve(chainedValue);
            }), (function(chainedValue) {
                return _this.onReject(chainedValue);
            })) : this.defer.resolve(value);
        }, Promise.prototype.onReject = function(error) {
            if (error instanceof Error && !error.suppressExceptionHandler) {
                var exceptionHandler = Promise.exceptions;
                exceptionHandler && (error.suppressExceptionHandler = !0, exceptionHandler(error));
            }
            this.defer.reject(error);
        }, Promise;
    })();
    powerbi.Promise = Promise;
})(powerbi || (powerbi = {}));

var jsCommon;

!(function(jsCommon) {
    var WordBreaker;
    !(function(WordBreaker) {
        function search(index, content, backward) {
            if (backward) {
                for (var i = index - 1; i > -1; i--) if (hasBreakers(content[i])) return i + 1;
            } else for (var i = index, ilen = content.length; i < ilen; i++) if (hasBreakers(content[i])) return i;
            return backward ? 0 : content.length;
        }
        function find(index, content) {
            var result = {
                start: 0,
                end: 0
            };
            return 0 === content.length ? result : (result.start = search(index, content, !0), 
            result.end = search(index, content, !1), result);
        }
        function hasBreakers(content) {
            return BREAKERS_REGEX.lastIndex = 0, BREAKERS_REGEX.test(content);
        }
        function wordCount(content) {
            var count = 1;
            for (BREAKERS_REGEX.lastIndex = 0, BREAKERS_REGEX.exec(content); 0 !== BREAKERS_REGEX.lastIndex; ) count++, 
            BREAKERS_REGEX.exec(content);
            return count;
        }
        function getMaxWordWidth(content, textWidthMeasurer, properties) {
            for (var words = split(content), maxWidth = 0, _i = 0, words_1 = words; _i < words_1.length; _i++) {
                var w = words_1[_i];
                properties.text = w, maxWidth = Math.max(maxWidth, textWidthMeasurer(properties));
            }
            return maxWidth;
        }
        function split(content) {
            return content.split(BREAKERS_REGEX);
        }
        function getWidth(content, properties, textWidthMeasurer) {
            return properties.text = content, textWidthMeasurer(properties);
        }
        function truncate(content, properties, truncator, maxWidth) {
            return properties.text = content, truncator(properties, maxWidth);
        }
        function splitByWidth(content, properties, textWidthMeasurer, maxWidth, maxNumLines, truncator, splitLongWords, preserveNewLine) {
            if (maxNumLines < 1 && (maxNumLines = Number.POSITIVE_INFINITY), preserveNewLine) {
                for (var paragraphs = content.split(NewLineRegex), paragraphsResult = [], _i = 0, paragraphs_1 = paragraphs; _i < paragraphs_1.length; _i++) {
                    var paragraph = paragraphs_1[_i], paragraphChunks = splitByWidth(paragraph, properties, textWidthMeasurer, maxWidth, Math.max(1, maxNumLines), truncator, splitLongWords, !1);
                    if (maxNumLines > 0) paragraphsResult.push.apply(paragraphsResult, paragraphChunks), 
                    maxNumLines -= paragraphChunks.length; else {
                        var lastLine = _.last(paragraphsResult);
                        paragraphsResult[paragraphsResult.length - 1] = lastLine + SPACE + paragraphChunks;
                    }
                }
                return paragraphsResult;
            }
            truncator = truncator ? truncator : function(properties, maxWidth) {
                return properties.text;
            };
            for (var SpaceWidth = getWidth(SPACE, properties, textWidthMeasurer), lines = new TextLines(), words = split(content), _a = 0, words_2 = words; _a < words_2.length; _a++) {
                var word = words_2[_a], wordWidth = getWidth(word, properties, textWidthMeasurer), addedWidth = wordWidth, isLastLineEmpty = lines.getLastLine().isEmpty();
                if (isLastLineEmpty || (addedWidth += SpaceWidth), lines.getLastLineWidth() + addedWidth <= maxWidth || lines.count >= maxNumLines) lines.addWord(word, addedWidth); else if (isLastLineEmpty || lines.newLine(), 
                wordWidth <= maxWidth) lines.addWord(word, wordWidth); else {
                    var remainingLines = maxNumLines - lines.count;
                    if (!splitLongWords || remainingLines <= 0) lines.addWord(word, wordWidth); else for (var wordSplittingResult = splitWordByWidth(word, properties, textWidthMeasurer, maxWidth, remainingLines + 1), i = 0, len = wordSplittingResult.chunks.length; i < len; i++) {
                        var chunk = wordSplittingResult.chunks[i];
                        i < len - 1 ? (lines.addWord(chunk, maxWidth), lines.newLine()) : lines.addWord(chunk, wordSplittingResult.lastChunkWidth);
                    }
                }
            }
            var result = _.map(lines.getLines(), (function(line) {
                return line.getWidth() > maxWidth ? truncate(line.toString(), properties, truncator, maxWidth) : line.toString();
            }));
            return result;
        }
        function splitWordByWidth(word, properties, textWidthMeasurer, maxWidth, maxNumChunks) {
            var result = {
                chunks: [],
                lastChunkWidth: 0
            };
            if (maxNumChunks < 1) return result;
            for (var wordLength = word.length, chunks = result.chunks, chunk = "", charIdx = 0; charIdx < wordLength; charIdx++) {
                var remainingChunks = maxNumChunks - chunks.length, char = word.charAt(charIdx), chunkWithChar = chunk + char, newWidth = getWidth(chunkWithChar, properties, textWidthMeasurer);
                newWidth <= maxWidth || _.isEmpty(chunk) || remainingChunks <= 1 ? (chunk = chunkWithChar, 
                result.lastChunkWidth = newWidth) : (chunks.push(chunk), chunk = char, result.lastChunkWidth = getWidth(char, properties, textWidthMeasurer));
            }
            return _.isEmpty(chunk) || chunks.push(chunk), result;
        }
        var SPACE = " ", NewLineRegex = /\n+/g, BREAKERS_REGEX = /[\s\n]+/g;
        WordBreaker.find = find, WordBreaker.hasBreakers = hasBreakers, WordBreaker.wordCount = wordCount, 
        WordBreaker.getMaxWordWidth = getMaxWordWidth;
        var TextLine = (function() {
            function TextLine() {
                this.words = [], this.width = 0;
            }
            return TextLine.prototype.getWidth = function() {
                return this.width;
            }, TextLine.prototype.addWord = function(word, width) {
                this.words.push(word), this.width += width;
            }, TextLine.prototype.toString = function() {
                return this.words.join(SPACE);
            }, TextLine.prototype.isEmpty = function() {
                return _.isEmpty(this.words);
            }, TextLine;
        })(), TextLines = (function() {
            function TextLines() {
                this.lastLine = new TextLine(), this.lines = [ this.lastLine ];
            }
            return TextLines.prototype.newLine = function() {
                var currentLast = this.lastLine;
                return this.lastLine = new TextLine(), this.lines.push(this.lastLine), currentLast;
            }, Object.defineProperty(TextLines.prototype, "count", {
                get: function() {
                    return this.lines.length;
                },
                enumerable: !0,
                configurable: !0
            }), TextLines.prototype.getLastLine = function() {
                return this.lastLine;
            }, TextLines.prototype.getLastLineWidth = function() {
                return this.getLastLine().getWidth();
            }, TextLines.prototype.addWord = function(word, width) {
                this.lastLine.addWord(word, width);
            }, TextLines.prototype.getLines = function() {
                return this.lines;
            }, TextLines;
        })();
        WordBreaker.splitByWidth = splitByWidth, WordBreaker.splitWordByWidth = splitWordByWidth;
    })(WordBreaker = jsCommon.WordBreaker || (jsCommon.WordBreaker = {}));
})(jsCommon || (jsCommon = {}));

var powerbi;

!(function(powerbi) {
    var TextMeasurementService;
    !(function(TextMeasurementService) {
        function ensureDOM() {
            if (!spanElement) {
                spanElement = $("<span/>"), $("body").append(spanElement), svgTextElement = d3.select($("body").get(0)).append("svg").style({
                    height: "0px",
                    width: "0px",
                    position: "absolute"
                }).append("text"), canvasCtx = $("<canvas/>").get(0).getContext("2d");
                var style = window.getComputedStyle(svgTextElement.node());
                fallbackFontFamily = style ? style.fontFamily : "";
            }
        }
        function removeSpanElement() {
            spanElement && spanElement.remove && spanElement.remove(), spanElement = null;
        }
        function measureSvgTextWidth(textProperties, text) {
            return ensureDOM(), canvasCtx.font = (textProperties.fontStyle || "") + " " + (textProperties.fontVariant || "") + " " + (textProperties.fontWeight || "") + " " + textProperties.fontSize + " " + (textProperties.fontFamily || fallbackFontFamily), 
            canvasCtx.measureText(text || textProperties.text).width;
        }
        function measureSvgTextRect(textProperties, text) {
            return ensureDOM(), svgTextElement.style(null), svgTextElement.text(text || textProperties.text).attr({
                visibility: "hidden",
                "font-family": textProperties.fontFamily || fallbackFontFamily,
                "font-variant": textProperties.fontVariant,
                "font-size": textProperties.fontSize,
                "font-weight": textProperties.fontWeight,
                "font-style": textProperties.fontStyle,
                "white-space": textProperties.whiteSpace || "nowrap"
            }), powerbi.visuals.SVGUtil.tryGetBBox(svgTextElement.node());
        }
        function measureSvgTextHeight(textProperties, text) {
            var box = measureSvgTextRect(textProperties, text);
            return box ? box.height : 0;
        }
        function estimateSvgTextRect(textProperties) {
            var propertiesKey = textProperties.fontFamily + textProperties.fontSize, rect = powerbi.ephemeralStorageService.getData(propertiesKey);
            if (null == rect) {
                var estimatedTextProperties = {
                    fontFamily: textProperties.fontFamily,
                    fontSize: textProperties.fontSize,
                    text: "M"
                };
                rect = TextMeasurementService.measureSvgTextRect(estimatedTextProperties), rect.height > 0 && powerbi.ephemeralStorageService.setData(propertiesKey, rect);
            }
            return rect;
        }
        function estimateSvgTextBaselineDelta(textProperties) {
            var rect = estimateSvgTextRect(textProperties);
            return rect.y + rect.height;
        }
        function estimateSvgTextHeight(textProperties, tightFightForNumeric) {
            void 0 === tightFightForNumeric && (tightFightForNumeric = !1);
            var height = estimateSvgTextRect(textProperties).height;
            return tightFightForNumeric && (height *= .7), height;
        }
        function measureSvgTextElementWidth(svgElement) {
            return measureSvgTextWidth(getSvgMeasurementProperties(svgElement));
        }
        function getMeasurementProperties(element) {
            return {
                text: element.val() || element.text(),
                fontFamily: element.css("font-family"),
                fontSize: element.css("font-size"),
                fontWeight: element.css("font-weight"),
                fontStyle: element.css("font-style"),
                fontVariant: element.css("font-variant"),
                whiteSpace: element.css("white-space")
            };
        }
        function getSvgMeasurementProperties(svgElement) {
            var style = window.getComputedStyle(svgElement, null);
            return style ? {
                text: svgElement.textContent,
                fontFamily: style.fontFamily,
                fontSize: style.fontSize,
                fontWeight: style.fontWeight,
                fontStyle: style.fontStyle,
                fontVariant: style.fontVariant,
                whiteSpace: style.whiteSpace
            } : {
                text: svgElement.textContent,
                fontFamily: "",
                fontSize: "0"
            };
        }
        function getDivElementWidth(element) {
            var style = getComputedStyle(element[0]);
            return style ? style.width : "0";
        }
        function getTailoredTextOrDefault(textProperties, maxWidth) {
            ensureDOM();
            var text = textProperties.text;
            if (0 === text.length) return text;
            canvasCtx.font = (textProperties.fontStyle || "") + " " + (textProperties.fontVariant || "") + " " + (textProperties.fontWeight || "") + " " + textProperties.fontSize + " " + (textProperties.fontFamily || fallbackFontFamily);
            var width = canvasCtx.measureText(text).width;
            if (width <= maxWidth) return text;
            text = ellipsis + text;
            for (var min = 1, max = text.length; min < max; ) {
                var mid = min + max >> 1;
                width = canvasCtx.measureText(text.substr(0, mid)).width, maxWidth > width ? min = mid + 1 : maxWidth < width ? max = mid - 1 : (min = mid, 
                max = mid);
            }
            return width = canvasCtx.measureText(text.substr(0, min)).width, width > maxWidth && min--, 
            text.substr(ellipsis.length, min - ellipsis.length) + ellipsis;
        }
        function svgEllipsis(textElement, maxWidth) {
            var properties = getSvgMeasurementProperties(textElement), originalText = properties.text, tailoredText = getTailoredTextOrDefault(properties, maxWidth);
            originalText !== tailoredText && (textElement.textContent = tailoredText);
        }
        function wordBreak(textElement, maxWidth, maxHeight, linePadding) {
            void 0 === linePadding && (linePadding = 0), jsCommon.API.deprecated("powerbi.TextMeasurementService.wordBreak is deprecated. Use powerbi.visuals.TextUtil.wordBreak instead");
            var properties = getSvgMeasurementProperties(textElement), height = estimateSvgTextHeight(properties) + linePadding, maxNumLines = Math.max(1, Math.floor(maxHeight / height)), node = d3.select(textElement), firstDY = node.attr("y"), labelText = textElement.textContent;
            textElement.textContent = null;
            for (var words = jsCommon.WordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines), i = 0, ilen = words.length; i < ilen; i++) properties.text = words[i], 
            node.append("tspan").attr({
                x: 0,
                dy: 0 === i ? firstDY : height
            }).text(getTailoredTextOrDefault(properties, maxWidth));
        }
        function wordBreakOverflowingText(textElement, maxWidth, maxHeight, linePadding) {
            void 0 === linePadding && (linePadding = 0);
            var properties = getSvgMeasurementProperties(textElement), height = estimateSvgTextHeight(properties) + linePadding, maxNumLines = Math.max(1, Math.floor(maxHeight / height)), labelText = textElement.textContent;
            textElement.textContent = null;
            var words = jsCommon.WordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines), spanItem = d3.select(textElement).selectAll(OverflowingText.selector).data(words, (function(d) {
                return $.inArray(d, words);
            }));
            spanItem.enter().append("span").classed(OverflowingText.class, !0).text((function(d) {
                return d;
            })).style("width", jsCommon.PixelConverter.toString(maxWidth));
        }
        var spanElement, svgTextElement, canvasCtx, fallbackFontFamily, ellipsis = "…", OverflowingText = jsCommon.CssConstants.createClassAndSelector("overflowingText");
        TextMeasurementService.removeSpanElement = removeSpanElement, TextMeasurementService.measureSvgTextWidth = measureSvgTextWidth, 
        TextMeasurementService.measureSvgTextRect = measureSvgTextRect, TextMeasurementService.measureSvgTextHeight = measureSvgTextHeight, 
        TextMeasurementService.estimateSvgTextBaselineDelta = estimateSvgTextBaselineDelta, 
        TextMeasurementService.estimateSvgTextHeight = estimateSvgTextHeight, TextMeasurementService.measureSvgTextElementWidth = measureSvgTextElementWidth, 
        TextMeasurementService.getMeasurementProperties = getMeasurementProperties, TextMeasurementService.getSvgMeasurementProperties = getSvgMeasurementProperties, 
        TextMeasurementService.getDivElementWidth = getDivElementWidth, TextMeasurementService.getTailoredTextOrDefault = getTailoredTextOrDefault, 
        TextMeasurementService.svgEllipsis = svgEllipsis, TextMeasurementService.wordBreak = wordBreak, 
        TextMeasurementService.wordBreakOverflowingText = wordBreakOverflowingText;
    })(TextMeasurementService = powerbi.TextMeasurementService || (powerbi.TextMeasurementService = {}));
})(powerbi || (powerbi = {}));

var jsCommon;

!(function(jsCommon) {
    var KeyUtils;
    jsCommon.DOMConstants;
    !(function(KeyUtils) {
        function isArrowKey(keyCode) {
            return 40 === keyCode || 38 === keyCode || 37 === keyCode || 39 === keyCode;
        }
        function isCtrlShortcutKey(keyCode) {
            return 65 === keyCode || 67 === keyCode || 88 === keyCode || 86 === keyCode || 90 === keyCode || 89 === keyCode;
        }
        function isNudgeModifierKey(keyCode) {
            return 16 === keyCode;
        }
        function isDeleteKey(keyCode) {
            return 46 === keyCode;
        }
        KeyUtils.isArrowKey = isArrowKey, KeyUtils.isCtrlShortcutKey = isCtrlShortcutKey, 
        KeyUtils.isNudgeModifierKey = isNudgeModifierKey, KeyUtils.isDeleteKey = isDeleteKey;
    })(KeyUtils = jsCommon.KeyUtils || (jsCommon.KeyUtils = {}));
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    var TimerPromiseFactory = (function() {
        function TimerPromiseFactory() {}
        return TimerPromiseFactory.prototype.create = function(delayInMs) {
            var deferred = $.Deferred();
            return window.setTimeout((function() {
                return deferred.resolve();
            }), delayInMs), deferred;
        }, TimerPromiseFactory.instance = new TimerPromiseFactory(), TimerPromiseFactory;
    })();
    jsCommon.TimerPromiseFactory = TimerPromiseFactory;
})(jsCommon || (jsCommon = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var TouchUtils;
        !(function(TouchUtils) {
            function touchStartEventName() {
                var eventName = "touchstart";
                return window.PointerEvent && (eventName = "pointerdown"), eventName;
            }
            function touchEndEventName() {
                var eventName = "touchend";
                return window.PointerEvent && (eventName = "pointerup"), eventName;
            }
            function touchMoveEventName() {
                var eventName = "touchmove";
                return window.PointerEvent && (eventName = "pointermove"), eventName;
            }
            function usePointerEvents() {
                var eventName = touchStartEventName();
                return "pointerdown" === eventName || "MSPointerDown" === eventName;
            }
            TouchUtils.touchStartEventName = touchStartEventName, TouchUtils.touchEndEventName = touchEndEventName, 
            TouchUtils.touchMoveEventName = touchMoveEventName, TouchUtils.usePointerEvents = usePointerEvents;
        })(TouchUtils = visuals.TouchUtils || (visuals.TouchUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var jsCommon;

!(function(jsCommon) {
    var FileUtils;
    !(function(FileUtils) {
        function getFileExtension(filePath) {
            var index = _.lastIndexOf(filePath, ".");
            return index >= 0 ? filePath.substr(index + 1) : "";
        }
        function getFileWithoutExtension(filePath) {
            var index = _.lastIndexOf(filePath, ".");
            return index >= 0 ? filePath.substr(0, index) : filePath;
        }
        FileUtils.getFileExtension = getFileExtension, FileUtils.getFileWithoutExtension = getFileWithoutExtension;
    })(FileUtils = jsCommon.FileUtils || (jsCommon.FileUtils = {}));
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    var DomEventUtils;
    !(function(DomEventUtils) {
        function hasEventHandler(element, eventName) {
            if (_.isEmpty(element)) return !1;
            var events = $._data(element[0], "events");
            return !!events && events.hasOwnProperty(eventName);
        }
        function getEventTarget(e) {
            var target = e.target || e.srcElement;
            if (target) return 3 === target.nodeType && (target = target.parentNode), 1 === target.nodeType ? target : void 0;
        }
        DomEventUtils.hasEventHandler = hasEventHandler, DomEventUtils.getEventTarget = getEventTarget;
    })(DomEventUtils = jsCommon.DomEventUtils || (jsCommon.DomEventUtils = {}));
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    var TraceItem = (function() {
        function TraceItem(text, type, sessionId, requestId) {
            this.text = text, this.type = type, this.sessionId = sessionId, this.requestId = requestId, 
            this.timeStamp = new Date();
        }
        return TraceItem.prototype.toString = function() {
            var resultString = "";
            return resultString += TraceItem.traceTypeStrings[this.type] + " (" + this.timeStamp.toUTCString() + "): " + this.text, 
            this.requestId && (resultString += "\n(Request id: " + this.requestId + ")"), resultString;
        }, TraceItem.traceTypeStrings = [ "INFORMATION", "VERBOSE", "WARNING", "ERROR", "EXPECTEDERROR", "UNEXPECTEDERROR", "FATAL" ], 
        TraceItem;
    })();
    jsCommon.TraceItem = TraceItem;
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    var UrlUtils, Deprecated = jsCommon.Deprecated;
    !(function(UrlUtils) {
        function isValidHttpUrl(value) {
            if (_.isEmpty(value)) return !1;
            switch (getUrlScheme(value)) {
              case UrlScheme.http:
              case UrlScheme.https:
                return !0;

              default:
                return !1;
            }
        }
        function isValidImageUrl(url) {
            return isValidHttpUrl(url);
        }
        function isDataUri(uri) {
            return uri && 0 === uri.indexOf("data:");
        }
        function getBase64ContentFromDataUri(uri) {
            if (!isDataUri(uri)) throw new Error("Expected data uri");
            var base64Token = ";base64,", indexBase64TokenStart = uri.indexOf(base64Token);
            if (indexBase64TokenStart < 0) throw new Error("Expected base 64 content in data url");
            var indexBase64Start = indexBase64TokenStart + base64Token.length;
            return uri.substr(indexBase64Start, uri.length - indexBase64Start);
        }
        function makeUTF8EncodedBase64DataUri(contentType, rawText) {
            return "data:" + contentType + ";base64," + UrlUtils.utoa(rawText);
        }
        function makeJsonDataUri(rawJson) {
            return makeUTF8EncodedBase64DataUri("application/json", rawJson);
        }
        function getMIMEType(path) {
            var extension = path.split(".").pop().toLowerCase();
            return UrlUtils.MIMEMap[extension];
        }
        function escapeSlow(s) {
            return s ? s.replace(/[^*+\-.\/0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz]/g, (function(unescaped) {
                var escaped = unescaped.charCodeAt(0).toString(16).toUpperCase();
                switch (escaped.length) {
                  case 1:
                    return "%0" + escaped;

                  case 2:
                    return "%" + escaped;

                  case 3:
                    return "%u0" + escaped;

                  default:
                    return "%u" + escaped;
                }
            })) : s;
        }
        function unescapeSlow(s) {
            return s ? s.replace(/%([0-9a-fA-F]{2})|%u([0-9a-fA-F]{4})/g, (function(_, short, long) {
                return String.fromCharCode(parseInt(short || long, 16));
            })) : s;
        }
        function encodeUTF8(s) {
            return unescape(encodeURIComponent(s));
        }
        function decodeUTF8(s) {
            return decodeURIComponent(escape(s));
        }
        function utoa(s) {
            return btoa(encodeUTF8(s));
        }
        function atou(s) {
            return decodeUTF8(atob(s));
        }
        function getQueryParameters(url) {
            var query = getQueryString(url);
            if (query) return parseQueryString(query);
        }
        function setQueryParameters(url, parameters, keepExisting) {
            void 0 === keepExisting && (keepExisting = !1);
            var splitUrl = splitUrlAndQuery(url), result = splitUrl.baseUrl;
            if (keepExisting && _.assign(parameters, splitUrl.queryParameters), _.isEmpty(parameters)) return result;
            var expandedParameters = [];
            for (var key in parameters) {
                var value = parameters[key];
                if (null == value) expandedParameters.push(encodeURIComponent(key)); else if ("string" == typeof value) expandedParameters.push(encodeURIComponent(key) + "=" + encodeURIComponent(value)); else for (var _i = 0, _a = value; _i < _a.length; _i++) {
                    var onevalue = _a[_i];
                    expandedParameters.push(encodeURIComponent(key) + "=" + encodeURIComponent(onevalue));
                }
            }
            return result += "?" + expandedParameters.join("&");
        }
        function splitUrlAndQuery(url) {
            var queryString = getQueryString(url), baseUrl = queryString ? url.slice(0, url.lastIndexOf(queryString)) : url;
            return {
                baseUrl: baseUrl,
                queryParameters: parseQueryString(queryString)
            };
        }
        function parseUrl(url) {
            if (null == url) return {
                scheme: "",
                host: "",
                path: "",
                query: "",
                fragment: ""
            };
            var matches = url.match(/^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/);
            return matches ? {
                scheme: matches[1],
                host: matches[2],
                path: matches[3],
                query: matches[4],
                fragment: matches[5]
            } : void 0;
        }
        function getUrlScheme(content) {
            var urlParts = UrlUtils.parseUrl(content);
            if (null == urlParts || null == urlParts.scheme) return UrlScheme.NONE;
            switch (urlParts.scheme.toLowerCase()) {
              case "http":
                return UrlScheme.http;

              case "https":
                return UrlScheme.https;

              case "file":
                return UrlScheme.file;

              case "ftp":
                return UrlScheme.ftp;

              case "mailto":
                return UrlScheme.mailto;

              case "news":
                return UrlScheme.news;

              case "telnet":
                return UrlScheme.telnet;

              default:
                return UrlScheme.NONE;
            }
        }
        function getHost(url) {
            var parsed = parseUrl(url);
            return parsed && parsed.host;
        }
        function getAbsolutePath(url) {
            return url ? url.replace(HostnameRegex, "") : url;
        }
        function getQueryString(url) {
            var elem = document.createElement("a");
            return elem.href = url, elem.search;
        }
        function parseQueryString(queryString) {
            if (!queryString) return null;
            _.startsWith(queryString, "?") && (queryString = queryString.substring(1));
            for (var params = queryString.split("&"), result = {}, _i = 0, params_1 = params; _i < params_1.length; _i++) {
                var keyEqualsValue = params_1[_i], pair = keyEqualsValue.split("="), key = decodeURIComponent(pair[0]), value = decodeURIComponent(pair[1]), valueAlready = result[key];
                null == valueAlready ? result[key] = value : "string" == typeof valueAlready ? result[key] = [ valueAlready, value ] : valueAlready.push(value);
            }
            return result;
        }
        UrlUtils.isValidHttpUrl = isValidHttpUrl, UrlUtils.isValidImageUrl = isValidImageUrl, 
        UrlUtils.isDataUri = isDataUri, UrlUtils.getBase64ContentFromDataUri = getBase64ContentFromDataUri, 
        UrlUtils.makeUTF8EncodedBase64DataUri = makeUTF8EncodedBase64DataUri, UrlUtils.makeJsonDataUri = makeJsonDataUri, 
        UrlUtils.MIMEMap = {
            txt: "text/plain",
            css: "text/css",
            html: "text/html",
            gif: "image/gif",
            jpg: "image/jpg",
            png: "image/png",
            svg: "image/svg+xml"
        }, UrlUtils.getMIMEType = getMIMEType, UrlUtils.escapeSlow = escapeSlow, UrlUtils.unescapeSlow = unescapeSlow;
        var unescape = Deprecated.unescape || unescapeSlow, escape = Deprecated.escape || escapeSlow;
        UrlUtils.encodeUTF8 = encodeUTF8, UrlUtils.decodeUTF8 = decodeUTF8, UrlUtils.utoa = utoa, 
        UrlUtils.atou = atou, UrlUtils.getQueryParameters = getQueryParameters, UrlUtils.setQueryParameters = setQueryParameters, 
        UrlUtils.splitUrlAndQuery = splitUrlAndQuery, UrlUtils.parseUrl = parseUrl;
        var UrlScheme;
        !(function(UrlScheme) {
            UrlScheme[UrlScheme.NONE = 0] = "NONE", UrlScheme[UrlScheme.http = 1] = "http", 
            UrlScheme[UrlScheme.https = 2] = "https", UrlScheme[UrlScheme.file = 3] = "file", 
            UrlScheme[UrlScheme.ftp = 4] = "ftp", UrlScheme[UrlScheme.mailto = 5] = "mailto", 
            UrlScheme[UrlScheme.news = 6] = "news", UrlScheme[UrlScheme.telnet = 7] = "telnet";
        })(UrlScheme = UrlUtils.UrlScheme || (UrlUtils.UrlScheme = {})), UrlUtils.getUrlScheme = getUrlScheme, 
        UrlUtils.getHost = getHost;
        var HostnameRegex = /https?:\/\/[^\/]+/i;
        UrlUtils.getAbsolutePath = getAbsolutePath;
    })(UrlUtils = jsCommon.UrlUtils || (jsCommon.UrlUtils = {}));
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    var BrowserUtils;
    !(function(BrowserUtils) {
        function isChrome() {
            var vendorName = window.navigator.vendor || "", userAgent = window.navigator.userAgent.toLowerCase();
            return vendorName.toLowerCase().indexOf("google") > -1 && userAgent.indexOf("chrome") > -1 && userAgent.indexOf("edge") === -1 && userAgent.indexOf("opr") === -1;
        }
        function isInternetExplorerOrEdge() {
            var userAgent = window.navigator.userAgent.toLowerCase();
            return userAgent.indexOf("msie") > -1 || userAgent.indexOf("trident") > -1 || userAgent.indexOf("edge") > -1;
        }
        function getInternetExplorerVersion() {
            var retValue = 0;
            if ("Microsoft Internet Explorer" === navigator.appName || window.navigator.userAgent.indexOf("MSIE") >= 0) {
                var re = new RegExp("MSIE ([0-9]{1,}[\\.0-9]{0,})"), result = re.exec(window.navigator.userAgent);
                result && (retValue = parseFloat(result[1]));
            }
            return retValue;
        }
        function isFirefox() {
            return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
        }
        BrowserUtils.isChrome = isChrome, BrowserUtils.isInternetExplorerOrEdge = isInternetExplorerOrEdge, 
        BrowserUtils.getInternetExplorerVersion = getInternetExplorerVersion, BrowserUtils.isFirefox = isFirefox;
    })(BrowserUtils = jsCommon.BrowserUtils || (jsCommon.BrowserUtils = {}));
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    var EnumExtensions;
    !(function(EnumExtensions) {
        function hasFlag(value, flag) {
            return (value & flag) === flag;
        }
        function setFlag(value, flag) {
            return value |= flag;
        }
        function resetFlag(value, flag) {
            return value &= ~flag;
        }
        function toString(enumType, value) {
            return enumType[value];
        }
        function getBitCount(value) {
            if (null === value || value % 1 !== 0) return 0;
            for (var bitCount = 0, shiftingValue = value; 0 !== shiftingValue; ) 1 === (1 & shiftingValue) && bitCount++, 
            shiftingValue >>>= 1;
            return bitCount;
        }
        EnumExtensions.hasFlag = hasFlag, EnumExtensions.setFlag = setFlag, EnumExtensions.resetFlag = resetFlag, 
        EnumExtensions.toString = toString, EnumExtensions.getBitCount = getBitCount;
    })(EnumExtensions = jsCommon.EnumExtensions || (jsCommon.EnumExtensions = {}));
    var LogicExtensions;
    !(function(LogicExtensions) {
        function XOR(a, b) {
            return (a || b) && !(a && b);
        }
        LogicExtensions.XOR = XOR;
    })(LogicExtensions = jsCommon.LogicExtensions || (jsCommon.LogicExtensions = {}));
    var JsonComparer;
    !(function(JsonComparer) {
        function equals(x, y) {
            return x === y || JSON.stringify(x) === JSON.stringify(y);
        }
        JsonComparer.equals = equals;
    })(JsonComparer = jsCommon.JsonComparer || (jsCommon.JsonComparer = {}));
    var TextSizeDefaults;
    !(function(TextSizeDefaults) {
        function getScale(textSize) {
            return (textSize - TextSizeDefaults.TextSizeMin) / TextSizeRange;
        }
        TextSizeDefaults.TextSizeMin = 8, TextSizeDefaults.TextSizeMax = 40;
        var TextSizeRange = TextSizeDefaults.TextSizeMax - TextSizeDefaults.TextSizeMin;
        TextSizeDefaults.getScale = getScale;
    })(TextSizeDefaults = jsCommon.TextSizeDefaults || (jsCommon.TextSizeDefaults = {}));
    var PixelConverter;
    !(function(PixelConverter) {
        function toString(px) {
            return px + PixelString;
        }
        function fromPoint(pt) {
            return toString(fromPointToPixel(pt));
        }
        function fromPointToPixel(pt) {
            return PixelConverter.PxPtRatio * pt;
        }
        function toPoint(px) {
            return px / PixelConverter.PxPtRatio;
        }
        PixelConverter.PxPtRatio = 4 / 3;
        var PixelString = "px";
        PixelConverter.toString = toString, PixelConverter.fromPoint = fromPoint, PixelConverter.fromPointToPixel = fromPointToPixel, 
        PixelConverter.toPoint = toPoint;
    })(PixelConverter = jsCommon.PixelConverter || (jsCommon.PixelConverter = {}));
    var RegExpExtensions;
    !(function(RegExpExtensions) {
        function run(regex, value, start) {
            return regex.lastIndex = start || 0, regex.exec(value);
        }
        RegExpExtensions.run = run;
    })(RegExpExtensions = jsCommon.RegExpExtensions || (jsCommon.RegExpExtensions = {}));
})(jsCommon || (jsCommon = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var utility;
        !(function(utility) {
            var StyleUtils;
            !(function(StyleUtils) {
                function getRotateAngleFromElement(element) {
                    var rawElemStyle = element.get(0).style, transformString = rawElemStyle.transform || rawElemStyle.webkitTransform;
                    if (transformString) {
                        var transform = transformString.match(/rotate\((-?\d+(?:\.\d*)?)deg\)/);
                        if (transform) return parseFloat(transform[1]);
                    }
                    return 0;
                }
                function getTranslateTransformFromElement(element) {
                    var rawElemStyle = element.get(0).style, transformString = rawElemStyle.transform || rawElemStyle.webkitTransform, retValue = {
                        x: 0,
                        y: 0
                    };
                    if (transformString && transformString.length > 0) {
                        var transform = transformString.match(/translate\((-?\d+(?:\.\d*)?)px, (-?\d+(?:\.\d*)?)px\)/);
                        transform && (retValue.x = parseFloat(transform[1]), retValue.y = parseFloat(transform[2]));
                    }
                    return retValue;
                }
                function getPadding(element) {
                    if (element) return {
                        left: parseFloat(element.css("padding-left")) || 0,
                        right: parseFloat(element.css("padding-right")) || 0,
                        top: parseFloat(element.css("padding-top")) || 0,
                        bottom: parseFloat(element.css("padding-bottom")) || 0
                    };
                }
                StyleUtils.getRotateAngleFromElement = getRotateAngleFromElement, StyleUtils.getTranslateTransformFromElement = getTranslateTransformFromElement, 
                StyleUtils.getPadding = getPadding;
            })(StyleUtils = utility.StyleUtils || (utility.StyleUtils = {}));
        })(utility = visuals.utility || (visuals.utility = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var SVGUtil;
        !(function(SVGUtil) {
            function translate(x, y) {
                return "translate(" + x + "," + y + ")";
            }
            function translateXWithPixels(x) {
                return "translateX(" + x + "px)";
            }
            function translateWithPixels(x, y) {
                return "translate(" + x + "px," + y + "px)";
            }
            function translateAndRotate(x, y, px, py, angle) {
                return "translate(" + x + "," + y + ") rotate(" + angle + "," + px + "," + py + ")";
            }
            function scale(scale) {
                return "scale(" + scale + ")";
            }
            function translateAndScale(x, y, ratio) {
                return "translate(" + x + "," + y + ") scale(" + ratio + ")";
            }
            function transformOrigin(xOffset, yOffset) {
                return xOffset + " " + yOffset;
            }
            function flushAllD3Transitions() {
                var now = Date.now;
                Date.now = function() {
                    return 1 / 0;
                }, d3.timer.flush(), Date.now = now;
            }
            function flushAllD3TransitionsIfNeeded(options) {
                if (options) {
                    var animationOptions = options, asVisualInitOptions = options;
                    asVisualInitOptions.animation && (animationOptions = asVisualInitOptions.animation), 
                    animationOptions && animationOptions.transitionImmediate && flushAllD3Transitions();
                }
            }
            function ensureValidSVGPoint(point) {
                isNaN(point.x) && (point.x = 0), isNaN(point.y) && (point.y = 0);
            }
            function parseTranslateTransform(input) {
                if (!input || 0 === input.length) return {
                    x: "0",
                    y: "0"
                };
                var xValue, translateCoordinates = input.split(/[\s,]+/), yValue = "0", xCoord = translateCoordinates[0];
                if (1 === translateCoordinates.length) xValue = xCoord.substring(10, xCoord.length - 1); else {
                    var yCoord = translateCoordinates[1];
                    yValue = yCoord.substring(0, yCoord.length - 1), xValue = xCoord.substring(10, xCoord.length);
                }
                return {
                    x: xValue,
                    y: yValue
                };
            }
            function createArrow(width, height, rotate) {
                var transform = "rotate(" + rotate + " " + width / 2 + " " + height / 2 + ")", path = "M0 0";
                return path += "L0 " + height, path += "L" + width + " " + height / 2 + " Z", {
                    path: path,
                    transform: transform
                };
            }
            function getTransformScaleRatios(svgElement) {
                if (null != svgElement) {
                    var scaledRect = svgElement.getBoundingClientRect(), domRect = SVGUtil.tryGetBBox(svgElement);
                    if (domRect.height > 0 && domRect.width > 0) return {
                        x: scaledRect.width / domRect.width,
                        y: scaledRect.height / domRect.height
                    };
                }
                return {
                    x: 1,
                    y: 1
                };
            }
            function tryGetBBox(element) {
                var rect;
                try {
                    rect = element.getBBox();
                } catch (e) {}
                return rect || getEmptyRect();
            }
            function getEmptyRect() {
                return {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                };
            }
            SVGUtil.AlmostZero = 1e-6, SVGUtil.translate = translate, SVGUtil.translateXWithPixels = translateXWithPixels, 
            SVGUtil.translateWithPixels = translateWithPixels, SVGUtil.translateAndRotate = translateAndRotate, 
            SVGUtil.scale = scale, SVGUtil.translateAndScale = translateAndScale, SVGUtil.transformOrigin = transformOrigin, 
            SVGUtil.flushAllD3Transitions = flushAllD3Transitions, SVGUtil.flushAllD3TransitionsIfNeeded = flushAllD3TransitionsIfNeeded, 
            SVGUtil.ensureValidSVGPoint = ensureValidSVGPoint, SVGUtil.parseTranslateTransform = parseTranslateTransform, 
            SVGUtil.createArrow = createArrow, SVGUtil.getTransformScaleRatios = getTransformScaleRatios, 
            SVGUtil.tryGetBBox = tryGetBBox;
        })(SVGUtil = visuals.SVGUtil || (visuals.SVGUtil = {}));
        var SVGScaleDetector = (function() {
            function SVGScaleDetector(svgElement) {
                this.scaleDetectorElement = svgElement.append("rect").classed("scale-detector", !0).attr({
                    width: 1,
                    height: 1,
                    "stroke-width": "0px",
                    fill: "none"
                }).node();
            }
            return SVGScaleDetector.prototype.getScale = function() {
                var scaledRect = this.scaleDetectorElement.getBoundingClientRect(), domRect = SVGUtil.tryGetBBox(this.scaleDetectorElement);
                return domRect.height > 0 && domRect.width > 0 ? {
                    x: scaledRect.width / domRect.width,
                    y: scaledRect.height / domRect.height
                } : {
                    x: 1,
                    y: 1
                };
            }, SVGScaleDetector;
        })();
        visuals.SVGScaleDetector = SVGScaleDetector;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var jsCommon;

!(function(jsCommon) {
    var FreezeUtility;
    !(function(FreezeUtility) {
        function deepFreeze(obj) {
            Object.freeze(obj);
            for (var _i = 0, _a = Object.getOwnPropertyNames(obj); _i < _a.length; _i++) {
                var property = _a[_i], value = obj[property];
                value && "object" == typeof value && deepFreeze(value);
            }
        }
        FreezeUtility.deepFreeze = deepFreeze;
    })(FreezeUtility = jsCommon.FreezeUtility || (jsCommon.FreezeUtility = {}));
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    var ConsoleTracer = (function() {
        function ConsoleTracer() {}
        return ConsoleTracer.prototype.logTrace = function(trace) {
            if (window.DEBUG) switch (trace.type) {
              case jsCommon.TraceType.Information:
                break;

              case jsCommon.TraceType.UnexpectedError:
              case jsCommon.TraceType.Error:
              case jsCommon.TraceType.Fatal:
                break;

              case jsCommon.TraceType.ExpectedError:
              case jsCommon.TraceType.Warning:
                break;

              case jsCommon.TraceType.Verbose:            }
        }, ConsoleTracer;
    })();
    jsCommon.ConsoleTracer = ConsoleTracer;
    var Trace;
    !(function(Trace) {
        function warning(text, requestId) {
            logTraceInternal(new jsCommon.TraceItem(text, jsCommon.TraceType.Warning, requestId));
        }
        function error(text, includeStackTrace, requestId) {
            includeStackTrace && (text = jsCommon.StringExtensions.format("{0}.\nStack:\n{1}", text, jsCommon.getStackTrace())), 
            logTraceInternal(new jsCommon.TraceItem(text, jsCommon.TraceType.Error, requestId));
        }
        function verbose(text, requestId) {
            logTraceInternal(new jsCommon.TraceItem(text, jsCommon.TraceType.Verbose, requestId));
        }
        function addListener(listener) {
            listeners.push(listener);
        }
        function removeListener(listener) {
            var index = listeners.indexOf(listener);
            index >= 0 && listeners.splice(index, 1);
        }
        function resetListeners() {
            listeners = new Array(defaultListener);
        }
        function reset() {
            lastTraceIndex = -1;
        }
        function getTraces() {
            if (!(lastTraceIndex < 0)) {
                for (var result = new Array(lastTraceIndex + 1), i = 0; i <= lastTraceIndex; i++) result[i] = traces[i];
                return result;
            }
        }
        function disableDefaultListener() {
            removeListener(defaultListener);
        }
        function enableDefaultListener() {
            addListener(defaultListener);
        }
        function logTraceInternal(trace) {
            lastTraceIndex + 1 >= traceMaxCount && reset(), traces[++lastTraceIndex] = trace;
            for (var i = 0, len = listeners.length; i < len; i++) listeners[i].logTrace(trace);
        }
        var traceMaxCount = 1e3, traces = new Array(traceMaxCount), lastTraceIndex = -1, defaultListener = new ConsoleTracer(), listeners = new Array(defaultListener);
        Trace.warning = warning, Trace.error = error, Trace.verbose = verbose, Trace.addListener = addListener, 
        Trace.removeListener = removeListener, Trace.resetListeners = resetListeners, Trace.reset = reset, 
        Trace.getTraces = getTraces, Trace.disableDefaultListener = disableDefaultListener, 
        Trace.enableDefaultListener = enableDefaultListener;
    })(Trace = jsCommon.Trace || (jsCommon.Trace = {}));
})(jsCommon || (jsCommon = {}));

var jsCommon;

!(function(jsCommon) {
    var TraceType;
    !(function(TraceType) {
        TraceType[TraceType.Information = 0] = "Information", TraceType[TraceType.Verbose = 1] = "Verbose", 
        TraceType[TraceType.Warning = 2] = "Warning", TraceType[TraceType.Error = 3] = "Error", 
        TraceType[TraceType.ExpectedError = 4] = "ExpectedError", TraceType[TraceType.UnexpectedError = 5] = "UnexpectedError", 
        TraceType[TraceType.Fatal = 6] = "Fatal";
    })(TraceType = jsCommon.TraceType || (jsCommon.TraceType = {}));
})(jsCommon || (jsCommon = {}));

var powerbi;

!(function(powerbi) {
    function ensureMap(promiseFactory, loader, bingMapBaseUrl, locale) {
        if (WaitForMSMapLoad) return WaitForMSMapLoad.promise;
        bingMapBaseUrl = jsCommon.UrlUtils.setQueryParameters(bingMapBaseUrl, {
            onscriptload: "globalMapControlLoaded",
            callback: "globalMapControlLoaded"
        }, !0);
        var bingMapUrl = bingMapBaseUrl, baseUrlParameters = jsCommon.UrlUtils.getQueryParameters(bingMapBaseUrl), culture = baseUrlParameters.c || baseUrlParameters.culture || locale;
        if (!_.isEmpty(culture)) {
            var cultureSplit = culture.split("-", 2), localizationParameters = {
                mkt: locale || culture,
                ur: cultureSplit.length > 1 ? cultureSplit[1] : culture,
                c: culture
            };
            bingMapUrl = jsCommon.UrlUtils.setQueryParameters(bingMapBaseUrl, localizationParameters, !0);
        }
        return WaitForMSMapLoad = promiseFactory.defer(), loader.require({
            javascript: bingMapUrl
        }), WaitForMSMapLoad.promise;
    }
    function mapControlLoaded() {
        WaitForMSMapLoad.resolve(void 0);
    }
    var WaitForMSMapLoad;
    powerbi.ensureMap = ensureMap, powerbi.mapControlLoaded = mapControlLoaded;
})(powerbi || (powerbi = {})), window.globalMapControlLoaded = function() {
    powerbi.mapControlLoaded();
};

var InJs;

!(function(InJs) {
    var TraceType;
    !(function(TraceType) {
        TraceType[TraceType.information = 0] = "information", TraceType[TraceType.verbose = 1] = "verbose", 
        TraceType[TraceType.warning = 2] = "warning", TraceType[TraceType.error = 3] = "error", 
        TraceType[TraceType.expectedError = 4] = "expectedError", TraceType[TraceType.unexpectedError = 5] = "unexpectedError", 
        TraceType[TraceType.fatal = 6] = "fatal";
    })(TraceType = InJs.TraceType || (InJs.TraceType = {}));
})(InJs || (InJs = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var Point = (function() {
            function Point(x, y) {
                this.x = x || 0, this.y = y || 0;
            }
            return Point;
        })();
        visuals.Point = Point;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var Rect = (function() {
            function Rect(left, top, width, height) {
                this.left = left || 0, this.top = top || 0, this.width = width || 0, this.height = height || 0;
            }
            return Rect;
        })();
        visuals.Rect = Rect;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var shapes;
        !(function(shapes) {
            var Utility = jsCommon.Utility, Polygon = (function() {
                function Polygon(absolutePoints) {
                    this.polygonPoints = this.convertArrayPathToPoints(absolutePoints);
                }
                return Polygon.prototype.absoluteCentroid = function() {
                    return null == this._absoluteCentroid && (this._absoluteCentroid = this.calculatePolygonCentroid()), 
                    this._absoluteCentroid;
                }, Polygon.prototype.absoluteBoundingRect = function() {
                    return null == this._absoluteBoundingRect && (this._absoluteBoundingRect = this.calculateBoundingRect()), 
                    this._absoluteBoundingRect;
                }, Polygon.prototype.contains = function(rect) {
                    var topLeft = {
                        x: rect.left,
                        y: rect.top
                    }, topRight = {
                        x: rect.left + rect.width,
                        y: rect.top
                    }, bottomLeft = {
                        x: rect.left,
                        y: rect.top + rect.height
                    }, bottomRight = {
                        x: rect.left + rect.width,
                        y: rect.top + rect.height
                    };
                    return this.inside(topLeft) && this.inside(topRight) && this.inside(bottomLeft) && this.inside(bottomRight);
                }, Polygon.prototype.conflicts = function(rect) {
                    if (!this.isConflictWithBoundingBox(rect)) return !1;
                    var topLeft = {
                        x: rect.left,
                        y: rect.top
                    }, topCenter = {
                        x: rect.left + rect.width / 2,
                        y: rect.top
                    }, topRight = {
                        x: rect.left + rect.width,
                        y: rect.top
                    }, bottomLeft = {
                        x: rect.left,
                        y: rect.top + rect.height
                    }, bottomCenter = {
                        x: rect.left + rect.width / 2,
                        y: rect.top + rect.height
                    }, bottomRight = {
                        x: rect.left + rect.width,
                        y: rect.top + rect.height
                    }, middleLeft = {
                        x: rect.left,
                        y: rect.top + rect.height / 2
                    }, middleRight = {
                        x: rect.left + rect.width,
                        y: rect.top + rect.height / 2
                    };
                    return this.inside(topLeft) || this.inside(topCenter) || this.inside(topRight) || this.inside(bottomLeft) || this.inside(bottomCenter) || this.inside(bottomRight) || this.inside(middleLeft) || this.inside(middleRight);
                }, Polygon.prototype.lineIntersectionPoint = function(p0, p1) {
                    for (var i = 0; i < this.polygonPoints.length; i++) {
                        var p2 = this.polygonPoints[i], p3 = i === this.polygonPoints.length - 1 ? this.polygonPoints[0] : this.polygonPoints[i + 1], intersection = this.getLineIntersection(p0, p1, p2, p3);
                        if (null !== intersection) return intersection;
                    }
                    return null;
                }, Polygon.calculateAbsolutePolygonArea = function(polygonPoints) {
                    var i, j = 1, area = 0;
                    for (i = 0; i < polygonPoints.length; i++) area += polygonPoints[i].x * polygonPoints[j].y - polygonPoints[j].x * polygonPoints[i].y, 
                    j = (j + 1) % polygonPoints.length;
                    return area *= .5;
                }, Polygon.prototype.isConflictWithBoundingBox = function(rect) {
                    return Rect.isIntersecting(this.absoluteBoundingRect(), rect);
                }, Polygon.prototype.calculatePolygonCentroid = function() {
                    var area, tempPoint, cx, cy, i, j;
                    for (area = Polygon.calculateAbsolutePolygonArea(this.polygonPoints), cx = cy = 0, 
                    j = 1, i = 0; i < this.polygonPoints.length; i++) tempPoint = this.polygonPoints[i].x * this.polygonPoints[j].y - this.polygonPoints[j].x * this.polygonPoints[i].y, 
                    cx += (this.polygonPoints[i].x + this.polygonPoints[j].x) * tempPoint, cy += (this.polygonPoints[i].y + this.polygonPoints[j].y) * tempPoint, 
                    j = (j + 1) % this.polygonPoints.length;
                    return cx /= 6 * area, cy /= 6 * area, {
                        x: cx,
                        y: cy
                    };
                }, Polygon.prototype.calculateBoundingRect = function() {
                    for (var minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY, _i = 0, _a = this.polygonPoints; _i < _a.length; _i++) {
                        var polygonPoint = _a[_i];
                        polygonPoint.x < minX ? minX = polygonPoint.x : polygonPoint.x > maxX && (maxX = polygonPoint.x), 
                        polygonPoint.y < minY ? minY = polygonPoint.y : polygonPoint.y > maxY && (maxY = polygonPoint.y);
                    }
                    return {
                        left: minX,
                        top: minY,
                        width: maxX - minX,
                        height: maxY - minY
                    };
                }, Polygon.prototype.inside = function(point) {
                    for (var x = point.x, y = point.y, insideVar = !1, i = 0, j = this.polygonPoints.length - 1; i < this.polygonPoints.length; j = i++) {
                        var xi = this.polygonPoints[i].x, yi = this.polygonPoints[i].y, xj = this.polygonPoints[j].x, yj = this.polygonPoints[j].y, intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
                        intersect && (insideVar = !insideVar);
                    }
                    return insideVar;
                }, Polygon.prototype.getLineIntersection = function(line0p1, line0p2, line1p1, line1p2) {
                    var p0_x = line0p1.x, p0_y = line0p1.y, p1_x = line0p2.x, p1_y = line0p2.y, p2_x = line1p1.x, p2_y = line1p1.y, p3_x = line1p2.x, p3_y = line1p2.y, s1_x = p1_x - p0_x, s1_y = p1_y - p0_y, s2_x = p3_x - p2_x, s2_y = p3_y - p2_y, s = (-s1_y * (p0_x - p2_x) + s1_x * (p0_y - p2_y)) / (-s2_x * s1_y + s1_x * s2_y), t = (s2_x * (p0_y - p2_y) - s2_y * (p0_x - p2_x)) / (-s2_x * s1_y + s1_x * s2_y);
                    return s >= 0 && s <= 1 && t >= 0 && t <= 1 ? {
                        x: p0_x + t * s1_x,
                        y: p0_y + t * s1_y
                    } : null;
                }, Polygon.prototype.convertArrayPathToPoints = function(path) {
                    for (var pointsRes = [], i = 0; i < path.length; i += 2) {
                        var x = path[i], y = path[i + 1], newPoint = {
                            x: x,
                            y: y
                        };
                        pointsRes.push(newPoint);
                    }
                    return pointsRes;
                }, Polygon;
            })();
            shapes.Polygon = Polygon;
            var Point;
            !(function(Point) {
                function offset(point, offsetX, offsetY) {
                    var newPointX = point.x + offsetX >= 0 ? point.x + offsetX : 0, newPointY = point.y + offsetY >= 0 ? point.y + offsetY : 0;
                    return {
                        x: newPointX,
                        y: newPointY
                    };
                }
                function equals(point, other) {
                    return void 0 !== point && null !== point && void 0 !== other && null !== other && point.x === other.x && point.y === other.y;
                }
                function clone(point) {
                    return null !== point ? {
                        x: point.x,
                        y: point.y
                    } : null;
                }
                function toString(point) {
                    return "{x:" + point.x + ", y:" + point.y + "}";
                }
                function serialize(point) {
                    return point.x + "," + point.y;
                }
                function getDistance(point, other) {
                    if (null === point || null === other) return null;
                    var diffX = other.x - point.x, diffY = other.y - point.y;
                    return Math.sqrt(diffX * diffX + diffY * diffY);
                }
                function equalWithPrecision(point1, point2) {
                    return point1 === point2 || void 0 !== point1 && void 0 !== point2 && powerbi.Double.equalWithPrecision(point1.x, point2.x) && powerbi.Double.equalWithPrecision(point1.y, point2.y);
                }
                function parsePoint(value, defaultValue) {
                    if (null === value) return void 0 === defaultValue ? null : defaultValue;
                    if (void 0 === value) return void 0 === defaultValue ? null : defaultValue;
                    if (2 === value.length) return {
                        x: Utility.parseNumber(value[0]),
                        y: Utility.parseNumber(value[1])
                    };
                    if ("string" == typeof value) {
                        var parts = value.split(",");
                        return 2 !== parts.length ? void 0 === defaultValue ? null : defaultValue : {
                            x: Utility.parseNumber(parts[0]),
                            y: Utility.parseNumber(parts[1])
                        };
                    }
                    return 2 !== value.length && "string" != typeof value ? void 0 === defaultValue ? null : defaultValue : {
                        x: Utility.parseNumber(value.x),
                        y: Utility.parseNumber(value.y)
                    };
                }
                Point.offset = offset, Point.equals = equals, Point.clone = clone, Point.toString = toString, 
                Point.serialize = serialize, Point.getDistance = getDistance, Point.equalWithPrecision = equalWithPrecision, 
                Point.parsePoint = parsePoint;
            })(Point = shapes.Point || (shapes.Point = {}));
            var Size;
            !(function(Size) {
                function isEmpty(size) {
                    return 0 === size.width && 0 === size.height;
                }
                function equals(size, other) {
                    return void 0 !== size && null !== size && void 0 !== other && null !== other && size.width === other.width && size.height === other.height;
                }
                function clone(size) {
                    return null !== size ? {
                        width: size.width,
                        height: size.height
                    } : null;
                }
                function inflate(size, padding) {
                    var result = clone(size);
                    return padding && (result.width += padding.left + padding.right, result.height += padding.top + padding.bottom), 
                    result;
                }
                function deflate(size, padding) {
                    var result = clone(size);
                    return padding && (result.width = result.width - padding.left - padding.right, result.width < 0 && (result.width = 0), 
                    result.height = result.height - padding.top - padding.bottom, result.height < 0 && (result.height = 0)), 
                    result;
                }
                function combine(size, other) {
                    return other && (size.width = Math.max(size.width, other.width), size.height = Math.max(size.height, other.height)), 
                    size;
                }
                function toRect(size) {
                    return {
                        left: 0,
                        top: 0,
                        width: size.width,
                        height: size.height
                    };
                }
                function toString(size) {
                    return "{width:" + size.width + ", height:" + size.height + "}";
                }
                function equal(size1, size2) {
                    return size1 === size2 || void 0 !== size1 && void 0 !== size2 && size1.width === size2.width && size1.height === size2.height;
                }
                function equalWithPrecision(size1, size2) {
                    return size1 === size2 || void 0 !== size1 && void 0 !== size2 && powerbi.Double.equalWithPrecision(size1.width, size2.width) && powerbi.Double.equalWithPrecision(size1.height, size2.height);
                }
                function parseSize(value, defaultValue) {
                    if (null === value) return void 0 === defaultValue ? null : defaultValue;
                    if (void 0 === value) return void 0 === defaultValue ? null : defaultValue;
                    if (2 === value.length) return {
                        width: Utility.parseNumber(value[0]),
                        height: Utility.parseNumber(value[1])
                    };
                    if ("string" == typeof value) {
                        var parts = value.split(",");
                        return 2 !== parts.length ? void 0 === defaultValue ? null : defaultValue : {
                            width: Utility.parseNumber(parts[0]),
                            height: Utility.parseNumber(parts[1])
                        };
                    }
                    return 2 !== value.length && "string" != typeof value ? void 0 === defaultValue ? null : defaultValue : {
                        width: Utility.parseNumber(value.width),
                        height: Utility.parseNumber(value.height)
                    };
                }
                Size.isEmpty = isEmpty, Size.equals = equals, Size.clone = clone, Size.inflate = inflate, 
                Size.deflate = deflate, Size.combine = combine, Size.toRect = toRect, Size.toString = toString, 
                Size.equal = equal, Size.equalWithPrecision = equalWithPrecision, Size.parseSize = parseSize;
            })(Size = shapes.Size || (shapes.Size = {}));
            var Rect;
            !(function(Rect) {
                function getOffset(rect) {
                    return {
                        x: rect.left,
                        y: rect.top
                    };
                }
                function getSize(rect) {
                    return {
                        width: rect.width,
                        height: rect.height
                    };
                }
                function setSize(rect, value) {
                    rect.width = value.width, rect.height = value.height;
                }
                function right(rect) {
                    return rect.left + rect.width;
                }
                function bottom(rect) {
                    return rect.top + rect.height;
                }
                function topLeft(rect) {
                    return {
                        x: rect.left,
                        y: rect.top
                    };
                }
                function topRight(rect) {
                    return {
                        x: rect.left + rect.width,
                        y: rect.top
                    };
                }
                function bottomLeft(rect) {
                    return {
                        x: rect.left,
                        y: rect.top + rect.height
                    };
                }
                function bottomRight(rect) {
                    return {
                        x: rect.left + rect.width,
                        y: rect.top + rect.height
                    };
                }
                function equals(rect, other) {
                    return void 0 !== other && null !== other && rect.left === other.left && rect.top === other.top && rect.width === other.width && rect.height === other.height;
                }
                function clone(rect) {
                    return null !== rect ? {
                        left: rect.left,
                        top: rect.top,
                        width: rect.width,
                        height: rect.height
                    } : null;
                }
                function toString(rect) {
                    return "{left:" + rect.left + ", top:" + rect.top + ", width:" + rect.width + ", height:" + rect.height + "}";
                }
                function offset(rect, offsetX, offsetY) {
                    var newLeft = rect.left + offsetX >= 0 ? rect.left + offsetX : 0, newTop = rect.top + offsetY >= 0 ? rect.top + offsetY : 0;
                    return {
                        left: newLeft,
                        top: newTop,
                        width: rect.width,
                        height: rect.height
                    };
                }
                function add(rect, rect2) {
                    return {
                        left: rect.left + rect2.left,
                        top: rect.top + rect2.top,
                        height: rect.height + rect2.height,
                        width: rect.width + rect2.width
                    };
                }
                function subtract(rect, rect2) {
                    return {
                        left: rect.left - rect2.left,
                        top: rect.top - rect2.top,
                        height: rect.height - rect2.height,
                        width: rect.width - rect2.width
                    };
                }
                function inflate(rect, padding) {
                    var result = clone(rect);
                    return padding && (result.left -= padding.left, result.top -= padding.top, result.width += padding.left + padding.right, 
                    result.height += padding.top + padding.bottom), result;
                }
                function deflate(rect, padding) {
                    var result = clone(rect);
                    return padding && (result.left += padding.left, result.top += padding.top, result.width -= padding.left + padding.right, 
                    result.height -= padding.top + padding.bottom), result;
                }
                function inflateBy(rect, padding) {
                    return {
                        left: rect.left - padding,
                        top: rect.top - padding,
                        width: rect.width + padding + padding,
                        height: rect.height + padding + padding
                    };
                }
                function deflateBy(rect, padding) {
                    return {
                        left: rect.left + padding,
                        top: rect.top + padding,
                        width: rect.width - padding - padding,
                        height: rect.height - padding - padding
                    };
                }
                function getClosestPoint(rect, x, y) {
                    return {
                        x: Math.min(Math.max(rect.left, x), rect.left + rect.width),
                        y: Math.min(Math.max(rect.top, y), rect.top + rect.height)
                    };
                }
                function equal(rect1, rect2) {
                    return rect1 === rect2 || void 0 !== rect1 && void 0 !== rect2 && rect1.left === rect2.left && rect1.top === rect2.top && rect1.width === rect2.width && rect1.height === rect2.height;
                }
                function equalWithPrecision(rect1, rect2) {
                    return rect1 === rect2 || void 0 !== rect1 && void 0 !== rect2 && powerbi.Double.equalWithPrecision(rect1.left, rect2.left) && powerbi.Double.equalWithPrecision(rect1.top, rect2.top) && powerbi.Double.equalWithPrecision(rect1.width, rect2.width) && powerbi.Double.equalWithPrecision(rect1.height, rect2.height);
                }
                function isEmpty(rect) {
                    return void 0 === rect || null === rect || 0 === rect.width && 0 === rect.height;
                }
                function containsPoint(rect, point) {
                    return null !== rect && null !== point && (powerbi.Double.lessOrEqualWithPrecision(rect.left, point.x) && powerbi.Double.lessOrEqualWithPrecision(point.x, rect.left + rect.width) && powerbi.Double.lessOrEqualWithPrecision(rect.top, point.y) && powerbi.Double.lessOrEqualWithPrecision(point.y, rect.top + rect.height));
                }
                function isIntersecting(rect1, rect2) {
                    return !(!rect1 || !rect2) && !(rect2.left > rect1.left + rect1.width || rect2.left + rect2.width < rect1.left || rect2.top > rect1.top + rect1.height || rect2.top + rect2.height < rect1.top);
                }
                function intersect(rect1, rect2) {
                    if (!rect1) return rect2;
                    if (!rect2) return rect1;
                    var left = Math.max(rect1.left, rect2.left), top = Math.max(rect1.top, rect2.top), right = Math.min(rect1.left + rect1.width, rect2.left + rect2.width), bottom = Math.min(rect1.top + rect1.height, rect2.top + rect2.height);
                    return left <= right && top <= bottom ? {
                        left: left,
                        top: top,
                        width: right - left,
                        height: bottom - top
                    } : {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                }
                function combine(rect1, rect2) {
                    if (!rect1) return rect2;
                    if (!rect2) return rect1;
                    var left = Math.min(rect1.left, rect2.left), top = Math.min(rect1.top, rect2.top), right = Math.max(rect1.left + rect1.width, rect2.left + rect2.width), bottom = Math.max(rect1.top + rect1.height, rect2.top + rect2.height);
                    return {
                        left: left,
                        top: top,
                        width: right - left,
                        height: bottom - top
                    };
                }
                function parseRect(value, defaultValue) {
                    if (null === value) return void 0 === defaultValue ? null : defaultValue;
                    if (void 0 === value) return void 0 === defaultValue ? null : defaultValue;
                    if (4 === value.length) return {
                        left: Utility.parseNumber(value[0]),
                        top: Utility.parseNumber(value[1]),
                        width: Utility.parseNumber(value[2]),
                        height: Utility.parseNumber(value[3])
                    };
                    if ("string" == typeof value) {
                        var parts = value.split(",");
                        return 4 !== parts.length ? void 0 === defaultValue ? null : defaultValue : {
                            left: Utility.parseNumber(parts[0]),
                            top: Utility.parseNumber(parts[1]),
                            width: Utility.parseNumber(parts[2]),
                            height: Utility.parseNumber(parts[3])
                        };
                    }
                    return 4 !== value.length && "string" != typeof value ? void 0 === defaultValue ? null : defaultValue : {
                        left: Utility.parseNumber(value.left),
                        top: Utility.parseNumber(value.top),
                        width: Utility.parseNumber(value.width),
                        height: Utility.parseNumber(value.height)
                    };
                }
                function getCentroid(rect) {
                    return {
                        x: rect.left + rect.width / 2,
                        y: rect.top + rect.height / 2
                    };
                }
                Rect.getOffset = getOffset, Rect.getSize = getSize, Rect.setSize = setSize, Rect.right = right, 
                Rect.bottom = bottom, Rect.topLeft = topLeft, Rect.topRight = topRight, Rect.bottomLeft = bottomLeft, 
                Rect.bottomRight = bottomRight, Rect.equals = equals, Rect.clone = clone, Rect.toString = toString, 
                Rect.offset = offset, Rect.add = add, Rect.subtract = subtract, Rect.inflate = inflate, 
                Rect.deflate = deflate, Rect.inflateBy = inflateBy, Rect.deflateBy = deflateBy, 
                Rect.getClosestPoint = getClosestPoint, Rect.equal = equal, Rect.equalWithPrecision = equalWithPrecision, 
                Rect.isEmpty = isEmpty, Rect.containsPoint = containsPoint, Rect.isIntersecting = isIntersecting, 
                Rect.intersect = intersect, Rect.combine = combine, Rect.parseRect = parseRect, 
                Rect.getCentroid = getCentroid;
            })(Rect = shapes.Rect || (shapes.Rect = {}));
            var Thickness;
            !(function(Thickness) {
                function inflate(thickness, other) {
                    var result = clone(thickness);
                    return other && (result.left = thickness.left + other.left, result.right = thickness.right + other.right, 
                    result.bottom = thickness.bottom + other.bottom, result.top = thickness.top + other.top), 
                    result;
                }
                function getWidth(thickness) {
                    return thickness.left + thickness.right;
                }
                function getHeight(thickness) {
                    return thickness.top + thickness.bottom;
                }
                function clone(thickness) {
                    return null !== thickness ? {
                        left: thickness.left,
                        top: thickness.top,
                        right: thickness.right,
                        bottom: thickness.bottom
                    } : null;
                }
                function equals(thickness, other) {
                    return void 0 !== thickness && null !== thickness && void 0 !== other && null !== other && thickness.left === other.left && thickness.bottom === other.bottom && thickness.right === other.right && thickness.top === other.top;
                }
                function flipHorizontal(thickness) {
                    var temp = thickness.right;
                    thickness.right = thickness.left, thickness.left = temp;
                }
                function flipVertical(thickness) {
                    var top = thickness.top;
                    thickness.top = thickness.bottom, thickness.bottom = top;
                }
                function toString(thickness) {
                    return "{top:" + thickness.top + ", left:" + thickness.left + ", right:" + thickness.right + ", bottom:" + thickness.bottom + "}";
                }
                function toCssString(thickness) {
                    return thickness.top + "px " + thickness.right + "px " + thickness.bottom + "px " + thickness.left + "px";
                }
                function isEmpty(thickness) {
                    return 0 === thickness.left && 0 === thickness.top && 0 === thickness.right && 0 === thickness.bottom;
                }
                function equal(thickness1, thickness2) {
                    return thickness1 === thickness2 || void 0 !== thickness1 && void 0 !== thickness2 && thickness1.left === thickness2.left && thickness1.top === thickness2.top && thickness1.right === thickness2.right && thickness1.bottom === thickness2.bottom;
                }
                function equalWithPrecision(thickness1, thickness2) {
                    return thickness1 === thickness2 || void 0 !== thickness1 && void 0 !== thickness2 && powerbi.Double.equalWithPrecision(thickness1.left, thickness2.left) && powerbi.Double.equalWithPrecision(thickness1.top, thickness2.top) && powerbi.Double.equalWithPrecision(thickness1.right, thickness2.right) && powerbi.Double.equalWithPrecision(thickness1.bottom, thickness2.bottom);
                }
                function parseThickness(value, defaultValue, resetValue) {
                    if (null === value) return void 0 === defaultValue ? null : defaultValue;
                    if (void 0 === value) return void 0 === defaultValue ? null : defaultValue;
                    if (4 === value.length) return {
                        left: Utility.parseNumber(value[0]),
                        top: Utility.parseNumber(value[1]),
                        right: Utility.parseNumber(value[2]),
                        bottom: Utility.parseNumber(value[3])
                    };
                    if ("string" == typeof value) {
                        var parts = value.split(",");
                        return 4 !== parts.length ? void 0 === defaultValue ? null : defaultValue : {
                            left: Utility.parseNumber(parts[0]),
                            top: Utility.parseNumber(parts[1]),
                            right: Utility.parseNumber(parts[2]),
                            bottom: Utility.parseNumber(parts[3])
                        };
                    }
                    return 4 !== value.length && "string" != typeof value ? void 0 === defaultValue ? null : defaultValue : {
                        left: Utility.parseNumber(value.left),
                        top: Utility.parseNumber(value.top),
                        right: Utility.parseNumber(value.right),
                        bottom: Utility.parseNumber(value.bottom)
                    };
                }
                Thickness.inflate = inflate, Thickness.getWidth = getWidth, Thickness.getHeight = getHeight, 
                Thickness.clone = clone, Thickness.equals = equals, Thickness.flipHorizontal = flipHorizontal, 
                Thickness.flipVertical = flipVertical, Thickness.toString = toString, Thickness.toCssString = toCssString, 
                Thickness.isEmpty = isEmpty, Thickness.equal = equal, Thickness.equalWithPrecision = equalWithPrecision, 
                Thickness.parseThickness = parseThickness;
            })(Thickness = shapes.Thickness || (shapes.Thickness = {}));
            var Vector;
            !(function(Vector) {
                function isEmpty(vector) {
                    return 0 === vector.x && 0 === vector.y;
                }
                function equals(vector, other) {
                    return void 0 !== vector && null !== vector && void 0 !== other && null !== other && vector.x === other.x && vector.y === other.y;
                }
                function clone(vector) {
                    return null !== vector ? {
                        x: vector.x,
                        y: vector.y
                    } : null;
                }
                function toString(vector) {
                    return "{x:" + vector.x + ", y:" + vector.y + "}";
                }
                function getLength(vector) {
                    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);
                }
                function getLengthSqr(vector) {
                    return vector.x * vector.x + vector.y * vector.y;
                }
                function scale(vector, scalar) {
                    return {
                        x: vector.x * scalar,
                        y: vector.y * scalar
                    };
                }
                function normalize(vector) {
                    return isEmpty(vector) ? vector : scale(vector, 1 / getLength(vector));
                }
                function rotate90DegCW(vector) {
                    return {
                        x: vector.y,
                        y: -vector.x
                    };
                }
                function rotate90DegCCW(vector) {
                    return {
                        x: -vector.y,
                        y: vector.x
                    };
                }
                function rotate(vector, angle) {
                    var newX = vector.x * Math.cos(angle) - vector.y * Math.sin(angle), newY = vector.x * Math.sin(angle) + vector.y * Math.cos(angle);
                    return {
                        x: newX,
                        y: newY
                    };
                }
                function equal(vector1, vector2) {
                    return vector1 === vector2 || void 0 !== vector1 && void 0 !== vector2 && vector1.x === vector2.x && vector1.y === vector2.y;
                }
                function equalWithPrecision(vector1, vector2) {
                    return vector1 === vector2 || void 0 !== vector1 && void 0 !== vector2 && powerbi.Double.equalWithPrecision(vector1.x, vector2.x) && powerbi.Double.equalWithPrecision(vector1.y, vector2.y);
                }
                function add(vect1, vect2) {
                    if (vect1 && vect2) return {
                        x: vect1.x + vect2.x,
                        y: vect1.y + vect2.y
                    };
                }
                function subtract(vect1, vect2) {
                    if (vect1 && vect2) return {
                        x: vect1.x - vect2.x,
                        y: vect1.y - vect2.y
                    };
                }
                function dotProduct(vect1, vect2) {
                    if (vect1 && vect2) return vect1.x * vect2.x + vect1.y * vect2.y;
                }
                function getDeltaVector(p0, p1) {
                    if (p0 && p1) return {
                        x: p1.x - p0.x,
                        y: p1.y - p0.y
                    };
                }
                Vector.isEmpty = isEmpty, Vector.equals = equals, Vector.clone = clone, Vector.toString = toString, 
                Vector.getLength = getLength, Vector.getLengthSqr = getLengthSqr, Vector.scale = scale, 
                Vector.normalize = normalize, Vector.rotate90DegCW = rotate90DegCW, Vector.rotate90DegCCW = rotate90DegCCW, 
                Vector.rotate = rotate, Vector.equal = equal, Vector.equalWithPrecision = equalWithPrecision, 
                Vector.add = add, Vector.subtract = subtract, Vector.dotProduct = dotProduct, Vector.getDeltaVector = getDeltaVector;
            })(Vector = shapes.Vector || (shapes.Vector = {}));
        })(shapes = visuals.shapes || (visuals.shapes = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));;"use strict";

var __extends = this && this.__extends || (function() {
    var extendStatics = Object.setPrototypeOf || {
        __proto__: []
    } instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    };
    return function(d, b) {
        function __() {
            this.constructor = d;
        }
        extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
    };
})(), __assign = this && this.__assign || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
    }
    return t;
}, powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DefaultSQExprVisitorWithArg = (function() {
            function DefaultSQExprVisitorWithArg() {}
            return DefaultSQExprVisitorWithArg.prototype.visitEntity = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitSubqueryRef = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitNamedQueryRef = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitColumnRef = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitMeasureRef = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitAggr = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitPercentile = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitGroupRef = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitHierarchy = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitHierarchyLevel = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitPropertyVariationSource = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitSelectRef = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitBetween = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitIn = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitAnd = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitOr = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitCompare = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitContains = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitExists = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitNot = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitStartsWith = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitConstant = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitDateSpan = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitDateAdd = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitNow = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitDefaultValue = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitAnyValue = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitArithmetic = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitFloor = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitFillRule = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitThemeColor = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitResourcePackageItem = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitScopedEval = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitFilteredEval = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitWithRef = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitTransformTableRef = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitTransformOutputRoleRef = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitRoleRef = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitDiscretize = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitMember = function(expr, arg) {
                return this.visitDefault(expr, arg);
            }, DefaultSQExprVisitorWithArg.prototype.visitDefault = function(expr, arg) {}, 
            DefaultSQExprVisitorWithArg;
        })();
        data.DefaultSQExprVisitorWithArg = DefaultSQExprVisitorWithArg;
        var DefaultSQExprVisitor = (function(_super) {
            function DefaultSQExprVisitor() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(DefaultSQExprVisitor, _super), DefaultSQExprVisitor;
        })(DefaultSQExprVisitorWithArg);
        data.DefaultSQExprVisitor = DefaultSQExprVisitor;
        var DefaultSQExprVisitorWithTraversal = (function() {
            function DefaultSQExprVisitorWithTraversal() {}
            return DefaultSQExprVisitorWithTraversal.prototype.visitEntity = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitSubqueryRef = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitNamedQueryRef = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitColumnRef = function(expr) {
                expr.source.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitMeasureRef = function(expr) {
                expr.source.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitAggr = function(expr) {
                expr.arg.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitPercentile = function(expr) {
                expr.arg.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitGroupRef = function(expr) {
                expr.source.accept(this);
                for (var _i = 0, _a = expr.groupedExprs; _i < _a.length; _i++) {
                    var groupedColumn = _a[_i];
                    groupedColumn.accept(this);
                }
            }, DefaultSQExprVisitorWithTraversal.prototype.visitHierarchy = function(expr) {
                expr.arg.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitHierarchyLevel = function(expr) {
                expr.arg.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitPropertyVariationSource = function(expr) {
                expr.arg.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitSelectRef = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitBetween = function(expr) {
                expr.arg.accept(this), expr.lower.accept(this), expr.upper.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitIn = function(expr) {
                for (var args = expr.args, i = 0, len = args.length; i < len; i++) args[i].accept(this);
                var values = expr.values;
                if (values) for (var i = 0, len = values.length; i < len; i++) for (var valueTuple = values[i], j = 0, jlen = valueTuple.length; j < jlen; j++) valueTuple[j].accept(this); else expr.table.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitAnd = function(expr) {
                expr.left.accept(this), expr.right.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitOr = function(expr) {
                expr.left.accept(this), expr.right.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitCompare = function(expr) {
                expr.left.accept(this), expr.right.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitContains = function(expr) {
                expr.left.accept(this), expr.right.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitExists = function(expr) {
                expr.arg.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitNot = function(expr) {
                expr.arg.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitStartsWith = function(expr) {
                expr.left.accept(this), expr.right.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitConstant = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitDateSpan = function(expr) {
                expr.arg.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitDateAdd = function(expr) {
                expr.arg.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitNow = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitDefaultValue = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitAnyValue = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitArithmetic = function(expr) {
                expr.left.accept(this), expr.right.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitFloor = function(expr) {
                expr.arg.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitFillRule = function(expr) {
                expr.input.accept(this);
                var rule = expr.rule, gradient2 = rule.linearGradient2;
                gradient2 && this.visitLinearGradient2(gradient2);
                var gradient3 = rule.linearGradient3;
                gradient3 && this.visitLinearGradient3(gradient3);
                var conditional = rule.conditional;
                conditional && this.visitConditionalColorRule(conditional);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitLinearGradient2 = function(gradient2) {
                this.visitFillRuleStop(gradient2.min), this.visitFillRuleStop(gradient2.max), this.visitFillNullStrategy(gradient2.nullColoringStrategy);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitLinearGradient3 = function(gradient3) {
                this.visitFillRuleStop(gradient3.min), this.visitFillRuleStop(gradient3.mid), this.visitFillRuleStop(gradient3.max), 
                this.visitFillNullStrategy(gradient3.nullColoringStrategy);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitConditionalColorRule = function(conditional) {
                for (var _i = 0, _a = conditional.cases; _i < _a.length; _i++) {
                    var rule = _a[_i];
                    rule.condition.accept(this), rule.color.accept(this);
                }
                this.visitFillNullStrategy(conditional.nullColoringStrategy);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitThemeColor = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitResourcePackageItem = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitScopedEval = function(expr) {
                expr.expression.accept(this);
                for (var _i = 0, _a = expr.scope; _i < _a.length; _i++) {
                    var scopeExpr = _a[_i];
                    scopeExpr.accept(this);
                }
            }, DefaultSQExprVisitorWithTraversal.prototype.visitFilteredEval = function(expr) {
                expr.expression.accept(this);
                for (var _i = 0, _a = expr.filters; _i < _a.length; _i++) {
                    var filter = _a[_i];
                    if (!_.isEmpty(filter.target)) for (var _b = 0, _c = filter.target; _b < _c.length; _b++) {
                        var target = _c[_b];
                        target.accept(this);
                    }
                    filter.condition.accept(this);
                }
            }, DefaultSQExprVisitorWithTraversal.prototype.visitWithRef = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitTransformTableRef = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitTransformOutputRoleRef = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitRoleRef = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitDiscretize = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitMember = function(expr) {
                this.visitDefault(expr);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitDefault = function(expr) {}, 
            DefaultSQExprVisitorWithTraversal.prototype.visitFillRuleStop = function(stop) {
                stop.color.accept(this);
                var value = stop.value;
                value && value.accept(this);
            }, DefaultSQExprVisitorWithTraversal.prototype.visitFillNullStrategy = function(defn) {
                defn && (defn.strategy.accept(this), defn.color && defn.color.accept(this));
            }, DefaultSQExprVisitorWithTraversal;
        })();
        data.DefaultSQExprVisitorWithTraversal = DefaultSQExprVisitorWithTraversal;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    function createEnumType(members) {
        return new EnumType(members);
    }
    powerbi.createEnumType = createEnumType;
    var EnumType = (function() {
        function EnumType(allMembers) {
            this.allMembers = allMembers;
        }
        return EnumType.prototype.members = function(validMembers) {
            var allMembers = this.allMembers;
            if (!validMembers) return allMembers;
            for (var membersToReturn = [], _i = 0, allMembers_1 = allMembers; _i < allMembers_1.length; _i++) {
                var member = allMembers_1[_i];
                _.contains(validMembers, member.value) && membersToReturn.push(member);
            }
            return membersToReturn;
        }, EnumType;
    })();
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var fillDefinitionHelpers;
    !(function(fillDefinitionHelpers) {
        function createSolidFillDefinition(color) {
            if (color) return {
                solid: {
                    color: powerbi.data.SQExprBuilder.text(color)
                }
            };
        }
        fillDefinitionHelpers.createSolidFillDefinition = createSolidFillDefinition;
    })(fillDefinitionHelpers = powerbi.fillDefinitionHelpers || (powerbi.fillDefinitionHelpers = {}));
    var FillSolidColorTypeDescriptor;
    !(function(FillSolidColorTypeDescriptor) {
        function nullable(descriptor) {
            if (descriptor === !0) return !1;
            var advancedDescriptor = descriptor;
            return !!advancedDescriptor.nullable;
        }
        FillSolidColorTypeDescriptor.nullable = nullable;
    })(FillSolidColorTypeDescriptor = powerbi.FillSolidColorTypeDescriptor || (powerbi.FillSolidColorTypeDescriptor = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var NullStrategy;
    !(function(NullStrategy) {
        NullStrategy.asZero = "asZero", NullStrategy.noColor = "noColor", NullStrategy.specificColor = "specificColor", 
        NullStrategy.type = powerbi.createEnumType([ {
            value: NullStrategy.asZero,
            displayName: function(resources) {
                return resources.get("ConditionalFormattingDialog_FormatNull_AsZero");
            }
        }, {
            value: NullStrategy.noColor,
            displayName: function(resources) {
                return resources.get("ConditionalFormattingDialog_FormatNull_NoFormat");
            }
        }, {
            value: NullStrategy.specificColor,
            displayName: function(resources) {
                return resources.get("ConditionalFormattingDialog_FormatNull_SpecificColor");
            }
        } ]);
    })(NullStrategy = powerbi.NullStrategy || (powerbi.NullStrategy = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var GeoJsonTypes;
    !(function(GeoJsonTypes) {
        GeoJsonTypes.shared = "shared", GeoJsonTypes.packaged = "packaged";
    })(GeoJsonTypes = powerbi.GeoJsonTypes || (powerbi.GeoJsonTypes = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var ImageDefinition;
    !(function(ImageDefinition) {
        ImageDefinition.urlType = {
            misc: {
                imageUrl: !0
            }
        };
    })(ImageDefinition = powerbi.ImageDefinition || (powerbi.ImageDefinition = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var StructuralTypeDescriptor;
    !(function(StructuralTypeDescriptor) {
        function isValid(type) {
            return !!(type.fill || type.fillRule || type.filter || type.expression || type.image || type.paragraphs || type.geoJson || type.queryTransform || type.dataBars);
        }
        StructuralTypeDescriptor.isValid = isValid;
    })(StructuralTypeDescriptor = powerbi.StructuralTypeDescriptor || (powerbi.StructuralTypeDescriptor = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    function getPrimitiveType(extendedType) {
        return extendedType & PrimitiveTypeMask;
    }
    function isPrimitiveType(extendedType) {
        return (extendedType & PrimitiveTypeWithFlagsMask) === extendedType;
    }
    function getCategoryFromExtendedType(extendedType) {
        if (isPrimitiveType(extendedType)) return null;
        var category = ExtendedTypeStrings[extendedType];
        if (category) {
            var delimIdx = category.lastIndexOf("_");
            if (delimIdx > 0) {
                var baseCategory = category.slice(0, delimIdx);
                ExtendedTypeStrings[baseCategory] && (category = baseCategory);
            }
        }
        return category || null;
    }
    function toExtendedType(primitiveType, category) {
        var primitiveString = PrimitiveTypeStrings[primitiveType], t = ExtendedTypeStrings[primitiveString];
        if (null == t && (t = 0), primitiveType && category) {
            var categoryType = ExtendedTypeStrings[category];
            if (categoryType) {
                var categoryPrimitiveType = getPrimitiveType(categoryType);
                0 === categoryPrimitiveType ? (categoryType = t | categoryType, ExtendedTypeStrings[categoryType] && (t = categoryType)) : categoryPrimitiveType === primitiveType && (t = categoryType);
            }
        }
        return t;
    }
    function matchesExtendedTypeWithAnyPrimitive(a, b) {
        return (a & PrimitiveTypeFlagsExcludedMask) === (b & PrimitiveTypeFlagsExcludedMask);
    }
    var EnumExtensions = jsCommon.EnumExtensions, ValueType = (function() {
        function ValueType(type, category, enumType, variantTypes) {
            this.underlyingType = type, this.category = category, EnumExtensions.hasFlag(type, 512) && (this.temporalType = new TemporalType(type)), 
            EnumExtensions.hasFlag(type, 1024) && (this.geographyType = new GeographyType(type)), 
            EnumExtensions.hasFlag(type, 2048) && (this.miscType = new MiscellaneousType(type)), 
            EnumExtensions.hasFlag(type, 4096) && (this.formattingType = new FormattingType(type)), 
            EnumExtensions.hasFlag(type, 26214401) && (this.enumType = enumType), EnumExtensions.hasFlag(type, 8192) && (this.scriptingType = new ScriptType(type)), 
            EnumExtensions.hasFlag(type, 16384) && (this.referenceType = new ReferenceType(type)), 
            EnumExtensions.hasFlag(type, 13) && (this.variationTypes = variantTypes);
        }
        return ValueType.fromDescriptor = function(descriptor) {
            if (descriptor = descriptor || {}, descriptor.text) return ValueType.fromExtendedType(1);
            if (descriptor.integer) return ValueType.fromExtendedType(260);
            if (descriptor.numeric) return ValueType.fromExtendedType(259);
            if (descriptor.bool) return ValueType.fromExtendedType(5);
            if (descriptor.dateTime) return ValueType.fromExtendedType(519);
            if (descriptor.duration) return ValueType.fromExtendedType(10);
            if (descriptor.binary) return ValueType.fromExtendedType(11);
            if (descriptor.none) return ValueType.fromExtendedType(12);
            if (descriptor.scripting && descriptor.scripting.source) return ValueType.fromExtendedType(32776193);
            if (descriptor.enumeration) return ValueType.fromEnum(descriptor.enumeration);
            if (descriptor.temporal) {
                if (descriptor.temporal.year) return ValueType.fromExtendedType(66308);
                if (descriptor.temporal.quarter) return ValueType.fromExtendedType(262916);
                if (descriptor.temporal.month) return ValueType.fromExtendedType(131844);
                if (descriptor.temporal.day) return ValueType.fromExtendedType(328452);
                if (descriptor.temporal.paddedDateTableDate) return ValueType.fromExtendedType(197127);
            }
            if (descriptor.geography) {
                if (descriptor.geography.address) return ValueType.fromExtendedType(6554625);
                if (descriptor.geography.city) return ValueType.fromExtendedType(6620161);
                if (descriptor.geography.continent) return ValueType.fromExtendedType(6685697);
                if (descriptor.geography.country) return ValueType.fromExtendedType(6751233);
                if (descriptor.geography.county) return ValueType.fromExtendedType(6816769);
                if (descriptor.geography.region) return ValueType.fromExtendedType(6882305);
                if (descriptor.geography.postalCode) return ValueType.fromExtendedType(6947841);
                if (descriptor.geography.stateOrProvince) return ValueType.fromExtendedType(7013377);
                if (descriptor.geography.place) return ValueType.fromExtendedType(7078913);
                if (descriptor.geography.latitude) return ValueType.fromExtendedType(7144707);
                if (descriptor.geography.longitude) return ValueType.fromExtendedType(7210243);
            }
            if (descriptor.misc) {
                if (descriptor.misc.image) return ValueType.fromExtendedType(13109259);
                if (descriptor.misc.imageUrl) return ValueType.fromExtendedType(13174785);
                if (descriptor.misc.webUrl) return ValueType.fromExtendedType(13240321);
                if (descriptor.misc.barcode) return ValueType.fromExtendedType(13305857);
            }
            if (descriptor.formatting) {
                if (descriptor.formatting.color) return ValueType.fromExtendedType(19664897);
                if (descriptor.formatting.formatString) return ValueType.fromExtendedType(19730433);
                if (descriptor.formatting.alignment) return ValueType.fromExtendedType(20058113);
                if (descriptor.formatting.labelDisplayUnits) return ValueType.fromExtendedType(20123649);
                if (descriptor.formatting.fontFamily) return ValueType.fromExtendedType(20385793);
                if (descriptor.formatting.fontSize) return ValueType.fromExtendedType(20189443);
                if (descriptor.formatting.labelDensity) return ValueType.fromExtendedType(20254979);
                if (descriptor.formatting.bubbleSize) return ValueType.fromExtendedType(20320515);
                if (descriptor.formatting.altText) return ValueType.fromExtendedType(20451329);
            }
            if (descriptor.extendedType) return ValueType.fromExtendedType(descriptor.extendedType);
            if (descriptor.operations && descriptor.operations.searchEnabled) return ValueType.fromExtendedType(65541);
            if (descriptor.reference && descriptor.reference.bookmark) return ValueType.fromExtendedType(39337985);
            if (descriptor.variant) {
                var variantTypes = _.map(descriptor.variant, (function(variantType) {
                    return ValueType.fromDescriptor(variantType);
                }));
                return ValueType.fromVariant(variantTypes);
            }
            return ValueType.fromExtendedType(0);
        }, ValueType.fromExtendedType = function(extendedType) {
            extendedType = extendedType || 0;
            var primitiveType = getPrimitiveType(extendedType), category = getCategoryFromExtendedType(extendedType);
            return ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);
        }, ValueType.fromPrimitiveTypeAndCategory = function(primitiveType, category) {
            primitiveType = primitiveType || 0, category = category || null;
            var id = primitiveType.toString();
            return category && (id += "|" + category), ValueType.typeCache[id] || (ValueType.typeCache[id] = new ValueType(toExtendedType(primitiveType, category), category));
        }, ValueType.fromEnum = function(enumType) {
            return new ValueType(26214401, null, enumType);
        }, ValueType.fromVariant = function(variantTypes) {
            return new ValueType(13, null, null, variantTypes);
        }, ValueType.isCompatibleTo = function(type, otherTypes, strictNumeric) {
            for (var valueType = ValueType.fromDescriptor(type), _i = 0, otherTypes_1 = otherTypes; _i < otherTypes_1.length; _i++) {
                var otherType = otherTypes_1[_i], otherValueType = ValueType.fromDescriptor(otherType);
                if (otherValueType.isCompatibleFrom(valueType, strictNumeric)) return !0;
            }
            return !1;
        }, ValueType.prototype.isCompatibleFrom = function(other, strictNumeric) {
            if (this === other) return !0;
            if (other.variant) for (var _i = 0, _a = other.variant; _i < _a.length; _i++) {
                var otherType = _a[_i];
                if (!this.isCompatibleFrom(otherType, strictNumeric)) return !1;
            }
            if (this.variant) for (var _b = 0, _c = this.variant; _b < _c.length; _b++) {
                var variantType = _c[_b];
                if (variantType.isCompatibleFrom(other, strictNumeric)) return !0;
            }
            var otherPrimitiveType = other.primitiveType;
            return this.primitiveType === otherPrimitiveType || 0 === otherPrimitiveType || this.numeric && other.numeric && (!strictNumeric || !this.integer || other.integer);
        }, ValueType.prototype.equals = function(other) {
            return _.isEqual(this, other);
        }, Object.defineProperty(ValueType.prototype, "primitiveType", {
            get: function() {
                return getPrimitiveType(this.underlyingType);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "extendedType", {
            get: function() {
                return this.underlyingType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "categoryString", {
            get: function() {
                return this.category;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "text", {
            get: function() {
                return 1 === this.primitiveType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "numeric", {
            get: function() {
                return EnumExtensions.hasFlag(this.underlyingType, 256);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "integer", {
            get: function() {
                return 4 === this.primitiveType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "bool", {
            get: function() {
                return 5 === this.primitiveType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "dateTime", {
            get: function() {
                return 7 === this.primitiveType || 6 === this.primitiveType || 9 === this.primitiveType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "duration", {
            get: function() {
                return 10 === this.primitiveType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "binary", {
            get: function() {
                return 11 === this.primitiveType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "none", {
            get: function() {
                return 12 === this.primitiveType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "temporal", {
            get: function() {
                return this.temporalType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "geography", {
            get: function() {
                return this.geographyType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "misc", {
            get: function() {
                return this.miscType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "formatting", {
            get: function() {
                return this.formattingType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "enum", {
            get: function() {
                return this.enumType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "scripting", {
            get: function() {
                return this.scriptingType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "reference", {
            get: function() {
                return this.referenceType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ValueType.prototype, "variant", {
            get: function() {
                return this.variationTypes;
            },
            enumerable: !0,
            configurable: !0
        }), ValueType.typeCache = {}, ValueType;
    })();
    powerbi.ValueType = ValueType;
    var PrimitiveTypeStrings, ScriptType = (function() {
        function ScriptType(type) {
            this.underlyingType = type;
        }
        return Object.defineProperty(ScriptType.prototype, "source", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 32776193);
            },
            enumerable: !0,
            configurable: !0
        }), ScriptType;
    })(), TemporalType = (function() {
        function TemporalType(type) {
            this.underlyingType = type;
        }
        return Object.defineProperty(TemporalType.prototype, "year", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 66048);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(TemporalType.prototype, "quarter", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 262656);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(TemporalType.prototype, "month", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 131584);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(TemporalType.prototype, "day", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 328192);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(TemporalType.prototype, "paddedDateTableDate", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 197127);
            },
            enumerable: !0,
            configurable: !0
        }), TemporalType;
    })(), GeographyType = (function() {
        function GeographyType(type) {
            this.underlyingType = type;
        }
        return Object.defineProperty(GeographyType.prototype, "address", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 6554625);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GeographyType.prototype, "city", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 6620161);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GeographyType.prototype, "continent", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 6685697);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GeographyType.prototype, "country", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 6751233);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GeographyType.prototype, "county", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 6816769);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GeographyType.prototype, "region", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 6882305);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GeographyType.prototype, "postalCode", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 6947840);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GeographyType.prototype, "stateOrProvince", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 7013377);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GeographyType.prototype, "place", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 7078913);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GeographyType.prototype, "latitude", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 7144448);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GeographyType.prototype, "longitude", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 7209984);
            },
            enumerable: !0,
            configurable: !0
        }), GeographyType;
    })(), MiscellaneousType = (function() {
        function MiscellaneousType(type) {
            this.underlyingType = type;
        }
        return Object.defineProperty(MiscellaneousType.prototype, "image", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 13109259);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(MiscellaneousType.prototype, "imageUrl", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 13174785);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(MiscellaneousType.prototype, "webUrl", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 13240321);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(MiscellaneousType.prototype, "barcode", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 13305856);
            },
            enumerable: !0,
            configurable: !0
        }), MiscellaneousType;
    })(), ReferenceType = (function() {
        function ReferenceType(type) {
            this.underlyingType = type;
        }
        return Object.defineProperty(ReferenceType.prototype, "bookmark", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 39337985);
            },
            enumerable: !0,
            configurable: !0
        }), ReferenceType;
    })(), FormattingType = (function() {
        function FormattingType(type) {
            this.underlyingType = type;
        }
        return Object.defineProperty(FormattingType.prototype, "color", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 19664897);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(FormattingType.prototype, "formatString", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 19730433);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(FormattingType.prototype, "alignment", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 20058113);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(FormattingType.prototype, "labelDisplayUnits", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 20123649);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(FormattingType.prototype, "fontFamily", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 20385793);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(FormattingType.prototype, "fontSize", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 20189443);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(FormattingType.prototype, "labelDensity", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 20254979);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(FormattingType.prototype, "bubbleSize", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 20320515);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(FormattingType.prototype, "altText", {
            get: function() {
                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, 20451329);
            },
            enumerable: !0,
            configurable: !0
        }), FormattingType;
    })();
    !(function(PrimitiveTypeStrings) {
        PrimitiveTypeStrings[PrimitiveTypeStrings.Null = 0] = "Null", PrimitiveTypeStrings[PrimitiveTypeStrings.Text = 1] = "Text", 
        PrimitiveTypeStrings[PrimitiveTypeStrings.Decimal = 2] = "Decimal", PrimitiveTypeStrings[PrimitiveTypeStrings.Double = 3] = "Double", 
        PrimitiveTypeStrings[PrimitiveTypeStrings.Integer = 4] = "Integer", PrimitiveTypeStrings[PrimitiveTypeStrings.Boolean = 5] = "Boolean", 
        PrimitiveTypeStrings[PrimitiveTypeStrings.Date = 6] = "Date", PrimitiveTypeStrings[PrimitiveTypeStrings.DateTime = 7] = "DateTime", 
        PrimitiveTypeStrings[PrimitiveTypeStrings.DateTimeZone = 8] = "DateTimeZone", PrimitiveTypeStrings[PrimitiveTypeStrings.Time = 9] = "Time", 
        PrimitiveTypeStrings[PrimitiveTypeStrings.Duration = 10] = "Duration", PrimitiveTypeStrings[PrimitiveTypeStrings.Binary = 11] = "Binary", 
        PrimitiveTypeStrings[PrimitiveTypeStrings.None = 12] = "None", PrimitiveTypeStrings[PrimitiveTypeStrings.Variant = 13] = "Variant";
    })(PrimitiveTypeStrings = powerbi.PrimitiveTypeStrings || (powerbi.PrimitiveTypeStrings = {}));
    var ExtendedTypeStrings;
    !(function(ExtendedTypeStrings) {
        ExtendedTypeStrings[ExtendedTypeStrings.Numeric = 256] = "Numeric", ExtendedTypeStrings[ExtendedTypeStrings.Temporal = 512] = "Temporal", 
        ExtendedTypeStrings[ExtendedTypeStrings.Geography = 1024] = "Geography", ExtendedTypeStrings[ExtendedTypeStrings.Miscellaneous = 2048] = "Miscellaneous", 
        ExtendedTypeStrings[ExtendedTypeStrings.Formatting = 4096] = "Formatting", ExtendedTypeStrings[ExtendedTypeStrings.Scripting = 8192] = "Scripting", 
        ExtendedTypeStrings[ExtendedTypeStrings.Null = 0] = "Null", ExtendedTypeStrings[ExtendedTypeStrings.Text = 1] = "Text", 
        ExtendedTypeStrings[ExtendedTypeStrings.Decimal = 258] = "Decimal", ExtendedTypeStrings[ExtendedTypeStrings.Double = 259] = "Double", 
        ExtendedTypeStrings[ExtendedTypeStrings.Integer = 260] = "Integer", ExtendedTypeStrings[ExtendedTypeStrings.Boolean = 5] = "Boolean", 
        ExtendedTypeStrings[ExtendedTypeStrings.Date = 518] = "Date", ExtendedTypeStrings[ExtendedTypeStrings.DateTime = 519] = "DateTime", 
        ExtendedTypeStrings[ExtendedTypeStrings.DateTimeZone = 520] = "DateTimeZone", ExtendedTypeStrings[ExtendedTypeStrings.Time = 521] = "Time", 
        ExtendedTypeStrings[ExtendedTypeStrings.Duration = 10] = "Duration", ExtendedTypeStrings[ExtendedTypeStrings.Binary = 11] = "Binary", 
        ExtendedTypeStrings[ExtendedTypeStrings.None = 12] = "None", ExtendedTypeStrings[ExtendedTypeStrings.Variant = 13] = "Variant", 
        ExtendedTypeStrings[ExtendedTypeStrings.Years = 66048] = "Years", ExtendedTypeStrings[ExtendedTypeStrings.Years_Text = 66049] = "Years_Text", 
        ExtendedTypeStrings[ExtendedTypeStrings.Years_Integer = 66308] = "Years_Integer", 
        ExtendedTypeStrings[ExtendedTypeStrings.Years_Date = 66054] = "Years_Date", ExtendedTypeStrings[ExtendedTypeStrings.Years_DateTime = 66055] = "Years_DateTime", 
        ExtendedTypeStrings[ExtendedTypeStrings.Months = 131584] = "Months", ExtendedTypeStrings[ExtendedTypeStrings.Months_Text = 131585] = "Months_Text", 
        ExtendedTypeStrings[ExtendedTypeStrings.Months_Integer = 131844] = "Months_Integer", 
        ExtendedTypeStrings[ExtendedTypeStrings.Months_Date = 131590] = "Months_Date", ExtendedTypeStrings[ExtendedTypeStrings.Months_DateTime = 131591] = "Months_DateTime", 
        ExtendedTypeStrings[ExtendedTypeStrings.PaddedDateTableDates = 197127] = "PaddedDateTableDates", 
        ExtendedTypeStrings[ExtendedTypeStrings.Quarters = 262656] = "Quarters", ExtendedTypeStrings[ExtendedTypeStrings.Quarters_Text = 262657] = "Quarters_Text", 
        ExtendedTypeStrings[ExtendedTypeStrings.Quarters_Integer = 262916] = "Quarters_Integer", 
        ExtendedTypeStrings[ExtendedTypeStrings.Quarters_Date = 262662] = "Quarters_Date", 
        ExtendedTypeStrings[ExtendedTypeStrings.Quarters_DateTime = 262663] = "Quarters_DateTime", 
        ExtendedTypeStrings[ExtendedTypeStrings.DayOfMonth = 328192] = "DayOfMonth", ExtendedTypeStrings[ExtendedTypeStrings.DayOfMonth_Text = 328193] = "DayOfMonth_Text", 
        ExtendedTypeStrings[ExtendedTypeStrings.DayOfMonth_Integer = 328452] = "DayOfMonth_Integer", 
        ExtendedTypeStrings[ExtendedTypeStrings.DayOfMonth_Date = 328198] = "DayOfMonth_Date", 
        ExtendedTypeStrings[ExtendedTypeStrings.DayOfMonth_DateTime = 328199] = "DayOfMonth_DateTime", 
        ExtendedTypeStrings[ExtendedTypeStrings.Address = 6554625] = "Address", ExtendedTypeStrings[ExtendedTypeStrings.City = 6620161] = "City", 
        ExtendedTypeStrings[ExtendedTypeStrings.Continent = 6685697] = "Continent", ExtendedTypeStrings[ExtendedTypeStrings.Country = 6751233] = "Country", 
        ExtendedTypeStrings[ExtendedTypeStrings.County = 6816769] = "County", ExtendedTypeStrings[ExtendedTypeStrings.Region = 6882305] = "Region", 
        ExtendedTypeStrings[ExtendedTypeStrings.PostalCode = 6947840] = "PostalCode", ExtendedTypeStrings[ExtendedTypeStrings.PostalCode_Text = 6947841] = "PostalCode_Text", 
        ExtendedTypeStrings[ExtendedTypeStrings.PostalCode_Integer = 6948100] = "PostalCode_Integer", 
        ExtendedTypeStrings[ExtendedTypeStrings.StateOrProvince = 7013377] = "StateOrProvince", 
        ExtendedTypeStrings[ExtendedTypeStrings.Place = 7078913] = "Place", ExtendedTypeStrings[ExtendedTypeStrings.Latitude = 7144448] = "Latitude", 
        ExtendedTypeStrings[ExtendedTypeStrings.Latitude_Decimal = 7144706] = "Latitude_Decimal", 
        ExtendedTypeStrings[ExtendedTypeStrings.Latitude_Double = 7144707] = "Latitude_Double", 
        ExtendedTypeStrings[ExtendedTypeStrings.Longitude = 7209984] = "Longitude", ExtendedTypeStrings[ExtendedTypeStrings.Longitude_Decimal = 7210242] = "Longitude_Decimal", 
        ExtendedTypeStrings[ExtendedTypeStrings.Longitude_Double = 7210243] = "Longitude_Double", 
        ExtendedTypeStrings[ExtendedTypeStrings.Image = 13109259] = "Image", ExtendedTypeStrings[ExtendedTypeStrings.ImageUrl = 13174785] = "ImageUrl", 
        ExtendedTypeStrings[ExtendedTypeStrings.WebUrl = 13240321] = "WebUrl", ExtendedTypeStrings[ExtendedTypeStrings.Barcode = 13305856] = "Barcode", 
        ExtendedTypeStrings[ExtendedTypeStrings.Barcode_Text = 13305857] = "Barcode_Text", 
        ExtendedTypeStrings[ExtendedTypeStrings.Barcode_Integer = 13306116] = "Barcode_Integer", 
        ExtendedTypeStrings[ExtendedTypeStrings.Color = 19664897] = "Color", ExtendedTypeStrings[ExtendedTypeStrings.FormatString = 19730433] = "FormatString", 
        ExtendedTypeStrings[ExtendedTypeStrings.Alignment = 20058113] = "Alignment", ExtendedTypeStrings[ExtendedTypeStrings.LabelDisplayUnits = 20123649] = "LabelDisplayUnits", 
        ExtendedTypeStrings[ExtendedTypeStrings.FontFamily = 20385793] = "FontFamily", ExtendedTypeStrings[ExtendedTypeStrings.AltText = 20451329] = "AltText", 
        ExtendedTypeStrings[ExtendedTypeStrings.FontSize = 20189443] = "FontSize", ExtendedTypeStrings[ExtendedTypeStrings.LabelDensity = 20254979] = "LabelDensity", 
        ExtendedTypeStrings[ExtendedTypeStrings.BubbleSize = 20320515] = "BubbleSize", ExtendedTypeStrings[ExtendedTypeStrings.Enumeration = 26214401] = "Enumeration", 
        ExtendedTypeStrings[ExtendedTypeStrings.ScriptSource = 32776193] = "ScriptSource", 
        ExtendedTypeStrings[ExtendedTypeStrings.SearchEnabled = 65541] = "SearchEnabled", 
        ExtendedTypeStrings[ExtendedTypeStrings.BookmarkRef = 39337985] = "BookmarkRef";
    })(ExtendedTypeStrings || (ExtendedTypeStrings = {}));
    var PrimitiveTypeMask = 255, PrimitiveTypeWithFlagsMask = 65535, PrimitiveTypeFlagsExcludedMask = 4294901760;
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataShapeBindingdataReductionPlotAxisTransform;
        !(function(DataShapeBindingdataReductionPlotAxisTransform) {
            DataShapeBindingdataReductionPlotAxisTransform[DataShapeBindingdataReductionPlotAxisTransform.None = 0] = "None", 
            DataShapeBindingdataReductionPlotAxisTransform[DataShapeBindingdataReductionPlotAxisTransform.Log = 1] = "Log";
        })(DataShapeBindingdataReductionPlotAxisTransform = data.DataShapeBindingdataReductionPlotAxisTransform || (data.DataShapeBindingdataReductionPlotAxisTransform = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataShapeBindingDataReduction;
        !(function(DataShapeBindingDataReduction) {
            function createFrom(reduction, selects) {
                if (reduction) {
                    var result;
                    if (reduction.top && (result = {
                        Top: {}
                    }, reduction.top.count && (result.Top.Count = reduction.top.count)), reduction.bottom && (result = {
                        Bottom: {}
                    }, reduction.bottom.count && (result.Bottom.Count = reduction.bottom.count)), reduction.sample && (result = {
                        Sample: {}
                    }, reduction.sample.count && (result.Sample.Count = reduction.sample.count)), reduction.window && (result = {
                        Window: {}
                    }, reduction.window.count && (result.Window.Count = reduction.window.count)), reduction.binnedLineSample && (result = {
                        BinnedLineSample: {}
                    }, null != reduction.binnedLineSample.primaryScalarKey && (result.BinnedLineSample.PrimaryScalarKey = reduction.binnedLineSample.primaryScalarKey)), 
                    reduction.overlappingPointsSample) {
                        var overlappingPointsSample = reduction.overlappingPointsSample;
                        result = {
                            OverlappingPointsSample: {}
                        }, overlappingPointsSample.count && (result.OverlappingPointsSample.Count = overlappingPointsSample.count);
                        var compiledX = overlappingPointsSample.x;
                        compiledX && 1 === _.size(compiledX.role.items) && (result.OverlappingPointsSample.X = getReductionAxisBinding(selects, compiledX.role.items[0].queryName, compiledX.transform));
                        var compiledY = overlappingPointsSample.y;
                        compiledY && 1 === _.size(compiledY.role.items) && (result.OverlappingPointsSample.Y = getReductionAxisBinding(selects, compiledY.role.items[0].queryName, compiledY.transform));
                    }
                    return result;
                }
            }
            function getReductionAxisBinding(selects, axisQueryName, transform) {
                var plotAxisBinding = {
                    Index: _.findIndex(selects, (function(select) {
                        return select.name === axisQueryName;
                    }))
                };
                return transform && 1 === transform && (plotAxisBinding.Transform = data.DataShapeBindingdataReductionPlotAxisTransform.Log), 
                plotAxisBinding;
            }
            DataShapeBindingDataReduction.createFrom = createFrom;
        })(DataShapeBindingDataReduction = data.DataShapeBindingDataReduction || (data.DataShapeBindingDataReduction = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var FederatedConceptualSchema = (function() {
            function FederatedConceptualSchema(options) {
                this.schemasByName = options.schemas, options.links && (this.links = options.links);
            }
            return FederatedConceptualSchema.merge = function(federatedSchemas) {
                if (1 === federatedSchemas.length) return federatedSchemas[0];
                for (var combinedSchemas = {}, combinedLinks = [], _i = 0, federatedSchemas_1 = federatedSchemas; _i < federatedSchemas_1.length; _i++) {
                    var federatedSchema = federatedSchemas_1[_i];
                    for (var conceptualSchemaName in federatedSchema.schemasByName) combinedSchemas[conceptualSchemaName] = federatedSchema.schemasByName[conceptualSchemaName];
                    combinedLinks.push.apply(combinedLinks, federatedSchema.links);
                }
                for (var schemaName in combinedSchemas) {
                    var schema = combinedSchemas[schemaName];
                    if (schema.isExtensionSchema) {
                        var base = combinedSchemas[schema.extends];
                        FederatedConceptualSchema.mergeCapabilities(base, schema);
                    }
                }
                var options = {
                    schemas: combinedSchemas
                };
                return _.any(combinedLinks) && (options.links = combinedLinks), new FederatedConceptualSchema(options);
            }, Object.defineProperty(FederatedConceptualSchema.prototype, "schemas", {
                get: function() {
                    return _.values(this.schemasByName);
                },
                enumerable: !0,
                configurable: !0
            }), FederatedConceptualSchema.prototype.schema = function(name) {
                return this.schemasByName[name];
            }, FederatedConceptualSchema.mergeCapabilities = function(base, extension) {
                extension.capabilities = __assign({}, base.capabilities, {
                    canEdit: extension.capabilities.canEdit,
                    isExtendable: extension.capabilities.isExtendable
                });
            }, FederatedConceptualSchema;
        })();
        data.FederatedConceptualSchema = FederatedConceptualSchema;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data_1) {
        var Selector, ArrayExtensions = jsCommon.ArrayExtensions;
        !(function(Selector) {
            function isScopeIdentity(data) {
                return null != data && 1 === data.kind;
            }
            function isScopeWildcard(data) {
                return null != data && 3 === data.kind;
            }
            function isScopeTotal(data) {
                return null != data && 2 === data.kind;
            }
            function isRoleWildcard(data) {
                return null != data && 0 === data.kind;
            }
            function isWildcard(data) {
                return null != data && 4 === data.kind;
            }
            function filterFromSelector(selectors, isNot) {
                if (!_.isEmpty(selectors)) {
                    var exprs = filterExprsFromSelectors(selectors);
                    return _.isEmpty(exprs) ? void 0 : powerbi.DataViewScopeIdentity.filterFromExprs(exprs, isNot);
                }
            }
            function filterExprsFromSelectors(selectors) {
                if (!_.isEmpty(selectors)) {
                    for (var exprs = [], i = 0, ilen = selectors.length; i < ilen; i++) {
                        var identity = selectors[i], data_2 = identity.data, exprToAdd = void 0;
                        if (data_2 && data_2.length) for (var j = 0, jlen = data_2.length; j < jlen; j++) exprToAdd = data_1.SQExprBuilder.and(exprToAdd, identity.data[j].expr);
                        exprToAdd && exprs.push(exprToAdd);
                    }
                    return exprs;
                }
            }
            function matchesData(selector, identities, totalIdentityFields) {
                var selectorData = selector.data, selectorDataLength = selectorData.length, identityFieldsCount = identities.length, isTotal = !_.isEmpty(totalIdentityFields);
                if (isTotal && identityFieldsCount++, 1 === selectorDataLength && isWildcard(selectorData[0])) return data_1.DataViewWildcard.matches(selectorData[0], isTotal);
                if (selectorDataLength !== identityFieldsCount) return !1;
                for (var i = 0, len = identities.length; i < len; i++) {
                    var dataItem = selector.data[i], identity = identities[i];
                    if (isRoleWildcard(dataItem)) return !1;
                    if (isScopeIdentity(dataItem)) {
                        if (!powerbi.DataViewScopeIdentity.equals(dataItem, identity)) return !1;
                    } else {
                        if (!isScopeWildcard(dataItem)) return !!isScopeTotal(dataItem) && (!_.isEmpty(totalIdentityFields), 
                        !1);
                        if (!data_1.DataViewScopeWildcard.matches(dataItem, identity)) return !1;
                    }
                }
                if (!_.isEmpty(totalIdentityFields)) {
                    var dataItem = _.last(selectorData);
                    return isScopeTotal(dataItem) && data_1.DataViewScopeTotal.matches(dataItem, totalIdentityFields);
                }
                return !0;
            }
            function matchesKeys(selector, keysList, partialMatch) {
                void 0 === partialMatch && (partialMatch = !1);
                var selectorData = selector.data, selectorDataLength = selectorData.length;
                if (1 === selectorDataLength && isWildcard(selectorData[0])) return !0;
                for (var flattenedIdentityKeys = _.flatten(keysList), flattenedSelectorExprs = [], _i = 0, _a = selector.data; _i < _a.length; _i++) {
                    var dataRepetitionItem = _a[_i], dataItemKeys = getDataRepetitionIdentityKeys(dataRepetitionItem);
                    if (!dataItemKeys) return !1;
                    flattenedSelectorExprs.push.apply(flattenedSelectorExprs, dataItemKeys);
                }
                var flattenedSelectorDataLength = flattenedSelectorExprs.length;
                if (0 === flattenedSelectorDataLength || 0 === flattenedIdentityKeys.length) return !1;
                if (partialMatch && flattenedSelectorDataLength > flattenedIdentityKeys.length || !partialMatch && flattenedSelectorDataLength !== flattenedIdentityKeys.length) return !1;
                for (var i = 0; i < flattenedSelectorDataLength; i++) if (!data_1.SQExpr.equals(flattenedIdentityKeys[i], flattenedSelectorExprs[i])) return !1;
                return !0;
            }
            function getDataRepetitionIdentityKeys(dataItem) {
                return isScopeIdentity(dataItem) ? data_1.ScopeIdentityExtractor.getKeys(dataItem.expr) : isScopeWildcard(dataItem) ? dataItem.exprs : isScopeTotal(dataItem) ? dataItem.exprs : void isRoleWildcard(dataItem);
            }
            function equals(x, y) {
                return x = x || null, y = y || null, x === y || !x == !y && (x.id === y.id && (x.metadata === y.metadata && !!equalsDataArray(x.data, y.data)));
            }
            function equalsDataArray(x, y) {
                if (x = x || null, y = y || null, x === y) return !0;
                if (!x != !y) return !1;
                if (x.length !== y.length) return !1;
                for (var i = 0, len = x.length; i < len; i++) if (!equalsData(x[i], y[i])) return !1;
                return !0;
            }
            function equalsData(x, y) {
                return isScopeIdentity(x) && isScopeIdentity(y) ? powerbi.DataViewScopeIdentity.equals(x, y) : isScopeWildcard(x) && isScopeWildcard(y) ? data_1.DataViewScopeWildcard.equals(x, y) : isScopeTotal(x) && isScopeTotal(y) ? data_1.DataViewScopeTotal.equals(x, y) : isRoleWildcard(x) && isRoleWildcard(y) ? data_1.DataViewRoleWildcard.equals(x, y) : !(!isWildcard(x) || !isWildcard(y)) && data_1.DataViewWildcard.equals(x, y);
            }
            function getKey(selector) {
                var toStringify = {};
                if (selector.data) {
                    for (var data_3 = [], i = 0, ilen = selector.data.length; i < ilen; i++) data_3.push(selector.data[i].key);
                    toStringify.data = data_3;
                }
                return selector.metadata && (toStringify.metadata = selector.metadata), selector.id && (toStringify.id = selector.id), 
                JSON.stringify(toStringify);
            }
            function containsWildcard(selector) {
                var dataItems = selector.data;
                return !!dataItems && _.any(dataItems, (function(dataItem) {
                    return isRoleWildcard(dataItem) || isScopeWildcard(dataItem) || isWildcard(dataItem);
                }));
            }
            function hasRoleWildcard(selector) {
                var dataItems = selector.data;
                if (_.isEmpty(dataItems)) return !1;
                for (var _i = 0, dataItems_1 = dataItems; _i < dataItems_1.length; _i++) {
                    var dataItem = dataItems_1[_i];
                    if (isRoleWildcard(dataItem)) return !0;
                }
                return !1;
            }
            function convertSelectorsByColumnToSelector(selectorsByColumn) {
                if (selectorsByColumn) {
                    var data = [];
                    for (var key in selectorsByColumn.dataMap) for (var selectors = ArrayExtensions.ensureArray(selectorsByColumn.dataMap[key]), _i = 0, selectors_1 = selectors; _i < selectors_1.length; _i++) {
                        var selector_1 = selectors_1[_i];
                        data.push(selector_1);
                    }
                    var selector = {};
                    return data.length > 0 && (selector.data = data), selectorsByColumn.metadata && (selector.metadata = _.first(selectorsByColumn.metadata)), 
                    selectorsByColumn.id && (selector.id = selectorsByColumn.id), selector;
                }
            }
            function filterTransformSelectorsForSelection(dataItems) {
                return _.filter(dataItems, (function(dataViewScopeIdentity) {
                    return !data_1.SQExprUtils.detectTransformExpr(dataViewScopeIdentity.expr);
                }));
            }
            function normalizeSelector(selector) {
                return selector && selector.data ? {
                    data: selector.data
                } : selector;
            }
            Selector.isScopeIdentity = isScopeIdentity, Selector.isScopeWildcard = isScopeWildcard, 
            Selector.isScopeTotal = isScopeTotal, Selector.isRoleWildcard = isRoleWildcard, 
            Selector.isWildcard = isWildcard, Selector.filterFromSelector = filterFromSelector, 
            Selector.filterExprsFromSelectors = filterExprsFromSelectors, Selector.matchesData = matchesData, 
            Selector.matchesKeys = matchesKeys, Selector.equals = equals, Selector.getKey = getKey, 
            Selector.containsWildcard = containsWildcard, Selector.hasRoleWildcard = hasRoleWildcard, 
            Selector.convertSelectorsByColumnToSelector = convertSelectorsByColumnToSelector, 
            Selector.filterTransformSelectorsForSelection = filterTransformSelectorsForSelection, 
            Selector.normalizeSelector = normalizeSelector;
        })(Selector = data_1.Selector || (data_1.Selector = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function getArithmeticOperatorName(arithmeticOperatorKind) {
            switch (arithmeticOperatorKind) {
              case 0:
                return "Add";

              case 1:
                return "Subtract";

              case 2:
                return "Multiply";

              case 3:
                return "Divide";
            }
            return powerbi.contract.fail("Unexpected ArithmeticOperatorKind: " + arithmeticOperatorKind);
        }
        function aggregateFunctionName(aggr) {
            switch (aggr) {
              case 0:
                return "Sum";

              case 1:
                return "Avg";

              case 2:
                return "Count";

              case 3:
                return "Min";

              case 4:
                return "Max";

              case 5:
                return "CountNonNull";

              case 6:
                return "Median";

              case 7:
                return "StandardDeviation";

              case 8:
                return "Variance";
            }
        }
        var EntitySourceType;
        !(function(EntitySourceType) {
            EntitySourceType[EntitySourceType.Table = 0] = "Table", EntitySourceType[EntitySourceType.Pod = 1] = "Pod", 
            EntitySourceType[EntitySourceType.Expression = 2] = "Expression";
        })(EntitySourceType = data.EntitySourceType || (data.EntitySourceType = {})), data.getArithmeticOperatorName = getArithmeticOperatorName, 
        data.aggregateFunctionName = aggregateFunctionName;
        var FilterKind;
        !(function(FilterKind) {
            FilterKind[FilterKind.Default = 0] = "Default", FilterKind[FilterKind.Period = 1] = "Period";
        })(FilterKind = data.FilterKind || (data.FilterKind = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var QueryProjectionCollection = (function() {
            function QueryProjectionCollection(items, activeProjectionRefs, showAll) {
                this.items = items, this._activeProjectionRefs = activeProjectionRefs, this._showAll = showAll;
            }
            return QueryProjectionCollection.prototype.all = function() {
                return this.items;
            }, Object.defineProperty(QueryProjectionCollection.prototype, "activeProjectionRefs", {
                get: function() {
                    return this._activeProjectionRefs;
                },
                set: function(queryReferences) {
                    if (_.isEmpty(queryReferences)) this._activeProjectionRefs = void 0; else {
                        for (var queryRefs = this.items.map((function(val) {
                            return val.queryRef;
                        })), _i = 0, queryReferences_1 = queryReferences; _i < queryReferences_1.length; _i++) {
                            var queryReference = queryReferences_1[_i];
                            if (!_.contains(queryRefs, queryReference)) return;
                        }
                        this._activeProjectionRefs = queryReferences;
                    }
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(QueryProjectionCollection.prototype, "showAll", {
                get: function() {
                    return this._showAll;
                },
                set: function(value) {
                    this._showAll = value;
                },
                enumerable: !0,
                configurable: !0
            }), QueryProjectionCollection.prototype.addActiveQueryReference = function(queryRef) {
                this._activeProjectionRefs ? this._activeProjectionRefs.push(queryRef) : this._activeProjectionRefs = [ queryRef ];
            }, QueryProjectionCollection.prototype.getLastActiveQueryReference = function() {
                if (!_.isEmpty(this._activeProjectionRefs)) return this._activeProjectionRefs[this._activeProjectionRefs.length - 1];
            }, QueryProjectionCollection.prototype.replaceQueryRef = function(oldQueryRef, newQueryRef) {
                for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    item.queryRef === oldQueryRef && (item.queryRef = newQueryRef);
                }
            }, QueryProjectionCollection.prototype.clone = function() {
                return new QueryProjectionCollection(_.cloneDeep(this.items), _.clone(this._activeProjectionRefs), this._showAll);
            }, QueryProjectionCollection;
        })();
        data.QueryProjectionCollection = QueryProjectionCollection;
        var QueryProjectionsByRole;
        !(function(QueryProjectionsByRole) {
            function clone(roles) {
                if (!roles) return roles;
                var clonedRoles = {};
                for (var roleName in roles) clonedRoles[roleName] = roles[roleName].clone();
                return clonedRoles;
            }
            function getRole(roles, name) {
                if (roles) return roles[name];
            }
            QueryProjectionsByRole.clone = clone, QueryProjectionsByRole.getRole = getRole;
        })(QueryProjectionsByRole = data.QueryProjectionsByRole || (data.QueryProjectionsByRole = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var DisplayUnitSystemType;
    !(function(DisplayUnitSystemType) {
        DisplayUnitSystemType[DisplayUnitSystemType.Default = 0] = "Default", DisplayUnitSystemType[DisplayUnitSystemType.Verbose = 1] = "Verbose", 
        DisplayUnitSystemType[DisplayUnitSystemType.WholeUnits = 2] = "WholeUnits", DisplayUnitSystemType[DisplayUnitSystemType.DataLabels = 3] = "DataLabels";
    })(DisplayUnitSystemType = powerbi.DisplayUnitSystemType || (powerbi.DisplayUnitSystemType = {}));
    var VisualElement;
    !(function(VisualElement) {
        function getDataRolesFromVisualElements(visualElements) {
            for (var dataRoles = [], _i = 0, visualElements_1 = visualElements; _i < visualElements_1.length; _i++) for (var visualElement = visualElements_1[_i], _loop_1 = function(dataRole) {
                _.find(dataRoles, (function(role) {
                    return _.isEqual(role, dataRole);
                })) || dataRoles.push(dataRole);
            }, _a = 0, _b = visualElement.DataRoles; _a < _b.length; _a++) {
                var dataRole = _b[_a];
                _loop_1(dataRole);
            }
            return dataRoles;
        }
        VisualElement.getDataRolesFromVisualElements = getDataRolesFromVisualElements;
    })(VisualElement = powerbi.VisualElement || (powerbi.VisualElement = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var DateTimeSequence = (function() {
        function DateTimeSequence(unit) {
            this.unit = unit, this.sequence = [], this.min = new Date("9999-12-31T23:59:59.999"), 
            this.max = new Date("0001-01-01T00:00:00.000");
        }
        return DateTimeSequence.prototype.add = function(date) {
            date < this.min && (this.min = date), date > this.max && (this.max = date), this.sequence.push(date);
        }, DateTimeSequence.prototype.moveToCover = function(min, max) {
            var delta = DateTimeSequence.getDelta(min, max, this.unit), count = Math.floor(delta / this.interval);
            for (this.min = DateTimeSequence.addInterval(this.min, count * this.interval, this.unit), 
            this.sequence = [], this.sequence.push(this.min), this.max = this.min; this.max < max; ) this.max = DateTimeSequence.addInterval(this.max, this.interval, this.unit), 
            this.sequence.push(this.max);
        }, DateTimeSequence.calculate = function(dataMin, dataMax, expectedCount, unit) {
            switch (unit || (unit = DateTimeSequence.getIntervalUnit(dataMin, dataMax, expectedCount)), 
            unit) {
              case powerbi.DateTimeUnit.Year:
                return DateTimeSequence.calculateYears(dataMin, dataMax, expectedCount);

              case powerbi.DateTimeUnit.Month:
                return DateTimeSequence.calculateMonths(dataMin, dataMax, expectedCount);

              case powerbi.DateTimeUnit.Week:
                return DateTimeSequence.calculateWeeks(dataMin, dataMax, expectedCount);

              case powerbi.DateTimeUnit.Day:
                return DateTimeSequence.calculateDays(dataMin, dataMax, expectedCount);

              case powerbi.DateTimeUnit.Hour:
                return DateTimeSequence.calculateHours(dataMin, dataMax, expectedCount);

              case powerbi.DateTimeUnit.Minute:
                return DateTimeSequence.calculateMinutes(dataMin, dataMax, expectedCount);

              case powerbi.DateTimeUnit.Second:
                return DateTimeSequence.calculateSeconds(dataMin, dataMax, expectedCount);

              case powerbi.DateTimeUnit.Millisecond:
                return DateTimeSequence.calculateMilliseconds(dataMin, dataMax, expectedCount);
            }
        }, DateTimeSequence.calculateYears = function(dataMin, dataMax, expectedCount) {
            var yearsRange = powerbi.NumericSequenceRange.calculateDataRange(dataMin.getFullYear(), dataMax.getFullYear(), !1), sequence = powerbi.NumericSequence.calculate(powerbi.NumericSequenceRange.calculate(0, yearsRange.max - yearsRange.min), expectedCount, 0, null, null, [ 1, 2, 5 ]), newMinYear = Math.floor(yearsRange.min / sequence.interval) * sequence.interval, date = new Date(newMinYear, 0, 1), result = DateTimeSequence.fromNumericSequence(date, sequence, powerbi.DateTimeUnit.Year);
            return result;
        }, DateTimeSequence.calculateMonths = function(dataMin, dataMax, expectedCount) {
            var minYear = dataMin.getFullYear(), maxYear = dataMax.getFullYear(), minMonth = dataMin.getMonth(), maxMonth = 12 * (maxYear - minYear) + dataMax.getMonth(), date = new Date(minYear, 0, 1), sequence = powerbi.NumericSequence.calculateUnits(minMonth, maxMonth, expectedCount, [ 1, 2, 3, 6, 12 ]), result = DateTimeSequence.fromNumericSequence(date, sequence, powerbi.DateTimeUnit.Month);
            return result;
        }, DateTimeSequence.calculateWeeks = function(dataMin, dataMax, expectedCount) {
            var firstDayOfWeek = 0, minDayOfWeek = dataMin.getDay(), dayOffset = (minDayOfWeek - firstDayOfWeek + 7) % 7, minDay = dataMin.getDate() - dayOffset, date = new Date(dataMin.getFullYear(), dataMin.getMonth(), minDay), min = 0, max = powerbi.Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, powerbi.DateTimeUnit.Week)), sequence = powerbi.NumericSequence.calculateUnits(min, max, expectedCount, [ 1, 2, 4, 8 ]), result = DateTimeSequence.fromNumericSequence(date, sequence, powerbi.DateTimeUnit.Week);
            return result;
        }, DateTimeSequence.calculateDays = function(dataMin, dataMax, expectedCount) {
            var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate()), min = 0, max = powerbi.Double.ceilWithPrecision(DateTimeSequence.getDelta(dataMin, dataMax, powerbi.DateTimeUnit.Day)), sequence = powerbi.NumericSequence.calculateUnits(min, max, expectedCount, [ 1, 2, 7, 14 ]), result = DateTimeSequence.fromNumericSequence(date, sequence, powerbi.DateTimeUnit.Day);
            return result;
        }, DateTimeSequence.calculateHours = function(dataMin, dataMax, expectedCount) {
            var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate()), min = powerbi.Double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, powerbi.DateTimeUnit.Hour)), max = powerbi.Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, powerbi.DateTimeUnit.Hour)), sequence = powerbi.NumericSequence.calculateUnits(min, max, expectedCount, [ 1, 2, 3, 6, 12, 24 ]), result = DateTimeSequence.fromNumericSequence(date, sequence, powerbi.DateTimeUnit.Hour);
            return result;
        }, DateTimeSequence.calculateMinutes = function(dataMin, dataMax, expectedCount) {
            var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours()), min = powerbi.Double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, powerbi.DateTimeUnit.Minute)), max = powerbi.Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, powerbi.DateTimeUnit.Minute)), sequence = powerbi.NumericSequence.calculateUnits(min, max, expectedCount, [ 1, 2, 5, 10, 15, 30, 60, 120, 180, 360, 720, 1440 ]), result = DateTimeSequence.fromNumericSequence(date, sequence, powerbi.DateTimeUnit.Minute);
            return result;
        }, DateTimeSequence.calculateSeconds = function(dataMin, dataMax, expectedCount) {
            var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes()), min = powerbi.Double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, powerbi.DateTimeUnit.Second)), max = powerbi.Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, powerbi.DateTimeUnit.Second)), sequence = powerbi.NumericSequence.calculateUnits(min, max, expectedCount, [ 1, 2, 5, 10, 15, 30, 60, 120, 300, 600, 900, 1800, 3600 ]), result = DateTimeSequence.fromNumericSequence(date, sequence, powerbi.DateTimeUnit.Second);
            return result;
        }, DateTimeSequence.calculateMilliseconds = function(dataMin, dataMax, expectedCount) {
            var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes(), dataMin.getSeconds()), min = DateTimeSequence.getDelta(date, dataMin, powerbi.DateTimeUnit.Millisecond), max = DateTimeSequence.getDelta(date, dataMax, powerbi.DateTimeUnit.Millisecond), sequence = powerbi.NumericSequence.calculate(powerbi.NumericSequenceRange.calculate(min, max), expectedCount, 0), result = DateTimeSequence.fromNumericSequence(date, sequence, powerbi.DateTimeUnit.Millisecond);
            return result;
        }, DateTimeSequence.addInterval = function(value, interval, unit) {
            switch (interval = Math.round(interval), unit) {
              case powerbi.DateTimeUnit.Year:
                return DateUtils.addYears(value, interval);

              case powerbi.DateTimeUnit.Month:
                return DateUtils.addMonths(value, interval);

              case powerbi.DateTimeUnit.Week:
                return DateUtils.addWeeks(value, interval);

              case powerbi.DateTimeUnit.Day:
                return DateUtils.addDays(value, interval);

              case powerbi.DateTimeUnit.Hour:
                return DateUtils.addHours(value, interval);

              case powerbi.DateTimeUnit.Minute:
                return DateUtils.addMinutes(value, interval);

              case powerbi.DateTimeUnit.Second:
                return DateUtils.addSeconds(value, interval);

              case powerbi.DateTimeUnit.Millisecond:
                return DateUtils.addMilliseconds(value, interval);
            }
        }, DateTimeSequence.fromNumericSequence = function(date, sequence, unit) {
            for (var result = new DateTimeSequence(unit), _i = 0, _a = sequence.sequence; _i < _a.length; _i++) {
                var x = _a[_i], d = DateTimeSequence.addInterval(date, x, unit);
                result.add(d);
            }
            return result.interval = sequence.interval, result.intervalOffset = sequence.intervalOffset, 
            result;
        }, DateTimeSequence.getDelta = function(min, max, unit) {
            var delta = 0;
            switch (unit) {
              case powerbi.DateTimeUnit.Year:
                delta = max.getFullYear() - min.getFullYear();
                break;

              case powerbi.DateTimeUnit.Month:
                delta = 12 * (max.getFullYear() - min.getFullYear()) + max.getMonth() - min.getMonth();
                break;

              case powerbi.DateTimeUnit.Week:
                delta = (max.getTime() - min.getTime()) / 6048e5;
                break;

              case powerbi.DateTimeUnit.Day:
                delta = (max.getTime() - min.getTime()) / 864e5;
                break;

              case powerbi.DateTimeUnit.Hour:
                delta = (max.getTime() - min.getTime()) / 36e5;
                break;

              case powerbi.DateTimeUnit.Minute:
                delta = (max.getTime() - min.getTime()) / 6e4;
                break;

              case powerbi.DateTimeUnit.Second:
                delta = (max.getTime() - min.getTime()) / 1e3;
                break;

              case powerbi.DateTimeUnit.Millisecond:
                delta = max.getTime() - min.getTime();
            }
            return delta;
        }, DateTimeSequence.getIntervalUnit = function(min, max, maxCount) {
            maxCount = Math.max(maxCount, 2);
            var totalDays = DateTimeSequence.getDelta(min, max, powerbi.DateTimeUnit.Day);
            if (totalDays > 356 && totalDays >= 180 * maxCount) return powerbi.DateTimeUnit.Year;
            if (totalDays > 60 && totalDays > 7 * maxCount) return powerbi.DateTimeUnit.Month;
            if (totalDays > 14 && totalDays > 2 * maxCount) return powerbi.DateTimeUnit.Week;
            var totalHours = DateTimeSequence.getDelta(min, max, powerbi.DateTimeUnit.Hour);
            if (totalDays > 2 && totalHours > 12 * maxCount) return powerbi.DateTimeUnit.Day;
            if (totalHours >= 24 && totalHours >= maxCount) return powerbi.DateTimeUnit.Hour;
            var totalMinutes = DateTimeSequence.getDelta(min, max, powerbi.DateTimeUnit.Minute);
            if (totalMinutes > 2 && totalMinutes >= maxCount) return powerbi.DateTimeUnit.Minute;
            var totalSeconds = DateTimeSequence.getDelta(min, max, powerbi.DateTimeUnit.Second);
            if (totalSeconds > 2 && totalSeconds >= .8 * maxCount) return powerbi.DateTimeUnit.Second;
            var totalMilliseconds = DateTimeSequence.getDelta(min, max, powerbi.DateTimeUnit.Millisecond);
            if (totalMilliseconds > 0) return powerbi.DateTimeUnit.Millisecond;
            var date = min;
            return 0 !== date.getMilliseconds() ? powerbi.DateTimeUnit.Millisecond : 0 !== date.getSeconds() ? powerbi.DateTimeUnit.Second : 0 !== date.getMinutes() ? powerbi.DateTimeUnit.Minute : 0 !== date.getHours() ? powerbi.DateTimeUnit.Hour : 1 !== date.getDate() ? powerbi.DateTimeUnit.Day : 0 !== date.getMonth() ? powerbi.DateTimeUnit.Month : powerbi.DateTimeUnit.Year;
        }, DateTimeSequence.MIN_COUNT = 1, DateTimeSequence.MAX_COUNT = 1e3, DateTimeSequence;
    })();
    powerbi.DateTimeSequence = DateTimeSequence;
    var DateUtils;
    !(function(DateUtils) {
        function isLeap(year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }
        function getMonthDays(year, month) {
            return isLeap(year) ? MonthDaysLeap[month] : MonthDays[month];
        }
        function addYears(date, yearDelta) {
            var year = date.getFullYear(), month = date.getMonth(), day = date.getDate(), isLeapDay = 2 === month && 29 === day, result = new Date(date.getTime());
            return year += yearDelta, isLeapDay && !isLeap(year) && (day = 28), result.setFullYear(year, month, day), 
            result;
        }
        function addMonths(date, monthDelta) {
            var year = date.getFullYear(), month = date.getMonth(), day = date.getDate(), result = new Date(date.getTime());
            return year += (monthDelta - monthDelta % 12) / 12, month += monthDelta % 12, month > 11 && (month %= 12, 
            year++), day = Math.min(day, getMonthDays(year, month)), result.setFullYear(year, month, day), 
            result;
        }
        function addWeeks(date, weeks) {
            return addDays(date, 7 * weeks);
        }
        function addDays(date, days) {
            var year = date.getFullYear(), month = date.getMonth(), day = date.getDate(), result = new Date(date.getTime());
            return result.setFullYear(year, month, day + days), result;
        }
        function addHours(date, hours) {
            return new Date(date.getTime() + 36e5 * hours);
        }
        function addMinutes(date, minutes) {
            return new Date(date.getTime() + 6e4 * minutes);
        }
        function addSeconds(date, seconds) {
            return new Date(date.getTime() + 1e3 * seconds);
        }
        function addMilliseconds(date, milliseconds) {
            return new Date(date.getTime() + milliseconds);
        }
        var MonthDays = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ], MonthDaysLeap = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
        DateUtils.addYears = addYears, DateUtils.addMonths = addMonths, DateUtils.addWeeks = addWeeks, 
        DateUtils.addDays = addDays, DateUtils.addHours = addHours, DateUtils.addMinutes = addMinutes, 
        DateUtils.addSeconds = addSeconds, DateUtils.addMilliseconds = addMilliseconds;
    })(DateUtils = powerbi.DateUtils || (powerbi.DateUtils = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    function createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit) {
        for (var units = [], i = 3; i < maxExponent; i++) {
            var names = unitLookup(i);
            names && addUnitIfNonEmpty(units, powerbi.Double.pow10(i), names.title, names.format, adjustMinBasedOnPreviousUnit);
        }
        return units;
    }
    function addUnitIfNonEmpty(units, value, title, labelFormat, adjustMinBasedOnPreviousUnit) {
        if (title || labelFormat) {
            var min = value;
            if (units.length > 0) {
                var previousUnit = units[units.length - 1];
                adjustMinBasedOnPreviousUnit && (min = adjustMinBasedOnPreviousUnit(value, previousUnit.value, min)), 
                previousUnit.applicableRangeMax = min;
            }
            var unit = new DisplayUnit();
            unit.value = value, unit.applicableRangeMin = min, unit.applicableRangeMax = 1e3 * min, 
            unit.title = title, unit.labelFormat = labelFormat, units.push(unit);
        }
    }
    var maxExponent = 24, defaultScientificBigNumbersBoundary = 1e15, scientificSmallNumbersBoundary = 1e-4, PERCENTAGE_FORMAT = "%", SCIENTIFIC_FORMAT = "E+0", DEFAULT_SCIENTIFIC_FORMAT = "0.##" + SCIENTIFIC_FORMAT, SUPPORTED_SCIENTIFIC_FORMATS = /^([0\#,]*\.[0\#]+|[0\#,]+|g)$/i, DisplayUnit = (function() {
        function DisplayUnit() {}
        return DisplayUnit.prototype.project = function(value) {
            return this.value ? powerbi.Double.removeDecimalNoise(value / this.value) : value;
        }, DisplayUnit.prototype.isApplicableTo = function(value) {
            value = Math.abs(value);
            var precision = powerbi.Double.getPrecision(value, 3);
            return powerbi.Double.greaterOrEqualWithPrecision(value, this.applicableRangeMin, precision) && powerbi.Double.lessWithPrecision(value, this.applicableRangeMax, precision);
        }, DisplayUnit.prototype.isScaling = function() {
            return this.value > 1;
        }, DisplayUnit;
    })();
    powerbi.DisplayUnit = DisplayUnit;
    var DisplayUnitSystem = (function() {
        function DisplayUnitSystem(units) {
            this.units = units ? units : [];
        }
        return Object.defineProperty(DisplayUnitSystem.prototype, "title", {
            get: function() {
                return this.displayUnit ? this.displayUnit.title : void 0;
            },
            enumerable: !0,
            configurable: !0
        }), DisplayUnitSystem.prototype.update = function(value) {
            void 0 !== value && (this.unitBaseValue = value, this.displayUnit = this.findApplicableDisplayUnit(value));
        }, DisplayUnitSystem.prototype.findApplicableDisplayUnit = function(value) {
            for (var _i = 0, _a = this.units; _i < _a.length; _i++) {
                var unit = _a[_i];
                if (unit.isApplicableTo(value)) return unit;
            }
        }, DisplayUnitSystem.prototype.format = function(value, format, decimals, trailingZeros) {
            decimals = this.getNumberOfDecimalsForFormatting(format, decimals);
            var nonScientificFormat = "";
            return this.isFormatSupported(format) && !this.hasScientitifcFormat(format) && this.isScalingUnit() && this.shouldRespectScalingUnit(format) && (value = this.displayUnit.project(value), 
            nonScientificFormat = this.displayUnit.labelFormat), this.formatHelper(value, nonScientificFormat, format, decimals, trailingZeros);
        }, DisplayUnitSystem.prototype.isFormatSupported = function(format) {
            return !DisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);
        }, DisplayUnitSystem.prototype.isPercentageFormat = function(format) {
            return format && format.indexOf(PERCENTAGE_FORMAT) >= 0;
        }, DisplayUnitSystem.prototype.shouldRespectScalingUnit = function(format) {
            return !0;
        }, DisplayUnitSystem.prototype.getNumberOfDecimalsForFormatting = function(format, decimals) {
            return decimals;
        }, DisplayUnitSystem.prototype.isScalingUnit = function() {
            return this.displayUnit && this.displayUnit.isScaling();
        }, DisplayUnitSystem.prototype.formatHelper = function(value, nonScientificFormat, format, decimals, trailingZeros) {
            if ("g" !== format && "G" !== format || null == decimals || (format = powerbi.visuals.valueFormatter.DefaultNumericFormat), 
            format = powerbi.NumberFormat.addDecimalsToFormat(format, decimals, trailingZeros), 
            format && !powerbi.formattingService.isStandardNumberFormat(format)) return powerbi.formattingService.formatNumberWithCustomOverride(value, format, nonScientificFormat);
            format || (format = "G"), nonScientificFormat || (nonScientificFormat = "{0}");
            var text = powerbi.formattingService.formatValue(value, format);
            return powerbi.formattingService.format(nonScientificFormat, [ text ]);
        }, DisplayUnitSystem.prototype.formatSingleValue = function(value, format, decimals, trailingZeros) {
            return this.update(this.shouldUseValuePrecision(value) ? powerbi.Double.getPrecision(value, 8) : value), 
            this.format(value, format, decimals, trailingZeros);
        }, DisplayUnitSystem.prototype.shouldUseValuePrecision = function(value) {
            if (0 === this.units.length) return !0;
            for (var applicableRangeMin = 0, _i = 0, _a = this.units; _i < _a.length; _i++) {
                var unit = _a[_i];
                if (unit.isScaling()) {
                    applicableRangeMin = unit.applicableRangeMin;
                    break;
                }
            }
            return Math.abs(value) < applicableRangeMin;
        }, DisplayUnitSystem.prototype.isScientific = function(value) {
            return value < -defaultScientificBigNumbersBoundary || value > defaultScientificBigNumbersBoundary || -scientificSmallNumbersBoundary < value && value < scientificSmallNumbersBoundary && 0 !== value;
        }, DisplayUnitSystem.prototype.hasScientitifcFormat = function(format) {
            return format && format.toUpperCase().indexOf("E") !== -1;
        }, DisplayUnitSystem.prototype.supportsScientificFormat = function(format) {
            return !format || SUPPORTED_SCIENTIFIC_FORMATS.test(format);
        }, DisplayUnitSystem.prototype.shouldFallbackToScientific = function(value, format) {
            return !this.hasScientitifcFormat(format) && this.supportsScientificFormat(format) && this.isScientific(value);
        }, DisplayUnitSystem.prototype.getScientificFormat = function(data, format, decimals, trailingZeros) {
            if (this.isFormatSupported(format) && this.shouldFallbackToScientific(data, format)) {
                var numericFormat = powerbi.NumberFormat.getNumericFormat(data, format);
                return decimals && (numericFormat = powerbi.NumberFormat.addDecimalsToFormat(numericFormat ? numericFormat : "0", Math.abs(decimals), trailingZeros)), 
                numericFormat ? numericFormat + SCIENTIFIC_FORMAT : DEFAULT_SCIENTIFIC_FORMAT;
            }
            return format;
        }, DisplayUnitSystem.UNSUPPORTED_FORMATS = /^(p\d*)|(e\d*)$/i, DisplayUnitSystem;
    })();
    powerbi.DisplayUnitSystem = DisplayUnitSystem;
    var NoDisplayUnitSystem = (function(_super) {
        function NoDisplayUnitSystem() {
            return _super.call(this, []) || this;
        }
        return __extends(NoDisplayUnitSystem, _super), NoDisplayUnitSystem;
    })(DisplayUnitSystem);
    powerbi.NoDisplayUnitSystem = NoDisplayUnitSystem;
    var DefaultDisplayUnitSystem = (function(_super) {
        function DefaultDisplayUnitSystem(unitLookup) {
            return _super.call(this, DefaultDisplayUnitSystem.getUnits(unitLookup)) || this;
        }
        return __extends(DefaultDisplayUnitSystem, _super), DefaultDisplayUnitSystem.prototype.format = function(data, format, decimals, trailingZeros) {
            return format = this.getScientificFormat(data, format, decimals, trailingZeros), 
            _super.prototype.format.call(this, data, format, decimals, trailingZeros);
        }, DefaultDisplayUnitSystem.reset = function() {
            DefaultDisplayUnitSystem.units = null;
        }, DefaultDisplayUnitSystem.getUnits = function(unitLookup) {
            return DefaultDisplayUnitSystem.units || (DefaultDisplayUnitSystem.units = createDisplayUnits(unitLookup, (function(value, previousUnitValue, min) {
                return value - previousUnitValue >= 1e3 ? value / 10 : min;
            })), DefaultDisplayUnitSystem.units[DefaultDisplayUnitSystem.units.length - 1].applicableRangeMax = 1 / 0), 
            DefaultDisplayUnitSystem.units;
        }, DefaultDisplayUnitSystem;
    })(DisplayUnitSystem);
    powerbi.DefaultDisplayUnitSystem = DefaultDisplayUnitSystem;
    var WholeUnitsDisplayUnitSystem = (function(_super) {
        function WholeUnitsDisplayUnitSystem(unitLookup) {
            return _super.call(this, WholeUnitsDisplayUnitSystem.getUnits(unitLookup)) || this;
        }
        return __extends(WholeUnitsDisplayUnitSystem, _super), WholeUnitsDisplayUnitSystem.reset = function() {
            WholeUnitsDisplayUnitSystem.units = null;
        }, WholeUnitsDisplayUnitSystem.getUnits = function(unitLookup) {
            return WholeUnitsDisplayUnitSystem.units || (WholeUnitsDisplayUnitSystem.units = createDisplayUnits(unitLookup), 
            WholeUnitsDisplayUnitSystem.units[WholeUnitsDisplayUnitSystem.units.length - 1].applicableRangeMax = 1 / 0), 
            WholeUnitsDisplayUnitSystem.units;
        }, WholeUnitsDisplayUnitSystem.prototype.format = function(data, format, decimals, trailingZeros) {
            return format = this.getScientificFormat(data, format, decimals, trailingZeros), 
            _super.prototype.format.call(this, data, format, decimals, trailingZeros);
        }, WholeUnitsDisplayUnitSystem;
    })(DisplayUnitSystem);
    powerbi.WholeUnitsDisplayUnitSystem = WholeUnitsDisplayUnitSystem;
    var DataLabelsDisplayUnitSystem = (function(_super) {
        function DataLabelsDisplayUnitSystem(unitLookup) {
            return _super.call(this, DataLabelsDisplayUnitSystem.getUnits(unitLookup)) || this;
        }
        return __extends(DataLabelsDisplayUnitSystem, _super), DataLabelsDisplayUnitSystem.prototype.isFormatSupported = function(format) {
            return !DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);
        }, DataLabelsDisplayUnitSystem.getUnits = function(unitLookup) {
            if (!DataLabelsDisplayUnitSystem.units) {
                var units = [], adjustMinBasedOnPreviousUnit = function(value, previousUnitValue, min) {
                    return value === -1 && value - previousUnitValue >= 1e3 ? value / 10 : min;
                }, names = unitLookup(-1);
                addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit), 
                names = unitLookup(0), addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit), 
                DataLabelsDisplayUnitSystem.units = units.concat(createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit)), 
                DataLabelsDisplayUnitSystem.units[DataLabelsDisplayUnitSystem.units.length - 1].applicableRangeMax = 1 / 0;
            }
            return DataLabelsDisplayUnitSystem.units;
        }, DataLabelsDisplayUnitSystem.prototype.format = function(data, format, decimals, trailingZeros) {
            return format = this.getScientificFormat(data, format, decimals, trailingZeros), 
            _super.prototype.format.call(this, data, format, decimals, trailingZeros);
        }, DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE = 0, DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE = 1, 
        DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS = /^(e\d*)$/i, DataLabelsDisplayUnitSystem;
    })(DisplayUnitSystem);
    powerbi.DataLabelsDisplayUnitSystem = DataLabelsDisplayUnitSystem;
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var NumericSequence = (function() {
        function NumericSequence() {}
        return NumericSequence.calculate = function(range, expectedCount, maxAllowedMargin, minPower, useZeroRefPoint, steps) {
            var result = new NumericSequence();
            if (expectedCount = void 0 === expectedCount ? 10 : powerbi.Double.ensureInRange(expectedCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT), 
            void 0 === minPower && (minPower = powerbi.Double.MIN_EXP), void 0 === useZeroRefPoint && (useZeroRefPoint = !1), 
            void 0 === maxAllowedMargin && (maxAllowedMargin = 1), void 0 === steps && (steps = [ 1, 2, 5 ]), 
            range.forcedSingleStop) return result.interval = range.getSize(), result.intervalOffset = result.interval - (range.forcedSingleStop - range.min), 
            result.min = range.min, result.max = range.max, result.sequence = [ range.forcedSingleStop ], 
            result;
            var interval = 0, min = 0, max = 9, canExtendMin = maxAllowedMargin > 0 && !range.hasFixedMin, canExtendMax = maxAllowedMargin > 0 && !range.hasFixedMax, size = range.getSize(), exp = powerbi.Double.log10(size), stepExp = powerbi.Double.log10(steps[0]);
            exp -= stepExp;
            var expectedCountExp = powerbi.Double.log10(expectedCount);
            exp -= expectedCountExp, exp = Math.max(exp, minPower - stepExp + 1);
            var count;
            if (0 !== interval) {
                var power = powerbi.Double.pow10(exp), roundMin = powerbi.Double.floorToPrecision(range.min, power), roundMax = powerbi.Double.ceilToPrecision(range.max, power), roundRange = powerbi.NumericSequenceRange.calculateFixedRange(roundMin, roundMax);
                roundRange.shrinkByStep(range, interval), min = roundRange.min, max = roundRange.max, 
                count = Math.floor(roundRange.getSize() / interval);
            } else {
                var dexp = void 0;
                for (dexp = 0; dexp < 3; dexp++) {
                    for (var e = exp + dexp, power = powerbi.Double.pow10(e), roundMin = powerbi.Double.floorToPrecision(range.min, power), roundMax = powerbi.Double.ceilToPrecision(range.max, power), stepsCount = steps.length, stepPower = powerbi.Double.pow10(e - 1), i = 0; i < stepsCount; i++) {
                        var step = steps[i] * stepPower, roundRange = powerbi.NumericSequenceRange.calculateFixedRange(roundMin, roundMax, useZeroRefPoint);
                        if (roundRange.shrinkByStep(range, step), canExtendMin && range.min === roundRange.min && maxAllowedMargin >= 1 && (roundRange.min -= step), 
                        canExtendMax && range.max === roundRange.max && maxAllowedMargin >= 1 && (roundRange.max += step), 
                        count = powerbi.Double.ceilWithPrecision(roundRange.getSize() / step, powerbi.Double.DEFAULT_PRECISION), 
                        count <= expectedCount || 2 === dexp && i === stepsCount - 1 || 1 === expectedCount && 2 === count && (step > range.getSize() || range.min < 0 && range.max > 0 && 2 * step >= range.getSize())) {
                            interval = step, min = roundRange.min, max = roundRange.max;
                            break;
                        }
                    }
                    if (0 !== interval) break;
                }
            }
            (count > 32 * expectedCount || count > NumericSequence.MAX_COUNT) && (count = Math.min(32 * expectedCount, NumericSequence.MAX_COUNT), 
            interval = (max - min) / count), result.min = min, result.max = max, result.interval = interval, 
            result.intervalOffset = min - range.min, result.maxAllowedMargin = maxAllowedMargin, 
            result.canExtendMin = canExtendMin, result.canExtendMax = canExtendMax;
            var precision = powerbi.Double.getPrecision(interval, 0);
            result.precision = precision;
            var sequence = [], x = powerbi.Double.roundToPrecision(min, precision);
            sequence.push(x);
            for (var i = 0; i < count; i++) x = powerbi.Double.roundToPrecision(x + interval, precision), 
            sequence.push(x);
            return result.sequence = sequence, result.trimMinMax(range.min, range.max), result;
        }, NumericSequence.calculateUnits = function(min, max, maxCount, steps) {
            maxCount = powerbi.Double.ensureInRange(maxCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT), 
            min === max && (max = min + 1);
            for (var stepCount = 0, step = 0, i = 0; i < steps.length; i++) {
                step = steps[i];
                var maxStepCount = powerbi.Double.ceilWithPrecision(max / step), minStepCount = powerbi.Double.floorWithPrecision(min / step);
                if (stepCount = maxStepCount - minStepCount, stepCount <= maxCount) break;
            }
            var offset = -min;
            offset %= step;
            var result = new NumericSequence();
            result.sequence = [];
            for (var x = min + offset; result.sequence.push(x), !(x >= max); x += step) ;
            return result.interval = step, result.intervalOffset = offset, result.min = result.sequence[0], 
            result.max = result.sequence[result.sequence.length - 1], result;
        }, NumericSequence.prototype.trimMinMax = function(min, max) {
            var minMargin = (min - this.min) / this.interval, maxMargin = (this.max - max) / this.interval, marginPrecision = .001;
            (!this.canExtendMin || minMargin > this.maxAllowedMargin && minMargin > marginPrecision) && (this.min = min), 
            (!this.canExtendMax || maxMargin > this.maxAllowedMargin && maxMargin > marginPrecision) && (this.max = max);
        }, NumericSequence.MIN_COUNT = 1, NumericSequence.MAX_COUNT = 1e3, NumericSequence;
    })();
    powerbi.NumericSequence = NumericSequence;
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var NumericSequenceRange = (function() {
        function NumericSequenceRange() {}
        return NumericSequenceRange.prototype._ensureIncludeZero = function() {
            this.includeZero && (this.min > 0 && !this.hasFixedMin && (this.min = 0), this.max < 0 && !this.hasFixedMax && (this.max = 0));
        }, NumericSequenceRange.prototype._ensureNotEmpty = function() {
            if (this.min === this.max) if (this.min) {
                var value = this.min, exp = powerbi.Double.log10(Math.abs(value)), step = void 0;
                exp >= 0 && exp < 4 ? (step = .5, this.forcedSingleStop = value) : (step = powerbi.Double.pow10(exp) / 2, 
                this.forcedSingleStop = null), this.min = value - step, this.max = value + step;
            } else this.min = 0, this.max = NumericSequenceRange.DEFAULT_MAX, this.hasFixedMin = !0, 
            this.hasFixedMax = !0;
        }, NumericSequenceRange.prototype._ensureDirection = function() {
            if (this.min > this.max) {
                var temp = this.min;
                this.min = this.max, this.max = temp;
            }
        }, NumericSequenceRange.prototype.getSize = function() {
            return this.max - this.min;
        }, NumericSequenceRange.prototype.shrinkByStep = function(range, step) {
            var oldCount = this.min / step, newCount = range.min / step, deltaCount = Math.floor(newCount - oldCount);
            this.min += deltaCount * step, oldCount = this.max / step, newCount = range.max / step, 
            deltaCount = Math.ceil(newCount - oldCount), this.max += deltaCount * step;
        }, NumericSequenceRange.calculate = function(dataMin, dataMax, fixedMin, fixedMax, includeZero) {
            var result = new NumericSequenceRange();
            return result.includeZero = !!includeZero, result.hasDataRange = ValueUtil.hasValue(dataMin) && ValueUtil.hasValue(dataMax), 
            result.hasFixedMin = ValueUtil.hasValue(fixedMin), result.hasFixedMax = ValueUtil.hasValue(fixedMax), 
            dataMin = powerbi.Double.ensureInRange(dataMin, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE), 
            dataMax = powerbi.Double.ensureInRange(dataMax, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE), 
            result.hasFixedMin && result.hasFixedMax ? (result.min = fixedMin, result.max = fixedMax) : result.hasFixedMin ? (result.min = fixedMin, 
            result.max = dataMax > fixedMin ? dataMax : fixedMin) : result.hasFixedMax ? (result.min = dataMin < fixedMax ? dataMin : fixedMax, 
            result.max = fixedMax) : result.hasDataRange ? (result.min = dataMin, result.max = dataMax) : (result.min = 0, 
            result.max = 0), result._ensureIncludeZero(), result._ensureNotEmpty(), result._ensureDirection(), 
            0 === result.min ? result.hasFixedMin = !0 : 0 === result.max && (result.hasFixedMax = !0), 
            result;
        }, NumericSequenceRange.calculateDataRange = function(dataMin, dataMax, includeZero) {
            return ValueUtil.hasValue(dataMin) && ValueUtil.hasValue(dataMax) ? NumericSequenceRange.calculate(dataMin, dataMax, null, null, includeZero) : NumericSequenceRange.calculateFixedRange(0, NumericSequenceRange.DEFAULT_MAX);
        }, NumericSequenceRange.calculateFixedRange = function(fixedMin, fixedMax, includeZero) {
            var result = new NumericSequenceRange();
            return result.hasDataRange = !1, result.includeZero = includeZero, result.min = fixedMin, 
            result.max = fixedMax, result._ensureIncludeZero(), result._ensureNotEmpty(), result._ensureDirection(), 
            result.hasFixedMin = !0, result.hasFixedMax = !0, result;
        }, NumericSequenceRange.DEFAULT_MAX = 10, NumericSequenceRange.MIN_SUPPORTED_DOUBLE = -1e307, 
        NumericSequenceRange.MAX_SUPPORTED_DOUBLE = 1e307, NumericSequenceRange;
    })();
    powerbi.NumericSequenceRange = NumericSequenceRange;
    var ValueUtil;
    !(function(ValueUtil) {
        function hasValue(value) {
            return void 0 !== value && null !== value;
        }
        ValueUtil.hasValue = hasValue;
    })(ValueUtil = powerbi.ValueUtil || (powerbi.ValueUtil = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var RelativeDateQualifier;
        !(function(RelativeDateQualifier) {
            RelativeDateQualifier[RelativeDateQualifier.Last = 0] = "Last", RelativeDateQualifier[RelativeDateQualifier.Current = 1] = "Current", 
            RelativeDateQualifier[RelativeDateQualifier.Next = 2] = "Next";
        })(RelativeDateQualifier = data.RelativeDateQualifier || (data.RelativeDateQualifier = {}));
        var RelativeDateUnit;
        !(function(RelativeDateUnit) {
            RelativeDateUnit[RelativeDateUnit.Day = 0] = "Day", RelativeDateUnit[RelativeDateUnit.Week = 1] = "Week", 
            RelativeDateUnit[RelativeDateUnit.CalendarWeek = 2] = "CalendarWeek", RelativeDateUnit[RelativeDateUnit.Month = 3] = "Month", 
            RelativeDateUnit[RelativeDateUnit.CalendarMonth = 4] = "CalendarMonth", RelativeDateUnit[RelativeDateUnit.Year = 5] = "Year", 
            RelativeDateUnit[RelativeDateUnit.CalendarYear = 6] = "CalendarYear";
        })(RelativeDateUnit = data.RelativeDateUnit || (data.RelativeDateUnit = {}));
        var RelativeDateRangeHelper;
        !(function(RelativeDateRangeHelper) {
            function getDateRange(date, options) {
                switch (options.relativeUnit) {
                  case RelativeDateUnit.Day:
                    return getDaysRange(date, options);

                  case RelativeDateUnit.Week:
                    return getWeeksRange(date, options);

                  case RelativeDateUnit.CalendarWeek:
                    return getCalendarWeekRange(date, options);

                  case RelativeDateUnit.Month:
                    return getMonthRange(date, options);

                  case RelativeDateUnit.CalendarMonth:
                    return getCalendarMonthRange(date, options);

                  case RelativeDateUnit.Year:
                    return getYearRange(date, options);

                  case RelativeDateUnit.CalendarYear:
                    return getCalendarYearRange(date, options);

                  default:
                    return;
                }
            }
            function getDaysRange(date, options) {
                var result = {
                    min: null,
                    max: null
                };
                switch (options.relativeQualifier) {
                  case RelativeDateQualifier.Last:
                    result.max = options.includeToday ? date : addDays(date, -1), result.min = addDays(result.max, -options.duration + 1);
                    break;

                  case RelativeDateQualifier.Current:
                    result.min = date, result.max = date;
                    break;

                  case RelativeDateQualifier.Next:
                    result.min = options.includeToday ? date : addDays(date, 1), result.max = addDays(result.min, options.duration - 1);
                }
                return result;
            }
            function getWeeksRange(date, options) {
                var result = {
                    min: null,
                    max: null
                };
                switch (options.relativeQualifier) {
                  case RelativeDateQualifier.Last:
                    result.max = options.includeToday ? date : addDays(date, -1), result.min = addDays(result.max, -(7 * options.duration) + 1);
                    break;

                  case RelativeDateQualifier.Current:
                    result = getCalendarWeek(date);
                    break;

                  case RelativeDateQualifier.Next:
                    result.min = options.includeToday ? date : addDays(date, 1), result.max = addDays(result.min, 7 * options.duration - 1);
                }
                return result;
            }
            function getCalendarWeekRange(date, options) {
                var result = {
                    min: null,
                    max: null
                }, dayOfWeek = date.getDay();
                switch (options.relativeQualifier) {
                  case RelativeDateQualifier.Last:
                    var lastDayOfLastWeek = addDays(date, -dayOfWeek - 1);
                    result.min = addDays(lastDayOfLastWeek, -(7 * options.duration) + 1), result.max = lastDayOfLastWeek;
                    break;

                  case RelativeDateQualifier.Current:
                    result = getCalendarWeek(date);
                    break;

                  case RelativeDateQualifier.Next:
                    var firstDayOfNextWeek = addDays(date, 7 - dayOfWeek);
                    result.min = firstDayOfNextWeek, result.max = addDays(firstDayOfNextWeek, 7 * options.duration - 1);
                }
                return result;
            }
            function getMonthRange(date, options) {
                var result = {
                    min: null,
                    max: null
                };
                switch (options.relativeQualifier) {
                  case RelativeDateQualifier.Last:
                    result.max = options.includeToday ? date : addDays(date, -1), result.min = addMonths(result.max, -options.duration);
                    break;

                  case RelativeDateQualifier.Current:
                    result = getCalendarMonth(date);
                    break;

                  case RelativeDateQualifier.Next:
                    result.min = options.includeToday ? date : addDays(date, 1), result.max = addMonths(result.min, options.duration);
                }
                return result;
            }
            function getCalendarMonthRange(date, options) {
                var result = {
                    min: null,
                    max: null
                };
                switch (options.relativeQualifier) {
                  case RelativeDateQualifier.Last:
                    result.min = new Date(date.getFullYear(), date.getMonth() - options.duration, 1), 
                    result.max = new Date(date.getFullYear(), date.getMonth(), 0);
                    break;

                  case RelativeDateQualifier.Current:
                    result = getCalendarMonth(date);
                    break;

                  case RelativeDateQualifier.Next:
                    result.min = new Date(date.getFullYear(), date.getMonth() + 1, 1), result.max = new Date(date.getFullYear(), date.getMonth() + 1 + options.duration, 0);
                }
                return result;
            }
            function getYearRange(date, options) {
                var result = {
                    min: null,
                    max: null
                };
                switch (options.relativeQualifier) {
                  case RelativeDateQualifier.Last:
                    result.max = options.includeToday ? date : addDays(date, -1), result.min = addYears(result.max, -options.duration);
                    break;

                  case RelativeDateQualifier.Current:
                    result = getCalendarYear(date);
                    break;

                  case RelativeDateQualifier.Next:
                    result.min = options.includeToday ? date : addDays(date, 1), result.max = addYears(result.min, options.duration);
                }
                return result;
            }
            function getCalendarYearRange(date, options) {
                var result = {
                    min: null,
                    max: null
                };
                switch (options.relativeQualifier) {
                  case RelativeDateQualifier.Last:
                    result.min = new Date(date.getFullYear() - options.duration, 0, 1), result.max = new Date(date.getFullYear() - 1, 11, 31);
                    break;

                  case RelativeDateQualifier.Current:
                    result = getCalendarYear(date);
                    break;

                  case RelativeDateQualifier.Next:
                    result.min = new Date(date.getFullYear() + 1, 0, 1), result.max = new Date(date.getFullYear() + options.duration, 11, 31);
                }
                return result;
            }
            function getDateRangeRestatement(range) {
                return powerbi.formattingService.format("{0:d} - {1:d}", [ range.min, range.max ]);
            }
            function getRestatement(options) {
                var now = new Date(), nowInUTC = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()), range = getDateRange(nowInUTC, options);
                return getDateRangeRestatement(range);
            }
            function addDays(date, days) {
                return new Date(date.getFullYear(), date.getMonth(), date.getDate() + days);
            }
            function addMonths(date, months) {
                if (0 === months) return date;
                var result, offset = months > 0 ? 1 : -1, dayOfMonth = date.getDate() - offset;
                return result = new Date(date.getFullYear(), date.getMonth() + months, dayOfMonth), 
                result.getDate() !== dayOfMonth && dayOfMonth > 0 && (result = months > 0 ? new Date(date.getFullYear(), date.getMonth() + months + 1, 0) : new Date(date.getFullYear(), date.getMonth() + months + 1, 1)), 
                result;
            }
            function addYears(date, years) {
                return addMonths(date, 12 * years);
            }
            function getDurationMax(qualifier, unit) {
                if (qualifier === RelativeDateQualifier.Current) return 1;
                switch (unit) {
                  case RelativeDateUnit.Year:
                  case RelativeDateUnit.CalendarYear:
                    return 100;

                  case RelativeDateUnit.Month:
                  case RelativeDateUnit.CalendarMonth:
                  case RelativeDateUnit.CalendarWeek:
                  case RelativeDateUnit.Week:
                    return 1e3;

                  default:
                  case RelativeDateUnit.Day:
                    return 1e4;
                }
            }
            function getCalendarWeek(date) {
                var dayOfWeek = date.getDay(), firstDayOfWeek = addDays(date, -dayOfWeek);
                return {
                    min: firstDayOfWeek,
                    max: addDays(firstDayOfWeek, 6)
                };
            }
            function getCalendarMonth(date) {
                return {
                    min: new Date(date.getFullYear(), date.getMonth(), 1),
                    max: new Date(date.getFullYear(), date.getMonth() + 1, 0)
                };
            }
            function getCalendarYear(date) {
                return {
                    min: new Date(date.getFullYear(), 0, 1),
                    max: new Date(date.getFullYear(), 11, 31)
                };
            }
            RelativeDateRangeHelper.getDateRange = getDateRange, RelativeDateRangeHelper.getDateRangeRestatement = getDateRangeRestatement, 
            RelativeDateRangeHelper.getRestatement = getRestatement, RelativeDateRangeHelper.addDays = addDays, 
            RelativeDateRangeHelper.addMonths = addMonths, RelativeDateRangeHelper.addYears = addYears, 
            RelativeDateRangeHelper.getDurationMax = getDurationMax;
        })(RelativeDateRangeHelper = data.RelativeDateRangeHelper || (data.RelativeDateRangeHelper = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var valueFormatter;
        !(function(valueFormatter) {
            function beautify(format) {
                var key = BeautifiedFormat[format];
                return key ? defaultLocalizedStrings[key] || format : format;
            }
            function describeUnit(exponent) {
                var exponentLookup = exponent === -1 ? "Auto" : exponent.toString(), title = defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_Title"], format = exponent <= 0 ? "{0}" : defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_LabelFormat"];
                if (title || format) return {
                    title: title,
                    format: format
                };
            }
            function getLocalizedString(stringId) {
                return defaultLocalizedStrings[stringId];
            }
            function getFormatMetadata(format) {
                return powerbi.NumberFormat.getCustomFormatMetadata(format);
            }
            function setLocaleOptions(options) {
                locale = options, powerbi.DefaultDisplayUnitSystem.reset(), powerbi.WholeUnitsDisplayUnitSystem.reset();
            }
            function createDefaultFormatter(formatString, allowFormatBeautification) {
                void 0 === allowFormatBeautification && (allowFormatBeautification = !1);
                var formatBeaut = allowFormatBeautification ? locale.beautify(formatString) : formatString;
                return {
                    format: function(value) {
                        return null == value ? locale.null : formatCore(value, formatBeaut);
                    }
                };
            }
            function create(options) {
                var format = options.allowFormatBeautification ? locale.beautify(options.format) : options.format;
                if (shouldUseNumericDisplayUnits(options)) {
                    var displayUnitSystem_1 = createDisplayUnitSystem(options.displayUnitSystemType), singleValueFormattingMode_1 = !!options.formatSingleValues;
                    displayUnitSystem_1.update(Math.max(Math.abs(options.value || 0), Math.abs(options.value2 || 0)));
                    var decimals_1, forcePrecision_1 = null != options.precision;
                    return forcePrecision_1 ? decimals_1 = -options.precision : displayUnitSystem_1.displayUnit && displayUnitSystem_1.displayUnit.value > 1 && (decimals_1 = -MaxScaledDecimalPlaces), 
                    {
                        format: function(value) {
                            var formattedValue = getStringFormat(value, !0);
                            if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue)) return formattedValue;
                            var valueNumber = Number(value);
                            return valueNumber && !displayUnitSystem_1.isScalingUnit() && Math.abs(valueNumber) < MaxValueForDisplayUnitRounding && !forcePrecision_1 && (value = powerbi.Double.roundToPrecision(valueNumber)), 
                            singleValueFormattingMode_1 ? displayUnitSystem_1.formatSingleValue(valueNumber, format, decimals_1, forcePrecision_1) : displayUnitSystem_1.format(valueNumber, format, decimals_1, forcePrecision_1);
                        },
                        displayUnit: displayUnitSystem_1.displayUnit,
                        options: options
                    };
                }
                if (shouldUseDateUnits(options.value, options.value2, options.tickCount)) {
                    var unit_1 = powerbi.DateTimeSequence.getIntervalUnit(options.value, options.value2, options.tickCount);
                    return {
                        format: function(value) {
                            if (null == value) return locale.null;
                            var formatString = powerbi.formattingService.dateFormatString(unit_1);
                            return formatCore(value, formatString);
                        },
                        options: options
                    };
                }
                return createDefaultFormatter(format);
            }
            function format(value, format, allowFormatBeautification) {
                return null == value ? locale.null : formatCore(value, allowFormatBeautification ? locale.beautify(format) : format);
            }
            function formatVariantMeasureValue(value, column, formatStringProp, nullsAreBlank) {
                return formatVariantMeasureValueWithDataPointObjects(value, void 0, column, formatStringProp, nullsAreBlank);
            }
            function formatVariantMeasureValueWithDataPointObjects(value, dataPointObjects, column, formatStringProp, nullsAreBlank) {
                if (!(column && column.type && column.type.dateTime) && value instanceof Date) {
                    var valueFormat = getFormatString(DateTimeMetadataColumn, null, !1);
                    return formatCore(value, valueFormat, nullsAreBlank);
                }
                return formatCore(value, getFormatStringWithDataPointObjects(dataPointObjects, column, formatStringProp), nullsAreBlank);
            }
            function createDisplayUnitSystem(displayUnitSystemType) {
                if (null == displayUnitSystemType) return new powerbi.DefaultDisplayUnitSystem(locale.describe);
                switch (displayUnitSystemType) {
                  case powerbi.DisplayUnitSystemType.Default:
                    return new powerbi.DefaultDisplayUnitSystem(locale.describe);

                  case powerbi.DisplayUnitSystemType.WholeUnits:
                    return new powerbi.WholeUnitsDisplayUnitSystem(locale.describe);

                  case powerbi.DisplayUnitSystemType.Verbose:
                    return new powerbi.NoDisplayUnitSystem();

                  case powerbi.DisplayUnitSystemType.DataLabels:
                    return new powerbi.DataLabelsDisplayUnitSystem(locale.describe);

                  default:
                    return new powerbi.DefaultDisplayUnitSystem(locale.describe);
                }
            }
            function shouldUseNumericDisplayUnits(options) {
                var value = options.value, value2 = options.value2, format = options.format, columnType = options.columnType;
                if (options.formatSingleValues && format && Math.abs(value) < MinIntegerValueForDisplayUnits) {
                    var isCustomFormat = !powerbi.NumberFormat.isStandardFormat(format);
                    if (isCustomFormat) {
                        var precision = powerbi.NumberFormat.getCustomFormatMetadata(format, !0).precision;
                        if (precision < MinPrecisionForDisplayUnits) return !1;
                    } else if (powerbi.Double.isInteger(value)) return !1;
                }
                if ("number" == typeof value || "number" == typeof value2) return !(columnType && columnType.temporal && columnType.temporal.year);
            }
            function shouldUseDateUnits(value, value2, tickCount) {
                return value instanceof Date && value2 instanceof Date && void 0 !== tickCount && null !== tickCount;
            }
            function getFormatString(column, formatStringProperty, suppressTypeFallback) {
                if (column) {
                    if (formatStringProperty) {
                        var propertyValue = powerbi.DataViewObjects.getValue(column.objects, formatStringProperty);
                        if (propertyValue) return propertyValue;
                    }
                    if (!suppressTypeFallback) {
                        var columnType = column.type;
                        if (columnType) {
                            if (columnType.dateTime) return valueFormatter.DefaultDateFormat;
                            if (columnType.integer) return columnType.temporal && columnType.temporal.year ? "0" : valueFormatter.DefaultIntegerFormat;
                            if (columnType.numeric) return valueFormatter.DefaultNumericFormat;
                        }
                    }
                }
            }
            function getFormatStringWithDataPointObjects(dataPointObjects, column, formatStringProperty, suppressTypeFallback) {
                if (dataPointObjects) {
                    var propertyValue = powerbi.DataViewObjects.getValue(dataPointObjects, formatStringProperty);
                    if (propertyValue) return propertyValue;
                }
                return getFormatString(column, formatStringProperty, suppressTypeFallback);
            }
            function formatListCompound(strings, conjunction) {
                var result;
                if (!strings) return null;
                var length = strings.length;
                if (length > 0) {
                    result = strings[0];
                    for (var lastIndex = length - 1, i = 1, len = lastIndex; i < len; i++) {
                        var value = strings[i];
                        result = StringExtensions.format(locale.restatementComma, result, value);
                    }
                    if (length > 1) {
                        var value = strings[lastIndex];
                        result = StringExtensions.format(conjunction, result, value);
                    }
                } else result = null;
                return result;
            }
            function formatListAnd(strings) {
                return formatListCompound(strings, locale.restatementCompoundAnd);
            }
            function formatListOr(strings) {
                return formatListCompound(strings, locale.restatementCompoundOr);
            }
            function formatCore(value, format, nullsAreBlank) {
                var formattedValue = getStringFormat(value, !!nullsAreBlank && nullsAreBlank);
                return StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue) ? powerbi.formattingService.formatValue(value, format) : formattedValue;
            }
            function getStringFormat(value, nullsAreBlank) {
                return null == value && nullsAreBlank ? locale.null : value === !0 ? locale.true : value === !1 ? locale.false : "number" == typeof value && isNaN(value) ? locale.NaN : value === Number.NEGATIVE_INFINITY ? locale.negativeInfinity : value === Number.POSITIVE_INFINITY ? locale.infinity : "";
            }
            function getDisplayUnits(displayUnitSystemType) {
                var displayUnitSystem = createDisplayUnitSystem(displayUnitSystemType);
                return displayUnitSystem.units;
            }
            var StringExtensions = jsCommon.StringExtensions, BeautifiedFormat = {
                "0.00 %;-0.00 %;0.00 %": "Percentage",
                "0.0 %;-0.0 %;0.0 %": "Percentage1"
            };
            valueFormatter.DefaultIntegerFormat = "g", valueFormatter.DefaultNumericFormat = "#,0.00", 
            valueFormatter.DefaultDateFormat = "d";
            var defaultLocalizedStrings = {
                NullValue: "(Blank)",
                BooleanTrue: "True",
                BooleanFalse: "False",
                NaNValue: "NaN",
                InfinityValue: "+Infinity",
                NegativeInfinityValue: "-Infinity",
                RestatementComma: "{0}, {1}",
                RestatementCompoundAnd: "{0} and {1}",
                RestatementCompoundOr: "{0} or {1}",
                DisplayUnitSystem_EAuto_Title: "Auto",
                DisplayUnitSystem_E0_Title: "None",
                DisplayUnitSystem_E3_LabelFormat: "{0}K",
                DisplayUnitSystem_E3_Title: "Thousands",
                DisplayUnitSystem_E6_LabelFormat: "{0}M",
                DisplayUnitSystem_E6_Title: "Millions",
                DisplayUnitSystem_E9_LabelFormat: "{0}bn",
                DisplayUnitSystem_E9_Title: "Billions",
                DisplayUnitSystem_E12_LabelFormat: "{0}T",
                DisplayUnitSystem_E12_Title: "Trillions",
                Percentage: "#,0.##%",
                Percentage1: "#,0.#%",
                TableTotalLabel: "Total",
                Tooltip_HighlightedValueDisplayName: "Highlighted",
                Funnel_PercentOfFirst: "Percent of first",
                Funnel_PercentOfPrevious: "Percent of previous",
                Funnel_PercentOfFirst_Highlight: "Percent of first (highlighted)",
                Funnel_PercentOfPrevious_Highlight: "Percent of previous (highlighted)",
                GeotaggingString_Continent: "continent",
                GeotaggingString_Continents: "continents",
                GeotaggingString_Country: "country",
                GeotaggingString_Countries: "countries",
                GeotaggingString_State: "state",
                GeotaggingString_States: "states",
                GeotaggingString_City: "city",
                GeotaggingString_Cities: "cities",
                GeotaggingString_Town: "town",
                GeotaggingString_Towns: "towns",
                GeotaggingString_Province: "province",
                GeotaggingString_Provinces: "provinces",
                GeotaggingString_County: "county",
                GeotaggingString_Counties: "counties",
                GeotaggingString_Village: "village",
                GeotaggingString_Villages: "villages",
                GeotaggingString_Post: "post",
                GeotaggingString_Zip: "zip",
                GeotaggingString_Code: "code",
                GeotaggingString_Place: "place",
                GeotaggingString_Places: "places",
                GeotaggingString_Address: "address",
                GeotaggingString_Addresses: "addresses",
                GeotaggingString_Street: "street",
                GeotaggingString_Streets: "streets",
                GeotaggingString_Longitude: "longitude",
                GeotaggingString_Longitude_Short: "lon",
                GeotaggingString_Longitude_Short2: "long",
                GeotaggingString_Latitude: "latitude",
                GeotaggingString_Latitude_Short: "lat",
                GeotaggingString_PostalCode: "postal code",
                GeotaggingString_PostalCodes: "postal codes",
                GeotaggingString_ZipCode: "zip code",
                GeotaggingString_ZipCodes: "zip codes",
                GeotaggingString_Territory: "territory",
                GeotaggingString_Territories: "territories"
            };
            valueFormatter.getLocalizedString = getLocalizedString;
            var locale = {
                null: defaultLocalizedStrings.NullValue,
                true: defaultLocalizedStrings.BooleanTrue,
                false: defaultLocalizedStrings.BooleanFalse,
                NaN: defaultLocalizedStrings.NaNValue,
                infinity: defaultLocalizedStrings.InfinityValue,
                negativeInfinity: defaultLocalizedStrings.NegativeInfinityValue,
                beautify: function(format) {
                    return beautify(format);
                },
                describe: function(exponent) {
                    return describeUnit(exponent);
                },
                restatementComma: defaultLocalizedStrings.RestatementComma,
                restatementCompoundAnd: defaultLocalizedStrings.RestatementCompoundAnd,
                restatementCompoundOr: defaultLocalizedStrings.RestatementCompoundOr
            }, MaxScaledDecimalPlaces = 2, MaxValueForDisplayUnitRounding = 1e3, MinIntegerValueForDisplayUnits = 1e4, MinPrecisionForDisplayUnits = 2, DateTimeMetadataColumn = {
                displayName: "",
                type: powerbi.ValueType.fromPrimitiveTypeAndCategory(7)
            };
            valueFormatter.getFormatMetadata = getFormatMetadata, valueFormatter.setLocaleOptions = setLocaleOptions, 
            valueFormatter.createDefaultFormatter = createDefaultFormatter, valueFormatter.create = create, 
            valueFormatter.format = format, valueFormatter.formatVariantMeasureValue = formatVariantMeasureValue, 
            valueFormatter.formatVariantMeasureValueWithDataPointObjects = formatVariantMeasureValueWithDataPointObjects, 
            valueFormatter.createDisplayUnitSystem = createDisplayUnitSystem, valueFormatter.getFormatString = getFormatString, 
            valueFormatter.getFormatStringWithDataPointObjects = getFormatStringWithDataPointObjects, 
            valueFormatter.formatListAnd = formatListAnd, valueFormatter.formatListOr = formatListOr, 
            valueFormatter.getDisplayUnits = getDisplayUnits;
        })(valueFormatter = visuals.valueFormatter || (visuals.valueFormatter = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var DateTimeUnit;
    !(function(DateTimeUnit) {
        DateTimeUnit[DateTimeUnit.Year = 0] = "Year", DateTimeUnit[DateTimeUnit.Month = 1] = "Month", 
        DateTimeUnit[DateTimeUnit.Week = 2] = "Week", DateTimeUnit[DateTimeUnit.Day = 3] = "Day", 
        DateTimeUnit[DateTimeUnit.Hour = 4] = "Hour", DateTimeUnit[DateTimeUnit.Minute = 5] = "Minute", 
        DateTimeUnit[DateTimeUnit.Second = 6] = "Second", DateTimeUnit[DateTimeUnit.Millisecond = 7] = "Millisecond";
    })(DateTimeUnit = powerbi.DateTimeUnit || (powerbi.DateTimeUnit = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewCategoricalUtils, inheritSingle = powerbi.Prototype.inheritSingle;
        !(function(DataViewCategoricalUtils) {
            function getCategoriesDataViewObjects(categories) {
                return !_.isEmpty(categories) && categories[0].objects;
            }
            function setCategoriesDataViewObjects(prototypeCategories, objects) {
                if (!_.isEmpty(prototypeCategories)) {
                    var transformedCategories = inheritSingle(prototypeCategories), firstCategoryColumn = transformedCategories[0] = inheritSingle(transformedCategories[0]);
                    return firstCategoryColumn.objects = objects, transformedCategories;
                }
            }
            function getRowCount(dataViewCategorical) {
                var rowCount = _.isEmpty(dataViewCategorical.categories) ? _.isEmpty(dataViewCategorical.values) ? 0 : dataViewCategorical.values[0].values.length : dataViewCategorical.categories[0].values.length;
                return rowCount;
            }
            DataViewCategoricalUtils.getCategoriesDataViewObjects = getCategoriesDataViewObjects, 
            DataViewCategoricalUtils.setCategoriesDataViewObjects = setCategoriesDataViewObjects, 
            DataViewCategoricalUtils.getRowCount = getRowCount;
        })(DataViewCategoricalUtils = data.DataViewCategoricalUtils || (data.DataViewCategoricalUtils = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewMatrixUtils, inherit = powerbi.Prototype.inherit, inheritSingle = powerbi.Prototype.inheritSingle, ArrayExtensions = jsCommon.ArrayExtensions;
        !(function(DataViewMatrixUtils) {
            function isLeafNode(node) {
                return _.isEmpty(node.children);
            }
            function forEachNodeDepthFirst(rootNodes, callback) {
                if (rootNodes) if (isNodeArray(rootNodes)) for (var _i = 0, rootNodes_1 = rootNodes; _i < rootNodes_1.length; _i++) {
                    var rootNode = rootNodes_1[_i];
                    rootNode && forEachNodeDepthFirstRecursive(rootNode, [], callback);
                } else forEachNodeDepthFirstRecursive(rootNodes, [], callback);
            }
            function forEachNodeDepthFirstRecursive(matrixNode, traversalPath, callback) {
                traversalPath.push(matrixNode);
                var traversalResult = callback(matrixNode, traversalPath), shouldContinue = null != traversalResult && 0 !== traversalResult;
                if (1 === traversalResult) {
                    var childNodes = matrixNode.children;
                    if (!_.isEmpty(childNodes)) for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {
                        var nextChild = childNodes_1[_i];
                        if (nextChild && (shouldContinue = forEachNodeDepthFirstRecursive(nextChild, traversalPath, callback), 
                        !shouldContinue)) break;
                    }
                }
                return traversalPath.pop(), shouldContinue;
            }
            function forEachLeafNode(rootNodes, callback) {
                var nextLeafNodeIndex = 0;
                forEachNodeDepthFirst(rootNodes, (function(node, traversalPath) {
                    return isLeafNode(node) && (callback(node, nextLeafNodeIndex, traversalPath), nextLeafNodeIndex++), 
                    1;
                }));
            }
            function isNodeArray(nodeOrNodeArray) {
                return ArrayExtensions.isArrayOrInheritedArray(nodeOrNodeArray);
            }
            function forEachNodeAtLevel(node, targetLevel, callback) {
                if (node.level === targetLevel) return void callback(node);
                var children = node.children;
                if (children && children.length > 0) for (var i = 0, ilen = children.length; i < ilen; i++) forEachNodeAtLevel(children[i], targetLevel, callback);
            }
            function inheritMatrixNodeHierarchy(node, deepestLevelToInherit, useInheritSingle) {
                var returnNode = node, isRootNode = void 0 === node.level, shouldInheritCurrentNode = isRootNode || node.level <= deepestLevelToInherit;
                if (shouldInheritCurrentNode) {
                    var inheritFunc = useInheritSingle ? inheritSingle : inherit, inheritedNode = inheritFunc(node), shouldInheritChildNodes = isRootNode || node.level < deepestLevelToInherit;
                    if (shouldInheritChildNodes && !_.isEmpty(node.children)) {
                        inheritedNode.children = inheritFunc(node.children);
                        for (var i = 0, ilen = inheritedNode.children.length; i < ilen; i++) inheritedNode.children[i] = inheritMatrixNodeHierarchy(inheritedNode.children[i], deepestLevelToInherit, useInheritSingle);
                    }
                    returnNode = inheritedNode;
                }
                return returnNode;
            }
            function containsCompositeGroup(matrixOrHierarchy) {
                var hasCompositeGroup = !1;
                if (matrixOrHierarchy) if (isMatrix(matrixOrHierarchy)) hasCompositeGroup = containsCompositeGroup(matrixOrHierarchy.rows) || containsCompositeGroup(matrixOrHierarchy.columns); else {
                    var hierarchyLevels = matrixOrHierarchy.levels;
                    if (!_.isEmpty(hierarchyLevels)) for (var _i = 0, hierarchyLevels_1 = hierarchyLevels; _i < hierarchyLevels_1.length; _i++) {
                        var level = hierarchyLevels_1[_i];
                        if (level.sources && level.sources.length >= 2) {
                            var isMeasureHeadersLevel = level.sources[0].isMeasure;
                            if (!isMeasureHeadersLevel) {
                                hasCompositeGroup = !0;
                                break;
                            }
                        }
                    }
                }
                return hasCompositeGroup;
            }
            function extractSelectIndices(matrix) {
                var rowsLevels = matrix.rows && matrix.rows.levels, columnsLevels = matrix.columns && matrix.columns.levels, valueSources = matrix.valueSources, dataRegionSelectIndices = {
                    primaryAxis: !_.isEmpty(rowsLevels) && extractSelectIndicesFromHierarchyLevels(rowsLevels),
                    secondaryAxis: !_.isEmpty(columnsLevels) && extractSelectIndicesFromHierarchyLevels(columnsLevels),
                    intersection: !_.isEmpty(valueSources) && _.map(valueSources, (function(source) {
                        return source.index;
                    }))
                };
                return dataRegionSelectIndices;
            }
            function extractSelectIndicesFromHierarchyLevels(levels) {
                return _.map(levels, (function(level) {
                    var sources = level.sources, groupLevel = {
                        selectIndices: _.map(sources, (function(source) {
                            return source.index;
                        }))
                    };
                    return groupLevel;
                }));
            }
            function getRowGroupingLevelsCount(matrix) {
                return matrix && matrix.rows && !_.isEmpty(matrix.rows.levels) ? matrix.rows.levels.length : 0;
            }
            function getColumnGroupingLevelsCount(columns) {
                return !columns || _.isEmpty(columns.levels) ? 0 : columns.levels.length - (data.DataViewMatrixMeasureHeaders.hasMeasureHeadersLevel(columns.levels) ? 1 : 0);
            }
            function isMatrix(matrixOrHierarchy) {
                return "rows" in matrixOrHierarchy && "columns" in matrixOrHierarchy && "valueSources" in matrixOrHierarchy;
            }
            function getLeafNodesPath(root) {
                if (root && !_.isEmpty(root.children)) {
                    var leaves = [];
                    return forEachLeafNode(root, (function(leaf, index, path) {
                        leaves.push(_.clone(path));
                    })), leaves;
                }
            }
            DataViewMatrixUtils.isLeafNode = isLeafNode, DataViewMatrixUtils.forEachNodeDepthFirst = forEachNodeDepthFirst, 
            DataViewMatrixUtils.forEachLeafNode = forEachLeafNode, DataViewMatrixUtils.forEachNodeAtLevel = forEachNodeAtLevel, 
            DataViewMatrixUtils.inheritMatrixNodeHierarchy = inheritMatrixNodeHierarchy, DataViewMatrixUtils.containsCompositeGroup = containsCompositeGroup, 
            DataViewMatrixUtils.extractSelectIndices = extractSelectIndices, DataViewMatrixUtils.getRowGroupingLevelsCount = getRowGroupingLevelsCount, 
            DataViewMatrixUtils.getColumnGroupingLevelsCount = getColumnGroupingLevelsCount, 
            DataViewMatrixUtils.getLeafNodesPath = getLeafNodesPath;
        })(DataViewMatrixUtils = data.DataViewMatrixUtils || (data.DataViewMatrixUtils = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewMetadataColumnUtils;
        !(function(DataViewMetadataColumnUtils) {
            function isForRole(metadataColumn, targetRole) {
                var roles = metadataColumn.roles;
                return !!roles && !!roles[targetRole];
            }
            function isForAnyRole(metadataColumn, targetRoles) {
                var roles = metadataColumn.roles;
                return !!roles && _.any(targetRoles, (function(targetRole) {
                    return roles[targetRole];
                }));
            }
            function isExactMatchRole(roles, targetRole) {
                if (!roles) return !1;
                if (!roles[targetRole]) return !1;
                if (_.size(roles) >= 2) for (var roleName in roles) if (roleName !== targetRole && roles[roleName]) return !1;
                return !0;
            }
            function leftJoinMetadataColumnsAndProjectionOrder(columnSources, projectionOrdering, filterByRoles) {
                var jointResult = [];
                if (!_.isEmpty(columnSources)) for (var selectIndexToProjectionIndicesMap = createSelectIndexToProjectionOrderIndicesMapping(projectionOrdering), j = 0, jlen = columnSources.length; j < jlen; j++) {
                    var column = columnSources[j];
                    if (!filterByRoles || isForAnyRole(column, filterByRoles)) {
                        var projectionIndices = selectIndexToProjectionIndicesMap[column.index];
                        if (_.isEmpty(projectionIndices)) {
                            var jointColumnInfo = {
                                metadataColumn: column,
                                sourceIndex: j,
                                projectionOrderIndex: void 0
                            };
                            jointResult.push(jointColumnInfo);
                        } else for (var _i = 0, projectionIndices_1 = projectionIndices; _i < projectionIndices_1.length; _i++) {
                            var projectionIndex = projectionIndices_1[_i], jointColumnInfo = {
                                metadataColumn: column,
                                sourceIndex: j,
                                projectionOrderIndex: projectionIndex
                            };
                            jointResult.push(jointColumnInfo);
                        }
                    }
                }
                return jointResult;
            }
            function getHierarchyVariationProperty(metadataCols) {
                var hierarchyColumn = _.find(metadataCols, (function(mc) {
                    return mc.expr && data.SQExpr.isHierarchyLevel(mc.expr);
                }));
                if (hierarchyColumn) {
                    var hierarchyLevelExpr = hierarchyColumn.expr, hierarchyExpr = hierarchyLevelExpr.arg;
                    if (data.SQExpr.isHierarchy(hierarchyExpr)) {
                        var variationSourceExpr = hierarchyExpr.arg;
                        if (data.SQExpr.isPropertyVariationSource(variationSourceExpr)) return variationSourceExpr.property;
                    }
                }
            }
            function createSelectIndexToProjectionOrderIndicesMapping(selectIndicesByProjectionOrder) {
                for (var selectIndexToProjectionIndicesMap = {}, i = 0, ilen = selectIndicesByProjectionOrder.length; i < ilen; i++) {
                    var selectIndex = selectIndicesByProjectionOrder[i], projectionOrders = selectIndexToProjectionIndicesMap[selectIndex];
                    projectionOrders || (projectionOrders = selectIndexToProjectionIndicesMap[selectIndex] = []), 
                    projectionOrders.push(i);
                }
                return selectIndexToProjectionIndicesMap;
            }
            DataViewMetadataColumnUtils.isForRole = isForRole, DataViewMetadataColumnUtils.isForAnyRole = isForAnyRole, 
            DataViewMetadataColumnUtils.isExactMatchRole = isExactMatchRole, DataViewMetadataColumnUtils.leftJoinMetadataColumnsAndProjectionOrder = leftJoinMetadataColumnsAndProjectionOrder, 
            DataViewMetadataColumnUtils.getHierarchyVariationProperty = getHierarchyVariationProperty;
        })(DataViewMetadataColumnUtils = data.DataViewMetadataColumnUtils || (data.DataViewMetadataColumnUtils = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        data.scalarKeyMinPropertyIdentifier = {
            objectName: "scalarKey",
            propertyName: "min"
        };
        var ScalarKeyUtils;
        !(function(ScalarKeyUtils) {
            function getScalarKeys(dataViewCategoricalColumn, scalarKeyMinProperty) {
                var columnObjects;
                if (dataViewCategoricalColumn && (columnObjects = dataViewCategoricalColumn.objects), 
                !_.isEmpty(columnObjects)) {
                    for (var scalarKeys = void 0, columnObjectsLength = columnObjects.length, i = 0; i < columnObjectsLength; i++) {
                        var categoryObjects = columnObjects[i], scalarKey = powerbi.DataViewObjects.getValue(categoryObjects, scalarKeyMinProperty);
                        if (void 0 !== scalarKey) {
                            scalarKeys || (scalarKeys = {
                                values: new Array(columnObjectsLength)
                            });
                            var key = {
                                min: scalarKey
                            };
                            scalarKeys.values[i] = key;
                        }
                    }
                    return scalarKeys;
                }
            }
            function hasScalarKeys(mapping) {
                var usingScalarKey = !1, categoryMapping = mapping.categories;
                return data.CompiledDataViewMapping.visitCategoricalCategories(categoryMapping, {
                    visitRole: function(role) {
                        usingScalarKey = usingScalarKey || _.any(role.items, (function(item) {
                            return item.scalarKeyInfo && item.scalarKeyInfo.hasScalarKey;
                        }));
                    }
                }), usingScalarKey;
            }
            ScalarKeyUtils.getScalarKeys = getScalarKeys, ScalarKeyUtils.hasScalarKeys = hasScalarKeys;
        })(ScalarKeyUtils = data.ScalarKeyUtils || (data.ScalarKeyUtils = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var CompiledDataViewMapping;
        !(function(CompiledDataViewMapping) {
            function visitMapping(mapping, visitor) {
                var categorical = mapping.categorical;
                categorical && visitCategorical(categorical, visitor);
                var table = mapping.table;
                table && visitTable(table, visitor);
                var matrix = mapping.matrix;
                matrix && visitMatrix(matrix, visitor);
                var tree = mapping.tree;
                tree && visitTree(tree, visitor);
                var single = mapping.single;
                single && visitSingle(single, visitor);
            }
            function visitCategorical(mapping, visitor) {
                visitCategoricalCategories(mapping.categories, visitor);
                var values = mapping.values;
                visitCategoricalValues(values, visitor), visitGrouped(values, visitor), visitReduction(mapping, visitor);
            }
            function visitCategoricalCategories(mapping, visitor) {
                mapping && (visitBind(mapping, visitor), visitFor(mapping, visitor), visitList(mapping, visitor), 
                visitReduction(mapping, visitor));
            }
            function visitCategoricalValues(mapping, visitor) {
                if (mapping) {
                    visitBind(mapping, visitor, 0), visitFor(mapping, visitor, 0), visitList(mapping, visitor, 0);
                    var group = mapping.group;
                    if (group) for (var _i = 0, _a = group.select; _i < _a.length; _i++) {
                        var item = _a[_i];
                        visitBind(item, visitor, 1), visitFor(item, visitor, 1);
                    }
                }
            }
            function visitTable(mapping, visitor) {
                var rows = mapping.rows;
                visitBind(rows, visitor), visitFor(rows, visitor), visitList(rows, visitor), visitReduction(rows, visitor);
            }
            function visitMatrix(mapping, visitor) {
                visitMatrixRows(mapping.rows, visitor), visitMatrixColumns(mapping.columns, visitor), 
                visitMatrixValues(mapping.values, visitor);
            }
            function visitMatrixRows(mapping, visitor) {
                visitMatrixItemsWithComposite(mapping, visitor);
            }
            function visitMatrixColumns(mapping, visitor) {
                visitMatrixItems(mapping, visitor);
            }
            function visitMatrixValues(mapping, visitor) {
                visitMatrixItems(mapping, visitor);
            }
            function visitMatrixItemsWithComposite(mapping, visitor) {
                mapping && (visitFor(mapping, visitor), visitListWithComposite(mapping, visitor), 
                visitReduction(mapping, visitor));
            }
            function visitMatrixItems(mapping, visitor) {
                mapping && (visitFor(mapping, visitor), visitList(mapping, visitor), visitReduction(mapping, visitor));
            }
            function visitTree(mapping, visitor) {
                visitTreeNodes(mapping.nodes, visitor), visitTreeValues(mapping.values, visitor);
            }
            function visitTreeNodes(mapping, visitor) {
                mapping && (visitFor(mapping, visitor), visitReduction(mapping, visitor));
            }
            function visitTreeValues(mapping, visitor) {
                mapping && visitFor(mapping, visitor);
            }
            function visitBind(mapping, visitor, context) {
                var bind = mapping.bind;
                bind && (null != context ? visitor.visitRole(bind.to, context) : visitor.visitRole(bind.to));
            }
            function visitFor(mapping, visitor, context) {
                var forValue = mapping.for;
                forValue && (null != context ? visitor.visitRole(forValue.in, context) : visitor.visitRole(forValue.in));
            }
            function visitComposite(mapping, visitor, context) {
                var compositeValues = mapping.composite;
                if (compositeValues) {
                    visitor.enterComposite && visitor.enterComposite();
                    for (var _i = 0, compositeValues_1 = compositeValues; _i < compositeValues_1.length; _i++) {
                        var value = compositeValues_1[_i];
                        visitBind(value, visitor, context), visitFor(value, visitor, context);
                    }
                    visitor.exitComposite && visitor.exitComposite();
                }
            }
            function visitList(mapping, visitor, context) {
                var select = mapping.select;
                if (select) for (var _i = 0, select_1 = select; _i < select_1.length; _i++) {
                    var item = select_1[_i];
                    visitBind(item, visitor, context), visitFor(item, visitor, context);
                }
            }
            function visitListWithComposite(mapping, visitor, context) {
                var select = mapping.select;
                if (select) for (var _i = 0, select_2 = select; _i < select_2.length; _i++) {
                    var item = select_2[_i];
                    visitBind(item, visitor, context), visitFor(item, visitor, context), visitComposite(item, visitor, context);
                }
            }
            function visitGrouped(mapping, visitor) {
                if (mapping) {
                    var group = mapping.group;
                    group && (visitor.visitRole(group.by), visitReduction(group, visitor));
                }
            }
            function visitReduction(mapping, visitor) {
                if (visitor.visitReduction) {
                    var reductionAlgorithm = mapping.dataReductionAlgorithm;
                    reductionAlgorithm && visitor.visitReduction(reductionAlgorithm);
                }
            }
            function visitSingle(mapping, visitor) {
                visitor.visitRole(mapping.role);
            }
            CompiledDataViewMapping.visitMapping = visitMapping, CompiledDataViewMapping.visitCategoricalCategories = visitCategoricalCategories, 
            CompiledDataViewMapping.visitCategoricalValues = visitCategoricalValues, CompiledDataViewMapping.visitTable = visitTable, 
            CompiledDataViewMapping.visitMatrixRows = visitMatrixRows, CompiledDataViewMapping.visitMatrixColumns = visitMatrixColumns, 
            CompiledDataViewMapping.visitMatrixValues = visitMatrixValues, CompiledDataViewMapping.visitTreeNodes = visitTreeNodes, 
            CompiledDataViewMapping.visitTreeValues = visitTreeValues, CompiledDataViewMapping.visitGrouped = visitGrouped;
        })(CompiledDataViewMapping = data.CompiledDataViewMapping || (data.CompiledDataViewMapping = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataRoleHelper;
        !(function(DataRoleHelper) {
            function getMeasureIndexOfRole(grouped, roleName) {
                if (!_.isEmpty(grouped)) {
                    var firstGroup = grouped[0];
                    if (firstGroup.values && firstGroup.values.length > 0) for (var i = 0, len = firstGroup.values.length; i < len; ++i) {
                        var value = firstGroup.values[i];
                        if (value && value.source && hasRole(value.source, roleName)) return i;
                    }
                }
                return -1;
            }
            function getCategoryIndexOfRole(categories, roleName) {
                if (!_.isEmpty(categories)) for (var i = 0, ilen = categories.length; i < ilen; i++) if (hasRole(categories[i].source, roleName)) return i;
                return -1;
            }
            function getCategoryIndexesOfRole(categories, roleName) {
                var indexes = [];
                if (!_.isEmpty(categories)) for (var i = 0, ilen = categories.length; i < ilen; i++) hasRole(categories[i].source, roleName) && indexes.push(i);
                return indexes;
            }
            function hasRole(column, name) {
                var roles = column.roles;
                return roles && roles[name];
            }
            function hasRoleInDataView(dataView, name) {
                return null != dataView && null != dataView.metadata && dataView.metadata.columns && _.any(dataView.metadata.columns, (function(c) {
                    return c.roles && void 0 !== c.roles[name];
                }));
            }
            function hasRoleInValueColumn(valueColumn, name) {
                return valueColumn && valueColumn.source && valueColumn.source.roles && valueColumn.source.roles[name] === !0;
            }
            DataRoleHelper.getMeasureIndexOfRole = getMeasureIndexOfRole, DataRoleHelper.getCategoryIndexOfRole = getCategoryIndexOfRole, 
            DataRoleHelper.getCategoryIndexesOfRole = getCategoryIndexesOfRole, DataRoleHelper.hasRole = hasRole, 
            DataRoleHelper.hasRoleInDataView = hasRoleInDataView, DataRoleHelper.hasRoleInValueColumn = hasRoleInValueColumn;
        })(DataRoleHelper = data.DataRoleHelper || (data.DataRoleHelper = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewHierarchyLevelBackfill, StringExtensions = jsCommon.StringExtensions, inheritSingle = powerbi.Prototype.inheritSingle;
        !(function(DataViewHierarchyLevelBackfill) {
            function apply(prototype, quarterPrefix) {
                var categorical = prototype.categorical;
                if (!categorical || _.isEmpty(categorical.categories)) return prototype;
                var categories = categorical.categories, scalarKeys = data.ScalarKeyUtils.getScalarKeys(categories[0], data.scalarKeyMinPropertyIdentifier);
                if (!scalarKeys || _.isEmpty(scalarKeys.values)) return prototype;
                for (var transformedDataView, transformedCategorical, transformedCategories, firstBackfilledIndex, backfilledCategoryValueExpr = [], catIndex = 0, catLen = categories.length; catIndex < catLen; catIndex++) for (var category = categories[catIndex], type = category.source.type, categoryValues = category.values, transformedCategory = void 0, transformedCategoryValues = void 0, valIndex = 0, categoryValuesLen = _.size(categoryValues); valIndex < categoryValuesLen; valIndex++) {
                    var categoryValue = categoryValues[valIndex], scalarKeyValue = scalarKeys.values[valIndex];
                    if (null == categoryValue && null != scalarKeyValue) {
                        transformedDataView || (transformedDataView = inheritSingle(prototype), transformedCategorical = transformedDataView.categorical = inheritSingle(categorical), 
                        transformedCategories = transformedCategorical.categories = inheritSingle(categories)), 
                        transformedCategory || (transformedCategory = transformedCategories[catIndex] = inheritSingle(category), 
                        transformedCategoryValues = transformedCategory.values = inheritSingle(categoryValues));
                        var levelValue = createDateHierarchyLevelFromScalarKey(scalarKeyValue.min, type, quarterPrefix);
                        transformedCategoryValues[valIndex] = levelValue, backfilledCategoryValueExpr[valIndex] || (firstBackfilledIndex || (firstBackfilledIndex = valIndex), 
                        backfilledCategoryValueExpr[valIndex] = []), backfilledCategoryValueExpr[valIndex][catIndex] = data.SQExprBuilder.typedConstant(levelValue, type);
                    }
                }
                for (var catIndex = 0, catLen = _.size(transformedCategories); catIndex < catLen; catIndex++) for (var category = transformedCategories[catIndex], backfillIndex = firstBackfilledIndex, catIdentityLen = _.size(category.identity); backfillIndex < catIdentityLen; backfillIndex++) {
                    var values = backfilledCategoryValueExpr[backfillIndex];
                    values && (category.identity[backfillIndex] = data.createDataViewScopeIdentity(data.SQExprUtils.getDataViewScopeIdentityComparisonExpr(category.identityFields, values)));
                }
                return transformedDataView || prototype;
            }
            function createDateHierarchyLevelFromScalarKey(scalarKey, type, quarterPrefix) {
                if (!_.isDate(scalarKey) || !type || !type.temporal) return null;
                var scalarKeyDate = scalarKey;
                return type.temporal.year ? getYear(scalarKeyDate) : type.temporal.quarter ? getQuarter(scalarKeyDate, quarterPrefix) : type.temporal.month ? getMonth(scalarKeyDate) : type.temporal.day ? getDay(scalarKeyDate) : void 0;
            }
            function getYear(date) {
                return date.getFullYear();
            }
            function getQuarter(date, quarterPrefix) {
                var monthsPerQuarter = 3, quarter = Math.floor((date.getMonth() + monthsPerQuarter) / monthsPerQuarter);
                return StringExtensions.format(quarterPrefix, quarter.toLocaleString());
            }
            function getMonth(date) {
                return powerbi.formattingService.formatValue(date, "MMMM");
            }
            function getDay(date) {
                return date.getDate();
            }
            DataViewHierarchyLevelBackfill.apply = apply;
        })(DataViewHierarchyLevelBackfill = data.DataViewHierarchyLevelBackfill || (data.DataViewHierarchyLevelBackfill = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewConcatenateCategoricalColumns, inherit = powerbi.Prototype.inherit, inheritSingle = powerbi.Prototype.inheritSingle, valueFormatter = powerbi.visuals.valueFormatter;
        !(function(DataViewConcatenateCategoricalColumns) {
            function detectAndApply(dataView, objectDescriptors, applicableRoleMappings, projectionOrdering, projectionActiveItems) {
                var result = dataView, dataViewCategorical = dataView.categorical;
                if (dataViewCategorical) {
                    var concatenationSource = detectCategoricalRoleForHierarchicalGroup(dataViewCategorical, applicableRoleMappings), hierarchyVariationProperty = data.DataViewMetadataColumnUtils.getHierarchyVariationProperty(dataView.metadata.columns);
                    if (concatenationSource && (concatenationSource.categories.length >= 2 || hierarchyVariationProperty)) {
                        var activeItemsToIgnoreInConcatenation = _.chain(projectionActiveItems && projectionActiveItems[concatenationSource.roleName]).filter((function(activeItemInfo) {
                            return activeItemInfo.suppressConcat;
                        })).map((function(activeItemInfo) {
                            return activeItemInfo.queryRef;
                        })).value();
                        result = applyConcatenation(dataView, objectDescriptors, concatenationSource.roleName, concatenationSource.categories, activeItemsToIgnoreInConcatenation, hierarchyVariationProperty);
                    }
                }
                return result;
            }
            function applyToPlayChartCategorical(metadata, objectDescriptors, categoryRoleName, categorical) {
                var result;
                if (!_.isEmpty(categorical.categories) && categorical.categories.length >= 2) {
                    var transformingColumns_1 = inherit(metadata.columns), transformingMetadata = inherit(metadata, (function(m) {
                        m.columns = transformingColumns_1;
                    })), transformingDataView = {
                        metadata: transformingMetadata,
                        categorical: categorical
                    };
                    result = applyConcatenation(transformingDataView, objectDescriptors, categoryRoleName, categorical.categories, []);
                } else result = {
                    metadata: metadata,
                    categorical: categorical
                };
                return result;
            }
            function detectCategoricalRoleForHierarchicalGroup(dataViewCategorical, applicableRoleMappings) {
                var result, categoricalRoleMappings = _.chain(applicableRoleMappings).filter((function(mapping) {
                    return !powerbi.DataViewMapping.getRegressionUsage(mapping);
                })).map((function(mapping) {
                    return mapping.categorical;
                })).value(), isEveryRoleMappingForCategorical = !_.isEmpty(categoricalRoleMappings) && _.every(categoricalRoleMappings, (function(mapping) {
                    return !!mapping;
                }));
                if (isEveryRoleMappingForCategorical) {
                    var targetRoleName_1 = getSingleCategoryRoleNameInEveryRoleMapping(categoricalRoleMappings);
                    if (targetRoleName_1 && isVisualExpectingMaxOneCategoryColumn(targetRoleName_1, applicableRoleMappings)) {
                        var categoryColumnsForTargetRole_1 = _.filter(dataViewCategorical.categories, (function(categoryColumn) {
                            return categoryColumn.source.roles && !!categoryColumn.source.roles[targetRoleName_1];
                        }));
                        if (!_.isEmpty(categoryColumnsForTargetRole_1)) {
                            var areValuesCountsEqual = _.every(categoryColumnsForTargetRole_1, (function(categoryColumn) {
                                return categoryColumn.values.length === categoryColumnsForTargetRole_1[0].values.length;
                            }));
                            areValuesCountsEqual && (result = {
                                roleName: targetRoleName_1,
                                categories: categoryColumnsForTargetRole_1
                            });
                        }
                    }
                }
                return result;
            }
            function getSingleCategoryRoleNameInEveryRoleMapping(categoricalRoleMappings) {
                var categoryRoles = powerbi.DataViewMapping.getRolesIfSameInAllCategoricalMappings(categoricalRoleMappings, powerbi.DataViewMapping.getAllRolesInCategories);
                if (1 === _.size(categoryRoles)) return _.first(categoryRoles);
            }
            function isVisualExpectingMaxOneCategoryColumn(categoricalRoleName, roleMappings) {
                var isVisualExpectingMaxOneCategoryColumn = _.every(roleMappings, (function(roleMapping) {
                    return !_.isEmpty(roleMapping.conditions) && _.every(roleMapping.conditions, (function(condition) {
                        return condition[categoricalRoleName] && 1 === condition[categoricalRoleName].max;
                    }));
                }));
                return isVisualExpectingMaxOneCategoryColumn;
            }
            function applyConcatenation(dataView, objectDescriptors, roleName, columnsSortedByProjectionOrdering, queryRefsToIgnore, hierarchyVariationProperty) {
                var concatenatedValues, valueType, columnsToConcatenate = _.filter(columnsSortedByProjectionOrdering, (function(column) {
                    return !_.contains(queryRefsToIgnore, column.source.queryName);
                }));
                if (1 === columnsSortedByProjectionOrdering.length) concatenatedValues = columnsToConcatenate[0].values, 
                valueType = columnsToConcatenate[0].source.type; else {
                    var formatStringPropId = data.DataViewObjectDescriptors.findFormatString(objectDescriptors);
                    concatenatedValues = concatenateValues(columnsToConcatenate, formatStringPropId), 
                    valueType = powerbi.ValueType.fromDescriptor({
                        text: !0
                    });
                }
                var columnsSourceSortedByProjectionOrdering = _.map(columnsToConcatenate, (function(categoryColumn) {
                    return categoryColumn.source;
                })), concatenatedColumnMetadata = createConcatenatedColumnMetadata(roleName, columnsSourceSortedByProjectionOrdering, valueType, hierarchyVariationProperty), transformedDataView = inheritSingle(dataView);
                addToMetadata(transformedDataView, concatenatedColumnMetadata);
                var dataViewCategorical = dataView.categorical, dataViewObjects = data.DataViewCategoricalUtils.getCategoriesDataViewObjects(dataViewCategorical.categories), concatenatedCategoryColumn = createConcatenatedCategoryColumn(columnsToConcatenate, concatenatedColumnMetadata, concatenatedValues, dataViewObjects), lastColumn = _.last(columnsSortedByProjectionOrdering), insertIndex = _.findIndex(dataViewCategorical.categories, (function(category) {
                    return category === lastColumn;
                })), transformedCategoricalCategories = inheritSingle(dataViewCategorical.categories);
                transformedCategoricalCategories.splice(insertIndex, 0, concatenatedCategoryColumn);
                for (var _loop_2 = function(i) {
                    _.find(columnsSortedByProjectionOrdering, (function(column) {
                        return column === transformedCategoricalCategories[i];
                    })) && transformedCategoricalCategories.splice(i, 1);
                }, i = transformedCategoricalCategories.length - 1; i >= 0; i--) _loop_2(i);
                var transformedCategorical = inheritSingle(dataViewCategorical);
                return transformedCategorical.categories = transformedCategoricalCategories, transformedDataView.categorical = transformedCategorical, 
                transformedDataView;
            }
            function concatenateHierarchyAndCurrentLevelDisplayName(hierarchyVariationProperty, currentHierarchyLevelName) {
                return hierarchyVariationProperty + " " + currentHierarchyLevelName;
            }
            function concatenateValues(columnsSortedByProjectionOrdering, formatStringPropId) {
                for (var concatenatedValues = [], _i = 0, columnsSortedByProjectionOrdering_1 = columnsSortedByProjectionOrdering; _i < columnsSortedByProjectionOrdering_1.length; _i++) for (var categoryColumn = columnsSortedByProjectionOrdering_1[_i], formatString = valueFormatter.getFormatString(categoryColumn.source, formatStringPropId), i = 0, len = categoryColumn.values.length; i < len; i++) {
                    var value = categoryColumn.values && categoryColumn.values[i], formattedValue = valueFormatter.format(value, formatString);
                    concatenatedValues[i] = void 0 === concatenatedValues[i] ? formattedValue : concatenatedValues[i] + " " + formattedValue;
                }
                return concatenatedValues;
            }
            function createConcatenatedColumnMetadata(roleName, sourceColumnsSortedByProjectionOrdering, valueType, hierarchyVariationProperty) {
                var concatenatedDisplayName;
                if (hierarchyVariationProperty) {
                    var currentHierarchyLevelName = _.last(sourceColumnsSortedByProjectionOrdering).displayName;
                    concatenatedDisplayName = concatenateHierarchyAndCurrentLevelDisplayName(hierarchyVariationProperty, currentHierarchyLevelName);
                } else for (var _i = 0, sourceColumnsSortedByProjectionOrdering_1 = sourceColumnsSortedByProjectionOrdering; _i < sourceColumnsSortedByProjectionOrdering_1.length; _i++) {
                    var columnSource = sourceColumnsSortedByProjectionOrdering_1[_i];
                    concatenatedDisplayName = null == concatenatedDisplayName ? columnSource.displayName : concatenatedDisplayName + " " + columnSource.displayName;
                }
                var newRoles = {};
                newRoles[roleName] = !0;
                var newColumnMetadata = {
                    displayName: concatenatedDisplayName,
                    roles: newRoles,
                    type: valueType
                }, columnSourceForCurrentDrillLevel = _.last(sourceColumnsSortedByProjectionOrdering);
                return void 0 !== columnSourceForCurrentDrillLevel.isMeasure && (newColumnMetadata.isMeasure = columnSourceForCurrentDrillLevel.isMeasure), 
                newColumnMetadata.queryName = columnSourceForCurrentDrillLevel.queryName, newColumnMetadata;
            }
            function addToMetadata(transformedDataView, newColumn) {
                var transformedColumns = inheritSingle(transformedDataView.metadata.columns);
                transformedColumns.push(newColumn);
                var transformedMetadata = inheritSingle(transformedDataView.metadata);
                transformedMetadata.columns = transformedColumns, transformedDataView.metadata = transformedMetadata;
            }
            function createConcatenatedCategoryColumn(sourceColumnsSortedByProjectionOrdering, columnMetadata, concatenatedValues, dataViewObjects) {
                var newCategoryColumn = {
                    source: columnMetadata,
                    values: concatenatedValues
                }, firstColumn = sourceColumnsSortedByProjectionOrdering[0];
                return firstColumn.identity && (newCategoryColumn.identity = firstColumn.identity), 
                firstColumn.identityFields && (newCategoryColumn.identityFields = firstColumn.identityFields), 
                dataViewObjects && (newCategoryColumn.objects = dataViewObjects), newCategoryColumn;
            }
            DataViewConcatenateCategoricalColumns.detectAndApply = detectAndApply, DataViewConcatenateCategoricalColumns.applyToPlayChartCategorical = applyToPlayChartCategorical, 
            DataViewConcatenateCategoricalColumns.createConcatenatedColumnMetadata = createConcatenatedColumnMetadata;
        })(DataViewConcatenateCategoricalColumns = data.DataViewConcatenateCategoricalColumns || (data.DataViewConcatenateCategoricalColumns = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var DataViewMapping, ArrayExtensions = jsCommon.ArrayExtensions;
    !(function(DataViewMapping) {
        function getRegressionUsage(dataViewMapping) {
            var regressionUsage = dataViewMapping && dataViewMapping.usage && dataViewMapping.usage.regression;
            return regressionUsage || void 0;
        }
        function getRoles(dataViewMappingPart, visitorFunc) {
            var roles = [];
            if (dataViewMappingPart) {
                var visitorCallback = {
                    visitRole: function(role) {
                        roles.push(role);
                    }
                };
                visitorFunc(dataViewMappingPart, visitorCallback);
            }
            return roles;
        }
        function isForecastDefined(dataViewMapping) {
            var forecastUsage = dataViewMapping && dataViewMapping.usage && dataViewMapping.usage.forecast;
            return !!forecastUsage;
        }
        function getParameterColumns(dataViewMapping) {
            var result = [];
            if (dataViewMapping && dataViewMapping.metadata) for (var metaDataColumns = dataViewMapping.metadata.columns, _i = 0, metaDataColumns_1 = metaDataColumns; _i < metaDataColumns_1.length; _i++) {
                var metaDataColumn = metaDataColumns_1[_i];
                metaDataColumn.parameter && result.push(metaDataColumn);
            }
            return result;
        }
        function getRolesIfSameInAllCategoricalMappings(categoricalRoleMappings, rolesGetter) {
            if (0 !== _.size(categoricalRoleMappings)) {
                var rolesOfEachMapping = _.map(categoricalRoleMappings, (function(roleMapping) {
                    return rolesGetter(roleMapping);
                })), rolesOfFirstMapping = rolesOfEachMapping[0];
                if (!(rolesOfEachMapping.length >= 2) || _.every(rolesOfEachMapping, (function(roles) {
                    return ArrayExtensions.sequenceEqual(roles, rolesOfFirstMapping, (function(role1, role2) {
                        return role1 === role2;
                    }));
                }))) return rolesOfFirstMapping;
            }
        }
        function getAllRolesInCategories(categoricalRoleMapping) {
            if (!categoricalRoleMapping.categories) return [];
            var roleNames = [];
            return DataViewMapping.visitCategoricalCategories(categoricalRoleMapping.categories, {
                visitRole: function(roleName) {
                    roleNames.push(roleName);
                }
            }), roleNames;
        }
        function targetDataViewKinds(roleMappings) {
            if (!roleMappings) return 0;
            for (var result = 0, _i = 0, roleMappings_1 = roleMappings; _i < roleMappings_1.length; _i++) {
                var roleMapping = roleMappings_1[_i];
                roleMapping.categorical && (result |= 1), roleMapping.matrix && (result |= 2), roleMapping.single && (result |= 4), 
                roleMapping.table && (result |= 8), roleMapping.tree && (result |= 16);
            }
            return result;
        }
        DataViewMapping.getRegressionUsage = getRegressionUsage, DataViewMapping.getRoles = getRoles, 
        DataViewMapping.isForecastDefined = isForecastDefined, DataViewMapping.getParameterColumns = getParameterColumns, 
        DataViewMapping.getRolesIfSameInAllCategoricalMappings = getRolesIfSameInAllCategoricalMappings, 
        DataViewMapping.getAllRolesInCategories = getAllRolesInCategories, DataViewMapping.targetDataViewKinds = targetDataViewKinds;
    })(DataViewMapping = powerbi.DataViewMapping || (powerbi.DataViewMapping = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var DataViewMapping;
    !(function(DataViewMapping) {
        function visitMapping(mapping, visitor) {
            var categorical = mapping.categorical;
            categorical && visitCategorical(categorical, visitor);
            var table = mapping.table;
            table && visitTable(table, visitor);
            var matrix = mapping.matrix;
            matrix && visitMatrix(matrix, visitor);
            var tree = mapping.tree;
            tree && visitTree(tree, visitor);
            var single = mapping.single;
            single && visitSingle(single, visitor);
        }
        function visitCategorical(mapping, visitor) {
            visitCategoricalCategories(mapping.categories, visitor);
            var values = mapping.values;
            visitCategoricalValues(values, visitor), visitGrouped(values, visitor), visitReduction(mapping, visitor);
        }
        function visitCategoricalCategories(mapping, visitor) {
            mapping && (visitBind(mapping, visitor), visitFor(mapping, visitor), visitList(mapping, visitor), 
            visitReduction(mapping, visitor));
        }
        function visitCategoricalValues(mapping, visitor) {
            if (mapping) {
                visitBind(mapping, visitor, 0), visitFor(mapping, visitor, 0), visitList(mapping, visitor, 0);
                var group = mapping.group;
                if (group) for (var _i = 0, _a = group.select; _i < _a.length; _i++) {
                    var item = _a[_i];
                    visitBind(item, visitor, 1), visitFor(item, visitor, 1);
                }
            }
        }
        function visitTable(mapping, visitor) {
            var rows = mapping.rows;
            visitBind(rows, visitor), visitFor(rows, visitor), visitList(rows, visitor), visitReduction(rows, visitor);
        }
        function visitMatrix(mapping, visitor) {
            visitMatrixRows(mapping.rows, visitor), visitMatrixColumns(mapping.columns, visitor), 
            visitMatrixValues(mapping.values, visitor);
        }
        function visitMatrixRows(mapping, visitor) {
            visitMatrixItemsWithComposite(mapping, visitor);
        }
        function visitMatrixColumns(mapping, visitor) {
            visitMatrixItems(mapping, visitor);
        }
        function visitMatrixValues(mapping, visitor) {
            visitMatrixItems(mapping, visitor);
        }
        function visitMatrixItemsWithComposite(mapping, visitor) {
            mapping && (visitFor(mapping, visitor), visitListWithComposite(mapping, visitor), 
            visitReduction(mapping, visitor));
        }
        function visitMatrixItems(mapping, visitor) {
            mapping && (visitFor(mapping, visitor), visitList(mapping, visitor), visitReduction(mapping, visitor));
        }
        function visitTree(mapping, visitor) {
            visitTreeNodes(mapping.nodes, visitor), visitTreeValues(mapping.values, visitor);
        }
        function visitTreeNodes(mapping, visitor) {
            mapping && (visitFor(mapping, visitor), visitReduction(mapping, visitor));
        }
        function visitTreeValues(mapping, visitor) {
            mapping && visitFor(mapping, visitor);
        }
        function visitBind(mapping, visitor, context) {
            var bind = mapping.bind;
            bind && (null != context ? visitor.visitRole(bind.to, context) : visitor.visitRole(bind.to));
        }
        function visitFor(mapping, visitor, context) {
            var forValue = mapping.for;
            forValue && (null != context ? visitor.visitRole(forValue.in, context) : visitor.visitRole(forValue.in));
        }
        function visitComposite(mapping, visitor, context) {
            var compositeValues = mapping.composite;
            if (compositeValues) {
                visitor.enterComposite && visitor.enterComposite();
                for (var _i = 0, compositeValues_2 = compositeValues; _i < compositeValues_2.length; _i++) {
                    var value = compositeValues_2[_i];
                    visitBind(value, visitor, context), visitFor(value, visitor, context);
                }
                visitor.exitComposite && visitor.exitComposite();
            }
        }
        function visitList(mapping, visitor, context) {
            var select = mapping.select;
            if (select) for (var _i = 0, select_3 = select; _i < select_3.length; _i++) {
                var item = select_3[_i];
                visitBind(item, visitor, context), visitFor(item, visitor, context);
            }
        }
        function visitListWithComposite(mapping, visitor, context) {
            var select = mapping.select;
            if (select) for (var _i = 0, select_4 = select; _i < select_4.length; _i++) {
                var item = select_4[_i];
                visitBind(item, visitor, context), visitFor(item, visitor, context), visitComposite(item, visitor, context);
            }
        }
        function visitGrouped(mapping, visitor) {
            if (mapping) {
                var group = mapping.group;
                group && (visitor.visitRole(group.by), visitReduction(group, visitor));
            }
        }
        function visitReduction(mapping, visitor) {
            if (visitor.visitReduction) {
                var reductionAlgorithm = mapping.dataReductionAlgorithm;
                reductionAlgorithm && visitor.visitReduction(reductionAlgorithm);
            }
        }
        function visitSingle(mapping, visitor) {
            visitor.visitRole(mapping.role);
        }
        DataViewMapping.visitMapping = visitMapping, DataViewMapping.visitCategorical = visitCategorical, 
        DataViewMapping.visitCategoricalCategories = visitCategoricalCategories, DataViewMapping.visitCategoricalValues = visitCategoricalValues, 
        DataViewMapping.visitTable = visitTable, DataViewMapping.visitMatrixRows = visitMatrixRows, 
        DataViewMapping.visitMatrixColumns = visitMatrixColumns, DataViewMapping.visitMatrixValues = visitMatrixValues, 
        DataViewMapping.visitTreeNodes = visitTreeNodes, DataViewMapping.visitTreeValues = visitTreeValues, 
        DataViewMapping.visitGrouped = visitGrouped;
    })(DataViewMapping = powerbi.DataViewMapping || (powerbi.DataViewMapping = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewNormalizeValues, inheritSingle = powerbi.Prototype.inheritSingle;
        !(function(DataViewNormalizeValues) {
            function apply(options) {
                var rolesToNormalize = _.filter(options.dataRoles, (function(role) {
                    return !_.isEmpty(role.requiredTypes);
                }));
                filterVariantMeasures(options.dataview, options.dataViewMappings, rolesToNormalize);
            }
            function filterVariantMeasures(dataview, dataViewMappings, rolesToNormalize) {
                if (!_.isEmpty(dataViewMappings) && !_.isEmpty(rolesToNormalize)) {
                    for (var columnFilter = generateMetadataColumnFilter(dataview.metadata.columns, rolesToNormalize), valueFilter = generateValueFilter(dataview.metadata.columns, rolesToNormalize), usedMappings = {}, _i = 0, dataViewMappings_1 = dataViewMappings; _i < dataViewMappings_1.length; _i++) {
                        var dataViewMapping = dataViewMappings_1[_i];
                        for (var dataViewMappingProp in dataViewMapping) null != dataview[dataViewMappingProp] && (usedMappings[dataViewMappingProp] = !0);
                    }
                    usedMappings.categorical && filterVariantMeasuresCategorical(dataview.categorical, columnFilter, valueFilter), 
                    usedMappings.table && filterVariantMeasuresTable(dataview.table, columnFilter, valueFilter), 
                    usedMappings.tree && filterVariantMeasuresTreeNode(dataview.tree.root, columnFilter, valueFilter), 
                    usedMappings.matrix && filterVariantMeasuresMatrix(dataview.matrix, columnFilter, valueFilter), 
                    usedMappings.single && filterVariantMeasuresSingle(dataview, dataViewMappings, rolesToNormalize, valueFilter);
                }
            }
            function generateMetadataColumnFilter(columns, rolesToNormalize) {
                if (!columns || !rolesToNormalize) return function() {
                    return !1;
                };
                for (var columnsToNormalize = {}, _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                    var column = columns_1[_i], roles = column.roles;
                    if (roles) for (var _a = 0, rolesToNormalize_1 = rolesToNormalize; _a < rolesToNormalize_1.length; _a++) {
                        var role = rolesToNormalize_1[_a];
                        if (roles[role.name]) {
                            columnsToNormalize[column.index] = !0;
                            break;
                        }
                    }
                }
                return function(columnIndex) {
                    return !isNaN(columnIndex) && !!columnsToNormalize[columnIndex];
                };
            }
            function generateValueFilter(columns, rolesToNormalize) {
                if (!columns || !rolesToNormalize) return function() {
                    return !0;
                };
                for (var columnValueFilters = [], _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
                    var column = columns_2[_i], columnValueFilter = generateColumnValueFilter(column, rolesToNormalize);
                    columnValueFilter && (columnValueFilters[column.index] = columnValueFilter);
                }
                return function(columnIndex, value) {
                    return !columnValueFilters[columnIndex] || columnValueFilters[columnIndex](value);
                };
            }
            function generateColumnValueFilter(column, rolesToNormalize) {
                var requiredTypes = getColumnRequiredTypes(column, rolesToNormalize);
                if (!_.isEmpty(requiredTypes)) return function(value) {
                    return doesValueMatchTypes(value, requiredTypes);
                };
            }
            function getColumnRequiredTypes(column, rolesToNormalize) {
                var requiredTypes = [], columnRoles = column && column.roles;
                if (!columnRoles) return requiredTypes;
                for (var _i = 0, rolesToNormalize_2 = rolesToNormalize; _i < rolesToNormalize_2.length; _i++) {
                    var role = rolesToNormalize_2[_i];
                    if (columnRoles[role.name]) for (var _a = 0, _b = role.requiredTypes; _a < _b.length; _a++) {
                        var typeDescriptor = _b[_a], type = powerbi.ValueType.fromDescriptor(typeDescriptor);
                        requiredTypes.push(type);
                    }
                }
                return requiredTypes;
            }
            function filterVariantMeasuresCategorical(dataview, columnFilter, valueFilter) {
                var values = dataview && dataview.values;
                if (values) {
                    var valuesGrouped = values.grouped();
                    if (valuesGrouped) for (var _i = 0, valuesGrouped_1 = valuesGrouped; _i < valuesGrouped_1.length; _i++) for (var valueGroup = valuesGrouped_1[_i], valuesInGroup = valueGroup.values, _a = 0, valuesInGroup_1 = valuesInGroup; _a < valuesInGroup_1.length; _a++) {
                        var valueColumn = valuesInGroup_1[_a], columnIndex = valueColumn.source.index;
                        if (columnFilter(columnIndex)) for (var i = 0, ilen = valueColumn.values.length; i < ilen; i++) valueColumn.values = normalizeVariant(valueColumn.values, i, columnIndex, valueFilter);
                    }
                }
            }
            function filterVariantMeasuresTable(dataview, columnFilter, valueFilter) {
                var columns = dataview && dataview.columns;
                if (columns) {
                    for (var filteredColumns = [], _i = 0, columns_3 = columns; _i < columns_3.length; _i++) {
                        var column = columns_3[_i];
                        columnFilter(column.index) && filteredColumns.push(column.index);
                    }
                    for (var rows = dataview.rows, i = 0, ilen = rows.length; i < ilen; i++) for (var _a = 0, filteredColumns_1 = filteredColumns; _a < filteredColumns_1.length; _a++) {
                        var index = filteredColumns_1[_a];
                        rows[i] = normalizeVariant(rows[i], index, index, valueFilter);
                    }
                }
            }
            function filterVariantMeasuresTreeNode(node, columnFilter, valueFilter) {
                if (node.values) for (var columnIndex in node.values) columnFilter(columnIndex) && ("object" == typeof node.values[columnIndex] && "value" in node.values[columnIndex] ? node.values[columnIndex] = normalizeVariant(node.values[columnIndex], "value", columnIndex, valueFilter) : node.values = normalizeVariant(node.values, columnIndex, columnIndex, valueFilter)); else if (node.children) for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                    var child = _a[_i];
                    filterVariantMeasuresTreeNode(child, columnFilter, valueFilter);
                }
            }
            function filterVariantMeasuresMatrix(dataview, columnFilter, valueFilter) {
                var root = dataview && dataview.rows && dataview.rows.root;
                root && filterVariantMeasuresMatrixRecursive(dataview, root, columnFilter, valueFilter);
            }
            function filterVariantMeasuresMatrixRecursive(dataviewMatrix, node, columnFilter, valueFilter) {
                if (node.values) for (var id in node.values) {
                    var nodeValue = node.values[id], valueSourceIndex = nodeValue.valueSourceIndex || 0, columnIndex = dataviewMatrix.valueSources[valueSourceIndex].index;
                    _.isNumber(columnIndex) && columnFilter(columnIndex) && (node.values[id] = normalizeVariant(nodeValue, "value", columnIndex, valueFilter));
                } else if (node.children) for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                    var child = _a[_i];
                    filterVariantMeasuresMatrixRecursive(dataviewMatrix, child, columnFilter, valueFilter);
                }
            }
            function filterVariantMeasuresSingle(dataview, dataViewMappings, rolesToNormalize, valueFilter) {
                if (dataview.single) {
                    for (var roleNames = [], _i = 0, rolesToNormalize_3 = rolesToNormalize; _i < rolesToNormalize_3.length; _i++) {
                        var role = rolesToNormalize_3[_i];
                        role.name && roleNames.push(role.name);
                    }
                    for (var columns = dataview.metadata.columns, _a = 0, dataViewMappings_2 = dataViewMappings; _a < dataViewMappings_2.length; _a++) {
                        var dataViewMapping = dataViewMappings_2[_a], roleName = dataViewMapping.single.role;
                        if (roleNames.indexOf(roleName) !== -1) {
                            var column = firstColumnByRoleName(columns, roleName);
                            return void (column && (dataview.single = normalizeVariant(dataview.single, "value", column.index, valueFilter)));
                        }
                    }
                }
            }
            function normalizeVariant(object, key, columnIndex, valueFilter) {
                if (object) {
                    var value = object[key];
                    return null === value || valueFilter(columnIndex, value) || (object = inheritSingle(object), 
                    object[key] = null), object;
                }
            }
            function doesValueMatchTypes(value, types) {
                for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
                    var type = types_1[_i];
                    if (type.numeric || type.integer) return "number" == typeof value;
                }
                return !1;
            }
            function firstColumnByRoleName(columns, roleName) {
                for (var _i = 0, columns_4 = columns; _i < columns_4.length; _i++) {
                    var column = columns_4[_i], columnRoles = column && column.roles;
                    if (columnRoles && columnRoles[roleName]) return column;
                }
            }
            DataViewNormalizeValues.apply = apply, DataViewNormalizeValues.filterVariantMeasures = filterVariantMeasures, 
            DataViewNormalizeValues.generateMetadataColumnFilter = generateMetadataColumnFilter, 
            DataViewNormalizeValues.generateValueFilter = generateValueFilter, DataViewNormalizeValues.getColumnRequiredTypes = getColumnRequiredTypes, 
            DataViewNormalizeValues.normalizeVariant = normalizeVariant;
        })(DataViewNormalizeValues = data.DataViewNormalizeValues || (data.DataViewNormalizeValues = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var DataViewObjects;
    !(function(DataViewObjects) {
        function getValue(objects, propertyId, defaultValue) {
            if (!objects) return defaultValue;
            var object = objects[propertyId.objectName];
            return DataViewObject.getValue(object, propertyId.propertyName, defaultValue);
        }
        function getObject(objects, objectName, defaultValue) {
            if (objects && objects[objectName]) {
                var object = objects[objectName];
                return object;
            }
            return defaultValue;
        }
        function getUserDefinedObjects(objects, objectName) {
            var object = getObject(objects, objectName);
            if (object) return object.$instances;
        }
        function getFillColor(objects, propertyId, defaultColor) {
            var value = getValue(objects, propertyId);
            return value && value.solid ? value.solid.color : defaultColor;
        }
        function mergeObjects(destination, source, selectorId) {
            for (var objectName in source) {
                var sourceObject = source[objectName];
                if (null != sourceObject) {
                    var destinationObject = destination[objectName];
                    destinationObject ? mergeObject(destinationObject, sourceObject, selectorId) : null == selectorId ? destination[objectName] = sourceObject : destination[objectName] = {
                        $instances: (_a = {}, _a[selectorId] = sourceObject, _a)
                    };
                }
            }
            var _a;
        }
        function mergeObject(destination, source, selectorId) {
            if (selectorId) {
                var destinationInstances = destination.$instances;
                null == destinationInstances && (destinationInstances = destination.$instances = {});
                var destinationObject = destinationInstances[selectorId];
                destinationObject || (destinationObject = destinationInstances[selectorId] = {}), 
                mergeObject(destinationObject, source, null);
            } else for (var propertyName in source) if ("$instances" !== propertyName) {
                var sourceProperty = source[propertyName];
                null != sourceProperty && (destination[propertyName] = source[propertyName]);
            }
        }
        DataViewObjects.getValue = getValue, DataViewObjects.getObject = getObject, DataViewObjects.getUserDefinedObjects = getUserDefinedObjects, 
        DataViewObjects.getFillColor = getFillColor, DataViewObjects.mergeObjects = mergeObjects;
    })(DataViewObjects = powerbi.DataViewObjects || (powerbi.DataViewObjects = {}));
    var DataViewObject;
    !(function(DataViewObject) {
        function getValue(object, propertyName, defaultValue) {
            if (!object) return defaultValue;
            var propertyValue = object[propertyName];
            return void 0 === propertyValue ? defaultValue : propertyValue;
        }
        function getFillColorByPropertyName(object, propertyName, defaultColor) {
            var value = getValue(object, propertyName);
            return value && value.solid ? value.solid.color : defaultColor;
        }
        DataViewObject.getValue = getValue, DataViewObject.getFillColorByPropertyName = getFillColorByPropertyName;
    })(DataViewObject = powerbi.DataViewObject || (powerbi.DataViewObject = {}));
    var DataViewObjectProperty;
    !(function(DataViewObjectProperty) {
        function propertyIdentifiersEqual(a, b) {
            return a === b || null != a && null != b && (a.objectName === b.objectName && a.propertyName === b.propertyName);
        }
        DataViewObjectProperty.propertyIdentifiersEqual = propertyIdentifiersEqual;
    })(DataViewObjectProperty = powerbi.DataViewObjectProperty || (powerbi.DataViewObjectProperty = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewObjectDefinitions, JsonComparer = jsCommon.JsonComparer;
        !(function(DataViewObjectDefinitions) {
            function ensure(defns, objectName, selector) {
                var defnsForObject = defns[objectName];
                defnsForObject || (defns[objectName] = defnsForObject = []);
                for (var i = 0, len = defnsForObject.length; i < len; i++) {
                    var defn = defnsForObject[i];
                    if (data.Selector.equals(defn.selector, selector)) return defn;
                }
                var newDefn = {
                    selector: selector,
                    properties: {}
                };
                return defnsForObject.push(newDefn), newDefn;
            }
            function updateSelector(defns, objectName, oldSelector, newSelector) {
                var defn = _.find(defns[objectName], (function(defn) {
                    return data.Selector.equals(defn.selector, oldSelector);
                }));
                defn && (defn.selector = newSelector);
            }
            function deleteObjectDefinition(defns, objectName, selector) {
                var defnsForObject = defns[objectName];
                if (!defnsForObject) return !1;
                var wasObjectDeleted = _.remove(defnsForObject, (function(defn) {
                    return data.Selector.equals(defn.selector, selector);
                })).length > 0;
                return _.isEmpty(defnsForObject) && delete defns[objectName], wasObjectDeleted;
            }
            function deleteProperties(targetDefns, sourceDefns) {
                if (targetDefns && sourceDefns) for (var objName in sourceDefns) for (var objDefns = sourceDefns[objName], _i = 0, objDefns_1 = objDefns; _i < objDefns_1.length; _i++) {
                    var defn = objDefns_1[_i];
                    for (var propName in defn.properties) deleteProperty(targetDefns, objName, defn.selector, propName);
                }
            }
            function extend(targetDefns, defaultDefns) {
                if (targetDefns && defaultDefns) for (var objName in defaultDefns) {
                    var defaultObjDefns = defaultDefns[objName];
                    if (defaultObjDefns) {
                        var targetObjDefns = targetDefns[objName];
                        targetObjDefns || (targetObjDefns = targetDefns[objName] = []), extendObjectDefinitions(targetObjDefns, defaultObjDefns);
                    }
                }
            }
            function moveProperty(objects, sourceObjectName, selector, propertyName, targetObjectName) {
                var sourceObjectDefinition = getObjectDefinition(objects, sourceObjectName, selector);
                if (sourceObjectDefinition) {
                    var property = sourceObjectDefinition.properties[propertyName];
                    if (property) {
                        var targetObjectDefinition = ensure(objects, targetObjectName, selector);
                        targetObjectDefinition.properties[propertyName] = property, delete sourceObjectDefinition.properties[propertyName];
                    }
                }
            }
            function extendObjectDefinitions(targetObjDefns, defaultObjDefns) {
                for (var found, _i = 0, defaultObjDefns_1 = defaultObjDefns; _i < defaultObjDefns_1.length; _i++) {
                    var defaultObjDefn = defaultObjDefns_1[_i];
                    found = !1;
                    for (var _a = 0, targetObjDefns_1 = targetObjDefns; _a < targetObjDefns_1.length; _a++) {
                        var targetObjDefn = targetObjDefns_1[_a];
                        if (data.Selector.equals(targetObjDefn.selector, defaultObjDefn.selector)) {
                            extendPropDefns(targetObjDefn.properties, defaultObjDefn.properties), found = !0;
                            break;
                        }
                    }
                    if (!found) {
                        var newObjDefn = {
                            selector: defaultObjDefn.selector,
                            properties: {}
                        };
                        extendPropDefns(newObjDefn.properties, defaultObjDefn.properties), targetObjDefns.push(newObjDefn);
                    }
                }
            }
            function extendPropDefns(targetPropDefns, defaultPropDefns) {
                for (var propName in defaultPropDefns) {
                    var defaultPropDefn = defaultPropDefns[propName];
                    if (defaultPropDefn) {
                        var targetPropDefn = targetPropDefns[propName];
                        targetPropDefn || (targetPropDefns[propName] = defaultPropDefn);
                    }
                }
            }
            function deleteProperty(defns, objectName, selector, propertyName) {
                var match = getObjectDefinition(defns, objectName, selector);
                if (match) return DataViewObjectDefinition.deleteSingleProperty(match, propertyName);
            }
            function setValue(defns, propertyId, selector, value) {
                ensure(defns, propertyId.objectName, selector).properties[propertyId.propertyName] = value;
            }
            function getValue(defns, propertyId, selector) {
                var properties = getPropertyContainer(defns, propertyId, selector);
                if (properties) return properties[propertyId.propertyName];
            }
            function getPropertyContainer(defns, propertyId, selector) {
                var defn = getObjectDefinition(defns, propertyId.objectName, selector);
                if (defn) return defn.properties;
            }
            function getObjectDefinition(defns, objectName, selector) {
                if (defns) {
                    var defnsForObject = defns[objectName];
                    if (defnsForObject) for (var i = 0, len = defnsForObject.length; i < len; i++) {
                        var defn = defnsForObject[i];
                        if (data.Selector.equals(defn.selector, selector)) return defn;
                    }
                }
            }
            function propertiesAreEqual(a, b) {
                return a instanceof data.SemanticFilter && b instanceof data.SemanticFilter ? data.SemanticFilter.isSameFilter(a, b) : JsonComparer.equals(a, b);
            }
            function allPropertiesAreEqual(a, b) {
                if (Object.keys(a).length !== Object.keys(b).length) return !1;
                for (var property in a) if (!propertiesAreEqual(a[property], b[property])) return !1;
                return !0;
            }
            function encodePropertyValue(value, valueTypeDescriptor) {
                if (valueTypeDescriptor.bool) return "boolean" != typeof value && (value = !1), 
                data.SQExprBuilder.boolean(value);
                if (valueTypeDescriptor.text || valueTypeDescriptor.scripting && valueTypeDescriptor.scripting.source) return data.SQExprBuilder.text(value);
                if (valueTypeDescriptor.numeric) {
                    if ($.isNumeric(value)) return data.SQExprBuilder.double(+value);
                } else if (valueTypeDescriptor.integer) {
                    if ($.isNumeric(value)) return data.SQExprBuilder.integer(Math.floor(+value));
                } else if (valueTypeDescriptor.fill) {
                    if (value) return {
                        solid: {
                            color: data.SQExprBuilder.text(value)
                        }
                    };
                } else {
                    if (valueTypeDescriptor.formatting) return valueTypeDescriptor.formatting.labelDisplayUnits ? data.SQExprBuilder.double(+value) : data.SQExprBuilder.text(value);
                    if (valueTypeDescriptor.enumeration) return $.isNumeric(value) ? data.SQExprBuilder.double(+value) : data.SQExprBuilder.text(value);
                    if (valueTypeDescriptor.misc) value = value ? data.SQExprBuilder.text(value) : null; else if (valueTypeDescriptor.dateTime) value = value ? data.SQExprBuilder.dateTime(value) : null; else if (valueTypeDescriptor.image) {
                        if (value) {
                            var imageValue = value, imageDefinition = {
                                name: data.SQExprBuilder.text(imageValue.name),
                                url: data.SQExprBuilder.text(imageValue.url)
                            };
                            return imageValue.scaling && (imageDefinition.scaling = data.SQExprBuilder.text(imageValue.scaling)), 
                            imageDefinition;
                        }
                    } else if (valueTypeDescriptor.geoJson && value) {
                        var geoJsonValue = value, geoJsonDefinition = {
                            type: data.SQExprBuilder.text(geoJsonValue.type),
                            name: data.SQExprBuilder.text(geoJsonValue.name),
                            content: geoJsonValue.content ? data.SQExprBuilder.text(geoJsonValue.content) : data.SQExprBuilder.nullConstant()
                        };
                        return geoJsonDefinition;
                    }
                }
                return value;
            }
            function clone(original) {
                var cloned = {};
                for (var objectName in original) {
                    var originalDefns = original[objectName];
                    if (!_.isEmpty(originalDefns)) {
                        for (var clonedDefns = [], _i = 0, originalDefns_1 = originalDefns; _i < originalDefns_1.length; _i++) {
                            var originalDefn = originalDefns_1[_i];
                            clonedDefns.push({
                                properties: cloneProperties(originalDefn.properties),
                                selector: originalDefn.selector
                            });
                        }
                        cloned[objectName] = clonedDefns;
                    }
                }
                return cloned;
            }
            function cloneProperties(original) {
                return _.clone(original);
            }
            function visitPropertyExprs(options) {
                function visit(container, key, propertyType) {
                    var value = container[key];
                    if (value instanceof data.SQExpr) visitor(value, container, key, propertyType, propertyPath); else if ("object" == typeof value) for (var subkey in value) propertyPath.push(subkey), 
                    visit(value, subkey, propertyType), propertyPath.pop();
                }
                var definitions = options.definitions, descriptors = options.descriptors, visitor = options.visitor, propertyPath = [];
                for (var objectName in definitions) if (!_.isEmpty(definitions[objectName])) for (var objectDescriptor = descriptors && descriptors[objectName], _i = 0, _a = definitions[objectName]; _i < _a.length; _i++) {
                    var objectDefinition = _a[_i], objectProperties = objectDefinition.properties;
                    if (objectProperties) for (var propertyName in objectProperties) {
                        var propertyDescriptor = objectDescriptor && objectDescriptor.properties[propertyName];
                        visit(objectProperties, propertyName, propertyDescriptor && propertyDescriptor.type);
                    }
                }
            }
            DataViewObjectDefinitions.ensure = ensure, DataViewObjectDefinitions.updateSelector = updateSelector, 
            DataViewObjectDefinitions.deleteObjectDefinition = deleteObjectDefinition, DataViewObjectDefinitions.deleteProperties = deleteProperties, 
            DataViewObjectDefinitions.extend = extend, DataViewObjectDefinitions.moveProperty = moveProperty, 
            DataViewObjectDefinitions.deleteProperty = deleteProperty, DataViewObjectDefinitions.setValue = setValue, 
            DataViewObjectDefinitions.getValue = getValue, DataViewObjectDefinitions.getPropertyContainer = getPropertyContainer, 
            DataViewObjectDefinitions.getObjectDefinition = getObjectDefinition, DataViewObjectDefinitions.propertiesAreEqual = propertiesAreEqual, 
            DataViewObjectDefinitions.allPropertiesAreEqual = allPropertiesAreEqual, DataViewObjectDefinitions.encodePropertyValue = encodePropertyValue, 
            DataViewObjectDefinitions.clone = clone, DataViewObjectDefinitions.visitPropertyExprs = visitPropertyExprs;
        })(DataViewObjectDefinitions = data.DataViewObjectDefinitions || (data.DataViewObjectDefinitions = {}));
        var DataViewObjectDefinition;
        !(function(DataViewObjectDefinition) {
            function deleteSingleProperty(defn, propertyName) {
                var properties = defn.properties;
                if (propertyName in properties) return delete defn.properties[propertyName], !0;
            }
            function isValidPropertyName(propertyName) {
                return !_.startsWith(propertyName, "$");
            }
            DataViewObjectDefinition.deleteSingleProperty = deleteSingleProperty, DataViewObjectDefinition.isValidPropertyName = isValidPropertyName;
        })(DataViewObjectDefinition = data.DataViewObjectDefinition || (data.DataViewObjectDefinition = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewObjectDescriptors;
        !(function(DataViewObjectDescriptors) {
            function findFormatString(descriptors) {
                return findProperty(descriptors, (function(propDesc) {
                    var formattingTypeDesc = powerbi.ValueType.fromDescriptor(propDesc.type).formatting;
                    return formattingTypeDesc && formattingTypeDesc.formatString;
                }));
            }
            function findFilterOutput(descriptors) {
                return findProperty(descriptors, (function(propDesc) {
                    var propType = propDesc.type;
                    return propType && propType.filter && !propType.filter.selfFilter;
                }));
            }
            function findSelfFilter(descriptors) {
                return findProperty(descriptors, isSelfFilter);
            }
            function isSelfFilter(descriptor) {
                var propType = descriptor && descriptor.type;
                return propType && propType.filter && propType.filter.selfFilter;
            }
            function findSelfFilterEnabled(descriptors) {
                return findProperty(descriptors, (function(propDesc) {
                    var propType = propDesc.type;
                    return propType && propType.operations && propType.operations.searchEnabled;
                }));
            }
            function findDefaultValue(descriptors) {
                return findProperty(descriptors, (function(propDesc) {
                    var propType = propDesc.type;
                    return propType && !!propType.expression && propType.expression.defaultValue;
                }));
            }
            function findPropertyById(descriptors, propertyId) {
                if (!_.isEmpty(descriptors)) {
                    var objectDescriptor = descriptors[propertyId.objectName];
                    if (objectDescriptor && !_.isEmpty(objectDescriptor.properties)) return objectDescriptor.properties[propertyId.propertyName];
                }
            }
            function findProperty(descriptors, propPredicate) {
                if (descriptors) for (var objectName in descriptors) {
                    var objPropDescs = descriptors[objectName].properties;
                    for (var propertyName in objPropDescs) if (propPredicate(objPropDescs[propertyName])) return {
                        objectName: objectName,
                        propertyName: propertyName
                    };
                }
            }
            DataViewObjectDescriptors.findFormatString = findFormatString, DataViewObjectDescriptors.findFilterOutput = findFilterOutput, 
            DataViewObjectDescriptors.findSelfFilter = findSelfFilter, DataViewObjectDescriptors.isSelfFilter = isSelfFilter, 
            DataViewObjectDescriptors.findSelfFilterEnabled = findSelfFilterEnabled, DataViewObjectDescriptors.findDefaultValue = findDefaultValue, 
            DataViewObjectDescriptors.findPropertyById = findPropertyById;
        })(DataViewObjectDescriptors = data.DataViewObjectDescriptors || (data.DataViewObjectDescriptors = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewObjectEvaluationUtils;
        !(function(DataViewObjectEvaluationUtils) {
            function evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns) {
                for (var objects, j = 0, jlen = objectDefns.length; j < jlen; j++) {
                    var objectDefinition = objectDefns[j], objectName = objectDefinition.name, evaluatedObject = data.DataViewObjectEvaluator.run(evalContext, objectDescriptors[objectName], objectDefinition.properties);
                    evaluatedObject && (objects || (objects = {}), objects[objectName] = evaluatedObject);
                }
                return objects;
            }
            function groupObjectsBySelector(objectDefinitions) {
                var grouped = {
                    data: []
                };
                if (objectDefinitions) for (var objectName in objectDefinitions) for (var objectDefnList = objectDefinitions[objectName], i = 0, len = objectDefnList.length; i < len; i++) {
                    var objectDefn = objectDefnList[i];
                    ensureDefinitionListForSelector(grouped, objectDefn.selector).objects.push({
                        name: objectName,
                        properties: objectDefn.properties
                    });
                }
                return grouped;
            }
            function ensureDefinitionListForSelector(grouped, selector) {
                var groupedObjects;
                selector && selector.data ? groupedObjects = grouped.data : selector && selector.metadata ? (grouped.metadata || (grouped.metadata = []), 
                groupedObjects = grouped.metadata) : (grouped.metadataOnce || (grouped.metadataOnce = []), 
                groupedObjects = grouped.metadataOnce);
                for (var _i = 0, groupedObjects_1 = groupedObjects; _i < groupedObjects_1.length; _i++) {
                    var item_1 = groupedObjects_1[_i];
                    if (data.Selector.equals(selector, item_1.selector)) return item_1;
                }
                var item = {
                    selector: selector,
                    objects: []
                };
                return groupedObjects.push(item), item;
            }
            function addImplicitObjects(objectsForAllSelectors, objectDescriptors, columns, selectTransforms) {
                selectTransforms && (addDefaultFormatString(objectsForAllSelectors, objectDescriptors, columns, selectTransforms), 
                addDefaultValue(objectsForAllSelectors, objectDescriptors, columns, selectTransforms));
            }
            function addDefaultFormatString(objectsForAllSelectors, objectDescriptors, columns, selectTransforms) {
                var formatStringProp = data.DataViewObjectDescriptors.findFormatString(objectDescriptors);
                if (formatStringProp) for (var selectIdx = 0, selectLen = selectTransforms.length; selectIdx < selectLen; selectIdx++) {
                    var selectTransform = selectTransforms[selectIdx];
                    selectTransform && applyFormatString(objectsForAllSelectors, formatStringProp, selectTransform.queryName, selectTransform.format || getColumnFormatForIndex(columns, selectIdx));
                }
            }
            function addDefaultValue(objectsForAllSelectors, objectDescriptors, columns, selectTransforms) {
                var defaultValueProp = data.DataViewObjectDescriptors.findDefaultValue(objectDescriptors);
                if (defaultValueProp) for (var _i = 0, selectTransforms_1 = selectTransforms; _i < selectTransforms_1.length; _i++) {
                    var selectTransform = selectTransforms_1[_i];
                    selectTransform && applyDefaultValue(objectsForAllSelectors, defaultValueProp, selectTransform.queryName, selectTransform.defaultValue);
                }
            }
            function getColumnFormatForIndex(columns, selectIdx) {
                for (var columnIdx = 0, columnLen = columns.length; columnIdx < columnLen; columnIdx++) {
                    var column = columns[columnIdx];
                    if (column && column.index === selectIdx) return column.format;
                }
            }
            function applyFormatString(objectsForAllSelectors, formatStringProp, queryName, formatStringValue) {
                formatStringValue && applyMetadataProperty(objectsForAllSelectors, formatStringProp, {
                    metadata: queryName
                }, data.SQExprBuilder.text(formatStringValue));
            }
            function applyDefaultValue(objectsForAllSelectors, defaultValueProp, queryName, defaultValue) {
                defaultValue && applyMetadataProperty(objectsForAllSelectors, defaultValueProp, {
                    metadata: queryName
                }, defaultValue);
            }
            function applyMetadataProperty(objectsForAllSelectors, propertyId, selector, value) {
                var objectDefns;
                if (selector) {
                    var metadataObjects = objectsForAllSelectors.metadata;
                    metadataObjects || (metadataObjects = objectsForAllSelectors.metadata = []), objectDefns = metadataObjects;
                } else {
                    var metadataOnce = objectsForAllSelectors.metadataOnce;
                    metadataOnce || (metadataOnce = objectsForAllSelectors.metadataOnce = [ {
                        selector: selector,
                        objects: []
                    } ]), objectDefns = metadataOnce;
                }
                var targetObjectDefn, targetMetadataObject = findWithMatchingSelector(objectDefns, selector);
                if (targetMetadataObject) {
                    var targetObjectDefns = targetMetadataObject.objects;
                    if (targetObjectDefn = findExistingObject(targetObjectDefns, propertyId.objectName)) {
                        if (targetObjectDefn.properties[propertyId.propertyName]) return;
                    } else targetObjectDefn = {
                        name: propertyId.objectName,
                        properties: {}
                    }, targetObjectDefns.push(targetObjectDefn);
                } else targetObjectDefn = {
                    name: propertyId.objectName,
                    properties: {}
                }, objectDefns.push({
                    selector: selector,
                    objects: [ targetObjectDefn ]
                });
                targetObjectDefn.properties[propertyId.propertyName] = value;
            }
            function findWithMatchingSelector(objects, selector) {
                for (var i = 0, len = objects.length; i < len; i++) {
                    var object = objects[i];
                    if (data.Selector.equals(object.selector, selector)) return object;
                }
            }
            function findExistingObject(objectDefns, objectName) {
                for (var i = 0, len = objectDefns.length; i < len; i++) {
                    var objectDefn = objectDefns[i];
                    if (objectDefn.name === objectName) return objectDefn;
                }
            }
            DataViewObjectEvaluationUtils.evaluateDataViewObjects = evaluateDataViewObjects, 
            DataViewObjectEvaluationUtils.groupObjectsBySelector = groupObjectsBySelector, DataViewObjectEvaluationUtils.addImplicitObjects = addImplicitObjects;
        })(DataViewObjectEvaluationUtils = data.DataViewObjectEvaluationUtils || (data.DataViewObjectEvaluationUtils = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewObjectEvaluator, Color = jsCommon.Color;
        !(function(DataViewObjectEvaluator) {
            function run(evalContext, objectDescriptor, propertyDefinitions) {
                if (objectDescriptor) {
                    var object, propertyDescriptors = objectDescriptor.properties;
                    for (var propertyName in propertyDefinitions) {
                        var propertyDefinition = propertyDefinitions[propertyName], propertyDescriptor = propertyDescriptors[propertyName];
                        if (propertyDescriptor) {
                            var propertyValue = evaluateProperty(evalContext, propertyDescriptor, propertyDefinition);
                            void 0 !== propertyValue && (object || (object = {}), object[propertyName] = propertyValue);
                        }
                    }
                    return object;
                }
            }
            function evaluateProperty(evalContext, propertyDescriptor, propertyDefinition) {
                var structuralType = propertyDescriptor.type;
                if (structuralType && structuralType.expression) return propertyDefinition;
                var value = evaluateValue(evalContext, propertyDefinition, powerbi.ValueType.fromDescriptor(propertyDescriptor.type));
                return void 0 !== value || propertyDefinition instanceof data.RuleEvaluation ? value : evaluateFill(evalContext, propertyDefinition, structuralType) || evaluateFillRule(evalContext, propertyDefinition, structuralType) || evaluateImage(evalContext, propertyDefinition, structuralType) || evaluateParagraphs(evalContext, propertyDefinition, structuralType) || evaluateGeoJson(evalContext, propertyDefinition, structuralType) || evaluateDataBars(evalContext, propertyDefinition, structuralType) || propertyDefinition;
            }
            function evaluateFill(evalContext, fillDefn, type) {
                var fillType = type.fill;
                if (fillType) return fillType && fillType.solid && fillType.solid.color && fillDefn.solid ? {
                    solid: {
                        color: evaluateValue(evalContext, fillDefn.solid.color, powerbi.ValueType.fromExtendedType(19664897))
                    }
                } : void 0;
            }
            function evaluateFillRule(evalContext, fillRuleDefn, type) {
                if (type.fillRule) {
                    var output;
                    if (fillRuleDefn.linearGradient2) {
                        var input = fillRuleDefn.linearGradient2;
                        output = {
                            linearGradient2: {
                                min: evaluateColorStop(evalContext, input.min),
                                max: evaluateColorStop(evalContext, input.max)
                            }
                        };
                        var strategy = evaluateNullStrategy(evalContext, input.nullColoringStrategy);
                        strategy && (output.linearGradient2.nullColoringStrategy = strategy);
                    } else if (fillRuleDefn.linearGradient3) {
                        var input = fillRuleDefn.linearGradient3;
                        output = {
                            linearGradient3: {
                                min: evaluateColorStop(evalContext, input.min),
                                mid: evaluateColorStop(evalContext, input.mid),
                                max: evaluateColorStop(evalContext, input.max)
                            }
                        };
                        var strategy = evaluateNullStrategy(evalContext, input.nullColoringStrategy);
                        strategy && (output.linearGradient3.nullColoringStrategy = strategy);
                    } else if (fillRuleDefn.conditional) {
                        var input = fillRuleDefn.conditional;
                        output = {
                            conditional: {
                                cases: _.map(input.cases, (function(caseDefn) {
                                    return {
                                        condition: caseDefn.condition,
                                        color: evaulateColor(evalContext, caseDefn.color)
                                    };
                                }))
                            }
                        };
                        var strategy = evaluateNullStrategy(evalContext, input.nullColoringStrategy);
                        strategy && (output.conditional.nullColoringStrategy = strategy);
                    }
                    return output;
                }
            }
            function evaluateColorStop(evalContext, colorStop) {
                var step = {
                    color: evaulateColor(evalContext, colorStop.color)
                }, value = evaluateValue(evalContext, colorStop.value, numericType);
                return null != value && (step.value = value), step;
            }
            function evaulateColor(evalContext, color) {
                return evaluateValue(evalContext, color, colorValueType);
            }
            function evaluateNullStrategy(evalContext, input) {
                if (input) {
                    var output = {
                        strategy: evaluateValue(evalContext, input.strategy, nullStrategyType)
                    };
                    return input.color && (output.color = evaulateColor(evalContext, input.color)), 
                    output;
                }
            }
            function evaluateImage(evalContext, definition, type) {
                if (type.image && definition) {
                    var value = {
                        name: evaluateValue(evalContext, definition.name, textType),
                        url: evaluateValue(evalContext, definition.url, powerbi.ValueType.fromDescriptor(powerbi.ImageDefinition.urlType))
                    };
                    return definition.scaling && (value.scaling = evaluateValue(evalContext, definition.scaling, textType)), 
                    value;
                }
            }
            function evaluateParagraphs(evalContext, definition, type) {
                if (type.paragraphs && definition) return evaluateArrayCopyOnChange(evalContext, definition, evaluateParagraph);
            }
            function evaluateParagraph(evalContext, definition) {
                var evaluated, definitionTextRuns = definition.textRuns, evaluatedTextRuns = evaluateArrayCopyOnChange(evalContext, definitionTextRuns, evaluateTextRun);
                return definitionTextRuns !== evaluatedTextRuns && (evaluated = _.clone(definition), 
                evaluated.textRuns = evaluatedTextRuns), evaluated || definition;
            }
            function evaluateTextRun(evalContext, definition) {
                var evaluated, definitionValue = definition.value, evaluatedValue = evaluateValue(evalContext, definitionValue, textType);
                return void 0 !== evaluatedValue && (evaluated = _.clone(definition), evaluated.value = evaluatedValue, 
                evaluated.valueExpr = definitionValue), evaluated || definition;
            }
            function evaluateGeoJson(evalContext, definition, type) {
                if (type.geoJson && definition) {
                    var value = {
                        name: evaluateValue(evalContext, definition.name, textType),
                        type: evaluateValue(evalContext, definition.type, textType),
                        content: evaluateValue(evalContext, definition.content, textType)
                    };
                    return value;
                }
            }
            function evaluateDataBars(evalContext, dataBarsDefn, type) {
                var dataBarsType = type.dataBars;
                if (dataBarsType) return {
                    minValue: evaluateValue(evalContext, dataBarsDefn.minValue, numericType),
                    maxValue: evaluateValue(evalContext, dataBarsDefn.maxValue, numericType),
                    positiveColor: evaluateFill(evalContext, dataBarsDefn.positiveColor, fillColorType),
                    negativeColor: evaluateFill(evalContext, dataBarsDefn.negativeColor, fillColorType),
                    axisColor: evaluateFill(evalContext, dataBarsDefn.axisColor, fillColorType),
                    reverseDirection: evaluateValue(evalContext, dataBarsDefn.reverseDirection, boolType),
                    hideText: evaluateValue(evalContext, dataBarsDefn.hideText, boolType)
                };
            }
            function evaluateArrayCopyOnChange(evalContext, definitions, evaluator) {
                for (var evaluatedValues, i = 0, len = definitions.length; i < len; i++) {
                    var definition = definitions[i], evaluated = evaluator(evalContext, definition);
                    evaluatedValues || definition === evaluated || (evaluatedValues = _.take(definitions, i)), 
                    evaluatedValues && evaluatedValues.push(evaluated);
                }
                return evaluatedValues || definitions;
            }
            function evaluateValue(evalContext, definition, valueType) {
                return definition instanceof data.SQExpr ? ExpressionEvaluator.evaluate(definition, evalContext) : definition instanceof data.RuleEvaluation ? definition.evaluate(evalContext) : void 0;
            }
            var boolType = powerbi.ValueType.fromDescriptor({
                bool: !0
            }), colorValueType = powerbi.ValueType.fromDescriptor({
                formatting: {
                    color: !0
                }
            }), numericType = powerbi.ValueType.fromDescriptor({
                numeric: !0
            }), textType = powerbi.ValueType.fromDescriptor({
                text: !0
            }), nullStrategyType = powerbi.ValueType.fromDescriptor({
                enumeration: powerbi.NullStrategy.type
            }), fillColorType = {
                fill: {
                    solid: {
                        color: !0
                    }
                }
            };
            DataViewObjectEvaluator.run = run, DataViewObjectEvaluator.evaluateProperty = evaluateProperty, 
            DataViewObjectEvaluator.evaluateFillRule = evaluateFillRule, DataViewObjectEvaluator.evaluateValue = evaluateValue;
            var ExpressionEvaluator = (function(_super) {
                function ExpressionEvaluator() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(ExpressionEvaluator, _super), ExpressionEvaluator.evaluate = function(expr, evalContext) {
                    if (null != expr) return expr.accept(ExpressionEvaluator.instance, evalContext);
                }, ExpressionEvaluator.prototype.visitColumnRef = function(expr, evalContext) {
                    return evalContext.getExprValue(expr);
                }, ExpressionEvaluator.prototype.visitConstant = function(expr, evalContext) {
                    return expr.value;
                }, ExpressionEvaluator.prototype.visitMeasureRef = function(expr, evalContext) {
                    return evalContext.getExprValue(expr);
                }, ExpressionEvaluator.prototype.visitAggr = function(expr, evalContext) {
                    return evalContext.getExprValue(expr);
                }, ExpressionEvaluator.prototype.visitFillRule = function(expr, evalContext) {
                    var inputValue = expr.input.accept(this, evalContext);
                    if (void 0 !== inputValue) {
                        var colorAllocator = evalContext.getColorAllocator(expr);
                        if (colorAllocator) return colorAllocator.color(inputValue);
                    }
                }, ExpressionEvaluator.prototype.visitPercentile = function(expr, evalContext) {
                    return evalContext.getExprValue(expr);
                }, ExpressionEvaluator.prototype.visitSelectRef = function(expr, evalContext) {
                    return evalContext.getExprValue(expr);
                }, ExpressionEvaluator.prototype.visitThemeColor = function(expr, evalContext) {
                    var baseColor = evalContext.getThemeColor(expr.color);
                    if (baseColor) return Color.shadeColor(baseColor, expr.percent);
                }, ExpressionEvaluator.prototype.visitAnd = function(expr, evalContext) {
                    return expr.left.accept(ExpressionEvaluator.instance, evalContext) && expr.right.accept(ExpressionEvaluator.instance, evalContext);
                }, ExpressionEvaluator.prototype.visitCompare = function(expr, evalContext) {
                    var leftValue = expr.left.accept(ExpressionEvaluator.instance, evalContext), rightValue = expr.right.accept(ExpressionEvaluator.instance, evalContext);
                    switch (expr.comparison) {
                      case 0:
                        return leftValue === rightValue;

                      case 1:
                        return leftValue > rightValue;

                      case 2:
                        return leftValue >= rightValue;

                      case 3:
                        return leftValue < rightValue;

                      case 4:
                        return leftValue <= rightValue;
                    }
                }, ExpressionEvaluator.instance = new ExpressionEvaluator(), ExpressionEvaluator;
            })(data.DefaultSQExprVisitorWithArg);
        })(DataViewObjectEvaluator = data.DataViewObjectEvaluator || (data.DataViewObjectEvaluator = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewCategoricalEvalGrouped, inheritSingle = powerbi.Prototype.inheritSingle;
        !(function(DataViewCategoricalEvalGrouped) {
            function apply(categorical) {
                var valueColumns = categorical.values;
                if (valueColumns) {
                    var valueGroups, isDynamicSeries = !!valueColumns.source;
                    if (isDynamicSeries) {
                        valueGroups = inheritSingle(valueColumns.grouped());
                        var isDataEmpty = 0 === data.DataViewCategoricalUtils.getRowCount(categorical), isFirstColumnInDynamicSeries = valueColumns.length >= 1 && (isDataEmpty || void 0 !== _.first(valueColumns).identity);
                        if (!_.isEmpty(valueColumns) && isFirstColumnInDynamicSeries) for (var nextSeriesGroupIndex = 0, currentSeriesGroup = void 0, i = 0, ilen = valueColumns.length; i < ilen; i++) {
                            var currentValueColumn = valueColumns[i];
                            if (!currentSeriesGroup || currentValueColumn.identity !== currentSeriesGroup.identity) {
                                var existingSeriesGroup = valueGroups[nextSeriesGroupIndex];
                                currentSeriesGroup = existingSeriesGroup ? inheritSingle(existingSeriesGroup) : existingSeriesGroup = valueGroups[nextSeriesGroupIndex] = {
                                    values: null
                                }, valueGroups[nextSeriesGroupIndex] = currentSeriesGroup, currentSeriesGroup.values = [], 
                                nextSeriesGroupIndex++;
                            }
                            currentSeriesGroup.values.push(currentValueColumn);
                        } else for (var i = 0, ilen = valueGroups.length; i < ilen; i++) {
                            var group = valueGroups[i];
                            _.isEmpty(group.values) || (valueGroups[i] = group = inheritSingle(group), group.values = []);
                        }
                    } else valueGroups = [ {
                        values: valueColumns
                    } ];
                    valueColumns.grouped = function() {
                        return valueGroups;
                    }, categorical.values = valueColumns;
                }
            }
            DataViewCategoricalEvalGrouped.apply = apply;
        })(DataViewCategoricalEvalGrouped = data.DataViewCategoricalEvalGrouped || (data.DataViewCategoricalEvalGrouped = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewMatrixProjectionOrder, ArrayExtensions = jsCommon.ArrayExtensions, inheritSingle = powerbi.Prototype.inheritSingle;
        !(function(DataViewMatrixProjectionOrder) {
            function apply(prototype, matrixMapping, projectionOrdering, context) {
                var transformingMatrix = prototype;
                return projectionOrdering && (transformingMatrix = projectMeasures(transformingMatrix, matrixMapping, projectionOrdering, context), 
                transformingMatrix = reorderCompositeGroups(transformingMatrix, matrixMapping, projectionOrdering)), 
                transformingMatrix;
            }
            function projectMeasures(prototype, matrixRoleMapping, projectionOrdering, context) {
                if (!projectionOrdering) return prototype;
                var valuesRoleNames = powerbi.DataViewMapping.getRoles(matrixRoleMapping.values, powerbi.DataViewMapping.visitMatrixValues);
                if (_.isEmpty(valuesRoleNames)) return prototype;
                var valueSources = prototype.valueSources, projectionOrderingForValuesRoles = getCombinedProjectionOrdering(projectionOrdering, valuesRoleNames);
                if (_.isEmpty(valueSources) || isEqualProjectionOrdering(prototype.valueSources, projectionOrderingForValuesRoles)) return prototype;
                var jointMetadataColumns = data.DataViewMetadataColumnUtils.leftJoinMetadataColumnsAndProjectionOrder(valueSources, projectionOrderingForValuesRoles, valuesRoleNames), jointMetadataColumnsOrderedByProjection = _.chain(jointMetadataColumns).filter((function(column) {
                    return void 0 !== column.projectionOrderIndex;
                })).sortBy((function(column) {
                    return column.projectionOrderIndex;
                })).value(), matrix = inheritSingle(prototype);
                matrix.rows = projectIntersectionValues(matrix.rows, matrix.valueSources, jointMetadataColumnsOrderedByProjection);
                var projectedValueSources = _.map(jointMetadataColumnsOrderedByProjection, (function(jointMetadataColumn) {
                    return jointMetadataColumn.metadataColumn;
                }));
                return matrix.valueSources = projectedValueSources, matrix.columns = DataViewMatrixMeasureHeaders.update(matrix.columns, projectedValueSources.slice()), 
                context.hierarchyTreesRewritten = !0, matrix;
            }
            function getCombinedProjectionOrdering(projectionOrdering, roles) {
                for (var combinedOrdering = [], _i = 0, roles_1 = roles; _i < roles_1.length; _i++) {
                    var role = roles_1[_i], roleProjectionOrdering = projectionOrdering[role];
                    _.isEmpty(roleProjectionOrdering) || combinedOrdering.push.apply(combinedOrdering, roleProjectionOrdering);
                }
                return combinedOrdering;
            }
            function isEqualProjectionOrdering(valueSources, valueProjectionOrdering) {
                var currentSelectIndices = _.map(valueSources, (function(valueSource) {
                    return valueSource.index;
                }));
                return ArrayExtensions.sequenceEqual(currentSelectIndices, valueProjectionOrdering, (function(a, b) {
                    return a === b;
                }));
            }
            function projectIntersectionValues(prototypeRowHierarchy, originalValueSources, projectedValueSourceEntries) {
                var columnGroupInstanceCount, originalValueSourcesLength = originalValueSources.length, projectingValueSourcesLength = projectedValueSourceEntries.length, rowHierarchy = inheritSingle(prototypeRowHierarchy);
                return rowHierarchy.root = data.DataViewPivotMatrix.cloneTreeExecuteOnLeaf(rowHierarchy.root, (function(node) {
                    var originalValues = node.values;
                    if (originalValues) if (void 0 === columnGroupInstanceCount && (columnGroupInstanceCount = Object.keys(node.values).length / originalValueSourcesLength), 
                    projectingValueSourcesLength > 0) {
                        for (var projectedValues = {}, columnGroupInstanceIndex = 0; columnGroupInstanceIndex < columnGroupInstanceCount; columnGroupInstanceIndex++) for (var offsetInOriginalValues = columnGroupInstanceIndex * originalValueSourcesLength, offsetInProjectedValues = columnGroupInstanceIndex * projectingValueSourcesLength, projectingValueSourceIndex = 0; projectingValueSourceIndex < projectingValueSourcesLength; projectingValueSourceIndex++) {
                            var originalValueSourceIndex = projectedValueSourceEntries[projectingValueSourceIndex].sourceIndex, nodeValue = originalValues[offsetInOriginalValues + originalValueSourceIndex];
                            projectingValueSourceIndex !== (nodeValue.valueSourceIndex || 0) && (nodeValue = inheritSingle(nodeValue), 
                            nodeValue.valueSourceIndex = projectingValueSourceIndex || void 0), projectedValues[offsetInProjectedValues + projectingValueSourceIndex] = nodeValue;
                        }
                        node.values = projectedValues;
                    } else node.values = void 0;
                })), rowHierarchy;
            }
            function reorderCompositeGroups(prototype, applicableDataViewMapping, projectionOrdering) {
                var transformedDataView, rowsRoles = powerbi.DataViewMapping.getRoles(applicableDataViewMapping.rows, powerbi.DataViewMapping.visitMatrixRows), rowsProjections = getCombinedProjectionOrdering(projectionOrdering, rowsRoles), transformedRowsHierarchy = reorderMatrixHierarchyCompositeGroups(prototype.rows, rowsProjections), columnsRoles = powerbi.DataViewMapping.getRoles(applicableDataViewMapping.columns, powerbi.DataViewMapping.visitMatrixColumns), columnsProjections = getCombinedProjectionOrdering(projectionOrdering, columnsRoles), transformedColumnsHierarchy = reorderMatrixHierarchyCompositeGroups(prototype.columns, columnsProjections);
                return (transformedRowsHierarchy || transformedColumnsHierarchy) && (transformedDataView = inheritSingle(prototype), 
                transformedDataView.rows = transformedRowsHierarchy || transformedDataView.rows, 
                transformedDataView.columns = transformedColumnsHierarchy || transformedDataView.columns), 
                transformedDataView || prototype;
            }
            function reorderMatrixHierarchyCompositeGroups(matrixHierarchy, projectionOrdering) {
                var transformedHierarchy, levels = matrixHierarchy.levels, levelIndicesWithMultipleSources = _.chain(levels).map((function(level, index) {
                    return index;
                })).filter((function(index) {
                    var level = levels[index];
                    return _.size(level.sources) >= 2 && !DataViewMatrixMeasureHeaders.isMeasureHeadersLevel(level);
                })).value();
                if (!_.isEmpty(levelIndicesWithMultipleSources)) {
                    for (var uniqueHierarchyProjection = _.uniq(projectionOrdering), i = levelIndicesWithMultipleSources.length - 1; i >= 0; i--) {
                        var levelIndex = levelIndicesWithMultipleSources[i], hierarchyLevel = matrixHierarchy.levels[levelIndex], levelSourceIndexMappings = createMatrixHierarchyLevelSourcesPositionMapping(hierarchyLevel, uniqueHierarchyProjection);
                        if (!_.isEmpty(levelSourceIndexMappings)) {
                            void 0 === transformedHierarchy && (transformedHierarchy = inheritSingle(matrixHierarchy), 
                            transformedHierarchy.levels = inheritSingle(matrixHierarchy.levels), transformedHierarchy.root = data.DataViewMatrixUtils.inheritMatrixNodeHierarchy(matrixHierarchy.root, levelIndex, !0));
                            var transformingHierarchyLevel = inheritSingle(hierarchyLevel);
                            transformedHierarchy.levels[levelIndex] = reorderMatrixHierarchyLevelColumnSources(transformingHierarchyLevel, levelSourceIndexMappings), 
                            reorderMatrixHierarchyLevelValues(transformedHierarchy.root, levelIndex, levelSourceIndexMappings);
                        }
                    }
                    return transformedHierarchy;
                }
            }
            function createMatrixHierarchyLevelSourcesPositionMapping(hierarchyLevel, hierarchyProjection) {
                var levelSourceIndexMappings, levelSourceColumns = hierarchyLevel.sources;
                if (levelSourceColumns && levelSourceColumns.length >= 2) {
                    var columnsForHierarchyRoleOrderedByLevelSourceIndex = data.DataViewMetadataColumnUtils.leftJoinMetadataColumnsAndProjectionOrder(levelSourceColumns, hierarchyProjection), columnsForHierarchyRoleOrderedByProjection = _.sortBy(columnsForHierarchyRoleOrderedByLevelSourceIndex, (function(columnInfo) {
                        return columnInfo.projectionOrderIndex;
                    }));
                    levelSourceIndexMappings = _.map(columnsForHierarchyRoleOrderedByProjection, (function(value, i) {
                        var entry = {
                            originalSourceIndex: value.sourceIndex,
                            newSourceIndex: i
                        };
                        return entry;
                    }));
                }
                return levelSourceIndexMappings;
            }
            function reorderMatrixHierarchyLevelColumnSources(transformingHierarchyLevel, levelSourceIndexMappings) {
                var originalLevelSources = transformingHierarchyLevel.sources;
                transformingHierarchyLevel.sources = originalLevelSources.slice(0);
                for (var _i = 0, levelSourceIndexMappings_1 = levelSourceIndexMappings; _i < levelSourceIndexMappings_1.length; _i++) {
                    var mapping = levelSourceIndexMappings_1[_i];
                    transformingHierarchyLevel.sources[mapping.newSourceIndex] = originalLevelSources[mapping.originalSourceIndex];
                }
                return transformingHierarchyLevel;
            }
            function reorderMatrixHierarchyLevelValues(transformingHierarchyRootNode, transformingHierarchyLevelIndex, levelSourceIndexMappings) {
                var mappingsByOriginalLevelSourceIndex = _.reduce(levelSourceIndexMappings, (function(mappingsByOriginalLevelSourceIndex, value) {
                    return mappingsByOriginalLevelSourceIndex[value.originalSourceIndex] = value, mappingsByOriginalLevelSourceIndex;
                }), {});
                return data.DataViewMatrixUtils.forEachNodeAtLevel(transformingHierarchyRootNode, transformingHierarchyLevelIndex, (function(transformingMatrixNode) {
                    var originalLevelValues = transformingMatrixNode.levelValues;
                    if (!_.isEmpty(originalLevelValues)) {
                        for (var newlyOrderedLevelValues = _.sortBy(originalLevelValues, (function(levelValue) {
                            var mapping = mappingsByOriginalLevelSourceIndex[levelValue.levelSourceIndex];
                            return mapping && mapping.newSourceIndex;
                        })), i = 0, ilen = newlyOrderedLevelValues.length; i < ilen; i++) {
                            var transformingLevelValue = inheritSingle(newlyOrderedLevelValues[i]), mapping = mappingsByOriginalLevelSourceIndex[transformingLevelValue.levelSourceIndex];
                            transformingLevelValue.levelSourceIndex = mapping && mapping.newSourceIndex, newlyOrderedLevelValues[i] = transformingLevelValue;
                        }
                        transformingMatrixNode.levelValues = newlyOrderedLevelValues;
                        var newlyOrderedLastLevelValue = _.last(newlyOrderedLevelValues);
                        transformingMatrixNode.value !== newlyOrderedLastLevelValue.value && (transformingMatrixNode.value = newlyOrderedLastLevelValue.value), 
                        (transformingMatrixNode.levelSourceIndex || 0) !== newlyOrderedLastLevelValue.levelSourceIndex && (transformingMatrixNode.levelSourceIndex = newlyOrderedLastLevelValue.levelSourceIndex);
                    }
                })), transformingHierarchyRootNode;
            }
            DataViewMatrixProjectionOrder.apply = apply;
        })(DataViewMatrixProjectionOrder = data.DataViewMatrixProjectionOrder || (data.DataViewMatrixProjectionOrder = {}));
        var DataViewMatrixMeasureHeaders;
        !(function(DataViewMatrixMeasureHeaders) {
            function update(prototypeColumnHierarchy, newValueSources) {
                var columnHierarchy, prototypeColumnHierarchyLevels = prototypeColumnHierarchy.levels, hasExistingMeasureHeaders = hasMeasureHeadersLevel(prototypeColumnHierarchyLevels), hasDynamicColumnGroupLevel = hasExistingMeasureHeaders ? _.size(prototypeColumnHierarchyLevels) >= 2 : _.size(prototypeColumnHierarchyLevels) >= 1, isMeasureHeadersLevelNeeded = hasDynamicColumnGroupLevel ? newValueSources.length >= 2 : newValueSources.length >= 1;
                return columnHierarchy = hasExistingMeasureHeaders ? isMeasureHeadersLevelNeeded ? updateExistingMeasureHeaders(prototypeColumnHierarchy, newValueSources) : removeMeasureHeaders(prototypeColumnHierarchy) : isMeasureHeadersLevelNeeded ? addMeasureHeaders(prototypeColumnHierarchy, newValueSources) : prototypeColumnHierarchy;
            }
            function hasMeasureHeadersLevel(columnHierarchyLevels) {
                return !_.isEmpty(columnHierarchyLevels) && isMeasureHeadersLevel(_.last(columnHierarchyLevels));
            }
            function isMeasureHeadersLevel(columnHierarchyLevel) {
                return columnHierarchyLevel && _.every(columnHierarchyLevel.sources, (function(source) {
                    return source.isMeasure;
                }));
            }
            function updateExistingMeasureHeaders(prototypeColumnHierarchy, newValueSources) {
                var columnHierarchy = inheritSingle(prototypeColumnHierarchy), columnHierarchyLevels = columnHierarchy.levels = inheritSingle(columnHierarchy.levels), measureHeaderLevelIndex = columnHierarchyLevels.length - 1, measureHeadersLevel = columnHierarchyLevels[measureHeaderLevelIndex] = inheritSingle(columnHierarchyLevels[measureHeaderLevelIndex]);
                return measureHeadersLevel.sources = newValueSources, columnHierarchy.root = data.DataViewMatrixUtils.inheritMatrixNodeHierarchy(columnHierarchy.root, measureHeaderLevelIndex, !0), 
                data.DataViewMatrixUtils.forEachNodeDepthFirst(columnHierarchy.root, (function(node) {
                    return isParentOfMeasureHeaders(node, measureHeaderLevelIndex) ? (node.children = createMeasureHeaderNodes(measureHeaderLevelIndex, newValueSources.length, node.isSubtotal), 
                    2) : 1;
                })), columnHierarchy;
            }
            function removeMeasureHeaders(prototypeColumnHierarchy) {
                var columnHierarchy = inheritSingle(prototypeColumnHierarchy), columnHierarchyLevels = columnHierarchy.levels = inheritSingle(columnHierarchy.levels), measureHeaderLevelIndex = columnHierarchyLevels.length - 1;
                return columnHierarchyLevels.splice(measureHeaderLevelIndex, 1), columnHierarchy.root = data.DataViewMatrixUtils.inheritMatrixNodeHierarchy(columnHierarchy.root, measureHeaderLevelIndex, !0), 
                data.DataViewMatrixUtils.forEachNodeDepthFirst(columnHierarchy.root, (function(node) {
                    return isParentOfMeasureHeaders(node, measureHeaderLevelIndex) ? (node.children = void 0, 
                    2) : 1;
                })), columnHierarchy;
            }
            function addMeasureHeaders(prototypeColumnHierarchy, newValueSources) {
                var columnHierarchy = inheritSingle(prototypeColumnHierarchy), columnHierarchyLevels = columnHierarchy.levels = inheritSingle(columnHierarchy.levels), measureHeaderLevel = {
                    sources: newValueSources
                };
                columnHierarchyLevels.push(measureHeaderLevel);
                var measureHeaderLevelIndex = columnHierarchyLevels.length - 1;
                return columnHierarchy.root = data.DataViewMatrixUtils.inheritMatrixNodeHierarchy(columnHierarchy.root, measureHeaderLevelIndex, !0), 
                data.DataViewMatrixUtils.forEachNodeDepthFirst(columnHierarchy.root, (function(node) {
                    return data.DataViewMatrixUtils.isLeafNode(node) ? (node.children = createMeasureHeaderNodes(measureHeaderLevelIndex, newValueSources.length, node.isSubtotal), 
                    2) : 1;
                })), columnHierarchy;
            }
            function isParentOfMeasureHeaders(node, measureHeadersLevelIndex) {
                var childNodes = node.children;
                return !_.isEmpty(childNodes) && childNodes[0].level === measureHeadersLevelIndex;
            }
            function createMeasureHeaderNodes(level, measureFieldCount, isSubtotal) {
                for (var measureHeaderNodes = [], i = 0, ilen = measureFieldCount; i < ilen; i++) {
                    var measureHeaderNode = {
                        level: level
                    };
                    i > 0 && (measureHeaderNode.levelSourceIndex = i), isSubtotal && (measureHeaderNode.isSubtotal = !0), 
                    measureHeaderNodes.push(measureHeaderNode);
                }
                return measureHeaderNodes;
            }
            DataViewMatrixMeasureHeaders.update = update, DataViewMatrixMeasureHeaders.hasMeasureHeadersLevel = hasMeasureHeadersLevel, 
            DataViewMatrixMeasureHeaders.isMeasureHeadersLevel = isMeasureHeadersLevel;
        })(DataViewMatrixMeasureHeaders = data.DataViewMatrixMeasureHeaders || (data.DataViewMatrixMeasureHeaders = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewPivotCategorical, inherit = powerbi.Prototype.inherit;
        !(function(DataViewPivotCategorical) {
            function apply(dataView) {
                var categorical = dataView.categorical;
                if (!categorical) return null;
                var categories = categorical.categories;
                if (!categories || 1 !== categories.length) return null;
                var values = categorical.values;
                if (_.isEmpty(values) || values.source) return null;
                for (var category = categories[0], categoryIdentities = category.identity, categoryValues = category.values, pivotedColumns = [], pivotedValues = [], rowIdx = 0, rowCount = categoryValues.length; rowIdx < rowCount; rowIdx++) for (var categoryValue = categoryValues[rowIdx], categoryIdentity = categoryIdentities[rowIdx], colIdx = 0, colCount = values.length; colIdx < colCount; colIdx++) {
                    var value = values[colIdx], pivotedColumn = inherit(value.source);
                    if (value.identity) return null;
                    pivotedColumn.groupName = categoryValue;
                    var pivotedValue = {
                        source: pivotedColumn,
                        values: [ value.values[rowIdx] ],
                        identity: categoryIdentity,
                        min: value.min,
                        max: value.max,
                        subtotal: value.subtotal
                    }, highlights = value.highlights;
                    highlights && (pivotedValue.highlights = [ highlights[rowIdx] ]), pivotedColumns.push(pivotedColumn), 
                    pivotedValues.push(pivotedValue);
                }
                var pivotedMetadata = inherit(dataView.metadata);
                return pivotedMetadata.columns = pivotedColumns, values = data.DataViewTransform.createValueColumns(pivotedValues, category.identityFields, category.source), 
                {
                    metadata: pivotedMetadata,
                    categorical: {
                        values: values
                    },
                    matrix: dataView.matrix
                };
            }
            DataViewPivotCategorical.apply = apply;
        })(DataViewPivotCategorical = data.DataViewPivotCategorical || (data.DataViewPivotCategorical = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewPivotMatrix;
        !(function(DataViewPivotMatrix) {
            function apply(dataViewMatrix, context) {
                context.columnHierarchyRewritten || (dataViewMatrix.columns = powerbi.Prototype.inherit(dataViewMatrix.columns));
                var columns = dataViewMatrix.columns;
                context.rowHierarchyRewritten || (dataViewMatrix.rows = powerbi.Prototype.inherit(dataViewMatrix.rows));
                var rows = dataViewMatrix.rows;
                if (!(columns.levels.length > 1)) {
                    var pivotedRowNode = {
                        level: 0
                    }, columnLeafNodes = columns.root.children, measureCount = columnLeafNodes.length, pivotResultMeasureHeaderLevel = rows.levels.length;
                    if (measureCount > 0) {
                        var index_1 = 0, callback = function(node) {
                            if (node.values) {
                                pivotedRowNode.values || (pivotedRowNode.values = {});
                                for (var i = 0; i < measureCount; i++) pivotedRowNode.values[index_1++] = node.values[i];
                                node.values = void 0;
                            }
                            if (measureCount > 1) {
                                node.children || (node.children = []);
                                for (var j = 0; j < measureCount; j++) {
                                    var measureHeaderLeaf = {
                                        level: pivotResultMeasureHeaderLevel
                                    }, columnLeafNode = columnLeafNodes[j];
                                    measureHeaderLeaf.levelSourceIndex = columnLeafNode.levelSourceIndex, node.isSubtotal && (measureHeaderLeaf.isSubtotal = !0), 
                                    node.children.push(measureHeaderLeaf);
                                }
                            }
                        };
                        context.hierarchyTreesRewritten ? forEachLeaf(rows.root, callback) : dataViewMatrix.columns.root = cloneTreeExecuteOnLeaf(rows.root, callback);
                    } else context.hierarchyTreesRewritten || (dataViewMatrix.columns.root = cloneTree(rows.root));
                    if (measureCount > 1) {
                        var level = {
                            sources: columns.levels[0].sources
                        };
                        rows.levels.push(level), columns.levels.length = 0;
                    }
                    if (context.hierarchyTreesRewritten) dataViewMatrix.columns.root = rows.root, dataViewMatrix.rows.root = {
                        children: [ pivotedRowNode ]
                    }; else {
                        var updatedRowRoot = powerbi.Prototype.inherit(dataViewMatrix.rows.root);
                        updatedRowRoot.children = [ pivotedRowNode ], dataViewMatrix.rows.root = updatedRowRoot;
                    }
                    dataViewMatrix.columns.levels = rows.levels, dataViewMatrix.rows.levels = [];
                }
            }
            function forEachLeaf(root, callback) {
                var children = root.children;
                if (children && children.length > 0) for (var i = 0, ilen = children.length; i < ilen; i++) forEachLeaf(children[i], callback); else callback(root);
            }
            function cloneTree(node) {
                return cloneTreeExecuteOnLeaf(node);
            }
            function cloneTreeExecuteOnLeaf(node, callback) {
                var updatedNode = powerbi.Prototype.inherit(node), children = node.children;
                if (children && children.length > 0) {
                    for (var newChildren = [], i = 0, ilen = children.length; i < ilen; i++) {
                        var updatedChild = cloneTreeExecuteOnLeaf(children[i], callback);
                        newChildren.push(updatedChild);
                    }
                    updatedNode.children = newChildren;
                } else callback && callback(updatedNode);
                return updatedNode;
            }
            DataViewPivotMatrix.apply = apply, DataViewPivotMatrix.cloneTree = cloneTree, DataViewPivotMatrix.cloneTreeExecuteOnLeaf = cloneTreeExecuteOnLeaf;
        })(DataViewPivotMatrix = data.DataViewPivotMatrix || (data.DataViewPivotMatrix = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewPivotMatrixToPrimaryGroups;
        !(function(DataViewPivotMatrixToPrimaryGroups) {
            function pivot(oldDataView, selects, roleKindByQueryRef, queryProjectionsByRole, drillableRoles, applicableRoleMappings) {
                if (!inferPivotTransform(oldDataView, selects, roleKindByQueryRef, queryProjectionsByRole, applicableRoleMappings, drillableRoles)) return oldDataView;
                var newDataView = {
                    metadata: {
                        columns: oldDataView.metadata.columns.slice()
                    }
                };
                if (oldDataView.single && (newDataView.single = oldDataView.single), oldDataView.table && (newDataView.table = oldDataView.table), 
                oldDataView.matrix) {
                    var newDataViewMatrix = pivotMatrix(oldDataView.metadata, oldDataView.matrix);
                    if (!_.isEmpty(newDataViewMatrix.valueSources)) {
                        var hasCompositeGroupInSeries = data.DataViewMatrixUtils.containsCompositeGroup(newDataViewMatrix.columns);
                        hasCompositeGroupInSeries || (newDataView.matrix = newDataViewMatrix);
                    }
                }
                return newDataView;
            }
            function inferPivotTransform(dataView, selects, roleKindByQueryRef, queryProjectionsByRole, applicableRoleMappings, drillableRoles) {
                if (_.isEmpty(selects) || !dataView || _.isEmpty(applicableRoleMappings)) return !1;
                var matrix = dataView.matrix;
                if (!matrix) return !1;
                if (!matrix.rows || _.isEmpty(matrix.rows.levels) || !matrix.columns || _.isEmpty(matrix.columns.levels)) return !1;
                for (var metadataColGroups = [], _i = 0, _a = matrix.columns.levels; _i < _a.length; _i++) for (var level = _a[_i], _b = 0, _c = level.sources; _b < _c.length; _b++) {
                    var source = _c[_b];
                    source.isMeasure || metadataColGroups.push(source);
                }
                for (var metadataRowGroups = [], _d = 0, _e = matrix.rows.levels; _d < _e.length; _d++) for (var level = _e[_d], _f = 0, _g = level.sources; _f < _g.length; _f++) {
                    var source = _g[_f];
                    source.isMeasure || metadataRowGroups.push(source);
                }
                for (var metadataRowMeasures = [], _h = 0, _j = matrix.rows.levels; _h < _j.length; _h++) for (var level = _j[_h], _k = 0, _l = level.sources; _k < _l.length; _k++) {
                    var source = _l[_k];
                    source.isMeasure && metadataRowMeasures.push(source);
                }
                if (!_.isEmpty(metadataRowMeasures)) return !1;
                if (1 !== metadataColGroups.length || metadataRowGroups.length < 1) return !1;
                var applicableRoleMappingWithoutRegression = _.filter(applicableRoleMappings, (function(mapping) {
                    return !powerbi.DataViewMapping.getRegressionUsage(mapping);
                }));
                if (1 !== applicableRoleMappingWithoutRegression.length) return !1;
                var targetDataViewKinds = powerbi.DataViewMapping.targetDataViewKinds(applicableRoleMappingWithoutRegression);
                if (2 !== targetDataViewKinds) return !1;
                var matrixMapping = applicableRoleMappingWithoutRegression[0].matrix;
                if (!matrixMapping) return !1;
                var mappingRowRoles = powerbi.DataViewMapping.getRoles(matrixMapping.rows, powerbi.DataViewMapping.visitMatrixRows), mappingColumnRoles = powerbi.DataViewMapping.getRoles(matrixMapping.columns, powerbi.DataViewMapping.visitMatrixColumns);
                if (_.size(mappingRowRoles) < 2 || 0 !== _.size(mappingColumnRoles)) return !1;
                var metadataRowRoles = _.uniq([].concat.apply([], _.map(metadataRowGroups, (function(metadataColumn) {
                    return Object.keys(selects[metadataColumn.index].roles);
                })))), metadataColRoles = _.uniq([].concat.apply([], _.map(metadataColGroups, (function(metadataColumn) {
                    return Object.keys(selects[metadataColumn.index].roles);
                }))));
                return _.isEqual(mappingRowRoles, [].concat(metadataColRoles, metadataRowRoles)) && _.isEqual(drillableRoles, metadataRowRoles);
            }
            function pivotMatrix(oldMetadata, oldMatrix) {
                var oldRows = oldMatrix.rows, oldColumns = oldMatrix.columns, oldRowsRoot = oldRows.root, oldRowsChildren = oldRowsRoot.children, newRows = {
                    levels: [],
                    root: {
                        children: []
                    }
                }, newColumns = {
                    levels: [],
                    root: {
                        children: []
                    }
                }, newMatrix = {
                    rows: newRows,
                    columns: newColumns,
                    valueSources: oldMatrix.valueSources
                }, newSeries = newRows.root.children;
                newRows.levels.push(oldColumns.levels[0]), newRows.root.childIdentityFields = oldColumns.root.childIdentityFields;
                for (var _i = 0, _a = oldColumns.root.children; _i < _a.length; _i++) {
                    var colNode = _a[_i];
                    void 0 !== colNode.levelValues && void 0 !== colNode.value && newSeries.push({
                        children: [],
                        value: colNode.value,
                        levelValues: colNode.levelValues,
                        identity: colNode.identity,
                        level: 0
                    });
                }
                var valueSourcesCount = _.size(oldMatrix.valueSources);
                if (newRows.levels.push(oldRows.levels[0]), _.isEmpty(newSeries)) return newMatrix;
                for (var oldRowNodeIndex in oldRowsChildren) {
                    var oldRowNode = oldRowsChildren[oldRowNodeIndex];
                    for (var index in oldRowNode.values) {
                        var seriesIndex = Math.floor(index / valueSourcesCount), seriesNode = newSeries[seriesIndex];
                        seriesNode.childIdentityFields || (seriesNode.childIdentityFields = oldRowsRoot.childIdentityFields);
                        var value = oldRowNode.values[index];
                        if (null != value) {
                            var newRowNode = seriesNode.children[oldRowNodeIndex];
                            newRowNode || (newRowNode = {
                                level: seriesNode.level + 1,
                                value: oldRowNode.value,
                                levelValues: oldRowNode.levelValues,
                                values: {},
                                identity: oldRowNode.identity
                            }, seriesNode.children.push(newRowNode)), newRowNode.values[index % valueSourcesCount] = value;
                        }
                    }
                }
                return newMatrix;
            }
            DataViewPivotMatrixToPrimaryGroups.pivot = pivot;
        })(DataViewPivotMatrixToPrimaryGroups = data.DataViewPivotMatrixToPrimaryGroups || (data.DataViewPivotMatrixToPrimaryGroups = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function extractSeriesGroups(category, seriesGroupIdentityFields) {
            for (var identities = category.identity, categoryValues = category.values, seriesGroups = [], seriesGroupKeyToIndexMapping = {}, i = 0, ilen = _.size(identities); i < ilen; i++) {
                var identity = identities[i], seriesGroupIdentityExpr = data.ScopeIdentityExtractor.getSubset(identity.expr, seriesGroupIdentityFields), seriesGroupIdentity = seriesGroupIdentityExpr && data.createDataViewScopeIdentity(seriesGroupIdentityExpr), seriesGroupIdentityKey = seriesGroupIdentity && seriesGroupIdentity.key, seriesGroupIndex = seriesGroupKeyToIndexMapping[seriesGroupIdentityKey], seriesGroup = void 0;
                void 0 === seriesGroupIndex ? (seriesGroup = {
                    identity: seriesGroupIdentity,
                    groupValue: categoryValues[i],
                    groupIndex: seriesGroups.length,
                    valueRowIndices: []
                }, seriesGroups.push(seriesGroup), seriesGroupKeyToIndexMapping[seriesGroupIdentityKey] = seriesGroup.groupIndex) : seriesGroup = seriesGroups[seriesGroupIndex], 
                seriesGroup.valueRowIndices.push(i);
            }
            return seriesGroups;
        }
        function createNullValues(length) {
            for (var array = new Array(length), i = 0; i < length; i++) array[i] = null;
            return array;
        }
        function inheritArrayWithValues(nullValues, original, indices) {
            for (var inherited = powerbi.Prototype.inherit(nullValues), _i = 0, indices_1 = indices; _i < indices_1.length; _i++) {
                var index = indices_1[_i];
                inherited[index] = original[index];
            }
            return inherited;
        }
        var DataViewSelfCrossJoin;
        !(function(DataViewSelfCrossJoin) {
            function apply(dataView, selfCrossJoinCategory) {
                if (dataView.categorical && selfCrossJoinCategory) {
                    var dataViewCategorical = dataView.categorical;
                    if (!(_.isEmpty(dataViewCategorical.categories) || dataViewCategorical.values && dataViewCategorical.values.source)) {
                        var seriesGroupIdentityFields = getSeriesGroupIdentityFields(dataViewCategorical, selfCrossJoinCategory);
                        if (!_.isEmpty(seriesGroupIdentityFields)) return applyCategorical(dataView.metadata, dataViewCategorical, selfCrossJoinCategory, seriesGroupIdentityFields);
                    }
                }
            }
            function getSeriesGroupIdentityFields(dataViewCategorical, selfCrossJoinCategory) {
                var identityExprs = selfCrossJoinCategory.source.identityExprs;
                return identityExprs ? identityExprs : 1 === dataViewCategorical.categories.length ? selfCrossJoinCategory.identityFields : void 0;
            }
            function applyCategorical(dataViewMetadata, dataViewCategorical, selfCrossJoinCategory, seriesGroupIdentityFields) {
                var categoryValues = selfCrossJoinCategory.values, categoryLength = categoryValues.length;
                if (0 !== categoryLength) {
                    var valuesArray = dataViewCategorical.values ? dataViewCategorical.values.grouped()[0].values : [], groupValuesOptions = createGroupedValues(selfCrossJoinCategory, categoryLength, valuesArray, seriesGroupIdentityFields);
                    if (groupValuesOptions) {
                        var transformedDataView = data.createCategoricalDataViewBuilder().withCategories(dataViewCategorical.categories).withGroupedValues(groupValuesOptions).build();
                        return dataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata), dataViewMetadata.columns = transformedDataView.metadata.columns, 
                        {
                            metadata: dataViewMetadata,
                            categorical: transformedDataView.categorical
                        };
                    }
                }
            }
            function createGroupedValues(category, categoryLength, measureColumns, seriesGroupIdentityFields) {
                var nullValuesArray = createNullValues(categoryLength), seriesGroups = extractSeriesGroups(category, seriesGroupIdentityFields);
                if (!_.isEmpty(seriesGroups)) {
                    var seriesData = _.map(seriesGroups, (function(seriesGroup) {
                        var valueRowIndices = seriesGroup.valueRowIndices, allMeasureColumnsInSeriesGroup = _.map(measureColumns, (function(measureColumn) {
                            var measureColumnInSeriesGroup = {
                                values: inheritArrayWithValues(nullValuesArray, measureColumn.values, valueRowIndices)
                            };
                            return measureColumn.highlights && (measureColumnInSeriesGroup.highlights = inheritArrayWithValues(nullValuesArray, measureColumn.highlights, valueRowIndices)), 
                            measureColumnInSeriesGroup;
                        }));
                        return allMeasureColumnsInSeriesGroup;
                    }));
                    return {
                        groupColumn: {
                            source: category.source,
                            identityFrom: {
                                fields: seriesGroupIdentityFields,
                                identities: _.map(seriesGroups, (function(instance) {
                                    return instance.identity;
                                }))
                            },
                            values: _.map(seriesGroups, (function(instance) {
                                return instance.groupValue;
                            }))
                        },
                        valueColumns: _.map(measureColumns, (function(v) {
                            return {
                                source: v.source
                            };
                        })),
                        data: seriesData
                    };
                }
            }
            DataViewSelfCrossJoin.apply = apply;
        })(DataViewSelfCrossJoin = data.DataViewSelfCrossJoin || (data.DataViewSelfCrossJoin = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewPivotCategoricalToPrimaryGroups, ArrayExtensions = jsCommon.ArrayExtensions, DataShapeBindingDataReduction = powerbi.data.DataShapeBindingDataReduction, inheritSingle = powerbi.Prototype.inheritSingle;
        !(function(DataViewPivotCategoricalToPrimaryGroups) {
            function pivotBinding(binding, allMappings, finalMapping, selects, defaultDataVolume, overrideDataVolume) {
                allMappings && 1 === allMappings.length && finalMapping.categorical && finalMapping.categorical.dataReductionAlgorithm && binding && canPivotCategorical(binding, finalMapping) && (binding.Primary.Groupings = [ binding.Secondary.Groupings[0], binding.Primary.Groupings[0] ], 
                binding.Secondary = void 0, binding.DataReduction = {
                    Primary: DataShapeBindingDataReduction.createFrom(finalMapping.categorical.dataReductionAlgorithm, selects),
                    DataVolume: overrideDataVolume || finalMapping.categorical.dataVolume || defaultDataVolume
                });
            }
            function isPivotableAxis(axis) {
                return axis && axis.Groupings && 1 === axis.Groupings.length && !_.isEmpty(axis.Groupings[0].Projections) && !axis.Groupings[0].Subtotal && _.isEmpty(axis.Groupings[0].SuppressedProjections);
            }
            function canPivotCategorical(binding, mapping) {
                return !!isPivotableAxis(binding.Primary) && (!(!isPivotableAxis(binding.Secondary) || 1 !== binding.Secondary.Groupings[0].Projections.length) && (!binding.DataReduction || !(binding.DataReduction.Primary || binding.DataReduction.Secondary || binding.DataReduction.Intersection)));
            }
            function unpivotResult(oldDataView, selects, roleKindByQueryRef, queryProjectionsByRole, applicableRoleMappings) {
                if (!inferUnpivotTransform(oldDataView, selects, roleKindByQueryRef, queryProjectionsByRole, applicableRoleMappings)) return oldDataView;
                var newDataView = {
                    metadata: {
                        columns: ArrayExtensions.copy(oldDataView.metadata.columns)
                    }
                };
                if (oldDataView.single && (newDataView.single = oldDataView.single), oldDataView.table && (newDataView.table = oldDataView.table), 
                oldDataView.matrix) {
                    var newDataViewMatrix = unpivotMatrix(oldDataView.matrix);
                    if (!_.isEmpty(newDataViewMatrix.valueSources)) {
                        var hasCompositeGroupInSeries = data.DataViewMatrixUtils.containsCompositeGroup(newDataViewMatrix.columns);
                        hasCompositeGroupInSeries || (newDataView.categorical = categoricalFromUnpivotedMatrix(newDataViewMatrix, newDataView.metadata.columns));
                    }
                }
                return newDataView;
            }
            function inferUnpivotTransform(dataView, selects, roleKindByQueryRef, queryProjectionsByRole, applicableRoleMappings) {
                if (_.isEmpty(selects) || !dataView || _.isEmpty(applicableRoleMappings)) return !1;
                var applicableRoleMappingWithoutRegression = _.filter(applicableRoleMappings, (function(mapping) {
                    return !powerbi.DataViewMapping.getRegressionUsage(mapping);
                }));
                if (1 !== applicableRoleMappingWithoutRegression.length) return !1;
                var categoricalMapping = applicableRoleMappingWithoutRegression[0].categorical;
                if (!categoricalMapping) return !1;
                var matrixDataview = dataView.matrix;
                if (!matrixDataview) return !1;
                if (!matrixDataview.rows || !matrixDataview.rows.levels || 2 !== matrixDataview.rows.levels.length) return !1;
                var categoryGroups = [], valueGroups = [], addGroupingRole = function(roleName, groups) {
                    var roleProjections = queryProjectionsByRole[roleName];
                    if (roleProjections) for (var _i = 0, _a = roleProjections.all(); _i < _a.length; _i++) {
                        var roleProjection = _a[_i];
                        roleKindByQueryRef[roleProjection.queryRef] === powerbi.VisualDataRoleKind.Grouping && groups.push(roleProjection.queryRef);
                    }
                };
                if (powerbi.DataViewMapping.visitCategoricalCategories(categoricalMapping.categories, {
                    visitRole: function(roleName) {
                        addGroupingRole(roleName, categoryGroups);
                    }
                }), powerbi.DataViewMapping.visitGrouped(categoricalMapping.values, {
                    visitRole: function(roleName) {
                        addGroupingRole(roleName, valueGroups);
                    }
                }), powerbi.DataViewMapping.visitCategoricalValues(categoricalMapping.values, {
                    visitRole: function(roleName) {
                        addGroupingRole(roleName, valueGroups);
                    }
                }), _.isEmpty(categoryGroups) || _.isEmpty(valueGroups)) return !1;
                for (var _i = 0, _a = matrixDataview.columns.levels; _i < _a.length; _i++) for (var level = _a[_i], _b = 0, _c = level.sources; _b < _c.length; _b++) {
                    var source = _c[_b];
                    if (!source.isMeasure) return !1;
                }
                return !0;
            }
            function unpivotMatrix(oldMatrix) {
                var oldRows = oldMatrix.rows, oldRoot = oldRows.root, oldChildren = oldRoot.children, series = [], seriesIdLevel = oldRows.levels[0], seriesIdFields = oldRoot.childIdentityFields, categoryIndex = {}, categories = [], categoryIdLevel = oldRows.levels[1], categoryIdFields = _.isEmpty(oldChildren) ? void 0 : oldChildren[0].childIdentityFields, measureCount = oldMatrix.valueSources.length, findCategory = function(identity) {
                    var index = categoryIndex[identity.key];
                    return index;
                };
                if (oldChildren) for (var addCategory = function(categoryNode) {
                    var key = categoryNode.identity.key, index = categoryIndex[key];
                    void 0 === index && (index = categories.length, categoryIndex[key] = index, categories.push(categoryNode));
                }, _i = 0, oldChildren_1 = oldChildren; _i < oldChildren_1.length; _i++) {
                    var seriesNode = oldChildren_1[_i];
                    series.push(seriesNode);
                    for (var _a = 0, _b = seriesNode.children; _a < _b.length; _a++) {
                        var categoryNode = _b[_a];
                        addCategory(categoryNode);
                    }
                }
                for (var matrixValues = new Array(categories.length), j = 0; j < series.length; ++j) for (var seriesNode = oldChildren[j], _c = 0, _d = seriesNode.children; _c < _d.length; _c++) {
                    var categoryNode = _d[_c], i = findCategory(categoryNode.identity);
                    matrixValues[i] || (matrixValues[i] = new Array(series.length)), matrixValues[i][j] = categoryNode.values;
                }
                var newColumns = {
                    root: {
                        children: _.map(series, (function(s) {
                            var inheritedNode = inheritSingle(s);
                            return inheritedNode.level = 0, inheritedNode.children = void 0, inheritedNode.childIdentityFields = void 0, 
                            inheritedNode;
                        })),
                        childIdentityFields: seriesIdFields
                    },
                    levels: [ seriesIdLevel ]
                };
                if (measureCount > 0) {
                    for (var newColChildren = _.map(oldMatrix.columns.root.children, (function(srcnode) {
                        var dstnode = {
                            level: 1
                        };
                        return srcnode.levelSourceIndex && (dstnode.levelSourceIndex = srcnode.levelSourceIndex), 
                        dstnode;
                    })), _e = 0, _f = newColumns.root.children; _e < _f.length; _e++) {
                        var child = _f[_e];
                        child.children = newColChildren;
                    }
                    newColumns.levels.push(oldMatrix.columns.levels[0]);
                }
                var newRows = {
                    root: {
                        children: _.map(categories, (function(c) {
                            var inheritedNode = inheritSingle(c);
                            return inheritedNode.level = 0, inheritedNode.children = void 0, inheritedNode.childIdentityFields = void 0, 
                            inheritedNode;
                        })),
                        childIdentityFields: categoryIdFields
                    },
                    levels: [ categoryIdLevel ]
                };
                if (measureCount > 0) for (var i = 0; i < categories.length; ++i) {
                    for (var row = newRows.root.children[i], rowValues = {}, j = 0; j < series.length; ++j) for (var mvalues = matrixValues[i] && matrixValues[i][j], k = 0; k < measureCount; ++k) {
                        var l = j * measureCount + k;
                        rowValues[l] = mvalues ? mvalues[k] : 0 === k ? {
                            value: null
                        } : {
                            value: null,
                            valueSourceIndex: k
                        };
                    }
                    row.values = rowValues;
                }
                var newMatrix = {
                    rows: newRows,
                    columns: newColumns,
                    valueSources: oldMatrix.valueSources
                };
                return newMatrix;
            }
            function categoricalFromUnpivotedMatrix(matrix, columnMetadata) {
                for (var seriesCount = matrix.columns.root.children.length, measureMetadata = matrix.valueSources, measureCount = measureMetadata.length, categories = createCategoryColumnsFromUnpivotedMatrix(matrix), groups = [], j = 0; j < seriesCount; ++j) {
                    var seriesColumn = matrix.columns.root.children[j], group = {
                        values: [],
                        identity: seriesColumn.identity,
                        name: null != seriesColumn.value ? seriesColumn.value : null
                    };
                    groups.push(group);
                    for (var k = 0; k < measureCount; ++k) {
                        var valueColumnMetadataSrc = measureMetadata[k], valueColumnMetadataDst = {};
                        for (var key in valueColumnMetadataSrc) valueColumnMetadataDst[key] = valueColumnMetadataSrc[key];
                        valueColumnMetadataDst.groupName = group.name, columnMetadata.push(valueColumnMetadataDst);
                        var valueColumn = {
                            source: valueColumnMetadataDst,
                            values: [],
                            identity: group.identity
                        };
                        group.values.push(valueColumn);
                        for (var index = k + j * measureCount, _i = 0, _a = matrix.rows.root.children; _i < _a.length; _i++) {
                            var categoryNode = _a[_i], value = categoryNode.values[index].value;
                            valueColumn.values.push(value);
                        }
                    }
                }
                for (var values = [], _b = 0, groups_1 = groups; _b < groups_1.length; _b++) for (var group = groups_1[_b], k = 0; k < measureCount; ++k) values.push(group.values[k]);
                values.grouped = function() {
                    return groups;
                }, values.identityFields = matrix.columns.root.childIdentityFields, values.source = matrix.columns.levels[0].sources[0];
                var categorical = {
                    categories: categories,
                    values: values
                };
                return categorical;
            }
            function createCategoryColumnsFromUnpivotedMatrix(unpivotedMatrix) {
                for (var categoryIdentity = _.map(unpivotedMatrix.rows.root.children, (function(x) {
                    return x.identity;
                })), categoryIdentityFields = unpivotedMatrix.rows.root.childIdentityFields, categorySourceColumns = unpivotedMatrix.rows.levels[0].sources, categories = [], i = 0, ilen = categorySourceColumns.length; i < ilen; i++) {
                    var groupLevelValues = _.map(unpivotedMatrix.rows.root.children, (function(categoryNode) {
                        var levelValues = categoryNode.levelValues;
                        if (void 0 !== levelValues) return levelValues[i].value;
                    }));
                    categories.push({
                        source: categorySourceColumns[i],
                        values: groupLevelValues,
                        identity: categoryIdentity,
                        identityFields: categoryIdentityFields
                    });
                }
                return categories;
            }
            DataViewPivotCategoricalToPrimaryGroups.pivotBinding = pivotBinding, DataViewPivotCategoricalToPrimaryGroups.unpivotResult = unpivotResult;
        })(DataViewPivotCategoricalToPrimaryGroups = data.DataViewPivotCategoricalToPrimaryGroups || (data.DataViewPivotCategoricalToPrimaryGroups = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewTransformContext, DataViewMapping = powerbi.DataViewMapping;
        !(function(DataViewTransformContext) {
            function create(queryDataViewMetadata, objectDescriptors, dataViewMappings, dataRoles, drillCapabilities, transforms, colorAllocatorFactory) {
                var selectTransforms = transforms.selects, projectionActiveItems = transforms.roles && transforms.roles.activeItems, roleKindByQueryRef = _.isEmpty(selectTransforms) ? {} : data.DataViewSelectTransform.createRoleKindFromMetadata(selectTransforms, queryDataViewMetadata), queryProjectionsByRole = data.DataViewSelectTransform.projectionsFromSelects(selectTransforms, projectionActiveItems), dataViewMappingResult = powerbi.DataViewAnalysis.chooseDataViewMappings(queryProjectionsByRole, dataViewMappings, roleKindByQueryRef, objectDescriptors, transforms.objects), applicableRoleMappings = dataViewMappingResult.supportedMappings, context = {
                    queryDataViewMetadata: queryDataViewMetadata,
                    objectDescriptors: objectDescriptors,
                    dataRoles: dataRoles,
                    drillCapabilities: drillCapabilities,
                    transforms: transforms,
                    colorAllocatorFactory: colorAllocatorFactory,
                    selectTransforms: selectTransforms,
                    projectionOrdering: transforms.roles && transforms.roles.ordering,
                    projectionActiveItems: projectionActiveItems,
                    roleKindByQueryRef: roleKindByQueryRef,
                    queryProjectionsByRole: queryProjectionsByRole,
                    visualCapabilitiesRoleMappings: dataViewMappings,
                    visualCapabilitiesDataViewKinds: DataViewMapping.targetDataViewKinds(dataViewMappings),
                    applicableRoleMappings: applicableRoleMappings,
                    applicableDataViewKinds: DataViewMapping.targetDataViewKinds(applicableRoleMappings)
                };
                return context;
            }
            DataViewTransformContext.create = create;
        })(DataViewTransformContext = data.DataViewTransformContext || (data.DataViewTransformContext = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewCategoricalProjectionOrder, ArrayExtensions = jsCommon.ArrayExtensions, DataViewMetadataColumnUtils = powerbi.data.DataViewMetadataColumnUtils, inheritSingle = powerbi.Prototype.inheritSingle;
        !(function(DataViewCategoricalProjectionOrder) {
            function apply(prototype, applicableRoleMappings, dataRoles, projectionOrdering, splitSelects) {
                var transformedDataView, categoricalRoleMappingsWithoutRegression = _.chain(applicableRoleMappings).filter((function(mapping) {
                    return mapping.categorical && !powerbi.DataViewMapping.getRegressionUsage(mapping);
                })).map((function(mapping) {
                    return mapping.categorical;
                })).value();
                if (prototype.categorical && categoricalRoleMappingsWithoutRegression.length >= 1) {
                    var prototypeCategorical = prototype.categorical, transformedCategorical = applyToCategories(prototypeCategorical, categoricalRoleMappingsWithoutRegression, projectionOrdering, splitSelects);
                    transformedCategorical = applyToValuesAndGroups(transformedCategorical || prototypeCategorical, dataRoles, projectionOrdering, splitSelects), 
                    transformedCategorical && (transformedDataView = inheritSingle(prototype), transformedDataView.categorical = transformedCategorical);
                }
                return transformedDataView || prototype;
            }
            function combineProjectionOrderAndSplitSelects(roles, projectionOrdering, splitSelects) {
                if (projectionOrdering) {
                    var combinedProjectionOrder = _.reduce(roles, (function(combinedProjectionOrder, nextRole) {
                        var projectionOrderOfNextRole = _.filter(projectionOrdering[nextRole], (function(selectIndex) {
                            return !splitSelects || splitSelects[selectIndex];
                        }));
                        return combinedProjectionOrder.push.apply(combinedProjectionOrder, projectionOrderOfNextRole), 
                        combinedProjectionOrder;
                    }), []);
                    return combinedProjectionOrder;
                }
            }
            function applyToCategories(prototypeCategorical, categoricalRoleMappingsWithoutRegression, projectionOrdering, splitSelects) {
                if (!_.isEmpty(prototypeCategorical.categories)) {
                    var categoryRoles = powerbi.DataViewMapping.getRolesIfSameInAllCategoricalMappings(categoricalRoleMappingsWithoutRegression, powerbi.DataViewMapping.getAllRolesInCategories);
                    if (categoryRoles) {
                        var projectionOrderFilteredBySplit = combineProjectionOrderAndSplitSelects(categoryRoles, projectionOrdering, splitSelects);
                        if (projectionOrderFilteredBySplit) return applyProjectionOrderToCategories(prototypeCategorical, projectionOrderFilteredBySplit, categoryRoles);
                    }
                }
            }
            function applyProjectionOrderToCategories(prototypeCategorical, projectionOrder, categoryRoles) {
                var prototypeCategories = prototypeCategorical.categories;
                if (!_.isEmpty(prototypeCategories) && !isSelectIndexOrderEqual(prototypeCategories, projectionOrder)) {
                    var originalMetadataColumns = _.map(prototypeCategories, (function(category) {
                        return category.source;
                    })), originalColumnInfos = DataViewMetadataColumnUtils.leftJoinMetadataColumnsAndProjectionOrder(originalMetadataColumns, projectionOrder, categoryRoles), projectionTargetColumnInfos = _.chain(originalColumnInfos).filter((function(columnInfo) {
                        return void 0 !== columnInfo.projectionOrderIndex;
                    })).sortBy((function(columnInfo) {
                        return columnInfo.projectionOrderIndex;
                    })).value(), transformedCategories = _.map(projectionTargetColumnInfos, (function(columnInfo) {
                        return prototypeCategories[columnInfo.sourceIndex];
                    })), transformedCategorical = inheritSingle(prototypeCategorical);
                    if (_.isEmpty(transformedCategories)) transformedCategorical.categories = void 0; else {
                        var dataViewObjects = data.DataViewCategoricalUtils.getCategoriesDataViewObjects(prototypeCategories);
                        dataViewObjects && (transformedCategories = data.DataViewCategoricalUtils.setCategoriesDataViewObjects(transformedCategories, dataViewObjects) || transformedCategories), 
                        transformedCategorical.categories = transformedCategories;
                    }
                    return transformedCategorical;
                }
            }
            function isSelectIndexOrderEqual(categories, selectIndexOrder) {
                return categories.length === selectIndexOrder.length && _.every(selectIndexOrder, (function(selectIndex, i) {
                    return categories[i].source.index === selectIndex;
                }));
            }
            function applyToValuesAndGroups(prototypeCategorical, dataRoles, projectionOrdering, splitSelects) {
                var prototypeValues = prototypeCategorical.values;
                if (prototypeValues) {
                    var prototypeValueColumnsInfo = extractValueColumnsInfo(prototypeValues), measureRolesProjectionOrder = computeMeasureRolesProjectionOrder(prototypeValueColumnsInfo, dataRoles, projectionOrdering, splitSelects), transformedValues = applyProjectionOrderToMeasures(prototypeValues, prototypeValueColumnsInfo, measureRolesProjectionOrder);
                    if (transformedValues = applySplitSelectsToValueGroups(transformedValues || prototypeValues, splitSelects) || transformedValues) {
                        var hasRemainingDynamicSeries = !!transformedValues.source, hasRemainingMeasures = transformedValues.length > 0, transformedCategorical = inheritSingle(prototypeCategorical);
                        return hasRemainingDynamicSeries || hasRemainingMeasures ? (transformedCategorical.values = transformedValues, 
                        data.DataViewCategoricalEvalGrouped.apply(transformedCategorical)) : transformedCategorical.values = void 0, 
                        transformedCategorical;
                    }
                }
            }
            function applySplitSelectsToValueGroups(prototypeValues, splitSelects) {
                if (splitSelects && prototypeValues.source) {
                    var shouldExcludeSecondaryAxisSource = !splitSelects[prototypeValues.source.index];
                    if (shouldExcludeSecondaryAxisSource) {
                        var transformingValues = inheritSingle(prototypeValues);
                        return transformingValues.source = void 0, transformingValues.identityFields = void 0, 
                        transformingValues;
                    }
                }
            }
            function computeMeasureRolesProjectionOrder(valueColumnsInfo, dataRoles, projectionOrdering, splitSelects) {
                if (!projectionOrdering) return computeMeasureRolesProjectionOrderFallback(valueColumnsInfo, splitSelects);
                var rolePrecedenceOrder = _.reduce(dataRoles, (function(dataRolePrecedenceOrder, dataRole, i) {
                    var role = dataRole.name;
                    return void 0 === dataRolePrecedenceOrder[role] && (dataRolePrecedenceOrder[role] = i), 
                    dataRolePrecedenceOrder;
                }), {}), dynamicMeasureSources = valueColumnsInfo.dynamicSeriesMeasureSources || [], staticMeasureSources = valueColumnsInfo.staticSeriesMeasureSources || [], measureSources = dynamicMeasureSources.concat(staticMeasureSources), measureRoles = _.chain(measureSources).filter((function(columnSource) {
                    return !splitSelects || !!splitSelects[columnSource.index];
                })).uniq((function(columnSource) {
                    return columnSource.index;
                })).map((function(columnSource) {
                    var roles = columnSource.roles;
                    return roles ? _.filter(Object.keys(roles), (function(role) {
                        return roles[role];
                    })) : [];
                })).flatten().uniq().sortBy((function(role) {
                    return rolePrecedenceOrder[role];
                })).value(), projectionOrder = _.chain(measureRoles).map((function(role) {
                    return projectionOrdering[role] || [];
                })).flatten().filter((function(selectIndex) {
                    return !splitSelects || !!splitSelects[selectIndex];
                })).uniq().value();
                return projectionOrder;
            }
            function computeMeasureRolesProjectionOrderFallback(valueColumnsInfo, splitSelects) {
                var dynamicMeasureSources = valueColumnsInfo.dynamicSeriesMeasureSources || [], staticMeasureSources = valueColumnsInfo.staticSeriesMeasureSources || [], measureSources = dynamicMeasureSources.concat(staticMeasureSources), selectOrder = _.chain(measureSources).filter((function(columnSource) {
                    return !splitSelects || !!splitSelects[columnSource.index];
                })).map((function(columnSource) {
                    return columnSource.index;
                })).uniq().value();
                return selectOrder;
            }
            function applyProjectionOrderToMeasures(prototypeValues, prototypeValueColumnsInfo, measureRolesProjectionOrder) {
                var projectedDynamicSeriesMeasures = getDynamicSeriesMeasuresInProjectionOrder(prototypeValues, prototypeValueColumnsInfo, measureRolesProjectionOrder), projectedStaticSeriesMeasures = getStaticSeriesMeasuresInProjectionOrder(prototypeValues, prototypeValueColumnsInfo, measureRolesProjectionOrder);
                if (projectedDynamicSeriesMeasures || projectedStaticSeriesMeasures) {
                    var transformedValues = inheritSingle(prototypeValues);
                    if (projectedDynamicSeriesMeasures) if (projectedStaticSeriesMeasures) transformedValues.splice(0, transformedValues.length), 
                    transformedValues.push.apply(transformedValues, projectedDynamicSeriesMeasures), 
                    transformedValues.push.apply(transformedValues, projectedStaticSeriesMeasures); else {
                        var dynamicSeriesMeasureSourceCount = prototypeValueColumnsInfo.dynamicSeriesMeasureSources.length, dynamicSeriesMeasureColumnCount = dynamicSeriesMeasureSourceCount * prototypeValueColumnsInfo.dynamicSeriesGroupCount;
                        transformedValues.splice.apply(transformedValues, [ 0, dynamicSeriesMeasureColumnCount ].concat(projectedDynamicSeriesMeasures));
                    } else if (projectedStaticSeriesMeasures) {
                        var staticSeriesMeasureSourceCount = prototypeValueColumnsInfo.staticSeriesMeasureSources.length;
                        transformedValues.splice.apply(transformedValues, [ prototypeValueColumnsInfo.staticSeriesMeasureStartingIndex, staticSeriesMeasureSourceCount ].concat(projectedStaticSeriesMeasures));
                    }
                    return transformedValues;
                }
            }
            function getDynamicSeriesMeasuresInProjectionOrder(prototypeValues, prototypeValueColumnsInfo, measureRolesProjectionOrder) {
                if (prototypeValueColumnsInfo.dynamicSeriesGroupCount && !_.isEmpty(prototypeValueColumnsInfo.dynamicSeriesMeasureSources)) {
                    var projectedDynamicSeriesMeasureSources = computeProjectedSourcesIfNeeded(prototypeValueColumnsInfo.dynamicSeriesMeasureSources, measureRolesProjectionOrder);
                    if (projectedDynamicSeriesMeasureSources) {
                        var projectedMeasureSourcesCount = projectedDynamicSeriesMeasureSources.length;
                        if (0 === projectedMeasureSourcesCount) return [];
                        for (var prototypeMeaureSourcesCount = prototypeValueColumnsInfo.dynamicSeriesMeasureSources.length, seriesCount = prototypeValueColumnsInfo.dynamicSeriesGroupCount, projectedValues = [], seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) for (var offsetInPrototypeValues = seriesIndex * prototypeMeaureSourcesCount, projectedMeasureIndex = 0; projectedMeasureIndex < projectedMeasureSourcesCount; projectedMeasureIndex++) {
                            var prototypeMeasureSourceIndex = projectedDynamicSeriesMeasureSources[projectedMeasureIndex].sourceIndex, valueColumn = prototypeValues[offsetInPrototypeValues + prototypeMeasureSourceIndex];
                            projectedValues.push(valueColumn);
                        }
                        return projectedValues;
                    }
                }
            }
            function getStaticSeriesMeasuresInProjectionOrder(prototypeValues, prototypeValueColumnsInfo, measureRolesProjectionOrder) {
                if (!_.isEmpty(prototypeValueColumnsInfo.staticSeriesMeasureSources)) {
                    var projectedStaticSeriesMeasureSources = computeProjectedSourcesIfNeeded(prototypeValueColumnsInfo.staticSeriesMeasureSources, measureRolesProjectionOrder);
                    if (projectedStaticSeriesMeasureSources) {
                        var projectedMeasureSourcesCount = projectedStaticSeriesMeasureSources.length;
                        if (0 === projectedMeasureSourcesCount) return [];
                        for (var offsetInPrototypeValues = prototypeValueColumnsInfo.staticSeriesMeasureStartingIndex, projectedValues = [], projectedMeasureIndex = 0; projectedMeasureIndex < projectedMeasureSourcesCount; projectedMeasureIndex++) {
                            var prototypeMeasureSourceIndex = projectedStaticSeriesMeasureSources[projectedMeasureIndex].sourceIndex, valueColumn = prototypeValues[offsetInPrototypeValues + prototypeMeasureSourceIndex];
                            projectedValues.push(valueColumn);
                        }
                        return projectedValues;
                    }
                }
            }
            function computeProjectedSourcesIfNeeded(measureSources, projectionOrder) {
                var jointMeasureSources = DataViewMetadataColumnUtils.leftJoinMetadataColumnsAndProjectionOrder(measureSources, projectionOrder);
                jointMeasureSources = _.chain(jointMeasureSources).filter((function(column) {
                    return void 0 !== column.projectionOrderIndex;
                })).sortBy((function(column) {
                    return column.projectionOrderIndex;
                })).value();
                var isInProjectionOrder = ArrayExtensions.sequenceEqual(measureSources, jointMeasureSources, (function(a, b) {
                    return a.index === b.metadataColumn.index;
                }));
                if (!isInProjectionOrder) return jointMeasureSources;
            }
            function extractValueColumnsInfo(values) {
                var dynamicSeriesGroupCount, dynamicSeriesMeasureSources, staticSeriesMeasureStartingIndex, staticSeriesMeasureSources, secondaryAxisSource = values.source, valueGroups = values.grouped();
                if (secondaryAxisSource) {
                    dynamicSeriesMeasureSources = getMeasureSourcesInFirstGroupInstance(valueGroups), 
                    dynamicSeriesGroupCount = valueGroups.length;
                    var dynamicSeriesMeasureSourceCount = _.size(dynamicSeriesMeasureSources), dynamicSeriesMeasureColumnCount = dynamicSeriesGroupCount * dynamicSeriesMeasureSourceCount, staticSeriesMeasureColumnCount = values.length - dynamicSeriesMeasureColumnCount;
                    staticSeriesMeasureColumnCount > 0 && (staticSeriesMeasureStartingIndex = dynamicSeriesMeasureColumnCount, 
                    staticSeriesMeasureSources = _.chain(values).takeRight(staticSeriesMeasureColumnCount).map((function(measureColumn) {
                        return measureColumn.source;
                    })).value());
                } else staticSeriesMeasureStartingIndex = 0, staticSeriesMeasureSources = getMeasureSourcesInFirstGroupInstance(valueGroups);
                return {
                    secondaryAxisSource: secondaryAxisSource,
                    dynamicSeriesGroupCount: dynamicSeriesGroupCount,
                    dynamicSeriesMeasureSources: dynamicSeriesMeasureSources,
                    staticSeriesMeasureStartingIndex: staticSeriesMeasureStartingIndex,
                    staticSeriesMeasureSources: staticSeriesMeasureSources
                };
            }
            function getMeasureSourcesInFirstGroupInstance(groups) {
                if (!_.isEmpty(groups)) {
                    var firstGroup = groups[0];
                    return _.map(firstGroup.values, (function(measureColumn) {
                        return measureColumn.source;
                    }));
                }
            }
            DataViewCategoricalProjectionOrder.apply = apply;
        })(DataViewCategoricalProjectionOrder = data.DataViewCategoricalProjectionOrder || (data.DataViewCategoricalProjectionOrder = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewUpgradeFromCY16SU09Map, ArrayExtensions = jsCommon.ArrayExtensions, Prototype = powerbi.Prototype;
        !(function(DataViewUpgradeFromCY16SU09Map) {
            function detectAndApply(prototype, transformActions, applicableRoleMappings, drillableRoles) {
                if (!_.isEmpty(transformActions.splits)) return prototype;
                var dataViewMatrix = prototype.matrix;
                if (!dataViewMatrix) return prototype;
                var matchingUpgradeSourceRolesStructures = _.chain(applicableRoleMappings).map((function(mapping) {
                    return getMatchingUpgradeSourceRolesStructure(mapping);
                })).filter((function(upgradeSourceRoles) {
                    return !!upgradeSourceRoles;
                })).value();
                if (1 !== matchingUpgradeSourceRolesStructures.length) return prototype;
                var dataViewSelectIndices = data.DataViewMatrixUtils.extractSelectIndices(dataViewMatrix);
                if (!shouldUpgrade(dataViewSelectIndices, transformActions, drillableRoles, matchingUpgradeSourceRolesStructures[0])) return prototype;
                var transformedMatrix = pivotSecondaryAxisToOuterMostPrimaryAxis(dataViewMatrix), transformedDataView = Prototype.inheritSingle(prototype);
                return transformedDataView.matrix = transformedMatrix, transformedDataView;
            }
            function getMatchingUpgradeSourceRolesStructure(dataViewMapping) {
                var matrix = dataViewMapping.matrix;
                if (matrix && matrix.rows && !matrix.columns && !matrix.values) {
                    var matrixRowsRoles = powerbi.DataViewMapping.getRoles(matrix.rows, powerbi.DataViewMapping.visitMatrixRows);
                    if (ArrayExtensions.sequenceEqual(matrixRowsRoles, CY16SU09MatrixRowsRoles1, (function(lhs, rhs) {
                        return lhs === rhs;
                    })) || ArrayExtensions.sequenceEqual(matrixRowsRoles, CY16SU09MatrixRowsRoles2, (function(lhs, rhs) {
                        return lhs === rhs;
                    }))) {
                        var upgradeFromRoleNames = {
                            primaryAxisRoles: matrixRowsRoles.slice(1),
                            secondaryAxisRole: matrixRowsRoles[0]
                        };
                        return upgradeFromRoleNames;
                    }
                }
            }
            function shouldUpgrade(dataViewSelectIndices, transformActions, drillableRoles, matchingUpgradeSourceRolesStructure) {
                var dataViewPrimaryAxisLevels = dataViewSelectIndices.primaryAxis, dataViewSecondaryAxisLevels = dataViewSelectIndices.secondaryAxis;
                if (!_.isEmpty(dataViewSelectIndices.intersection) || 1 !== _.size(dataViewPrimaryAxisLevels) || 1 !== _.size(dataViewSecondaryAxisLevels)) return !1;
                var selectTransforms = transformActions.selects;
                return !!isGroupingLevelFieldsAndRolesConsistent(dataViewPrimaryAxisLevels[0].selectIndices, selectTransforms, drillableRoles, matchingUpgradeSourceRolesStructure.primaryAxisRoles) && !!isGroupingLevelFieldsAndRolesConsistent(dataViewSecondaryAxisLevels[0].selectIndices, selectTransforms, drillableRoles, [ matchingUpgradeSourceRolesStructure.secondaryAxisRole ]);
            }
            function isGroupingLevelFieldsAndRolesConsistent(groupingLevelSelectIndices, selectTransforms, drillableRoles, rolesToMatch) {
                for (var selectCountForAllMatchingRoles = 0, selectLength = groupingLevelSelectIndices.length, _i = 0, rolesToMatch_1 = rolesToMatch; _i < rolesToMatch_1.length; _i++) {
                    var roleToMatch = rolesToMatch_1[_i];
                    if (selectLength <= selectCountForAllMatchingRoles) return !1;
                    var selectCountForRole = getCountOfContiguousSelectsForRole(groupingLevelSelectIndices, selectTransforms, roleToMatch);
                    if (0 === selectCountForRole) return !1;
                    if (selectCountForRole >= 2 && !_.contains(drillableRoles, roleToMatch)) return !1;
                    selectCountForAllMatchingRoles += selectCountForRole;
                }
                return !(selectCountForAllMatchingRoles < selectLength);
            }
            function getCountOfContiguousSelectsForRole(selectIndices, selectTransforms, roleToMatch) {
                for (var count = 0, _i = 0, selectIndices_1 = selectIndices; _i < selectIndices_1.length; _i++) {
                    var selectIndex = selectIndices_1[_i], roles = selectTransforms[selectIndex] && selectTransforms[selectIndex].roles;
                    if (data.DataViewMetadataColumnUtils.isExactMatchRole(roles, roleToMatch)) count++; else if (count > 0) break;
                }
                return count;
            }
            function pivotSecondaryAxisToOuterMostPrimaryAxis(dataViewMatrix) {
                var transformingMatrix = Prototype.inheritSingle(dataViewMatrix), transformingRows = transformingMatrix.rows = Prototype.inheritSingle(dataViewMatrix.rows), transformingColumns = transformingMatrix.columns = Prototype.inheritSingle(dataViewMatrix.columns), transformingColumnsLevels = transformingColumns.levels = Prototype.inheritSingle(transformingColumns.levels), columnHierarchyLevel0Sources = transformingColumnsLevels.splice(0, 1)[0], transformingRowsLevels = transformingRows.levels = Prototype.inheritSingle(transformingRows.levels);
                transformingRowsLevels.splice(0, 0, columnHierarchyLevel0Sources);
                var oldRowsRoot = dataViewMatrix.rows.root, transformingNewRowsRoot = transformingRows.root = Prototype.inheritSingle(transformingColumns.root);
                transformingColumns.root = {
                    children: []
                };
                var transformedNewRowsRootChildren = Prototype.overrideArray(transformingNewRowsRoot.children, (function(newRowsLevel0Node) {
                    var transformingNewRowsLevel0Node = Prototype.inheritSingle(newRowsLevel0Node);
                    return transformingNewRowsLevel0Node.childIdentityFields = oldRowsRoot.childIdentityFields, 
                    transformingNewRowsLevel0Node.children = inheritAndIncrementLevelIndex(oldRowsRoot.children), 
                    transformingNewRowsLevel0Node;
                }));
                return transformedNewRowsRootChildren && (transformingNewRowsRoot.children = transformedNewRowsRootChildren), 
                transformingMatrix;
            }
            function inheritAndIncrementLevelIndex(nodes) {
                if (!nodes) return nodes;
                var transformedNodes = Prototype.overrideArray(nodes, (function(node) {
                    var transformingNode = Prototype.inherit(node);
                    return transformingNode.level += 1, transformingNode;
                }));
                return transformedNodes || Prototype.inherit(nodes);
            }
            var CY16SU09MatrixRowsRoles1 = [ "Series", "Category" ], CY16SU09MatrixRowsRoles2 = [ "Series", "X", "Y" ];
            DataViewUpgradeFromCY16SU09Map.detectAndApply = detectAndApply;
        })(DataViewUpgradeFromCY16SU09Map = data.DataViewUpgradeFromCY16SU09Map || (data.DataViewUpgradeFromCY16SU09Map = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data_4) {
        var DataViewTransform, inherit = powerbi.Prototype.inherit, inheritSingle = powerbi.Prototype.inheritSingle, ArrayExtensions = jsCommon.ArrayExtensions, EnumExtensions = jsCommon.EnumExtensions;
        !(function(DataViewTransform) {
            function setLocalizationOptions(options) {
                localizationOptions = options;
            }
            function apply(options) {
                var prototype = options.prototype, objectDescriptors = options.objectDescriptors, transforms = options.transforms, colorAllocatorFactory = options.colorAllocatorFactory;
                if (!prototype) return transformEmptyDataView(objectDescriptors, transforms, colorAllocatorFactory);
                if (!transforms) return [ prototype ];
                var transformContext = data_4.DataViewTransformContext.create(prototype.metadata, objectDescriptors, options.dataViewMappings, options.dataRoles, options.drillCapabilities, transforms, colorAllocatorFactory), pivotedAndUpgradedDataView = pivotAndUpgradeQueryDataView(prototype, transformContext), visualDataViews = transformQueryToVisualDataView(pivotedAndUpgradedDataView, transformContext, options.bypassConcatenation);
                return visualDataViews = data_4.DataViewRegression.run({
                    visualDataViews: visualDataViews,
                    dataRoles: transformContext.dataRoles,
                    objectDescriptors: objectDescriptors,
                    objectDefinitions: transforms.objects,
                    colorAllocatorFactory: colorAllocatorFactory,
                    transformSelects: transforms.selects,
                    applicableDataViewMappings: transformContext.applicableRoleMappings,
                    roleKindByQueryRef: transformContext.roleKindByQueryRef,
                    queryProjectionsByRole: transformContext.queryProjectionsByRole
                });
            }
            function pivotAndUpgradeQueryDataView(prototype, transformContext) {
                var transformsActions = transformContext.transforms, applicableRoleMappings = transformContext.applicableRoleMappings, newDataView = data_4.DataViewPivotCategoricalToPrimaryGroups.unpivotResult(prototype, transformContext.selectTransforms, transformContext.roleKindByQueryRef, transformContext.queryProjectionsByRole, applicableRoleMappings);
                return newDataView = data_4.DataViewUpgradeFromCY16SU09Map.detectAndApply(newDataView, transformsActions, applicableRoleMappings, transformContext.drillCapabilities && transformContext.drillCapabilities.roles), 
                newDataView = data_4.DataViewPivotMatrixToPrimaryGroups.pivot(newDataView, transformContext.selectTransforms, transformContext.roleKindByQueryRef, transformContext.queryProjectionsByRole, transformContext.drillCapabilities && transformContext.drillCapabilities.roles, applicableRoleMappings);
            }
            function transformQueryToVisualDataView(prototype, transformContext, bypassConcatenation) {
                var transformedDataViews = [], splits = transformContext.transforms.splits;
                if (_.isEmpty(splits)) transformedDataViews.push(transformDataView(prototype, transformContext, null, bypassConcatenation)); else for (var _i = 0, splits_1 = splits; _i < splits_1.length; _i++) {
                    var split = splits_1[_i], transformed = transformDataView(prototype, transformContext, split.selects);
                    transformedDataViews.push(transformed);
                }
                return transformedDataViews;
            }
            function transformEmptyDataView(objectDescriptors, transforms, colorAllocatorFactory) {
                if (transforms && transforms.objects) {
                    var emptyDataView = {
                        metadata: {
                            columns: []
                        }
                    };
                    return transformObjects(emptyDataView, 0, objectDescriptors, transforms.objects, transforms.selects, colorAllocatorFactory), 
                    [ emptyDataView ];
                }
                return [];
            }
            function transformDataView(prototype, transformContext, selectsToInclude, bypassConcatenation) {
                var transformed = inherit(prototype);
                transformed.metadata = inherit(prototype.metadata), transformed = pruneNonApplicableDataViewKinds(transformed, transformContext);
                var targetDataViewKinds = transformContext.visualCapabilitiesDataViewKinds, targetRoleMappings = transformContext.visualCapabilitiesRoleMappings, selectTransforms = transformContext.selectTransforms, objectDescriptors = transformContext.objectDescriptors, projectionOrdering = transformContext.projectionOrdering, matrixTransformationContext = {
                    rowHierarchyRewritten: !1,
                    columnHierarchyRewritten: !1,
                    hierarchyTreesRewritten: !1
                }, columnRewrites = [];
                return transformed = transformSelects(transformed, targetDataViewKinds, targetRoleMappings, selectTransforms, projectionOrdering, columnRewrites, matrixTransformationContext), 
                transformObjects(transformed, transformContext.visualCapabilitiesDataViewKinds, objectDescriptors, transformContext.transforms.objects, selectTransforms, transformContext.colorAllocatorFactory), 
                transformed = applyProjectionOrder(transformed, transformContext, columnRewrites, matrixTransformationContext, selectsToInclude), 
                transformed = data_4.DataViewHierarchyLevelBackfill.apply(transformed, localizationOptions.quarterPrefix), 
                bypassConcatenation || (transformed = data_4.DataViewConcatenateCategoricalColumns.detectAndApply(transformed, objectDescriptors, transformContext.applicableRoleMappings, projectionOrdering, transformContext.projectionActiveItems)), 
                data_4.DataViewNormalizeValues.apply({
                    dataview: transformed,
                    dataViewMappings: targetRoleMappings,
                    dataRoles: transformContext.dataRoles
                }), transformed;
            }
            function applyProjectionOrder(prototype, transformContext, columnRewrites, matrixTransformationContext, selectsToInclude) {
                var projectionOrdering = transformContext.projectionOrdering, applicableRoleMappings = transformContext.applicableRoleMappings, transformed = inheritSingle(prototype);
                if (transformed.table && EnumExtensions.hasFlag(transformContext.applicableDataViewKinds, 8) && applyProjectionReorderTable(transformed.table, projectionOrdering, columnRewrites), 
                transformed.matrix && EnumExtensions.hasFlag(transformContext.applicableDataViewKinds, 2)) {
                    var roleMappingsWithMatrix = _.filter(applicableRoleMappings, (function(roleMapping) {
                        return !!roleMapping.matrix;
                    }));
                    transformed.matrix = data_4.DataViewMatrixProjectionOrder.apply(transformed.matrix, roleMappingsWithMatrix[0].matrix, projectionOrdering, matrixTransformationContext), 
                    shouldPivotMatrix(transformed.matrix, applicableRoleMappings) && data_4.DataViewPivotMatrix.apply(transformed.matrix, matrixTransformationContext);
                }
                return transformed = data_4.DataViewCategoricalProjectionOrder.apply(transformed, applicableRoleMappings, transformContext.dataRoles, projectionOrdering, selectsToInclude);
            }
            function applyProjectionReorderTable(table, projectionOrdering, columnRewrites) {
                if (!projectionOrdering) return table;
                var newToOldPositions = createTableColumnPositionMapping(projectionOrdering, columnRewrites);
                if (!newToOldPositions) return table;
                var reorder = function(row) {
                    for (var keys = Object.keys(newToOldPositions), newRow = new Array(keys.length), _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                        var key = keys_1[_i];
                        newRow[key] = row[newToOldPositions[key]];
                    }
                    return newRow;
                };
                if (table = inheritSingle(table), table.columns = reorder(table.columns), _.isEmpty(table.rows) || (table.rows = powerbi.Prototype.overrideArray(table.rows, (function(row) {
                    var newRow = reorder(row);
                    return row.objects && (newRow.objects = reorder(row.objects)), newRow;
                }))), table.totals) {
                    var newTotal = reorder(table.totals);
                    table.totals.objects && (newTotal.objects = reorder(table.totals.objects)), table.totals = newTotal;
                }
                return table;
            }
            function pruneNonApplicableDataViewKinds(prototype, transformContext) {
                var visualCapabilitiesDataViewKindCount = EnumExtensions.getBitCount(transformContext.visualCapabilitiesDataViewKinds);
                if (visualCapabilitiesDataViewKindCount <= 1) return prototype;
                var applicableDataViewKinds = transformContext.applicableDataViewKinds, applicableDataViewKindCount = EnumExtensions.getBitCount(applicableDataViewKinds);
                if (0 === applicableDataViewKindCount) return prototype;
                var transformed = inheritSingle(prototype);
                return transformed.categorical && !EnumExtensions.hasFlag(applicableDataViewKinds, 1) && (transformed.categorical = void 0), 
                transformed.matrix && !EnumExtensions.hasFlag(applicableDataViewKinds, 2) && (transformed.matrix = void 0), 
                transformed.table && !EnumExtensions.hasFlag(applicableDataViewKinds, 8) && (transformed.table = void 0), 
                transformed.tree && !EnumExtensions.hasFlag(applicableDataViewKinds, 16) && (transformed.tree = void 0), 
                transformed.single && !EnumExtensions.hasFlag(applicableDataViewKinds, 4) && (transformed.single = void 0), 
                transformed;
            }
            function transformSelects(dataView, targetDataViewKinds, roleMappings, selectTransforms, projectionOrdering, columnRewrites, matrixTransformationContext) {
                return columnRewrites.length = 0, selectTransforms && (dataView.metadata.columns = applyTransformsToColumns(dataView.metadata.columns, selectTransforms, columnRewrites), 
                evaluateAggregateSources(dataView, selectTransforms)), dataView.categorical && EnumExtensions.hasFlag(targetDataViewKinds, 1) && (dataView.categorical = applyRewritesToCategorical(dataView.categorical, columnRewrites), 
                dataView = pivotIfNecessary(dataView, roleMappings)), dataView.matrix && EnumExtensions.hasFlag(targetDataViewKinds, 2) && (dataView.matrix = applyRewritesToMatrix(dataView.matrix, columnRewrites, projectionOrdering, matrixTransformationContext)), 
                dataView.table && EnumExtensions.hasFlag(targetDataViewKinds, 8) && (dataView.table = applyRewritesToTable(dataView.table, columnRewrites)), 
                dataView.single && EnumExtensions.hasFlag(targetDataViewKinds, 4) && (dataView.single = applyRewritesToSingle(dataView.single, columnRewrites)), 
                dataView;
            }
            function applyTransformsToColumns(prototypeColumns, selects, rewrites) {
                if (!selects) return prototypeColumns;
                for (var columns = inherit(prototypeColumns), _loop_3 = function(i, len) {
                    var prototypeColumn = prototypeColumns[i], select = selects[prototypeColumn.index], column = prototypeColumn;
                    if (select) column = columns[i] = inheritColumnProperties(prototypeColumn, select); else if (!_.any(prototypeColumns, (function(c) {
                        return c.formatSource && c.formatSource.formatString === prototypeColumn;
                    }))) return "continue";
                    rewrites.push({
                        from: prototypeColumn,
                        to: column
                    });
                }, i = 0, len = prototypeColumns.length; i < len; i++) _loop_3(i, len);
                return columns;
            }
            function inheritColumnProperties(prototypeColumn, select) {
                var column = inherit(prototypeColumn);
                return select.roles && (column.roles = select.roles), select.type && (column.type = select.type), 
                column.format = getFormatForColumn(select, column), select.displayName && (column.displayName = select.displayName), 
                select.queryName && (column.queryName = select.queryName), select.expr && (column.expr = select.expr), 
                select.kpi && select.kpi.graphic && (column.kpi = select.kpi), select.sort && (column.sort = select.sort), 
                null != select.sortOrder && (column.sortOrder = select.sortOrder), select.discourageAggregationAcrossGroups && (column.discourageAggregationAcrossGroups = select.discourageAggregationAcrossGroups), 
                select.parameter && (column.parameter = select.parameter), column;
            }
            function evaluateAggregateSources(dataView, selects) {
                if (selects) for (var evalContext, columns = dataView.metadata.columns, selectIdx = 0, len = selects.length; selectIdx < len; selectIdx++) {
                    var select = selects[selectIdx], aggregateSources = select && select.aggregateSources;
                    if (aggregateSources) {
                        evalContext || (evalContext = data_4.createStaticEvalContext(data_4.createColorAllocatorCache(), dataView, selects));
                        var column = findOrCreateColumn(columns, selectIdx, select), columnAggregates = column.aggregates = {}, type = powerbi.ValueType.fromDescriptor(column.type), value = evaluateAggregate(evalContext, selects, type, aggregateSources.min);
                        void 0 !== value && (columnAggregates.min = value), value = evaluateAggregate(evalContext, selects, type, aggregateSources.max), 
                        void 0 !== value && (columnAggregates.max = value);
                    }
                }
            }
            function findOrCreateColumn(columns, selectIdx, select) {
                for (var _i = 0, columns_5 = columns; _i < columns_5.length; _i++) {
                    var column = columns_5[_i];
                    if (column.index === selectIdx && void 0 === column.groupName) return column;
                }
                var newColumn = inheritColumnProperties({
                    displayName: select.displayName
                }, select);
                return columns.push(newColumn), newColumn;
            }
            function evaluateAggregate(evalContext, selects, type, source) {
                var select = selects[source.index];
                if (select) return data_4.DataViewObjectEvaluator.evaluateValue(evalContext, select.expr, type);
            }
            function getFormatForColumn(select, column) {
                return select.format || column.format;
            }
            function applyRewritesToCategorical(prototype, columnRewrites) {
                function override(value) {
                    var rewrittenSource = findOverride(value.source, columnRewrites);
                    if (rewrittenSource) {
                        var rewritten = inherit(value);
                        return rewritten.source = rewrittenSource, rewritten;
                    }
                }
                var categorical = inherit(prototype), categories = powerbi.Prototype.overrideArray(prototype.categories, override);
                if (categories && (categorical.categories = categories), prototype.values) {
                    var valueColumns = powerbi.Prototype.overrideArray(prototype.values, override) || inheritSingle(prototype.values);
                    if (categorical.values = valueColumns, valueColumns.source) {
                        var rewrittenValuesSource = findOverride(valueColumns.source, columnRewrites);
                        rewrittenValuesSource && (valueColumns.source = rewrittenValuesSource);
                    }
                }
                return data_4.DataViewCategoricalEvalGrouped.apply(categorical), categorical;
            }
            function applyRewritesToTable(prototype, columnRewrites) {
                var table = inherit(prototype), override = function(metadata) {
                    return findOverride(metadata, columnRewrites);
                }, columns = powerbi.Prototype.overrideArray(prototype.columns, override);
                return columns && (table.columns = columns), table;
            }
            function applyRewritesToSingle(prototype, columnRewrites) {
                var override = findOverride(prototype.column, columnRewrites);
                return override && (prototype = inheritSingle(prototype), prototype.column = override), 
                prototype;
            }
            function createTableColumnPositionMapping(projectionOrdering, columnRewrites) {
                var roles = Object.keys(projectionOrdering);
                if (1 === roles.length) {
                    var role = roles[0], originalOrder = _.map(columnRewrites, (function(rewrite) {
                        return rewrite.from.index;
                    })), newOrder = projectionOrdering[role];
                    return createOrderMapping(originalOrder, newOrder);
                }
            }
            function applyRewritesToMatrix(prototype, columnRewrites, projectionOrdering, context) {
                function overrideHierarchy(hierarchy) {
                    var rewrittenHierarchy = null, newLevels = powerbi.Prototype.overrideArray(hierarchy.levels, (function(level) {
                        var newLevel = null, levelSources = powerbi.Prototype.overrideArray(level.sources, override);
                        return levelSources && (newLevel = ensureRewritten(newLevel, level, (function(h) {
                            return h.sources = levelSources;
                        }))), newLevel;
                    }));
                    return newLevels && (rewrittenHierarchy = ensureRewritten(rewrittenHierarchy, hierarchy, (function(r) {
                        return r.levels = newLevels;
                    }))), rewrittenHierarchy;
                }
                var matrix = inherit(prototype), override = function(metadata) {
                    return findOverride(metadata, columnRewrites);
                }, rows = overrideHierarchy(matrix.rows);
                rows && (matrix.rows = rows, context.rowHierarchyRewritten = !0);
                var columns = overrideHierarchy(matrix.columns);
                columns && (matrix.columns = columns, context.columnHierarchyRewritten = !0);
                var valueSources = powerbi.Prototype.overrideArray(matrix.valueSources, override);
                return valueSources && (matrix.valueSources = valueSources), matrix;
            }
            function createOrderMapping(originalOrder, newOrder) {
                if (!ArrayExtensions.sequenceEqual(originalOrder, newOrder, (function(x, y) {
                    return x === y;
                }))) {
                    for (var mapping = {}, i = 0, len = newOrder.length; i < len; ++i) {
                        var newPosition = newOrder[i];
                        mapping[i] = originalOrder.indexOf(newPosition);
                    }
                    return mapping;
                }
            }
            function findOverride(source, columnRewrites) {
                var match = _.find(columnRewrites, (function(column) {
                    return column.from === source;
                }));
                if (match) return match.to;
            }
            function ensureRewritten(rewritten, prototype, callback) {
                return rewritten || (rewritten = inherit(prototype)), callback && callback(rewritten), 
                rewritten;
            }
            function addDynamicFormattingDataViewObjectDefinitions(dataView, objectDescriptors, prototype) {
                var formatStringPropertyId = data_4.DataViewObjectDescriptors.findFormatString(objectDescriptors);
                if (formatStringPropertyId && dataView.metadata && !_.isEmpty(dataView.metadata.columns)) {
                    for (var objDefns, added = !1, _i = 0, _a = dataView.metadata.columns; _i < _a.length; _i++) {
                        var column = _a[_i], queryName = column.queryName;
                        if (column.formatSource) {
                            added || (objDefns = prototype ? inheritSingle(prototype) : {}, added = !0);
                            var selector = {
                                metadata: column.queryName,
                                data: [ data_4.DataViewWildcard.create() ]
                            }, objDefn = data_4.SQExprBuilder.selectRef(queryName, 0);
                            data_4.DataViewObjectDefinitions.setValue(objDefns, formatStringPropertyId, selector, objDefn);
                        }
                    }
                    return objDefns;
                }
            }
            function transformObjects(dataView, targetDataViewKinds, objectDescriptors, objectDefinitions, selectTransforms, colorAllocatorFactory) {
                if (objectDescriptors) {
                    var objectDefinitionsWithDynamicFormatting = addDynamicFormattingDataViewObjectDefinitions(dataView, objectDescriptors, objectDefinitions);
                    objectDefinitionsWithDynamicFormatting && (objectDefinitions = objectDefinitionsWithDynamicFormatting);
                    var objectsForAllSelectors = data_4.DataViewObjectEvaluationUtils.groupObjectsBySelector(objectDefinitions);
                    data_4.DataViewObjectEvaluationUtils.addImplicitObjects(objectsForAllSelectors, objectDescriptors, dataView.metadata.columns, selectTransforms);
                    var metadataOnce = objectsForAllSelectors.metadataOnce, dataObjects = objectsForAllSelectors.data;
                    metadataOnce && evaluateMetadataObjects(dataView, selectTransforms, objectDescriptors, metadataOnce, dataObjects, colorAllocatorFactory, targetDataViewKinds);
                    var metadataObjects = objectsForAllSelectors.metadata;
                    metadataObjects && evaluateMetadataRepetition(dataView, selectTransforms, objectDescriptors, metadataObjects, colorAllocatorFactory), 
                    dataObjects && evaluateDataRepetition(dataView, targetDataViewKinds, selectTransforms, objectDescriptors, dataObjects, colorAllocatorFactory);
                }
            }
            function evaluateMetadataObjects(dataView, selectTransforms, objectDescriptors, objectDefnsForSelector, dataObjects, colorAllocatorFactory, targetDataViewKinds) {
                for (var colorAllocatorCache = populateColorAllocatorCache(dataView, selectTransforms, objectDefnsForSelector, colorAllocatorFactory), _i = 0, objectDefnsForSelector_1 = objectDefnsForSelector; _i < objectDefnsForSelector_1.length; _i++) {
                    var objectDefnForSelector = objectDefnsForSelector_1[_i], selectorId = objectDefnForSelector.selector && objectDefnForSelector.selector.id, objectDefns = objectDefnForSelector.objects, evalContext = data_4.createStaticEvalContext(colorAllocatorCache, dataView, selectTransforms), objects = data_4.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);
                    if (objects) {
                        var metadataObjects = dataView.metadata.objects;
                        metadataObjects || (metadataObjects = dataView.metadata.objects = {}), powerbi.DataViewObjects.mergeObjects(metadataObjects, objects, selectorId);
                        for (var objectName in objects) {
                            var object = objects[objectName], objectDesc = objectDescriptors[objectName];
                            for (var propertyName in object) {
                                var propertyDesc = objectDesc.properties[propertyName], ruleDesc = propertyDesc.rule;
                                if (ruleDesc) {
                                    var definitions = createRuleEvaluationInstance(dataView, colorAllocatorFactory, ruleDesc, objectName, object[propertyName], propertyDesc.type, targetDataViewKinds);
                                    _.isEmpty(definitions) || dataObjects.push.apply(dataObjects, definitions);
                                }
                            }
                        }
                    }
                }
            }
            function createRuleEvaluationInstance(dataView, colorAllocatorFactory, ruleDesc, objectName, propertyValue, ruleType, targetDataViewKinds) {
                var ruleOutput = ruleDesc.output;
                if (ruleOutput) {
                    var selectorsToCreate = findSelectorsForRuleInput(ruleOutput.selector);
                    return ruleType.fillRule ? createRuleEvaluationInstanceFillRule(dataView, colorAllocatorFactory, ruleDesc, selectorsToCreate, objectName, propertyValue) : void 0;
                }
            }
            function createRuleEvaluationInstanceFillRule(dataView, colorAllocatorFactory, ruleDesc, selectorsToCreate, objectName, propertyValue) {
                var colorAllocator = tryCreateColorAllocatorForFillRule(dataView, colorAllocatorFactory, ruleDesc.inputRole, 1, propertyValue);
                if (colorAllocator) {
                    var rule = new data_4.ColorRuleEvaluation(ruleDesc.inputRole, colorAllocator), fillRuleProperties = {};
                    fillRuleProperties[ruleDesc.output.property] = {
                        solid: {
                            color: rule
                        }
                    };
                    for (var objectDefinitions = [], selectorIndex = 0, selectorCount = selectorsToCreate.length; selectorIndex < selectorCount; selectorIndex++) objectDefinitions.push({
                        selector: selectorsToCreate[selectorIndex],
                        rules: [ rule ],
                        objects: [ {
                            name: objectName,
                            properties: fillRuleProperties
                        } ]
                    });
                    return objectDefinitions;
                }
            }
            function tryCreateColorAllocatorForFillRule(dataView, colorAllocatorFactory, identifier, identifierKind, propertyValue) {
                return propertyValue.linearGradient2 ? createColorAllocatorLinearGradient2(dataView, colorAllocatorFactory, identifier, identifierKind, propertyValue, propertyValue.linearGradient2) : propertyValue.linearGradient3 ? createColorAllocatorLinearGradient3(dataView, colorAllocatorFactory, identifier, identifierKind, propertyValue, propertyValue.linearGradient3) : void 0;
            }
            function createColorAllocatorLinearGradient2(dataView, colorAllocatorFactory, identifier, identifierKind, propertyValueFillRule, linearGradient2) {
                if (linearGradient2 = propertyValueFillRule.linearGradient2, void 0 === linearGradient2.min.value || void 0 === linearGradient2.max.value) {
                    var inputRange = findRuleInputColumnNumberRange(dataView, identifier, identifierKind);
                    if (!inputRange) return;
                    void 0 === linearGradient2.min.value && (linearGradient2.min.value = inputRange.min), 
                    void 0 === linearGradient2.max.value && (linearGradient2.max.value = inputRange.max);
                }
                if (void 0 !== linearGradient2.min.value && void 0 !== linearGradient2.max.value) return colorAllocatorFactory.linearGradient2(propertyValueFillRule.linearGradient2);
            }
            function createColorAllocatorLinearGradient3(dataView, colorAllocatorFactory, identifier, identifierKind, propertyValueFillRule, linearGradient3) {
                var splitScales;
                if (linearGradient3 = propertyValueFillRule.linearGradient3, void 0 === linearGradient3.min.value || void 0 === linearGradient3.max.value) {
                    var inputRange = findRuleInputColumnNumberRange(dataView, identifier, identifierKind);
                    if (!inputRange) return;
                    splitScales = void 0 === linearGradient3.min.value && void 0 === linearGradient3.max.value && void 0 !== linearGradient3.mid.value, 
                    void 0 === linearGradient3.min.value && (linearGradient3.min.value = inputRange.min), 
                    void 0 === linearGradient3.max.value && (linearGradient3.max.value = inputRange.max);
                }
                if (void 0 !== linearGradient3.min.value && void 0 !== linearGradient3.max.value) return void 0 === linearGradient3.mid.value && (linearGradient3.mid.value = (linearGradient3.max.value + linearGradient3.min.value) / 2), 
                colorAllocatorFactory.linearGradient3(propertyValueFillRule.linearGradient3, splitScales);
            }
            function populateColorAllocatorCache(dataView, selectTransforms, objectDefinitionsForSelector, colorAllocatorFactory) {
                for (var cache = data_4.createColorAllocatorCache(), staticEvalContext = data_4.createStaticEvalContext(), _i = 0, objectDefinitionsForSelector_1 = objectDefinitionsForSelector; _i < objectDefinitionsForSelector_1.length; _i++) for (var objectDefinitionForSelector = objectDefinitionsForSelector_1[_i], objectDefns = objectDefinitionForSelector.objects, _a = 0, objectDefns_1 = objectDefns; _a < objectDefns_1.length; _a++) {
                    var objectDefn = objectDefns_1[_a], objectDefnProperties = objectDefn.properties;
                    for (var propertyName in objectDefnProperties) {
                        var fillProperty = objectDefnProperties[propertyName];
                        if (fillProperty && fillProperty.solid && fillProperty.solid.color && 24 === fillProperty.solid.color.kind) {
                            var fillRuleExpr = fillProperty.solid.color, inputExprQueryName = data_4.DataViewSelectTransform.findExprQueryName(fillRuleExpr.input, selectTransforms);
                            if (!inputExprQueryName) continue;
                            var fillRule = data_4.DataViewObjectEvaluator.evaluateProperty(staticEvalContext, fillRulePropertyDescriptor, fillRuleExpr.rule), colorAllocator = tryCreateColorAllocatorForFillRule(dataView, colorAllocatorFactory, inputExprQueryName, 0, fillRule);
                            colorAllocator && cache.register(fillRuleExpr, colorAllocator);
                        }
                    }
                }
                return cache;
            }
            function evaluateDataRepetition(dataView, targetDataViewKinds, selectTransforms, objectDescriptors, objectDefnsForSelector, colorAllocatorFactory) {
                var colorAllocatorCache = populateColorAllocatorCache(dataView, selectTransforms, objectDefnsForSelector, colorAllocatorFactory), dataViewCategorical = dataView.categorical;
                dataViewCategorical && EnumExtensions.hasFlag(targetDataViewKinds, 1) && evaluateDataRepetitionCategorical(dataViewCategorical, selectTransforms, objectDescriptors, objectDefnsForSelector, colorAllocatorCache);
                var dataViewMatrix = dataView.matrix;
                if (dataViewMatrix && EnumExtensions.hasFlag(targetDataViewKinds, 2)) {
                    var rewrittenMatrix = evaluateDataRepetitionMatrix(dataViewMatrix, objectDescriptors, objectDefnsForSelector, colorAllocatorCache);
                    rewrittenMatrix && (dataView.matrix = rewrittenMatrix);
                }
                var dataViewTable = dataView.table;
                if (dataViewTable && EnumExtensions.hasFlag(targetDataViewKinds, 8)) {
                    var rewrittenTable = evaluateDataRepetitionTable(dataViewTable, selectTransforms, objectDescriptors, objectDefnsForSelector, colorAllocatorCache);
                    rewrittenTable && (dataView.table = rewrittenTable);
                }
                var dataViewSingle = dataView.single;
                if (dataViewSingle && dataViewTable && EnumExtensions.hasFlag(targetDataViewKinds, 4)) {
                    var rewrittenSingle = evaluateDataRepetitionSingle(dataView, selectTransforms, objectDescriptors, objectDefnsForSelector, colorAllocatorCache);
                    rewrittenSingle && (dataView.single = rewrittenSingle);
                }
            }
            function rewriteTableRoleSelector(dataViewTable, selector) {
                return data_4.Selector.hasRoleWildcard(selector) && (selector = findSelectorForRoleWildcard(selector, (function(r) {
                    return getIdentityExprsForRolesOnTable(r, dataViewTable);
                }))), selector;
            }
            function rewriteMatrixRoleSelector(dataViewMatrix, selector) {
                return data_4.Selector.hasRoleWildcard(selector) && (selector = findSelectorForRoleWildcard(selector, (function(r) {
                    return getIdentityExprsForRolesOnMatrix(r, dataViewMatrix);
                }))), selector;
            }
            function rewriteCategoricalRoleSelector(dataViewCategorical, selector) {
                return data_4.Selector.hasRoleWildcard(selector) && (selector = findSelectorForRoleWildcard(selector, (function(r) {
                    return getIdentityExprsForRolesOnCategorical(r, dataViewCategorical);
                }))), selector;
            }
            function findSelectorForRoleWildcard(selector, getIdentityExprsForRoles) {
                for (var resultingSelector = {
                    data: [],
                    id: selector.id,
                    metadata: selector.metadata
                }, _i = 0, _a = selector.data; _i < _a.length; _i++) {
                    var dataSelector = _a[_i];
                    if (data_4.Selector.isRoleWildcard(dataSelector)) {
                        var exprs = getIdentityExprsForRoles(dataSelector.roles);
                        if (!_.isEmpty(exprs)) {
                            for (var _b = 0, exprs_1 = exprs; _b < exprs_1.length; _b++) {
                                var expr = exprs_1[_b];
                                resultingSelector.data.push(data_4.DataViewScopeWildcard.fromExprs([ expr ]));
                            }
                            continue;
                        }
                    }
                }
                return resultingSelector;
            }
            function getIdentityExprsForRolesOnTable(roles, dataViewTable) {
                if (!roles) return [];
                for (var identityExprs = [], _i = 0, _a = dataViewTable.columns; _i < _a.length; _i++) {
                    var column = _a[_i];
                    column.identityExprs && allColumnsBelongToRole([ column ], roles) && identityExprs.push.apply(identityExprs, column.identityExprs);
                }
                return identityExprs;
            }
            function getIdentityExprsForRolesOnMatrix(roles, dataViewMatrix) {
                if (dataViewMatrix) {
                    var identityExprs = [];
                    return identityExprs.push.apply(identityExprs, getIdentityExprsForRolesOnMatrixHierarchy(roles, dataViewMatrix.rows)), 
                    identityExprs.push.apply(identityExprs, getIdentityExprsForRolesOnMatrixHierarchy(roles, dataViewMatrix.columns)), 
                    identityExprs;
                }
            }
            function getIdentityExprsForRolesOnMatrixHierarchy(roles, hierarchy) {
                if (!roles || !hierarchy) return [];
                for (var identityExprs = [], _i = 0, _a = hierarchy.levels; _i < _a.length; _i++) for (var level = _a[_i], _b = 0, _c = level.sources; _b < _c.length; _b++) {
                    var column = _c[_b];
                    column.identityExprs && allColumnsBelongToRole([ column ], roles) && identityExprs.push.apply(identityExprs, column.identityExprs);
                }
                return identityExprs;
            }
            function getIdentityExprsForRolesOnCategorical(roles, dataViewCategorical) {
                if (dataViewCategorical.categories) for (var _i = 0, _a = dataViewCategorical.categories; _i < _a.length; _i++) {
                    var category = _a[_i];
                    if (category.source && allColumnsBelongToRole([ category.source ], roles)) return category.identityFields;
                }
            }
            function allColumnsBelongToRole(columns, selectorRoles) {
                for (var _i = 0, columns_6 = columns; _i < columns_6.length; _i++) {
                    var column = columns_6[_i], roles = column.roles;
                    if (!roles || !_.any(selectorRoles, (function(selectorRole) {
                        return roles[selectorRole];
                    }))) return !1;
                }
                return !0;
            }
            function evaluateDataRepetitionCategorical(dataViewCategorical, selectTransforms, objectDescriptors, objectDefnsForSelector, colorAllocatorCache) {
                for (var _i = 0, objectDefnsForSelector_2 = objectDefnsForSelector; _i < objectDefnsForSelector_2.length; _i++) {
                    var objectDefnForSelector = objectDefnsForSelector_2[_i], selector = objectDefnForSelector.selector, rules = objectDefnForSelector.rules, objectDefns = objectDefnForSelector.objects, containsWildcard = data_4.Selector.containsWildcard(selector);
                    selector = rewriteCategoricalRoleSelector(dataViewCategorical, selector), evaluateDataRepetitionCategoricalCategory(dataViewCategorical, selectTransforms, objectDescriptors, selector, rules, containsWildcard, objectDefns, colorAllocatorCache), 
                    evaluateDataRepetitionCategoricalValueGrouping(dataViewCategorical, selectTransforms, objectDescriptors, selector, rules, containsWildcard, objectDefns, colorAllocatorCache);
                }
            }
            function evaluateDataRepetitionCategoricalCategory(dataViewCategorical, selectTransforms, objectDescriptors, selector, rules, containsWildcard, objectDefns, colorAllocatorCache) {
                if (dataViewCategorical.categories && 0 !== dataViewCategorical.categories.length) {
                    var targetColumns = findSelectedCategoricalColumns(dataViewCategorical, selector);
                    if (targetColumns) {
                        var foundMatch, identities = targetColumns.identities, evalContext = data_4.createCategoricalEvalContext(colorAllocatorCache, dataViewCategorical, selectTransforms);
                        if (identities) {
                            for (var i = 0, len = identities.length; i < len; i++) {
                                var identity = identities[i];
                                if (containsWildcard || data_4.Selector.matchesData(selector, [ identity ])) {
                                    evalContext.setCurrentRowIndex(i);
                                    var objects = data_4.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);
                                    if (objects) for (var _i = 0, _a = targetColumns.columns; _i < _a.length; _i++) {
                                        var column = _a[_i], columnObjects = column.objects;
                                        columnObjects || (columnObjects = column.objects = new Array(len)), columnObjects[i] || (columnObjects[i] = {}), 
                                        powerbi.DataViewObjects.mergeObjects(columnObjects[i], objects, selector.id);
                                    }
                                    if (!containsWildcard) return !0;
                                    foundMatch = !0;
                                }
                            }
                            return foundMatch;
                        }
                    }
                }
            }
            function evaluateDataRepetitionCategoricalValueGrouping(dataViewCategorical, selectTransforms, objectDescriptors, selector, rules, containsWildcard, objectDefns, colorAllocatorCache) {
                var dataViewCategoricalValues = dataViewCategorical.values;
                if (dataViewCategoricalValues && dataViewCategoricalValues.identityFields && data_4.Selector.matchesKeys(selector, [ dataViewCategoricalValues.identityFields ])) {
                    var valuesGrouped = dataViewCategoricalValues.grouped();
                    if (valuesGrouped) {
                        for (var foundMatch, evalContext = data_4.createCategoricalEvalContext(colorAllocatorCache, dataViewCategorical, selectTransforms), i = 0, len = valuesGrouped.length; i < len; i++) {
                            var valueGroup = valuesGrouped[i], selectorMetadata = selector.metadata, valuesInGroup = valueGroup.values;
                            if (containsWildcard || data_4.Selector.matchesData(selector, [ valueGroup.identity ])) {
                                var objects = data_4.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);
                                if (objects) if (selectorMetadata) for (var j = 0, jlen = valuesInGroup.length; j < jlen; j++) {
                                    var valueColumn = valuesInGroup[j], valueSource = valueColumn.source;
                                    if (valueSource.queryName === selectorMetadata) {
                                        var valueSourceOverwrite = powerbi.Prototype.inherit(valueSource), valueColumnObjects = valueSourceOverwrite.objects;
                                        valueColumnObjects || (valueColumnObjects = valueSourceOverwrite.objects = {}), 
                                        powerbi.DataViewObjects.mergeObjects(valueColumnObjects, objects, selector.id), 
                                        valueColumn.source = valueSourceOverwrite, foundMatch = !0;
                                        break;
                                    }
                                } else {
                                    var valueGroupObjects = valueGroup.objects;
                                    valueGroupObjects || (valueGroupObjects = valueGroup.objects = {}), powerbi.DataViewObjects.mergeObjects(valueGroupObjects, objects, selector.id), 
                                    setGrouped(dataViewCategoricalValues, valuesGrouped), foundMatch = !0;
                                }
                                if (!containsWildcard) return !0;
                            }
                        }
                        return foundMatch;
                    }
                }
            }
            function evaluateDataRepetitionMatrix(dataViewMatrix, objectDescriptors, objectDefnsForSelector, colorAllocatorCache) {
                var valueSources = dataViewMatrix.valueSources, valueSourcesCount = valueSources.length, matrixRewritten = !1, columnLeavesPath = data_4.DataViewMatrixUtils.getLeafNodesPath(dataViewMatrix.columns.root), evalContext = data_4.createMatrixEvalContext(colorAllocatorCache, dataViewMatrix), rowHierarchyFields = getHierarchyFields(dataViewMatrix.rows), columnHierarchyFields = getHierarchyFields(dataViewMatrix.columns), valuesIdentityFields = [];
                valuesIdentityFields.push.apply(valuesIdentityFields, rowHierarchyFields), valuesIdentityFields.push.apply(valuesIdentityFields, columnHierarchyFields);
                for (var _loop_4 = function(objectDefnForSelector) {
                    var selector = objectDefnForSelector.selector, objectDefns = (objectDefnForSelector.rules, 
                    objectDefnForSelector.objects);
                    selector = rewriteMatrixRoleSelector(dataViewMatrix, selector);
                    var containsWildcard = data_4.Selector.containsWildcard(selector), isWildcardSelector = _.any(selector.data, (function(data) {
                        return data_4.Selector.isWildcard(data);
                    })), canMatchRowNode = null == selector.metadata && data_4.Selector.matchesKeys(selector, rowHierarchyFields, !0), canMatchColumnNode = (valueSourcesCount > 1 || valueSourcesCount <= 1 && null == selector.metadata) && data_4.Selector.matchesKeys(selector, columnHierarchyFields, !0), canMatchValueNode = selector.metadata && valueSourcesCount > 0 && _.any(valueSources, (function(vs) {
                        return vs.queryName === selector.metadata;
                    })) && data_4.Selector.matchesKeys(selector, valuesIdentityFields, !1), rewrittenRows = void 0, rewrittenCols = void 0;
                    canMatchColumnNode && (rewrittenCols = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.columns, objectDescriptors, selector, containsWildcard, isWildcardSelector, objectDefns)), 
                    canMatchValueNode ? rewrittenRows = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.rows, objectDescriptors, selector, containsWildcard, isWildcardSelector, objectDefns, columnLeavesPath) : canMatchRowNode && (rewrittenRows = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.rows, objectDescriptors, selector, containsWildcard, isWildcardSelector, objectDefns)), 
                    (rewrittenRows || rewrittenCols) && (matrixRewritten = !0, dataViewMatrix = inheritSingle(dataViewMatrix), 
                    rewrittenRows && (dataViewMatrix.rows = rewrittenRows), rewrittenCols && (dataViewMatrix.columns = rewrittenCols));
                }, _i = 0, objectDefnsForSelector_3 = objectDefnsForSelector; _i < objectDefnsForSelector_3.length; _i++) {
                    var objectDefnForSelector = objectDefnsForSelector_3[_i];
                    _loop_4(objectDefnForSelector);
                }
                if (matrixRewritten) return dataViewMatrix;
            }
            function getHierarchyFields(hierarchy) {
                if (!hierarchy) return [];
                for (var fields = [], _i = 0, _a = hierarchy.levels; _i < _a.length; _i++) {
                    for (var level = _a[_i], levelFields = [], _b = 0, _c = level.sources; _b < _c.length; _b++) {
                        var column = _c[_b];
                        column.identityExprs && levelFields.push.apply(levelFields, column.identityExprs);
                    }
                    _.isEmpty(levelFields) || fields.push(levelFields);
                }
                return fields;
            }
            function evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrixHierarchy, objectDescriptors, selector, containsWildcard, isWildcardSelector, objectDefns, columnLeavesPath) {
                if (dataViewMatrixHierarchy) {
                    var root = dataViewMatrixHierarchy.root;
                    if (root) {
                        var rewrittenRoot = evaluateDataRepetitionMatrixNode(evalContext, [ root ], objectDescriptors, selector, containsWildcard, isWildcardSelector, objectDefns, columnLeavesPath);
                        if (rewrittenRoot) {
                            var rewrittenHierarchy = inheritSingle(dataViewMatrixHierarchy);
                            return rewrittenHierarchy.root = rewrittenRoot, rewrittenHierarchy;
                        }
                    }
                }
            }
            function evaluateDataRepetitionMatrixNode(evalContext, nodePath, objectDescriptors, selector, containsWildcard, isWildcardSelector, objectDefns, columnLeavesPath) {
                var rewrittenNode, dataViewNode = _.last(nodePath);
                if (data_4.DataViewMatrixUtils.isLeafNode(dataViewNode)) {
                    if (null == columnLeavesPath || _.isEmpty(evalContext.getValueSourcesQueryNames())) return;
                    rewrittenNode = evaluateDataRepetitionMatrixNodeValues(evalContext, nodePath, objectDescriptors, selector, containsWildcard, objectDefns, columnLeavesPath);
                } else rewrittenNode = evaluateDataRepetitionMatrixNodeChildren(evalContext, nodePath, objectDescriptors, selector, containsWildcard, isWildcardSelector, objectDefns, columnLeavesPath);
                return rewrittenNode;
            }
            function evaluateDataRepetitionMatrixNodeChildren(evalContext, nodePath, objectDescriptors, selector, containsWildcard, isWildcardSelector, objectDefns, columnLeavesPath) {
                var hierarchy, dataViewMatrix = evalContext.getDataView();
                nodePath[0] === dataViewMatrix.rows.root ? hierarchy = dataViewMatrix.rows : nodePath[0] === dataViewMatrix.columns.root && (hierarchy = dataViewMatrix.columns);
                var rewrittenNode, rewrittenChildNode, dataViewNode = _.last(nodePath), childNodes = dataViewNode.children, shouldEvaluateChildrenObjects = !1, childIdentityFields = dataViewNode.childIdentityFields, childrenQueryNames = [], childLevelIndex = childNodes[0].level, areChildrenMultiMeasure = dataViewMatrix.valueSources.length > 1 && hierarchy === dataViewMatrix.columns && childLevelIndex === hierarchy.levels.length - 1;
                if (!_.isEmpty(hierarchy.levels)) {
                    var childrenLevelSources = hierarchy.levels[childLevelIndex].sources;
                    if (areChildrenMultiMeasure) {
                        childrenQueryNames = evalContext.getValueSourcesQueryNames();
                        var parentIdentity = _.compact(_.map(nodePath, (function(node) {
                            return node.identity;
                        }))), parentTotalExprs = void 0;
                        dataViewNode.isSubtotal && nodePath.length > 1 && (parentTotalExprs = nodePath[nodePath.length - 2].childIdentityFields), 
                        shouldEvaluateChildrenObjects = null != selector.metadata && _.any(childrenQueryNames, (function(queryName) {
                            return queryName === selector.metadata;
                        })) && data_4.Selector.matchesData(selector, parentIdentity, parentTotalExprs);
                    } else _.isEmpty(childIdentityFields) || (childrenQueryNames = _.map(childrenLevelSources, (function(source) {
                        return source.queryName;
                    })), shouldEvaluateChildrenObjects = null == selector.metadata && data_4.Selector.matchesKeys(selector, _.map(nodePath, (function(node) {
                        return node.childIdentityFields;
                    }))));
                }
                for (var i = 0, len = childNodes.length; i < len; i++) {
                    var childNode = childNodes[i], childPath = nodePath.concat(childNode);
                    hierarchy === dataViewMatrix.rows ? evalContext.setCurrentContext(null, childPath, null, null) : hierarchy === dataViewMatrix.columns && evalContext.setCurrentContext(null, null, childPath, null);
                    var selectorMatched = !1;
                    if (shouldEvaluateChildrenObjects) {
                        for (var childIdentity = [], _i = 0, childPath_1 = childPath; _i < childPath_1.length; _i++) {
                            var node = childPath_1[_i];
                            node.identity && childIdentity.push(node.identity);
                        }
                        var childQueryName = void 0;
                        _.isEmpty(childrenQueryNames) || (childQueryName = childrenQueryNames[childNode.levelSourceIndex || 0]);
                        var totalLevelFields = void 0;
                        childNode.isSubtotal && (areChildrenMultiMeasure ? nodePath.length > 1 && (totalLevelFields = nodePath[nodePath.length - 2].childIdentityFields) : totalLevelFields = childIdentityFields);
                        var selectorMetadataMatches = null == selector.metadata || selector.metadata === childQueryName && !isWildcardSelector;
                        if (selectorMetadataMatches && data_4.Selector.matchesData(selector, childIdentity, totalLevelFields)) {
                            selectorMatched = !0;
                            var objects = data_4.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);
                            objects && (rewrittenChildNode = inheritSingle(childNode), rewrittenChildNode.objects || (rewrittenChildNode.objects = {}), 
                            powerbi.DataViewObjects.mergeObjects(rewrittenChildNode.objects, objects, selector.id));
                        }
                    }
                    if (selectorMatched && !isWildcardSelector || (rewrittenChildNode = evaluateDataRepetitionMatrixNode(evalContext, childPath, objectDescriptors, selector, containsWildcard, isWildcardSelector, objectDefns, columnLeavesPath)), 
                    rewrittenChildNode && (rewrittenNode || (rewrittenNode = inheritNodeAndChildren(dataViewNode)), 
                    rewrittenNode.children[i] = rewrittenChildNode, !containsWildcard)) break;
                }
                return rewrittenNode;
            }
            function evaluateDataRepetitionMatrixNodeValues(evalContext, rowLeafPath, objectDescriptors, selector, containsWildCard, objectDefns, columnLeavesPath) {
                var rewrittenNode, rowLeaf = _.last(rowLeafPath), valueNodes = rowLeaf.values;
                if (!_.isEmpty(valueNodes)) {
                    for (var valueSourcesQueryNames = evalContext.getValueSourcesQueryNames(), i = 0, len = columnLeavesPath.length; i < len; i++) {
                        var valueNode = valueNodes[i], columnLeafPath = columnLeavesPath[i];
                        if (valueNode) {
                            var queryName = valueSourcesQueryNames[valueNode.valueSourceIndex || 0];
                            if (selectorMatchesMatrixNodeValue(selector, queryName, rowLeafPath, columnLeafPath)) {
                                var rewrittenValueNode = void 0;
                                evalContext.setCurrentContext(valueNode, rowLeafPath, columnLeafPath, i);
                                var objects = data_4.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);
                                objects && (rewrittenValueNode = inheritSingle(valueNode), rewrittenValueNode.objects || (rewrittenValueNode.objects = {}), 
                                powerbi.DataViewObjects.mergeObjects(rewrittenValueNode.objects, objects, selector.id), 
                                rewrittenNode || (rewrittenNode = inheritSingle(rowLeaf)), rewrittenNode.values[i] = rewrittenValueNode);
                            }
                        }
                    }
                    return rewrittenNode;
                }
            }
            function selectorMatchesMatrixNodeValue(selector, queryName, rowPath, columnPath) {
                if (queryName !== selector.metadata) return !1;
                for (var valueNodeIdentity = [], _i = 0, rowPath_1 = rowPath; _i < rowPath_1.length; _i++) {
                    var node = rowPath_1[_i];
                    node.identity && valueNodeIdentity.push(node.identity);
                }
                for (var _a = 0, columnPath_1 = columnPath; _a < columnPath_1.length; _a++) {
                    var node = columnPath_1[_a];
                    node.identity && valueNodeIdentity.push(node.identity);
                }
                var valueNodeTotalExprs = [];
                return _.last(rowPath).isSubtotal && valueNodeTotalExprs.push.apply(valueNodeTotalExprs, getSubtotalIdentityFields(rowPath)), 
                _.last(columnPath).isSubtotal && valueNodeTotalExprs.push.apply(valueNodeTotalExprs, getSubtotalIdentityFields(columnPath)), 
                _.isEmpty(valueNodeTotalExprs) && (valueNodeTotalExprs = void 0), data_4.Selector.matchesData(selector, valueNodeIdentity, valueNodeTotalExprs);
            }
            function getSubtotalIdentityFields(nodePath) {
                var subtotalParent = _.findLast(nodePath, (function(node) {
                    return null != node.childIdentityFields;
                }));
                return subtotalParent ? subtotalParent.childIdentityFields : [];
            }
            function inheritNodeAndChildren(node) {
                if (Object.getPrototypeOf(node) !== Object.prototype) return node;
                var inherited = inheritSingle(node);
                return inherited.children = inherit(node.children), inherited;
            }
            function evaluateDataRepetitionTable(dataViewTable, selectTransforms, objectDescriptors, objectDefnsForSelector, colorAllocatorCache) {
                for (var tableRewritten = !1, _i = 0, objectDefnsForSelector_4 = objectDefnsForSelector; _i < objectDefnsForSelector_4.length; _i++) {
                    var objectDefnForSelector = objectDefnsForSelector_4[_i], selector = objectDefnForSelector.selector, objectDefns = objectDefnForSelector.objects, containsWildcard = data_4.Selector.containsWildcard(selector);
                    selector = rewriteTableRoleSelector(dataViewTable, selector);
                    var evalContext = data_4.createTableEvalContext(colorAllocatorCache, dataViewTable, selectTransforms), rewrittenRows = void 0;
                    _.isEmpty(dataViewTable.rows) || (rewrittenRows = evaluateDataRepetitionTableRows(evalContext, dataViewTable.columns, dataViewTable.rows, dataViewTable.identity, dataViewTable.identityFields, objectDescriptors, selector, containsWildcard, objectDefns));
                    var rewrittenTotal = void 0;
                    dataViewTable.totals && (rewrittenTotal = evaluateDataRepetitionSingleRow(evalContext, dataViewTable.columns, dataViewTable.totals, dataViewTable.identityFields, objectDescriptors, selector, objectDefns)), 
                    (rewrittenRows || rewrittenTotal) && (tableRewritten = !0, dataViewTable = inheritSingle(dataViewTable), 
                    rewrittenRows && (dataViewTable.rows = rewrittenRows), rewrittenTotal && (dataViewTable.totals = rewrittenTotal));
                }
                if (tableRewritten) return dataViewTable;
            }
            function evaluateDataRepetitionTableRows(evalContext, columns, rows, identities, identityFields, objectDescriptors, selector, containsWildcard, objectDefns) {
                if (selector.metadata && !_.isEmpty(selector.data)) {
                    var colIdx = _.findIndex(columns, (function(col) {
                        return col.queryName === selector.metadata;
                    }));
                    if (!(colIdx < 0) && data_4.Selector.matchesKeys(selector, [ identityFields ])) {
                        var inheritedRows;
                        if (_.all(columns, (function(c) {
                            return c.isMeasure;
                        }))) {
                            var rewrittenRow = evaluateDataRepetitionSingleRow(evalContext, columns, rows[0], identityFields, objectDescriptors, selector, objectDefns);
                            rewrittenRow && (inheritedRows = inheritSingle(rows), inheritedRows[0] = rewrittenRow);
                        } else {
                            if (_.any(selector.data, (function(dataItem) {
                                return data_4.Selector.isWildcard(dataItem) && 2 === dataItem.matchingOption;
                            }))) return;
                            for (var colLen = columns.length, rowIdx = 0, rowLen = identities.length; rowIdx < rowLen; rowIdx++) {
                                var identity = identities[rowIdx];
                                if (containsWildcard || data_4.Selector.matchesData(selector, [ identity ])) {
                                    evalContext.setCurrentRow(rows[rowIdx]);
                                    var objects = data_4.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);
                                    if (objects) {
                                        inheritedRows || (inheritedRows = inheritSingle(rows));
                                        var inheritedRow = inheritedRows[rowIdx] = inheritSingle(inheritedRows[rowIdx]), rowObjects = inheritedRow.objects;
                                        rowObjects || (inheritedRow.objects = rowObjects = new Array(colLen)), rowObjects[colIdx] || (rowObjects[colIdx] = {}), 
                                        powerbi.DataViewObjects.mergeObjects(rowObjects[colIdx], objects, selector.id);
                                    }
                                    if (!containsWildcard) break;
                                }
                            }
                        }
                        return inheritedRows;
                    }
                }
            }
            function evaluateDataRepetitionSingle(dataView, selectTransforms, objectDescriptors, objectDefnsForSelector, colorAllocatorCache) {
                for (var inheritedSingle, evalContext = data_4.createStaticEvalContext(colorAllocatorCache, dataView, selectTransforms), _i = 0, objectDefnsForSelector_5 = objectDefnsForSelector; _i < objectDefnsForSelector_5.length; _i++) {
                    var objectDefnForSelector = objectDefnsForSelector_5[_i], selector = objectDefnForSelector.selector, objectDefns = objectDefnForSelector.objects;
                    if (selector.metadata === dataView.single.column.queryName && data_4.Selector.matchesData(selector, [])) {
                        var evaluatedObjects = data_4.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);
                        evaluatedObjects && (inheritedSingle || (inheritedSingle = inheritSingle(dataView.single)), 
                        inheritedSingle.objects || (inheritedSingle.objects = {}), powerbi.DataViewObjects.mergeObjects(inheritedSingle.objects, evaluatedObjects, selector.id));
                    }
                }
                return inheritedSingle;
            }
            function evaluateDataRepetitionSingleRow(evalContext, columns, row, identityFields, objectDescriptors, selector, objectDefns) {
                var identityExprs = _.isEmpty(identityFields) ? void 0 : identityFields;
                if (selector.metadata && data_4.Selector.matchesData(selector, [], identityExprs)) {
                    var colIdx = _.findIndex(columns, (function(col) {
                        return col.queryName === selector.metadata;
                    }));
                    if (!(colIdx < 0)) {
                        var inheritedRow, colLen = columns.length;
                        evalContext.setCurrentRow(row);
                        var objects = data_4.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);
                        if (objects) {
                            inheritedRow = inheritSingle(row);
                            var rowObjects = inheritedRow.objects;
                            rowObjects || (inheritedRow.objects = rowObjects = new Array(colLen)), rowObjects[colIdx] || (rowObjects[colIdx] = {}), 
                            powerbi.DataViewObjects.mergeObjects(rowObjects[colIdx], objects);
                        }
                        return inheritedRow;
                    }
                }
            }
            function evaluateMetadataRepetition(dataView, selectTransforms, objectDescriptors, objectDefnsForSelector, colorAllocatorFactory) {
                for (var colorAllocatorCache = populateColorAllocatorCache(dataView, selectTransforms, objectDefnsForSelector, colorAllocatorFactory), _i = 0, objectDefnsForSelector_6 = objectDefnsForSelector; _i < objectDefnsForSelector_6.length; _i++) for (var objectDefnForSelector = objectDefnsForSelector_6[_i], selector = objectDefnForSelector.selector, objectDefns = objectDefnForSelector.objects, columns = dataView.metadata.columns, metadataId = selector.metadata, evalContext = data_4.createStaticEvalContext(colorAllocatorCache, dataView, selectTransforms), i = 0, len = columns.length; i < len; i++) {
                    var column = columns[i];
                    if (column.queryName === metadataId) {
                        var objects = data_4.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);
                        column.objects || (column.objects = {}), powerbi.DataViewObjects.mergeObjects(column.objects, objects, selector.id);
                    }
                }
            }
            function findSelectedCategoricalColumns(dataViewCategorical, selector) {
                for (var identities = dataViewCategorical.categories[0].identity, targetColumns = [], _i = 0, _a = dataViewCategorical.categories; _i < _a.length; _i++) {
                    var categoryColumn = _a[_i];
                    if (!categoryColumn.identityFields) return;
                    if (!data_4.Selector.matchesKeys(selector, [ categoryColumn.identityFields ])) return;
                    targetColumns.push(categoryColumn);
                }
                var selectedMetadataId = selector.metadata;
                if (selectedMetadataId) {
                    var valueColumns = dataViewCategorical.values;
                    if (valueColumns) for (var i = 0, len = valueColumns.length; i < len; i++) {
                        var valueColumn = valueColumns[i];
                        if (valueColumn.source.queryName === selectedMetadataId) {
                            targetColumns = [ valueColumn ];
                            break;
                        }
                    }
                }
                return {
                    columns: targetColumns,
                    identities: identities
                };
            }
            function findSelectorsForRuleInput(selectorRoles) {
                return [ {
                    data: [ data_4.DataViewRoleWildcard.fromRoles(selectorRoles) ]
                } ];
            }
            function findRuleInputColumnNumberRange(dataView, identifier, identifierKind) {
                for (var columns = dataView.metadata.columns, i = 0, len = columns.length; i < len; i++) {
                    var column = columns[i];
                    if (1 === identifierKind) {
                        var valueColRoles = column.roles;
                        if (!valueColRoles || !valueColRoles[identifier]) continue;
                    } else if (column.queryName !== identifier || void 0 !== column.groupName) continue;
                    var aggregates = column.aggregates;
                    if (aggregates) {
                        var min = aggregates.min, max = aggregates.max;
                        return {
                            min: min,
                            max: max
                        };
                    }
                }
            }
            function createValueColumns(values, valueIdentityFields, source) {
                void 0 === values && (values = []);
                var result = values;
                return setGrouped(result), valueIdentityFields && (result.identityFields = valueIdentityFields), 
                source && (result.source = source), result;
            }
            function setGrouped(values, groupedResult) {
                values.grouped = groupedResult ? function() {
                    return groupedResult;
                } : function() {
                    return groupValues(values);
                };
            }
            function groupValues(values) {
                for (var currentGroup, groups = [], i = 0, len = values.length; i < len; i++) {
                    var value = values[i];
                    if (!currentGroup || currentGroup.identity !== value.identity) {
                        if (currentGroup = {
                            values: []
                        }, value.identity) {
                            currentGroup.identity = value.identity;
                            var source = value.source;
                            void 0 !== source.groupName ? currentGroup.name = source.groupName : source.displayName && (currentGroup.name = source.displayName);
                        }
                        groups.push(currentGroup);
                    }
                    currentGroup.values.push(value);
                }
                return groups;
            }
            function pivotIfNecessary(dataView, dataViewMappings) {
                var transformedDataView, categoricalTransformTarget = determineCategoricalTransformation(dataView.categorical, dataViewMappings);
                if (categoricalTransformTarget) switch (categoricalTransformTarget.type) {
                  case 1:
                    transformedDataView = data_4.DataViewPivotCategorical.apply(dataView);
                    break;

                  case 2:
                    transformedDataView = data_4.DataViewSelfCrossJoin.apply(dataView, categoricalTransformTarget.selfCrossJoinCategory);
                }
                return transformedDataView || dataView;
            }
            function determineCategoricalTransformation(categorical, dataViewMappings) {
                if (categorical && !_.isEmpty(dataViewMappings)) {
                    var categories = categorical.categories;
                    if (!_.isEmpty(categories)) {
                        var values = categorical.values;
                        if (!_.isEmpty(values) && !values.grouped().some((function(vg) {
                            return !!vg.identity;
                        }))) for (var _loop_5 = function(i, len) {
                            var roleMappingCategorical = dataViewMappings[i].categorical;
                            if (!roleMappingCategorical) return "continue";
                            for (var _i = 0, categories_1 = categories; _i < categories_1.length; _i++) {
                                var category = categories_1[_i], categoryRoles = category.source.roles;
                                if (hasRolesGrouped(categoryRoles, roleMappingCategorical.values)) {
                                    var categoriesMapping = roleMappingCategorical.categories, hasCategoryRole = hasRolesBind(categoryRoles, categoriesMapping) || hasRolesFor(categoryRoles, categoriesMapping);
                                    if (hasCategoryRole) return {
                                        value: {
                                            type: 2,
                                            selfCrossJoinCategory: category
                                        }
                                    };
                                    if (1 === categories.length) return {
                                        value: {
                                            type: 1
                                        }
                                    };
                                }
                            }
                        }, i = 0, len = dataViewMappings.length; i < len; i++) {
                            var state_1 = _loop_5(i, len);
                            if ("object" == typeof state_1) return state_1.value;
                        }
                    }
                }
            }
            function shouldPivotMatrix(matrix, dataViewMappings) {
                if (matrix && !_.isEmpty(dataViewMappings)) {
                    var rowLevels = matrix.rows.levels;
                    if (!(rowLevels.length < 1)) {
                        var rows = matrix.rows.root.children;
                        if (rows && 0 !== rows.length) for (var rowRoles = rowLevels[0].sources[0].roles, i = 0, len = dataViewMappings.length; i < len; i++) {
                            var roleMappingMatrix = dataViewMappings[i].matrix;
                            if (roleMappingMatrix && !hasRolesFor(rowRoles, roleMappingMatrix.rows) && hasRolesFor(rowRoles, roleMappingMatrix.columns)) return !0;
                        }
                    }
                }
            }
            function hasRolesBind(roles, roleMapping) {
                if (roles && roleMapping && roleMapping.bind) return roles[roleMapping.bind.to];
            }
            function hasRolesFor(roles, roleMapping) {
                if (roles && roleMapping && roleMapping.for) return roles[roleMapping.for.in];
            }
            function hasRolesGrouped(roles, roleMapping) {
                if (roles && roleMapping && roleMapping.group) return roles[roleMapping.group.by];
            }
            var fillRulePropertyDescriptor = {
                type: {
                    fillRule: {}
                }
            }, localizationOptions = {
                quarterPrefix: "Qtr {0}"
            };
            DataViewTransform.setLocalizationOptions = setLocalizationOptions, DataViewTransform.apply = apply, 
            DataViewTransform.transformObjects = transformObjects, DataViewTransform.createValueColumns = createValueColumns, 
            DataViewTransform.setGrouped = setGrouped;
        })(DataViewTransform = data_4.DataViewTransform || (data_4.DataViewTransform = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function createDisplayNameGetter(displayNameKey) {
            return function(resourceProvider) {
                return resourceProvider.get(displayNameKey);
            };
        }
        function getDisplayName(displayNameGetter, resourceProvider) {
            return "function" == typeof displayNameGetter ? displayNameGetter(resourceProvider) : "string" == typeof displayNameGetter ? displayNameGetter : void 0;
        }
        data.createDisplayNameGetter = createDisplayNameGetter, data.getDisplayName = getDisplayName;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SQFilterBuilder;
        !(function(SQFilterBuilder) {
            function fromFilter(filterPattern) {
                var sqFilter = {
                    condition: FilterPattern.visit(filterPattern, FilterConditionToSQExprVisitor.instance)
                };
                return _.isEmpty(filterPattern.target) || (sqFilter.target = _.map(filterPattern.target, (function(target) {
                    return data.SQExprBuilder.fieldExpr(target);
                }))), sqFilter;
            }
            SQFilterBuilder.fromFilter = fromFilter;
            var FilterConditionToSQExprVisitor = (function() {
                function FilterConditionToSQExprVisitor() {}
                return FilterConditionToSQExprVisitor.prototype.visitIn = function(inPattern) {
                    return data.SQExprBuilder.inValues(_.map(inPattern.args, (function(arg) {
                        return data.SQExprBuilder.fieldExpr(arg);
                    })), _.map(inPattern.values, (function(valueArray) {
                        return _.map(valueArray, (function(value) {
                            return data.SQExprBuilder.typedConstant(value.value, value.type);
                        }));
                    })));
                }, FilterConditionToSQExprVisitor.instance = new FilterConditionToSQExprVisitor(), 
                FilterConditionToSQExprVisitor;
            })();
        })(SQFilterBuilder = data.SQFilterBuilder || (data.SQFilterBuilder = {}));
        var SQFilterConverter;
        !(function(SQFilterConverter) {
            function asFieldPattern(sqFilter, schema) {
                var conditionPattern = sqFilter.condition.accept(new FilterPatternBuilder());
                if (conditionPattern) {
                    var filterPattern = {
                        condition: conditionPattern
                    };
                    return _.isEmpty(sqFilter.target) || (filterPattern.target = _.map(sqFilter.target, (function(target) {
                        return data.SQExprConverter.asFieldPattern(target);
                    }))), filterPattern;
                }
            }
            SQFilterConverter.asFieldPattern = asFieldPattern;
            var FilterPatternBuilder = (function(_super) {
                function FilterPatternBuilder() {
                    return _super.call(this) || this;
                }
                return __extends(FilterPatternBuilder, _super), FilterPatternBuilder.prototype.visitIn = function(expr) {
                    if (!expr.table && expr.values) return {
                        in: {
                            args: _.map(expr.args, (function(arg) {
                                return data.SQExprConverter.asFieldPattern(arg);
                            })),
                            values: _.map(expr.values, (function(valueArray) {
                                return _.map(valueArray, (function(value, index) {
                                    return {
                                        value: value.value,
                                        type: value.type
                                    };
                                }));
                            }))
                        }
                    };
                }, FilterPatternBuilder;
            })(data.DefaultSQExprVisitor);
        })(SQFilterConverter = data.SQFilterConverter || (data.SQFilterConverter = {}));
        var FilterPattern;
        !(function(FilterPattern) {
            function visit(filter, visitor) {
                var filterPattern = isSQFilter(filter) ? SQFilterConverter.asFieldPattern(filter) : filter;
                if (filterPattern.condition.in) return visitIn(filterPattern.condition.in, visitor);
            }
            function isSQFilter(filter) {
                return !!(filter && filter.condition && filter.condition instanceof data.SQExpr);
            }
            function visitIn(inPattern, visitor) {
                return visitor.visitIn(inPattern);
            }
            FilterPattern.visit = visit;
        })(FilterPattern = data.FilterPattern || (data.FilterPattern = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SQExprBuilder;
        !(function(SQExprBuilder) {
            function fieldExpr(fieldExpr) {
                var sqExpr = FieldExprPattern.visit(fieldExpr, FieldExprToSQExprVisitor.instance);
                return sqExpr;
            }
            function fromColumnAggr(columnAggr) {
                return SQExprBuilder.aggregate(fromColumn(columnAggr), columnAggr.aggregate);
            }
            function fromColumn(column) {
                return SQExprBuilder.columnRef(fromEntity(column), column.name);
            }
            function fromGroupingColumnAggr(columnAggr) {
                return SQExprBuilder.aggregate(SQExprBuilder.groupRef(columnAggr.name, fromEntity(columnAggr), asSQExpr(columnAggr.groupedColumns)), columnAggr.aggregate);
            }
            function fromGroupingColumn(column) {
                return SQExprBuilder.groupRef(column.name, fromEntity(column), asSQExpr(column.groupedColumns));
            }
            function fromEntity(entityPattern) {
                return SQExprBuilder.entity(entityPattern.schema, entityPattern.entity, entityPattern.entityVar);
            }
            function fromEntityAggr(entityAggr) {
                return SQExprBuilder.aggregate(fromEntity(entityAggr), entityAggr.aggregate);
            }
            function fromHierarchyLevelAggr(hierarchyLevelAggr) {
                return SQExprBuilder.aggregate(fromHierarchyLevel(hierarchyLevelAggr), hierarchyLevelAggr.aggregate);
            }
            function fromHierarchyLevel(hierarchyLevelPattern) {
                return SQExprBuilder.hierarchyLevel(fromHierarchy(hierarchyLevelPattern), hierarchyLevelPattern.level);
            }
            function fromHierarchy(hierarchyPattern) {
                return SQExprBuilder.hierarchy(fromEntity(hierarchyPattern), hierarchyPattern.name);
            }
            function asSQExpr(fieldExprs) {
                return _.map(fieldExprs, (function(fieldExpr) {
                    return SQExprBuilder.fieldExpr(fieldExpr);
                }));
            }
            SQExprBuilder.fieldExpr = fieldExpr, SQExprBuilder.fromColumnAggr = fromColumnAggr, 
            SQExprBuilder.fromColumn = fromColumn, SQExprBuilder.fromGroupingColumnAggr = fromGroupingColumnAggr, 
            SQExprBuilder.fromGroupingColumn = fromGroupingColumn, SQExprBuilder.fromEntity = fromEntity, 
            SQExprBuilder.fromEntityAggr = fromEntityAggr, SQExprBuilder.fromHierarchyLevelAggr = fromHierarchyLevelAggr, 
            SQExprBuilder.fromHierarchyLevel = fromHierarchyLevel, SQExprBuilder.fromHierarchy = fromHierarchy;
            var FieldExprToSQExprVisitor = (function() {
                function FieldExprToSQExprVisitor() {}
                return FieldExprToSQExprVisitor.prototype.visitColumn = function(column) {
                    return fromColumn(column);
                }, FieldExprToSQExprVisitor.prototype.visitColumnAggr = function(columnAggr) {
                    return fromColumnAggr(columnAggr);
                }, FieldExprToSQExprVisitor.prototype.visitGroupingColumn = function(column) {
                    return fromGroupingColumn(column);
                }, FieldExprToSQExprVisitor.prototype.visitGroupingColumnAggr = function(columnAggr) {
                    return fromGroupingColumnAggr(columnAggr);
                }, FieldExprToSQExprVisitor.prototype.visitColumnHierarchyLevelVariation = function(columnHierarchyLevelVariationPattern) {
                    return SQExprBuilder.propertyVariationSource(this.visitEntity(columnHierarchyLevelVariationPattern.source), columnHierarchyLevelVariationPattern.source.name, columnHierarchyLevelVariationPattern.level.name);
                }, FieldExprToSQExprVisitor.prototype.visitEntity = function(entityPattern) {
                    return fromEntity(entityPattern);
                }, FieldExprToSQExprVisitor.prototype.visitEntityAggr = function(entityAggr) {
                    return fromEntityAggr(entityAggr);
                }, FieldExprToSQExprVisitor.prototype.visitHierarchy = function(hierarchyPattern) {
                    return fromHierarchy(hierarchyPattern);
                }, FieldExprToSQExprVisitor.prototype.visitHierarchyLevel = function(level) {
                    return fromHierarchyLevel(level);
                }, FieldExprToSQExprVisitor.prototype.visitHierarchyLevelAggr = function(hierarchyLevelAggr) {
                    return fromHierarchyLevelAggr(hierarchyLevelAggr);
                }, FieldExprToSQExprVisitor.prototype.visitMeasure = function(measure) {
                    return SQExprBuilder.measureRef(this.visitEntity(measure), measure.name);
                }, FieldExprToSQExprVisitor.prototype.visitPercentile = function(percentile) {
                    var arg = SQExprBuilder.fieldExpr(percentile.arg);
                    return SQExprBuilder.percentile(arg, percentile.k, percentile.exclusive);
                }, FieldExprToSQExprVisitor.prototype.visitPercentOfGrandTotal = function(percentOfGrandTotal) {
                    var baseSQExpr = SQExprBuilder.fieldExpr(percentOfGrandTotal.baseExpr);
                    return SQExprBuilder.arithmetic(baseSQExpr, SQExprBuilder.scopedEval(baseSQExpr, []), 3);
                }, FieldExprToSQExprVisitor.prototype.visitPercentOfRoleTotal = function(percentOfRoleTotal) {
                    var baseSQExpr = SQExprBuilder.fieldExpr(percentOfRoleTotal.baseExpr);
                    return SQExprBuilder.arithmetic(baseSQExpr, SQExprBuilder.scopedEval(baseSQExpr, _.map(percentOfRoleTotal.roles, (function(role) {
                        return SQExprBuilder.roleRef(role);
                    }))), 3);
                }, FieldExprToSQExprVisitor.prototype.visitSelectRef = function(selectRef) {
                    return SQExprBuilder.selectRef(selectRef.expressionName);
                }, FieldExprToSQExprVisitor.prototype.visitTransformOutputRoleRef = function(transformOutputRoleRef) {
                    return SQExprBuilder.transformOutputRoleRef(transformOutputRoleRef.expressionName);
                }, FieldExprToSQExprVisitor.prototype.visitFilteredEval = function(filteredEval) {
                    return SQExprBuilder.filteredEval(SQExprBuilder.fieldExpr(filteredEval.baseExpr), _.map(filteredEval.filters, (function(filterPattern) {
                        return data.SQFilterBuilder.fromFilter(filterPattern);
                    })));
                }, FieldExprToSQExprVisitor.instance = new FieldExprToSQExprVisitor(), FieldExprToSQExprVisitor;
            })();
        })(SQExprBuilder = data.SQExprBuilder || (data.SQExprBuilder = {}));
        var SQExprConverter;
        !(function(SQExprConverter) {
            function asFieldPattern(sqExpr, schema) {
                return sqExpr.accept(new FieldExprPatternBuilder(schema));
            }
            SQExprConverter.asFieldPattern = asFieldPattern;
        })(SQExprConverter = data.SQExprConverter || (data.SQExprConverter = {}));
        var FieldExprPattern, FieldExprPatternBuilder = (function(_super) {
            function FieldExprPatternBuilder(schema) {
                var _this = _super.call(this) || this;
                return _this.schema = schema, _this;
            }
            return __extends(FieldExprPatternBuilder, _super), FieldExprPatternBuilder.prototype.visitColumnRef = function(expr) {
                var sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);
                if (sourceRef && sourceRef.entity) {
                    var columnRef = sourceRef.entity;
                    return columnRef.name = expr.ref, {
                        column: columnRef
                    };
                }
            }, FieldExprPatternBuilder.prototype.visitMeasureRef = function(expr) {
                var sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);
                if (sourceRef && sourceRef.entity) {
                    var measureRef = sourceRef.entity;
                    return measureRef.name = expr.ref, {
                        measure: measureRef
                    };
                }
            }, FieldExprPatternBuilder.prototype.visitEntity = function(expr) {
                var entityRef = {
                    schema: expr.schema,
                    entity: expr.entity
                };
                return expr.variable && (entityRef.entityVar = expr.variable), {
                    entity: entityRef
                };
            }, FieldExprPatternBuilder.prototype.visitAggr = function(expr) {
                var fieldPattern = expr.arg.accept(this);
                if (fieldPattern) {
                    if (fieldPattern.column) {
                        var argAggr = fieldPattern.column;
                        return argAggr.aggregate = expr.func, {
                            columnAggr: argAggr
                        };
                    }
                    if (fieldPattern.columnAggr) {
                        var argAggr = fieldPattern.columnAggr;
                        return argAggr.aggregate = expr.func, {
                            columnAggr: argAggr
                        };
                    }
                    if (fieldPattern.groupingColumn) {
                        var argAggr = fieldPattern.groupingColumn;
                        return argAggr.aggregate = expr.func, {
                            groupingColumnAggr: argAggr
                        };
                    }
                    if (fieldPattern.groupingColumnAggr) {
                        var argAggr = fieldPattern.groupingColumnAggr;
                        return argAggr.aggregate = expr.func, {
                            groupingColumnAggr: argAggr
                        };
                    }
                    if (fieldPattern.hierarchyLevel) {
                        var argAggr = fieldPattern.hierarchyLevel;
                        return argAggr.aggregate = expr.func, {
                            hierarchyLevelAggr: argAggr
                        };
                    }
                }
                var sourcePattern = expr.arg.accept(SourceExprPatternBuilder.instance);
                if (sourcePattern && sourcePattern.entity) {
                    var argAggr = sourcePattern.entity;
                    return argAggr.aggregate = expr.func, {
                        entityAggr: argAggr
                    };
                }
            }, FieldExprPatternBuilder.prototype.visitPercentile = function(expr) {
                return {
                    percentile: {
                        arg: expr.arg.accept(this),
                        k: expr.k,
                        exclusive: expr.exclusive
                    }
                };
            }, FieldExprPatternBuilder.prototype.visitGroupRef = function(expr) {
                var sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);
                if (sourceRef && sourceRef.entity) {
                    var columnRef = sourceRef.entity;
                    columnRef.name = expr.ref, columnRef.groupedColumns = [];
                    for (var _i = 0, _a = expr.groupedExprs; _i < _a.length; _i++) {
                        var groupedExpr = _a[_i], fieldExpr = groupedExpr.accept(this);
                        (fieldExpr.column || fieldExpr.groupingColumn || fieldExpr.hierarchyLevel) && columnRef.groupedColumns.push(fieldExpr);
                    }
                    return {
                        groupingColumn: columnRef
                    };
                }
            }, FieldExprPatternBuilder.prototype.visitHierarchy = function(expr) {
                var sourcePattern = expr.arg.accept(SourceExprPatternBuilder.instance);
                if (sourcePattern && sourcePattern.entity) {
                    var hierarchyRef = sourcePattern.entity;
                    return hierarchyRef.name = expr.hierarchy, {
                        hierarchy: hierarchyRef
                    };
                }
            }, FieldExprPatternBuilder.prototype.visitHierarchyLevel = function(expr) {
                var hierarchySourceExprPattern = expr.arg.accept(HierarchyExprPatternBuiler.instance);
                if (hierarchySourceExprPattern) {
                    var hierarchyLevel;
                    if (hierarchySourceExprPattern.hierarchy && (hierarchyLevel = {
                        entity: hierarchySourceExprPattern.hierarchy.entity,
                        schema: hierarchySourceExprPattern.hierarchy.schema,
                        name: hierarchySourceExprPattern.hierarchy.name,
                        level: expr.level
                    }), hierarchySourceExprPattern.variation) {
                        if (this.schema) {
                            var variation = hierarchySourceExprPattern.variation, conceptualEntity = this.schema.schema(hierarchySourceExprPattern.variation.column.schema).findTargetEntityOfVariation(hierarchyLevel.entity, variation.column.name, variation.variationName);
                            conceptualEntity && (hierarchyLevel.entity = conceptualEntity.name);
                        }
                        return {
                            columnHierarchyLevelVariation: {
                                source: {
                                    entity: hierarchySourceExprPattern.variation.column.entity,
                                    schema: hierarchySourceExprPattern.variation.column.schema,
                                    name: hierarchySourceExprPattern.variation.column.name
                                },
                                level: hierarchyLevel,
                                variationName: hierarchySourceExprPattern.variation.variationName
                            }
                        };
                    }
                    return {
                        hierarchyLevel: hierarchyLevel
                    };
                }
            }, FieldExprPatternBuilder.prototype.visitArithmetic = function(expr) {
                var percentOfGrandTotalPattern = {
                    percentOfGrandTotal: {
                        baseExpr: expr.left.accept(this)
                    }
                };
                if (data.SQExpr.equals(expr, SQExprBuilder.fieldExpr(percentOfGrandTotalPattern))) return percentOfGrandTotalPattern;
                var scope = data.SQExpr.isScopedEval(expr.right) && expr.right.scope;
                return !_.isEmpty(scope) && _.all(scope, (function(scopeExpr) {
                    return data.SQExpr.isRoleRef(scopeExpr);
                })) ? {
                    percentOfRoleTotal: {
                        baseExpr: expr.left.accept(this),
                        roles: _.map(scope, (function(scopeExpr) {
                            return scopeExpr.role;
                        }))
                    }
                } : void 0;
            }, FieldExprPatternBuilder.prototype.visitSelectRef = function(expr) {
                return {
                    selectRef: {
                        expressionName: expr.expressionName
                    }
                };
            }, FieldExprPatternBuilder.prototype.visitTransformOutputRoleRef = function(expr) {
                return {
                    transformOutputRoleRef: {
                        expressionName: expr.role
                    }
                };
            }, FieldExprPatternBuilder.prototype.visitFilteredEval = function(expr) {
                var _this = this;
                return {
                    filteredEval: {
                        baseExpr: expr.expression.accept(this),
                        filters: _.map(expr.filters, (function(filterExpr) {
                            return data.SQFilterConverter.asFieldPattern(filterExpr, _this.schema);
                        }))
                    }
                };
            }, FieldExprPatternBuilder;
        })(data.DefaultSQExprVisitor), SourceExprPatternBuilder = (function(_super) {
            function SourceExprPatternBuilder() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(SourceExprPatternBuilder, _super), SourceExprPatternBuilder.prototype.visitEntity = function(expr) {
                var entityRef = {
                    schema: expr.schema,
                    entity: expr.entity
                };
                return expr.variable && (entityRef.entityVar = expr.variable), {
                    entity: entityRef
                };
            }, SourceExprPatternBuilder.prototype.visitPropertyVariationSource = function(expr) {
                var entityExpr = expr.arg;
                if (entityExpr instanceof data.SQEntityExpr) {
                    var propertyVariationSource = {
                        schema: entityExpr.schema,
                        entity: entityExpr.entity,
                        name: expr.property
                    };
                    return entityExpr.variable && (propertyVariationSource.entityVar = entityExpr.variable), 
                    {
                        variation: {
                            column: propertyVariationSource,
                            variationName: expr.name
                        }
                    };
                }
            }, SourceExprPatternBuilder.instance = new SourceExprPatternBuilder(), SourceExprPatternBuilder;
        })(data.DefaultSQExprVisitor), HierarchyExprPatternBuiler = (function(_super) {
            function HierarchyExprPatternBuiler() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(HierarchyExprPatternBuiler, _super), HierarchyExprPatternBuiler.prototype.visitHierarchy = function(expr) {
                var hierarchyRef, variationRef, exprPattern = expr.arg.accept(SourceExprPatternBuilder.instance);
                return exprPattern.variation ? (hierarchyRef = {
                    name: expr.hierarchy,
                    schema: exprPattern.variation.column.schema,
                    entity: exprPattern.variation.column.entity
                }, variationRef = exprPattern.variation) : hierarchyRef = {
                    name: expr.hierarchy,
                    schema: exprPattern.entity.schema,
                    entity: exprPattern.entity.entity
                }, {
                    hierarchy: hierarchyRef,
                    variation: variationRef
                };
            }, HierarchyExprPatternBuiler.instance = new HierarchyExprPatternBuiler(), HierarchyExprPatternBuiler;
        })(data.DefaultSQExprVisitor);
        !(function(FieldExprPattern) {
            function visit(expr, visitor) {
                var fieldExprPattern = expr instanceof data.SQExpr ? SQExprConverter.asFieldPattern(expr) : expr;
                return fieldExprPattern.column ? visitColumn(fieldExprPattern.column, visitor) : fieldExprPattern.columnAggr ? visitColumnAggr(fieldExprPattern.columnAggr, visitor) : fieldExprPattern.groupingColumn ? visitGroupingColumn(fieldExprPattern.groupingColumn, visitor) : fieldExprPattern.groupingColumnAggr ? visitGroupingColumnAggr(fieldExprPattern.groupingColumnAggr, visitor) : fieldExprPattern.columnHierarchyLevelVariation ? visitColumnHierarchyLevelVariation(fieldExprPattern.columnHierarchyLevelVariation, visitor) : fieldExprPattern.entity ? visitEntity(fieldExprPattern.entity, visitor) : fieldExprPattern.entityAggr ? visitEntityAggr(fieldExprPattern.entityAggr, visitor) : fieldExprPattern.hierarchy ? visitHierarchy(fieldExprPattern.hierarchy, visitor) : fieldExprPattern.hierarchyLevel ? visitHierarchyLevel(fieldExprPattern.hierarchyLevel, visitor) : fieldExprPattern.hierarchyLevelAggr ? visitHierarchyLevelAggr(fieldExprPattern.hierarchyLevelAggr, visitor) : fieldExprPattern.measure ? visitMeasure(fieldExprPattern.measure, visitor) : fieldExprPattern.percentile ? visitPercentile(fieldExprPattern.percentile, visitor) : fieldExprPattern.percentOfGrandTotal ? visitPercentOfGrandTotal(fieldExprPattern.percentOfGrandTotal, visitor) : fieldExprPattern.percentOfRoleTotal ? visitPercentOfRoleTotal(fieldExprPattern.percentOfRoleTotal, visitor) : fieldExprPattern.selectRef ? visitSelectRef(fieldExprPattern.selectRef, visitor) : fieldExprPattern.transformOutputRoleRef ? visitTransformOutputRoleRef(fieldExprPattern.transformOutputRoleRef, visitor) : fieldExprPattern.filteredEval ? visitFilteredEval(fieldExprPattern.filteredEval, visitor) : void 0;
            }
            function visitColumn(column, visitor) {
                return visitor.visitColumn(column);
            }
            function visitColumnAggr(columnAggr, visitor) {
                return visitor.visitColumnAggr(columnAggr);
            }
            function visitGroupingColumn(column, visitor) {
                return visitor.visitGroupingColumn(column);
            }
            function visitGroupingColumnAggr(columnAggr, visitor) {
                return visitor.visitGroupingColumnAggr(columnAggr);
            }
            function visitColumnHierarchyLevelVariation(columnHierarchyLevelVariation, visitor) {
                return visitor.visitColumnHierarchyLevelVariation(columnHierarchyLevelVariation);
            }
            function visitEntity(entity, visitor) {
                return visitor.visitEntity(entity);
            }
            function visitEntityAggr(entityAggr, visitor) {
                return visitor.visitEntityAggr(entityAggr);
            }
            function visitHierarchy(hierarchy, visitor) {
                return visitor.visitHierarchy(hierarchy);
            }
            function visitHierarchyLevel(hierarchyLevel, visitor) {
                return visitor.visitHierarchyLevel(hierarchyLevel);
            }
            function visitHierarchyLevelAggr(hierarchyLevelAggr, visitor) {
                return visitor.visitHierarchyLevelAggr(hierarchyLevelAggr);
            }
            function visitMeasure(measure, visitor) {
                return visitor.visitMeasure(measure);
            }
            function visitSelectRef(selectRef, visitor) {
                return visitor.visitSelectRef(selectRef);
            }
            function visitPercentile(percentile, visitor) {
                return visitor.visitPercentile(percentile);
            }
            function visitPercentOfGrandTotal(percentOfGrandTotal, visitor) {
                return visitor.visitPercentOfGrandTotal(percentOfGrandTotal);
            }
            function visitPercentOfRoleTotal(percentOfRoleTotal, visitor) {
                return visitor.visitPercentOfRoleTotal(percentOfRoleTotal);
            }
            function visitTransformOutputRoleRef(transformOutputRoleRef, visitor) {
                return visitor.visitTransformOutputRoleRef(transformOutputRoleRef);
            }
            function visitFilteredEval(filteredEval, visitor) {
                return visitor.visitFilteredEval(filteredEval);
            }
            function toColumnRefSQExpr(columnPattern) {
                return SQExprBuilder.columnRef(SQExprBuilder.entity(columnPattern.schema, columnPattern.entity, columnPattern.entityVar), columnPattern.name);
            }
            function getAggregate(fieldExpr) {
                return visit(fieldExpr, FieldExprPatternAggregateVisitor.instance);
            }
            function hasFieldExprName(fieldExpr) {
                return void 0 !== (fieldExpr.column || fieldExpr.columnAggr || fieldExpr.groupingColumn || fieldExpr.groupingColumnAggr || fieldExpr.measure);
            }
            function getPropertyName(fieldExpr) {
                return FieldExprPattern.visit(fieldExpr, FieldExprPropertyNameVisitor.instance);
            }
            function getHierarchyName(fieldExpr) {
                var hierarchy = fieldExpr.hierarchy;
                if (hierarchy) return hierarchy.name;
            }
            function getProperty(fieldExpr) {
                return fieldExpr.columnHierarchyLevelVariation ? fieldExpr.columnHierarchyLevelVariation.source : fieldExpr.column || fieldExpr.groupingColumn || fieldExpr.groupingColumnAggr || fieldExpr.measure || fieldExpr.columnAggr;
            }
            function getFieldExprName(fieldExpr) {
                var name = getPropertyName(fieldExpr);
                return name ? name : toFieldExprEntityPattern(fieldExpr).entity;
            }
            function getSchema(fieldExpr) {
                var item = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);
                return item.schema;
            }
            function toFieldExprEntityPattern(fieldExpr) {
                return FieldExprPattern.visit(fieldExpr, FieldExprToEntityExprPatternBuilder.instance);
            }
            function toFieldExprEntityItemPattern(fieldExpr) {
                return FieldExprPattern.visit(fieldExpr, FieldExprToEntityExprPatternBuilder.instance);
            }
            function isPercentRoleTotalExpr(expr) {
                return data.SQExpr.isArithmetic(expr) && data.SQExpr.isScopedEval(expr.right) && !_.isEmpty(expr.right.scope) && _.all(expr.right.scope, (function(scopeExpr) {
                    return data.SQExpr.isRoleRef(scopeExpr);
                }));
            }
            FieldExprPattern.visit = visit, FieldExprPattern.toColumnRefSQExpr = toColumnRefSQExpr, 
            FieldExprPattern.getAggregate = getAggregate, FieldExprPattern.hasFieldExprName = hasFieldExprName, 
            FieldExprPattern.getPropertyName = getPropertyName, FieldExprPattern.getHierarchyName = getHierarchyName, 
            FieldExprPattern.getProperty = getProperty, FieldExprPattern.getFieldExprName = getFieldExprName, 
            FieldExprPattern.getSchema = getSchema, FieldExprPattern.toFieldExprEntityPattern = toFieldExprEntityPattern, 
            FieldExprPattern.toFieldExprEntityItemPattern = toFieldExprEntityItemPattern, FieldExprPattern.isPercentRoleTotalExpr = isPercentRoleTotalExpr;
            var FieldExprPatternAggregateVisitor = (function() {
                function FieldExprPatternAggregateVisitor() {}
                return FieldExprPatternAggregateVisitor.prototype.visitColumn = function(column) {}, 
                FieldExprPatternAggregateVisitor.prototype.visitColumnAggr = function(columnAggr) {
                    return columnAggr.aggregate;
                }, FieldExprPatternAggregateVisitor.prototype.visitGroupingColumn = function(column) {}, 
                FieldExprPatternAggregateVisitor.prototype.visitGroupingColumnAggr = function(columnAggr) {
                    return columnAggr.aggregate;
                }, FieldExprPatternAggregateVisitor.prototype.visitColumnHierarchyLevelVariation = function(columnHierarchyLevelVariation) {}, 
                FieldExprPatternAggregateVisitor.prototype.visitEntity = function(entity) {}, FieldExprPatternAggregateVisitor.prototype.visitEntityAggr = function(entityAggr) {
                    return entityAggr.aggregate;
                }, FieldExprPatternAggregateVisitor.prototype.visitHierarchy = function(hierarchy) {}, 
                FieldExprPatternAggregateVisitor.prototype.visitHierarchyLevel = function(hierarchyLevel) {}, 
                FieldExprPatternAggregateVisitor.prototype.visitHierarchyLevelAggr = function(hierarchyLevelAggr) {
                    return hierarchyLevelAggr.aggregate;
                }, FieldExprPatternAggregateVisitor.prototype.visitMeasure = function(measure) {}, 
                FieldExprPatternAggregateVisitor.prototype.visitSelectRef = function(selectRef) {}, 
                FieldExprPatternAggregateVisitor.prototype.visitPercentile = function(percentile) {}, 
                FieldExprPatternAggregateVisitor.prototype.visitPercentOfGrandTotal = function(percentOfGrandTotal) {
                    return data.SQExprInfo.getAggregate(SQExprBuilder.fieldExpr(percentOfGrandTotal.baseExpr));
                }, FieldExprPatternAggregateVisitor.prototype.visitPercentOfRoleTotal = function(percentOfRoleTotal) {
                    return data.SQExprInfo.getAggregate(SQExprBuilder.fieldExpr(percentOfRoleTotal.baseExpr));
                }, FieldExprPatternAggregateVisitor.prototype.visitTransformOutputRoleRef = function(transformOutputRoleRef) {}, 
                FieldExprPatternAggregateVisitor.prototype.visitFilteredEval = function(filteredEval) {
                    return data.SQExprInfo.getAggregate(SQExprBuilder.fieldExpr(filteredEval.baseExpr));
                }, FieldExprPatternAggregateVisitor.instance = new FieldExprPatternAggregateVisitor(), 
                FieldExprPatternAggregateVisitor;
            })(), FieldExprToEntityExprPatternBuilder = (function() {
                function FieldExprToEntityExprPatternBuilder() {}
                return FieldExprToEntityExprPatternBuilder.prototype.visitColumn = function(column) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(column);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitColumnAggr = function(columnAggr) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(columnAggr);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitGroupingColumn = function(column) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(column);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitGroupingColumnAggr = function(columnAggr) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(columnAggr);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitColumnHierarchyLevelVariation = function(columnHierarchyLevelVariation) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(columnHierarchyLevelVariation.source);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitEntity = function(entity) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(entity);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitEntityAggr = function(entityAggr) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(entityAggr);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitHierarchy = function(hierarchy) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(hierarchy);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitHierarchyLevel = function(hierarchyLevel) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(hierarchyLevel);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitHierarchyLevelAggr = function(hierarchyLevelAggr) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(hierarchyLevelAggr);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitMeasure = function(measure) {
                    return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(measure);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitSelectRef = function(selectRef) {}, 
                FieldExprToEntityExprPatternBuilder.prototype.visitPercentile = function(percentile) {
                    return FieldExprPattern.visit(percentile.arg, this);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitPercentOfGrandTotal = function(percentOfGrandTotal) {
                    return FieldExprPattern.visit(percentOfGrandTotal.baseExpr, this);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitPercentOfRoleTotal = function(percentOfRoleTotal) {
                    return FieldExprPattern.visit(percentOfRoleTotal.baseExpr, this);
                }, FieldExprToEntityExprPatternBuilder.prototype.visitTransformOutputRoleRef = function(transformOutputRoleRef) {}, 
                FieldExprToEntityExprPatternBuilder.prototype.visitFilteredEval = function(filteredEval) {
                    return FieldExprPattern.visit(filteredEval.baseExpr, this);
                }, FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern = function(exprPattern) {
                    var pattern = {
                        schema: exprPattern.schema,
                        entity: exprPattern.entity
                    };
                    return exprPattern.entityVar && (pattern.entityVar = exprPattern.entityVar), pattern;
                }, FieldExprToEntityExprPatternBuilder.instance = new FieldExprToEntityExprPatternBuilder(), 
                FieldExprToEntityExprPatternBuilder;
            })(), FieldExprPropertyNameVisitor = (function() {
                function FieldExprPropertyNameVisitor() {}
                return FieldExprPropertyNameVisitor.prototype.visitColumn = function(column) {
                    return column.name;
                }, FieldExprPropertyNameVisitor.prototype.visitColumnAggr = function(columnAggr) {
                    return columnAggr.name;
                }, FieldExprPropertyNameVisitor.prototype.visitGroupingColumn = function(column) {
                    return column.name;
                }, FieldExprPropertyNameVisitor.prototype.visitGroupingColumnAggr = function(columnAggr) {
                    return columnAggr.name;
                }, FieldExprPropertyNameVisitor.prototype.visitColumnHierarchyLevelVariation = function(columnHierarchyLevelVariation) {}, 
                FieldExprPropertyNameVisitor.prototype.visitEntity = function(entity) {}, FieldExprPropertyNameVisitor.prototype.visitEntityAggr = function(entityAggr) {}, 
                FieldExprPropertyNameVisitor.prototype.visitHierarchy = function(hierarchy) {}, 
                FieldExprPropertyNameVisitor.prototype.visitHierarchyLevel = function(hierarchyLevel) {}, 
                FieldExprPropertyNameVisitor.prototype.visitHierarchyLevelAggr = function(hierarchyLevelAggr) {}, 
                FieldExprPropertyNameVisitor.prototype.visitMeasure = function(measure) {
                    return measure.name;
                }, FieldExprPropertyNameVisitor.prototype.visitSelectRef = function(selectRef) {}, 
                FieldExprPropertyNameVisitor.prototype.visitPercentile = function(percentile) {
                    return FieldExprPattern.visit(percentile.arg, this);
                }, FieldExprPropertyNameVisitor.prototype.visitPercentOfGrandTotal = function(percentOfGrandTotal) {
                    return FieldExprPattern.visit(percentOfGrandTotal.baseExpr, this);
                }, FieldExprPropertyNameVisitor.prototype.visitPercentOfRoleTotal = function(percentOfRoleTotal) {
                    return FieldExprPattern.visit(percentOfRoleTotal.baseExpr, this);
                }, FieldExprPropertyNameVisitor.prototype.visitTransformOutputRoleRef = function(transformOutputRoleRef) {}, 
                FieldExprPropertyNameVisitor.prototype.visitFilteredEval = function(filteredEval) {
                    return FieldExprPattern.visit(filteredEval.baseExpr, this);
                }, FieldExprPropertyNameVisitor.instance = new FieldExprPropertyNameVisitor(), FieldExprPropertyNameVisitor;
            })();
        })(FieldExprPattern = data.FieldExprPattern || (data.FieldExprPattern = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var DataViewAnalysis;
    !(function(DataViewAnalysis) {
        function validateAndReshape(dataView, dataViewMappings) {
            if (!dataViewMappings || 0 === dataViewMappings.length) return {
                dataView: dataView,
                isValid: !0
            };
            if (dataView) for (var _i = 0, dataViewMappings_3 = dataViewMappings; _i < dataViewMappings_3.length; _i++) {
                var dataViewMapping = dataViewMappings_3[_i];
                if (supports(dataView, dataViewMapping)) return {
                    dataView: dataView,
                    isValid: !0
                };
                if (dataViewMapping.categorical && dataView.categorical) return reshapeCategorical(dataView, dataViewMapping);
                if (dataViewMapping.tree && dataView.tree) return reshapeTree(dataView, dataViewMapping.tree);
                if (dataViewMapping.single && dataView.single) return reshapeSingle(dataView, dataViewMapping.single);
                if (dataViewMapping.table && dataView.table) return reshapeTable(dataView, dataViewMapping.table);
            }
            return {
                isValid: !1
            };
        }
        function reshapeCategorical(dataView, dataViewMapping) {
            var categoryRoleMapping = dataViewMapping.categorical, categorical = dataView.categorical;
            if (!categorical) return {
                isValid: !1
            };
            var rowCount;
            if (categoryRoleMapping.rowCount && (rowCount = categoryRoleMapping.rowCount.supported, 
            rowCount && rowCount.max)) {
                var updated = void 0, categories = categorical.categories, maxRowCount = rowCount.max, originalLength = void 0;
                if (categories) for (var i = 0, len = categories.length; i < len; i++) {
                    var category = categories[i];
                    if (originalLength = category.values.length, void 0 !== maxRowCount && originalLength > maxRowCount) {
                        var updatedCategories = ArrayExtensions.range(category.values, 0, maxRowCount - 1);
                        updated = updated || {
                            categories: []
                        }, updated.categories.push({
                            source: category.source,
                            values: updatedCategories
                        });
                    }
                }
                if (categorical.values && categorical.values.length > 0 && maxRowCount && (originalLength || (originalLength = categorical.values[0].values.length), 
                void 0 !== maxRowCount && originalLength > maxRowCount)) {
                    updated = updated || {}, updated.values = powerbi.data.DataViewTransform.createValueColumns();
                    for (var i = 0, len = categorical.values.length; i < len; i++) {
                        var column = categorical.values[i], updatedColumn = {
                            source: column.source,
                            values: ArrayExtensions.range(column.values, 0, maxRowCount - 1)
                        };
                        void 0 !== column.min && (updatedColumn.min = column.min), void 0 !== column.max && (updatedColumn.max = column.max), 
                        void 0 !== column.subtotal && (updatedColumn.subtotal = column.subtotal), updated.values.push(updatedColumn);
                    }
                }
                updated && (dataView = {
                    metadata: dataView.metadata,
                    categorical: updated
                });
            }
            return supportsCategorical(dataView, dataViewMapping) ? {
                dataView: dataView,
                isValid: !0
            } : null;
        }
        function reshapeSingle(dataView, singleRoleMapping) {
            return dataView.single ? {
                dataView: dataView,
                isValid: !0
            } : {
                isValid: !1
            };
        }
        function reshapeTree(dataView, treeRoleMapping) {
            return supportsTree(dataView, treeRoleMapping) ? {
                dataView: dataView,
                isValid: !0
            } : {
                isValid: !1
            };
        }
        function reshapeTable(dataView, tableRoleMapping) {
            return dataView.table ? {
                dataView: dataView,
                isValid: !0
            } : {
                isValid: !1
            };
        }
        function countGroups(columns) {
            for (var count = 0, i = 0, len = columns.length; i < len; i++) columns[i].isMeasure || ++count;
            return count;
        }
        function countMeasures(columns) {
            for (var count = 0, i = 0, len = columns.length; i < len; i++) columns[i].isMeasure && ++count;
            return count;
        }
        function supports(dataView, roleMapping, usePreferredDataViewSchema) {
            return !(!roleMapping || !dataView) && (!(roleMapping.scriptResult && !supportsScriptResult(dataView.scriptResult, roleMapping.scriptResult)) && (!(roleMapping.categorical && !supportsCategorical(dataView, roleMapping.categorical, usePreferredDataViewSchema)) && (!(roleMapping.tree && !supportsTree(dataView, roleMapping.tree, usePreferredDataViewSchema)) && (!(roleMapping.single && !supportsSingle(dataView.single, roleMapping.single)) && !(roleMapping.table && !supportsTable(dataView.table, roleMapping.table, usePreferredDataViewSchema))))));
        }
        function supportsCategorical(dataView, categoryRoleMapping, usePreferredDataViewSchema) {
            var dataViewCategorical = dataView.categorical;
            if (!dataViewCategorical) return !1;
            if (categoryRoleMapping.rowCount) {
                var rowCount = categoryRoleMapping.rowCount.supported;
                if (usePreferredDataViewSchema && categoryRoleMapping.rowCount.preferred && (rowCount = categoryRoleMapping.rowCount.preferred), 
                rowCount) {
                    var len = 0;
                    if (dataViewCategorical.values && dataViewCategorical.values.length ? len = dataViewCategorical.values[0].values.length : dataViewCategorical.categories && dataViewCategorical.categories.length && (len = dataViewCategorical.categories[0].values.length), 
                    null != validateRange(len, rowCount)) return !1;
                }
            }
            return !0;
        }
        function supportsSingle(dataViewSingle, singleRoleMapping) {
            return !!dataViewSingle;
        }
        function supportsTree(dataView, treeRoleMapping, usePreferredDataViewSchema) {
            var metadata = dataView.metadata, depth = treeRoleMapping.depth, numberRange = depth && usePreferredDataViewSchema ? depth.preferred : depth.supported;
            return null == validateRange(countGroups(metadata.columns), numberRange);
        }
        function supportsTable(dataViewTable, tableRoleMapping, usePreferredDataViewSchema) {
            if (!dataViewTable) return !1;
            if (tableRoleMapping.rowCount) {
                var rowCount = tableRoleMapping.rowCount.supported;
                if (usePreferredDataViewSchema && tableRoleMapping.rowCount.preferred && (rowCount = tableRoleMapping.rowCount.preferred), 
                rowCount) {
                    var len = 0;
                    if (dataViewTable.rows && dataViewTable.rows.length && (len = dataViewTable.rows.length), 
                    null != validateRange(len, rowCount)) return !1;
                }
            }
            return !0;
        }
        function supportsScriptResult(dataView, scriptResultRoleMapping) {
            return !!dataView && !!dataView.payloadBase64;
        }
        function validateRange(value, numberRange, ignoreMin) {
            if (numberRange) return !ignoreMin && void 0 !== numberRange.min && numberRange.min > value ? DataViewMappingMatchErrorCode.conditionRangeTooSmall : void 0 !== numberRange.max && numberRange.max < value ? DataViewMappingMatchErrorCode.conditionRangeTooLarge : void 0;
        }
        function validateKind(roleCondition, roleName, projections, roleKindByQueryRef) {
            if (roleCondition && void 0 !== roleCondition.kind) {
                var expectedKind = roleCondition.kind, roleCollection = projections[roleName];
                if (roleCollection) for (var roleProjections = roleCollection.all(), _i = 0, roleProjections_1 = roleProjections; _i < roleProjections_1.length; _i++) {
                    var roleProjection = roleProjections_1[_i];
                    if (roleKindByQueryRef[roleProjection.queryRef] !== expectedKind) switch (expectedKind) {
                      case powerbi.VisualDataRoleKind.Measure:
                        return DataViewMappingMatchErrorCode.conditionKindExpectedMeasure;

                      case powerbi.VisualDataRoleKind.Grouping:
                        return DataViewMappingMatchErrorCode.conditionKindExpectedGrouping;

                      case powerbi.VisualDataRoleKind.GroupingOrMeasure:
                        return DataViewMappingMatchErrorCode.conditionKindExpectedGroupingOrMeasure;
                    }
                }
            }
        }
        function chooseDataViewMappings(projections, mappings, roleKindByQueryRef, objectDescriptors, objectDefinitions) {
            var supportedMappings = [], errors = [];
            if (!_.isEmpty(mappings)) for (var mappingIndex = 0, mappingCount = mappings.length; mappingIndex < mappingCount; mappingIndex++) {
                var mapping = mappings[mappingIndex], mappingConditions = mapping.conditions, requiredProperties = mapping.requiredProperties, allPropertiesValid = areAllPropertiesValid(requiredProperties, objectDescriptors, objectDefinitions), conditionsMet = [];
                if (_.isEmpty(mappingConditions)) conditionsMet.push({}); else for (var conditionIndex = 0, conditionCount = mappingConditions.length; conditionIndex < conditionCount; conditionIndex++) {
                    var condition = mappingConditions[conditionIndex], currentConditionErrors = checkForConditionErrors(projections, condition, roleKindByQueryRef);
                    if (_.isEmpty(currentConditionErrors)) conditionsMet.push(condition); else for (var _i = 0, currentConditionErrors_1 = currentConditionErrors; _i < currentConditionErrors_1.length; _i++) {
                        var error = currentConditionErrors_1[_i];
                        error.mappingIndex = mappingIndex, error.conditionIndex = conditionIndex, errors.push(error);
                    }
                }
                if (!_.isEmpty(conditionsMet) && allPropertiesValid) {
                    var supportedMapping = _.cloneDeep(mapping), updatedConditions = _.filter(conditionsMet, (function(condition) {
                        return Object.keys(condition).length > 0;
                    }));
                    _.isEmpty(updatedConditions) || (supportedMapping.conditions = updatedConditions), 
                    supportedMappings.push(supportedMapping);
                }
            }
            return {
                supportedMappings: ArrayExtensions.emptyToNull(supportedMappings),
                mappingErrors: ArrayExtensions.emptyToNull(errors)
            };
        }
        function checkForConditionErrors(projections, condition, roleKindByQueryRef, useActiveInDrill) {
            for (var conditionRoles = Object.keys(condition), errors = [], i = 0, len = conditionRoles.length; i < len; i++) {
                var roleName = conditionRoles[i], isDrillable = projections[roleName] && !_.isEmpty(projections[roleName].activeProjectionRefs), roleCondition = condition[roleName], hasUseActiveInDrillSetting = void 0 !== useActiveInDrill && null !== useActiveInDrill, useActiveIfAvailable = hasUseActiveInDrillSetting ? useActiveInDrill : isDrillable, roleCount = getPropertyCount(roleName, projections, useActiveIfAvailable), rangeError = validateRange(roleCount, roleCondition);
                null != rangeError && errors.push({
                    code: rangeError,
                    roleName: roleName
                });
                var kindError = validateKind(roleCondition, roleName, projections, roleKindByQueryRef);
                null != kindError && errors.push({
                    code: kindError,
                    roleName: roleName
                });
            }
            return errors;
        }
        function areAllPropertiesValid(requiredProperties, objectDescriptors, objectDefinitions) {
            if (_.isEmpty(requiredProperties)) return !0;
            if (!objectDescriptors || !objectDefinitions) return !1;
            var staticEvalContext = powerbi.data.createStaticEvalContext();
            return _.every(requiredProperties, (function(requiredProperty) {
                var objectDescriptorValue = null, objectDefinitionProperty = objectDefinitions[requiredProperty.objectName];
                if (!objectDefinitionProperty) return !1;
                var objectDescriptorProperty = objectDescriptors[requiredProperty.objectName];
                objectDescriptorProperty && (objectDescriptorValue = objectDescriptorProperty.properties[requiredProperty.propertyName]);
                var objectDefinitionValue;
                return !_.isEmpty(objectDefinitionProperty) && objectDefinitionProperty[0] && (objectDefinitionValue = DataViewObjectDefinitions.getValue(objectDefinitions, requiredProperty, objectDefinitionProperty[0].selector)), 
                !(!objectDescriptorValue || !objectDefinitionValue) && powerbi.data.DataViewObjectEvaluator.evaluateProperty(staticEvalContext, objectDescriptorValue, objectDefinitionValue);
            }));
        }
        function getPropertyCount(roleName, projections, useActiveIfAvailable) {
            var projectionsForRole = projections[roleName];
            return projectionsForRole ? useActiveIfAvailable ? 1 : projectionsForRole.all().length : 0;
        }
        function hasSameCategoryIdentity(dataView1, dataView2) {
            if (dataView1 && dataView2 && dataView1.categorical && dataView2.categorical) {
                var dv1Categories = dataView1.categorical.categories, dv2Categories = dataView2.categorical.categories;
                if (dv1Categories && dv2Categories && dv1Categories.length === dv2Categories.length) {
                    for (var i = 0, len = dv1Categories.length; i < len; i++) {
                        var dv1Identity = dv1Categories[i].identity, dv2Identity = dv2Categories[i].identity, dv1Length = getLengthOptional(dv1Identity);
                        if (dv1Length !== getLengthOptional(dv2Identity)) return !1;
                        for (var j = 0; j < dv1Length; j++) if (!powerbi.DataViewScopeIdentity.equals(dv1Identity[j], dv2Identity[j])) return !1;
                    }
                    return !0;
                }
            }
            return !1;
        }
        function getLengthOptional(identity) {
            return identity ? identity.length : 0;
        }
        function areMetadataColumnsEquivalent(column1, column2) {
            return !column1 && !column2 || !(!column1 || !column2) && (column1.displayName === column2.displayName && (column1.queryName === column2.queryName && (column1.isMeasure === column2.isMeasure && (column1.type === column2.type && column1.sort === column2.sort))));
        }
        function isMetadataEquivalent(metadata1, metadata2) {
            if (!metadata1 && !metadata2) return !0;
            if (!metadata1 || !metadata2) return !1;
            var previousColumnsLength = metadata1.columns.length, newColumnsLength = metadata2.columns.length;
            if (previousColumnsLength !== newColumnsLength) return !1;
            for (var i = 0; i < newColumnsLength; i++) if (!DataViewAnalysis.areMetadataColumnsEquivalent(metadata1.columns[i], metadata2.columns[i])) return !1;
            return !0;
        }
        var DataViewMappingMatchErrorCode, ArrayExtensions = jsCommon.ArrayExtensions, DataViewObjectDefinitions = powerbi.data.DataViewObjectDefinitions;
        !(function(DataViewMappingMatchErrorCode) {
            DataViewMappingMatchErrorCode[DataViewMappingMatchErrorCode.conditionRangeTooLarge = 0] = "conditionRangeTooLarge", 
            DataViewMappingMatchErrorCode[DataViewMappingMatchErrorCode.conditionRangeTooSmall = 1] = "conditionRangeTooSmall", 
            DataViewMappingMatchErrorCode[DataViewMappingMatchErrorCode.conditionKindExpectedMeasure = 2] = "conditionKindExpectedMeasure", 
            DataViewMappingMatchErrorCode[DataViewMappingMatchErrorCode.conditionKindExpectedGrouping = 3] = "conditionKindExpectedGrouping", 
            DataViewMappingMatchErrorCode[DataViewMappingMatchErrorCode.conditionKindExpectedGroupingOrMeasure = 4] = "conditionKindExpectedGroupingOrMeasure";
        })(DataViewMappingMatchErrorCode = DataViewAnalysis.DataViewMappingMatchErrorCode || (DataViewAnalysis.DataViewMappingMatchErrorCode = {})), 
        DataViewAnalysis.validateAndReshape = validateAndReshape, DataViewAnalysis.countGroups = countGroups, 
        DataViewAnalysis.countMeasures = countMeasures, DataViewAnalysis.supports = supports, 
        DataViewAnalysis.validateRange = validateRange, DataViewAnalysis.chooseDataViewMappings = chooseDataViewMappings, 
        DataViewAnalysis.checkForConditionErrors = checkForConditionErrors, DataViewAnalysis.getPropertyCount = getPropertyCount, 
        DataViewAnalysis.hasSameCategoryIdentity = hasSameCategoryIdentity, DataViewAnalysis.areMetadataColumnsEquivalent = areMetadataColumnsEquivalent, 
        DataViewAnalysis.isMetadataEquivalent = isMetadataEquivalent;
    })(DataViewAnalysis = powerbi.DataViewAnalysis || (powerbi.DataViewAnalysis = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewRoleWildcard, ArrayExtensions = jsCommon.ArrayExtensions, Lazy = jsCommon.Lazy;
        !(function(DataViewRoleWildcard) {
            function fromRoles(roles) {
                return new DataViewRoleWildcardImpl(roles);
            }
            function equals(firstRoleWildcard, secondRoleWildcard) {
                return firstRoleWildcard.key && secondRoleWildcard.key && firstRoleWildcard.key === secondRoleWildcard.key && ArrayExtensions.sequenceEqual(firstRoleWildcard.roles, secondRoleWildcard.roles, (function(role1, role2) {
                    return role1 === role2;
                }));
            }
            DataViewRoleWildcard.fromRoles = fromRoles, DataViewRoleWildcard.equals = equals;
            var DataViewRoleWildcardImpl = (function() {
                function DataViewRoleWildcardImpl(roles) {
                    var _this = this;
                    this.kind = 0, this._roles = roles, this._key = new Lazy(function() {
                        return JSON.stringify(_this.roles);
                    });
                }
                return Object.defineProperty(DataViewRoleWildcardImpl.prototype, "roles", {
                    get: function() {
                        return this._roles;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(DataViewRoleWildcardImpl.prototype, "key", {
                    get: function() {
                        return this._key.getValue();
                    },
                    enumerable: !0,
                    configurable: !0
                }), DataViewRoleWildcardImpl;
            })();
        })(DataViewRoleWildcard = data.DataViewRoleWildcard || (data.DataViewRoleWildcard = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var DataViewScopeIdentity;
    !(function(DataViewScopeIdentity) {
        function equals(x, y, ignoreCase) {
            return x = x || null, y = y || null, x === y || !x == !y && data.SQExpr.equals(x.expr, y.expr, ignoreCase);
        }
        function filterFromIdentity(identities, isNot) {
            if (!_.isEmpty(identities)) {
                for (var exprs = [], _i = 0, identities_1 = identities; _i < identities_1.length; _i++) {
                    var identity = identities_1[_i];
                    exprs.push(identity.expr);
                }
                return filterFromExprs(exprs, isNot);
            }
        }
        function filterFromExprs(orExprs, isNot) {
            if (!_.isEmpty(orExprs)) {
                for (var resultExpr, _i = 0, orExprs_1 = orExprs; _i < orExprs_1.length; _i++) {
                    var orExpr = orExprs_1[_i], inExpr = data.ScopeIdentityExtractor.getInExpr(orExpr);
                    resultExpr = resultExpr ? data.SQExprBuilder.or(resultExpr, inExpr) : inExpr || orExpr;
                }
                return resultExpr && isNot && (resultExpr = powerbi.data.SQExprBuilder.not(resultExpr)), 
                powerbi.data.SemanticFilter.fromSQExpr(resultExpr);
            }
        }
        DataViewScopeIdentity.equals = equals, DataViewScopeIdentity.filterFromIdentity = filterFromIdentity, 
        DataViewScopeIdentity.filterFromExprs = filterFromExprs;
    })(DataViewScopeIdentity = powerbi.DataViewScopeIdentity || (powerbi.DataViewScopeIdentity = {}));
    var data;
    !(function(data) {
        function createDataViewScopeIdentity(expr) {
            return new DataViewScopeIdentityImpl(expr);
        }
        var Lazy = jsCommon.Lazy;
        data.createDataViewScopeIdentity = createDataViewScopeIdentity;
        var DataViewScopeIdentityImpl = (function() {
            function DataViewScopeIdentityImpl(expr) {
                this.kind = 1, this._expr = expr, this._key = new Lazy(function() {
                    return data.SQExprShortSerializer.serialize(expr);
                });
            }
            return Object.defineProperty(DataViewScopeIdentityImpl.prototype, "expr", {
                get: function() {
                    return this._expr;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(DataViewScopeIdentityImpl.prototype, "key", {
                get: function() {
                    return this._key.getValue();
                },
                enumerable: !0,
                configurable: !0
            }), DataViewScopeIdentityImpl;
        })();
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewScopeTotal, Lazy = jsCommon.Lazy;
        !(function(DataViewScopeTotal) {
            function matches(total, exprs) {
                return !_.isEmpty(exprs) && data.SQExprUtils.sequenceEqual(total.exprs, exprs);
            }
            function equals(x, y) {
                return x === y || data.SQExprUtils.sequenceEqual(x.exprs, y.exprs);
            }
            function fromExprs(exprs) {
                return new DataViewScopeTotalImpl(exprs);
            }
            DataViewScopeTotal.matches = matches, DataViewScopeTotal.equals = equals, DataViewScopeTotal.fromExprs = fromExprs;
            var DataViewScopeTotalImpl = (function() {
                function DataViewScopeTotalImpl(exprs) {
                    this.kind = 2, this._exprs = exprs, this._key = new Lazy(function() {
                        return data.SQExprShortSerializer.serializeArray(exprs);
                    });
                }
                return Object.defineProperty(DataViewScopeTotalImpl.prototype, "exprs", {
                    get: function() {
                        return this._exprs;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(DataViewScopeTotalImpl.prototype, "key", {
                    get: function() {
                        return this._key.getValue();
                    },
                    enumerable: !0,
                    configurable: !0
                }), DataViewScopeTotalImpl;
            })();
        })(DataViewScopeTotal = data.DataViewScopeTotal || (data.DataViewScopeTotal = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewScopeWildcard, Lazy = jsCommon.Lazy;
        !(function(DataViewScopeWildcard) {
            function matches(wildcard, instance) {
                var instanceExprs = data.ScopeIdentityExtractor.getKeys(instance.expr);
                return !!instanceExprs && data.SQExprUtils.sequenceEqual(wildcard.exprs, instanceExprs);
            }
            function equals(firstScopeWildcard, secondScopeWildcard) {
                return firstScopeWildcard === secondScopeWildcard || data.SQExprUtils.sequenceEqual(firstScopeWildcard.exprs, secondScopeWildcard.exprs);
            }
            function fromExprs(exprs) {
                return new DataViewScopeWildcardImpl(exprs);
            }
            DataViewScopeWildcard.matches = matches, DataViewScopeWildcard.equals = equals, 
            DataViewScopeWildcard.fromExprs = fromExprs;
            var DataViewScopeWildcardImpl = (function() {
                function DataViewScopeWildcardImpl(exprs) {
                    this.kind = 3, this._exprs = exprs, this._key = new Lazy(function() {
                        return data.SQExprShortSerializer.serializeArray(exprs);
                    });
                }
                return Object.defineProperty(DataViewScopeWildcardImpl.prototype, "exprs", {
                    get: function() {
                        return this._exprs;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(DataViewScopeWildcardImpl.prototype, "key", {
                    get: function() {
                        return this._key.getValue();
                    },
                    enumerable: !0,
                    configurable: !0
                }), DataViewScopeWildcardImpl;
            })();
        })(DataViewScopeWildcard = data.DataViewScopeWildcard || (data.DataViewScopeWildcard = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewWildcard, Lazy = jsCommon.Lazy;
        !(function(DataViewWildcard) {
            function equals(x, y) {
                return !x && !y || !(!x || !y) && (x === y || x.matchingOption === y.matchingOption);
            }
            function matches(wildcard, isTotal) {
                switch (wildcard.matchingOption) {
                  case 0:
                    return !0;

                  case 1:
                    return !isTotal;

                  case 2:
                    return isTotal;
                }
            }
            function create(matchingOption) {
                return null == matchingOption && (matchingOption = 0), new DataViewWildcardImpl(matchingOption);
            }
            DataViewWildcard.equals = equals, DataViewWildcard.matches = matches, DataViewWildcard.create = create;
            var DataViewWildcardImpl = (function() {
                function DataViewWildcardImpl(matchingOption) {
                    var _this = this;
                    this.kind = 4, this._matchingOption = matchingOption, this._key = new Lazy(function() {
                        return JSON.stringify(_this._matchingOption);
                    });
                }
                return Object.defineProperty(DataViewWildcardImpl.prototype, "matchingOption", {
                    get: function() {
                        return this._matchingOption;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(DataViewWildcardImpl.prototype, "key", {
                    get: function() {
                        return this._key.getValue();
                    },
                    enumerable: !0,
                    configurable: !0
                }), DataViewWildcardImpl;
            })();
        })(DataViewWildcard = data.DataViewWildcard || (data.DataViewWildcard = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function createColorAllocatorCache() {
            return new ColorAllocatorProvider();
        }
        data.createColorAllocatorCache = createColorAllocatorCache;
        var ColorAllocatorProvider = (function() {
            function ColorAllocatorProvider() {
                this.cache = [];
            }
            return ColorAllocatorProvider.prototype.get = function(key) {
                for (var _i = 0, _a = this.cache; _i < _a.length; _i++) {
                    var entry = _a[_i];
                    if (entry.key === key) return entry.allocator;
                }
            }, ColorAllocatorProvider.prototype.register = function(key, colorAllocator) {
                return this.cache.push({
                    key: key,
                    allocator: colorAllocator
                }), this;
            }, ColorAllocatorProvider;
        })();
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewRegression, DataViewMapping = powerbi.DataViewMapping;
        !(function(DataViewRegression) {
            function run(options) {
                var visualDataViews = options.visualDataViews, dataRoles = options.dataRoles, objectDescriptors = options.objectDescriptors, objectDefinitions = options.objectDefinitions, colorAllocatorFactory = options.colorAllocatorFactory, transformSelects = options.transformSelects, applicableDataViewMappings = options.applicableDataViewMappings, roleKindByQueryRef = options.roleKindByQueryRef, queryProjectionsByRole = options.queryProjectionsByRole;
                if (!_.isEmpty(visualDataViews) && transformSelects) {
                    if (!roleKindByQueryRef || !queryProjectionsByRole || _.isEmpty(applicableDataViewMappings) || !objectDescriptors || !objectDefinitions) return visualDataViews;
                    var regressionDataViewMapping = _.find(applicableDataViewMappings, (function(dataViewMapping) {
                        return !!DataViewMapping.getRegressionUsage(dataViewMapping);
                    }));
                    if (regressionDataViewMapping) {
                        for (var regressionDataViews = [], _i = 0, visualDataViews_1 = visualDataViews; _i < visualDataViews_1.length; _i++) {
                            var visualDataView = visualDataViews_1[_i], regressionDataView = linearRegressionTransform(visualDataView, applicableDataViewMappings, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);
                            regressionDataView && regressionDataViews.push(regressionDataView);
                        }
                        _.isEmpty(regressionDataViews) || visualDataViews.push.apply(visualDataViews, regressionDataViews);
                    }
                }
                return visualDataViews;
            }
            function linearRegressionTransform(sourceDataView, applicableDataViewMappings, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory) {
                return 2 === DataViewMapping.targetDataViewKinds(applicableDataViewMappings) ? powerbi.requireSync("data/regression/matrix").apply(sourceDataView, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory) : powerbi.requireSync("data/regression/categorical").apply(sourceDataView, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);
            }
            function getRegressionMetadataColumn(sourceColumn, queryName, isMeasure, displayNamePostFix, roles) {
                return {
                    displayName: sourceColumn.displayName + displayNamePostFix,
                    queryName: queryName,
                    type: sourceColumn.type,
                    isMeasure: isMeasure,
                    roles: roles
                };
            }
            function calculateLineDefinitions(dataPointsBySeries) {
                for (var xMin, xMax, lineDefs = [], _i = 0, dataPointsBySeries_1 = dataPointsBySeries; _i < dataPointsBySeries_1.length; _i++) {
                    var dataPointSet = dataPointsBySeries_1[_i], unsortedXValues = dataPointSet.xValues, unsortedYValues = dataPointSet.yValues;
                    if (_.isEmpty(unsortedXValues) || _.isEmpty(unsortedYValues)) lineDefs.push(null); else {
                        var xDataType = getDataType(unsortedXValues), yDataType = getDataType(unsortedYValues);
                        if (xDataType && yDataType) {
                            var sortedDataPointSet = sortValues(unsortedXValues, unsortedYValues);
                            if (!sortedDataPointSet || _.isEmpty(sortedDataPointSet.xValues) || _.isEmpty(sortedDataPointSet.yValues)) lineDefs.push(null); else {
                                var minCategoryValue = sortedDataPointSet.xValues[0], maxCategoryValue = sortedDataPointSet.xValues[sortedDataPointSet.xValues.length - 1], lineDef = computeRegressionLine(sortedDataPointSet.xValues, sortedDataPointSet.yValues);
                                xMin = _.min([ xMin, minCategoryValue ]), xMax = _.max([ xMax, maxCategoryValue ]), 
                                lineDefs.push(lineDef);
                            }
                        } else lineDefs.push(null);
                    }
                }
                return {
                    lineDefs: lineDefs,
                    xMin: xMin,
                    xMax: xMax
                };
            }
            function areTrendLineDefinitionsValid(lineDefSet) {
                return lineDefSet && !_.isEmpty(lineDefSet.lineDefs) && _.some(lineDefSet.lineDefs, (function(lineDef) {
                    return lineDef;
                }));
            }
            function getDataType(values) {
                var firstNonNull = _.find(values, (function(value) {
                    return null != value;
                }));
                if (null != firstNonNull) {
                    var dataType = typeof firstNonNull;
                    if (!_.some(values, (function(value) {
                        return null != value && typeof value !== dataType;
                    }))) return dataType;
                }
            }
            function sortValues(unsortedXValues, unsortedYValues) {
                var zippedValues = _.zip(unsortedXValues, unsortedYValues), _a = _.chain(zippedValues).filter((function(valuePair) {
                    return null != valuePair[0] && null != valuePair[1];
                })).sortBy((function(valuePair) {
                    return valuePair[0];
                })).unzip().value(), xValues = _a[0], yValues = _a[1];
                return {
                    xValues: xValues,
                    yValues: yValues
                };
            }
            function computeRegressionLine(xValues, yValues) {
                var xBar = _.sum(xValues) / xValues.length, yBar = _.sum(yValues) / yValues.length, ssXX = _.chain(xValues).map((function(x) {
                    return Math.pow(x - xBar, 2);
                })).sum();
                if (0 !== ssXX) {
                    var ssXY = _.chain(xValues).map((function(x, i) {
                        return (x - xBar) * (yValues[i] - yBar);
                    })).sum(), slope = ssXY / ssXX, intercept = yBar - xBar * slope;
                    return {
                        slope: slope,
                        intercept: intercept
                    };
                }
            }
            function computeLineYValues(lineDef, x1, x2) {
                return lineDef ? [ x1 * lineDef.slope + lineDef.intercept, x2 * lineDef.slope + lineDef.intercept ] : [ null, null ];
            }
            var regressionXQueryName = "RegressionX", regressionSeriesQueryName = "RegressionSeries";
            DataViewRegression.regressionYQueryName = "RegressionY", DataViewRegression.run = run, 
            DataViewRegression.linearRegressionTransform = linearRegressionTransform, powerbi.define("data/regression/matrix", (function(imports) {
                function transform(sourceDataView, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory) {
                    var matrix = sourceDataView.matrix;
                    if (matrix && matrix.rows && matrix.rows.root && 0 !== _.size(matrix.rows.root.children) && !(_.size(matrix.rows.levels) > 2)) {
                        var valueSources = matrix.valueSources, xValuesIndex = getMetadataColumnsIndexWithRoleKind(0, valueSources, dataRoles), yValuesIndex = getMetadataColumnsIndexWithRoleKind(1, valueSources, dataRoles);
                        if (xValuesIndex !== -1 && yValuesIndex !== -1) {
                            var xValuesCol = valueSources[xValuesIndex], yValuesCol = valueSources[yValuesIndex], valuesBySeries = getXYValues(sourceDataView, [ xValuesIndex, yValuesIndex ]), combineSeries = !0, regressionUsage = DataViewMapping.getRegressionUsage(regressionDataViewMapping);
                            if (regressionUsage && sourceDataView.metadata.objects) {
                                var combineSeriesPropertyId = regressionUsage.combineSeries;
                                combineSeriesPropertyId && (combineSeries = powerbi.DataViewObjects.getValue(sourceDataView.metadata.objects, combineSeriesPropertyId, !0));
                            }
                            var dataPointsBySeries = valuesBySeries;
                            combineSeries && (dataPointsBySeries = combineDataPointSets(valuesBySeries));
                            var lineDefSet = calculateLineDefinitions(dataPointsBySeries);
                            if (areTrendLineDefinitionsValid(lineDefSet)) {
                                for (var xMin = lineDefSet.xMin, xMax = lineDefSet.xMax, valuesByTrend = [], _i = 0, _a = lineDefSet.lineDefs; _i < _a.length; _i++) {
                                    var trend = _a[_i];
                                    valuesByTrend.push(computeLineYValues(trend, +xMin, +xMax));
                                }
                                var groupValues;
                                groupValues = combineSeries ? [ "combinedRegressionSeries" ] : 2 === matrix.rows.levels.length ? _.map(matrix.rows.root.children, (function(group) {
                                    return group.value;
                                })) : [ "combinedRegressionSeries" ];
                                var regressionDataView = createRegressionDataView(xValuesCol, yValuesCol, groupValues, [ xMin, xMax ], valuesByTrend, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);
                                return regressionDataView;
                            }
                        }
                    }
                }
                function getMetadataColumnsIndexWithRoleKind(roleKind, columns, roles) {
                    if (!_.isEmpty(columns)) return _.findIndex(columns, (function(column) {
                        var _loop_6 = function(roleName) {
                            if (!column.roles[roleName]) return "continue";
                            var role = _.find(roles, (function(role) {
                                return role.name === roleName;
                            }));
                            return role && role.cartesianKind === roleKind ? {
                                value: !0
                            } : void 0;
                        };
                        for (var roleName in column.roles) {
                            var state_2 = _loop_6(roleName);
                            if ("object" == typeof state_2) return state_2.value;
                        }
                    }));
                }
                function getXYValues(dataview, targetValueSourceIndices) {
                    var matrix = dataview.matrix;
                    if (matrix) {
                        var visitSeries = function(series, xyValues) {
                            if (series.children) for (var _i = 0, _a = series.children; _i < _a.length; _i++) {
                                var category = _a[_i];
                                category.isSubtotal || (xyValues.xValues.push(category.values[targetValueSourceIndices[0]].value), 
                                xyValues.yValues.push(category.values[targetValueSourceIndices[1]].value));
                            }
                        }, values = [], matrixRows = matrix.rows;
                        if (2 === matrixRows.levels.length) for (var _i = 0, _a = matrix.rows.root.children; _i < _a.length; _i++) {
                            var series = _a[_i];
                            if (!series.isSubtotal) {
                                var categoryValues = {
                                    xValues: [],
                                    yValues: []
                                };
                                values.push(categoryValues), visitSeries(series, categoryValues);
                            }
                        } else if (1 === matrixRows.levels.length) {
                            var categoryValues = {
                                xValues: [],
                                yValues: []
                            };
                            values.push(categoryValues), visitSeries(matrixRows.root, categoryValues);
                        }
                        return values;
                    }
                }
                function combineDataPointSets(xyValues) {
                    for (var dataPointsBySeries = [], _i = 0, xyValues_1 = xyValues; _i < xyValues_1.length; _i++) {
                        var xyValue = xyValues_1[_i];
                        !dataPointsBySeries[0] && xyValue.xValues.length > 0 && dataPointsBySeries.push({
                            xValues: [],
                            yValues: []
                        }), (_a = dataPointsBySeries[0].xValues).push.apply(_a, xyValue.xValues), (_b = dataPointsBySeries[0].yValues).push.apply(_b, xyValue.yValues);
                    }
                    return dataPointsBySeries;
                    var _a, _b;
                }
                function createRegressionDataView(xColumnSource, yColumnSource, groupValues, categories, values, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory) {
                    var columns, xRole = regressionDataViewMapping.matrix.rows.select[0].bind.to, seriesRole = regressionDataViewMapping.matrix.rows.select[1].bind.to, yRole = regressionDataViewMapping.matrix.values.select[0].for.in, categoricalRoles = (_a = {}, 
                    _a[xRole] = !0, _a), valueRoles = (_b = {}, _b[yRole] = !0, _b), seriesRoles = (_c = {}, 
                    _c[seriesRole] = !0, _c), metadata = {
                        columns: []
                    }, rows = {
                        levels: [],
                        root: {
                            children: []
                        }
                    }, regressionDataView = {
                        metadata: metadata,
                        matrix: {
                            rows: rows,
                            columns: columns,
                            valueSources: []
                        }
                    }, categoricalMetadata = getRegressionMetadataColumn(xColumnSource, regressionXQueryName, !1, "", categoricalRoles), seriesMetadata = getRegressionMetadataColumn(yColumnSource, regressionSeriesQueryName, yColumnSource.isMeasure, "Regression", seriesRoles), valuesMetadata = getRegressionMetadataColumn(yColumnSource, DataViewRegression.regressionYQueryName, yColumnSource.isMeasure, "", valueRoles);
                    metadata.columns.push(seriesMetadata), metadata.columns.push(categoricalMetadata), 
                    metadata.columns.push(valuesMetadata), rows.levels.push({
                        sources: [ seriesMetadata ]
                    }), rows.levels.push({
                        sources: [ categoricalMetadata ]
                    }), regressionDataView.matrix.valueSources.push(valuesMetadata);
                    for (var seriesId = data.SQExprBuilder.columnRef(data.SQExprBuilder.entity("s", "RegressionEntity"), "RegressionSeries"), categoryId = data.SQExprBuilder.columnRef(data.SQExprBuilder.entity("s", "RegressionEntity"), "RegressionCategories"), i = 0; i < groupValues.length; i++) {
                        var series = groupValues[i], seriesNode = {
                            level: 0,
                            value: series,
                            levelValues: [ {
                                levelSourceIndex: 0,
                                value: series
                            } ],
                            children: [],
                            childIdentityFields: [ categoryId ],
                            identity: data.createDataViewScopeIdentity(data.SQExprBuilder.and(seriesId, data.SQExprBuilder.typedConstant(series, seriesMetadata.type)))
                        };
                        _.isEmpty(rows.root.childIdentityFields) && (rows.root.childIdentityFields = [ seriesId ]), 
                        rows.root.children.push(seriesNode);
                        for (var j = 0; j < categories.length; j++) {
                            var category = categories[j], categoryNode = {
                                level: 1,
                                value: category,
                                levelValues: [ {
                                    levelSourceIndex: 1,
                                    value: category
                                } ],
                                values: {},
                                identity: data.createDataViewScopeIdentity(data.SQExprBuilder.and(categoryId, data.SQExprBuilder.typedConstant(category, categoricalMetadata.type)))
                            };
                            categoryNode.values[0] = {
                                value: values[i][j]
                            }, seriesNode.children.push(categoryNode);
                        }
                    }
                    return data.DataViewTransform.transformObjects(regressionDataView, 1, objectDescriptors, objectDefinitions, [], colorAllocatorFactory), 
                    regressionDataView;
                    var _a, _b, _c;
                }
                return {
                    apply: function(sourceDataView, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory) {
                        return transform(sourceDataView, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);
                    }
                };
            })), powerbi.define("data/regression/categorical", (function(imports) {
                function transform(sourceDataView, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory) {
                    if (sourceDataView.categorical) {
                        var xColumns = getColumnsForCartesianRoleKind(0, sourceDataView.categorical, dataRoles), yColumns = getColumnsForCartesianRoleKind(1, sourceDataView.categorical, dataRoles);
                        if (!_.isEmpty(xColumns) && !_.isEmpty(yColumns)) {
                            var xColumnSource = xColumns[0].source, yColumnSource = yColumns[0].source, combineSeries = !0, regressionUsage = DataViewMapping.getRegressionUsage(regressionDataViewMapping);
                            if (regressionUsage && sourceDataView.metadata.objects) {
                                var combineSeriesPropertyId = regressionUsage.combineSeries;
                                combineSeriesPropertyId && (combineSeries = powerbi.DataViewObjects.getValue(sourceDataView.metadata.objects, combineSeriesPropertyId, !0));
                            }
                            var dataPointsBySeries = getDataPointsBySeries(xColumns, yColumns, combineSeries, !1), lineDefSet = calculateLineDefinitions(dataPointsBySeries);
                            if (areTrendLineDefinitionsValid(lineDefSet)) {
                                var highlightsLineDefSet, xMin = lineDefSet.xMin, xMax = lineDefSet.xMax, shouldComputeHightlights = hasHighlightValues(yColumns) || hasHighlightValues(xColumns);
                                if (shouldComputeHightlights) {
                                    var highlightDataPointsBySeries = getDataPointsBySeries(xColumns, yColumns, combineSeries, !0);
                                    highlightsLineDefSet = calculateLineDefinitions(highlightDataPointsBySeries), areTrendLineDefinitionsValid(highlightsLineDefSet) ? (xMin = _.min([ xMin, highlightsLineDefSet.xMin ]), 
                                    xMax = _.max([ xMax, highlightsLineDefSet.xMax ])) : shouldComputeHightlights = !1;
                                }
                                for (var valuesByTrend = [], _i = 0, _a = lineDefSet.lineDefs; _i < _a.length; _i++) {
                                    var trend = _a[_i];
                                    valuesByTrend.push(computeLineYValues(trend, +xMin, +xMax));
                                }
                                var highlightsByTrend;
                                if (shouldComputeHightlights) {
                                    highlightsByTrend = [];
                                    for (var _b = 0, _c = highlightsLineDefSet.lineDefs; _b < _c.length; _b++) {
                                        var trend = _c[_b];
                                        highlightsByTrend.push(computeLineYValues(trend, +xMin, +xMax));
                                    }
                                }
                                var groupValues;
                                if (combineSeries) groupValues = [ "combinedRegressionSeries" ]; else if (sourceDataView.categorical.values.source) {
                                    var groups = sourceDataView.categorical.values.grouped();
                                    groupValues = _.map(groups, (function(group) {
                                        return group.name;
                                    }));
                                } else groupValues = _.map(yColumns, (function(column) {
                                    return column.source.queryName;
                                }));
                                var regressionDataView = createRegressionDataView(xColumnSource, yColumnSource, groupValues, [ xMin, xMax ], valuesByTrend, highlightsByTrend, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);
                                return regressionDataView;
                            }
                        }
                    }
                }
                function getColumnsForCartesianRoleKind(roleKind, categorical, roles) {
                    var columns = getColumnsWithRoleKind(roleKind, categorical.values, roles);
                    if (!_.isEmpty(columns)) return columns;
                    var categories = categorical.categories;
                    if (!_.isEmpty(categories)) {
                        var categoryColumn = categories[0], categoryColumns = getColumnsWithRoleKind(roleKind, [ categoryColumn ], roles);
                        return _.isEmpty(categoryColumns) || 1 !== categories.length && !_.isEmpty(categoryColumn.values) && (_.isEmpty(categoryColumn.objects) || void 0 === getScalarKeyFromDataViewObjects(categoryColumn.objects[0])) ? void 0 : categoryColumns;
                    }
                }
                function getColumnsWithRoleKind(roleKind, columns, roles) {
                    if (!_.isEmpty(columns)) return _.filter(columns, (function(column) {
                        var _loop_7 = function(roleName) {
                            if (!column.source.roles[roleName]) return "continue";
                            var role = _.find(roles, (function(role) {
                                return role.name === roleName;
                            }));
                            return role && role.cartesianKind === roleKind ? {
                                value: !0
                            } : void 0;
                        };
                        for (var roleName in column.source.roles) {
                            var state_3 = _loop_7(roleName);
                            if ("object" == typeof state_3) return state_3.value;
                        }
                        return !1;
                    }));
                }
                function getScalarKeyFromDataViewObjects(objects) {
                    return powerbi.DataViewObjects.getValue(objects, data.scalarKeyMinPropertyIdentifier);
                }
                function getValuesFromColumn(column, preferHighlights) {
                    var firstValue = _.head(column.objects);
                    if (firstValue && getScalarKeyFromDataViewObjects(firstValue)) return _.map(column.objects, (function(c) {
                        return getScalarKeyFromDataViewObjects(c);
                    }));
                    if (preferHighlights) {
                        var valueColumn = column;
                        if (valueColumn.highlights) return valueColumn.highlights;
                    }
                    return column.values;
                }
                function getDataPointsBySeries(xColumns, yColumns, combineSeries, preferHighlights) {
                    for (var dataPointsBySeries = [], xValueArray = _.map(xColumns, (function(column) {
                        return getValuesFromColumn(column, preferHighlights);
                    })), seriesYValues = _.map(yColumns, (function(column) {
                        return getValuesFromColumn(column, preferHighlights);
                    })), multipleXValueColumns = xColumns.length > 1, i = 0; i < seriesYValues.length; i++) {
                        var xValues = multipleXValueColumns ? xValueArray[i] : xValueArray[0], yValues = seriesYValues[i];
                        combineSeries && dataPointsBySeries.length > 0 ? (dataPointsBySeries[0].xValues = dataPointsBySeries[0].xValues.concat(xValues), 
                        dataPointsBySeries[0].yValues = dataPointsBySeries[0].yValues.concat(yValues)) : dataPointsBySeries.push({
                            xValues: xValues,
                            yValues: yValues
                        });
                    }
                    return dataPointsBySeries;
                }
                function createRegressionDataView(xColumnSource, yColumnSource, groupValues, categories, values, highlights, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory) {
                    var yRole, seriesRole, xRole = regressionDataViewMapping.categorical.categories.for.in, grouped = regressionDataViewMapping.categorical.values.group;
                    if (grouped && !_.isEmpty(grouped.select) && (yRole = grouped.select[0].for ? grouped.select[0].for.in : grouped.select[0].bind.to, 
                    seriesRole = grouped.by), yRole && seriesRole) {
                        var categoricalRoles = (_a = {}, _a[xRole] = !0, _a), valueRoles = (_b = {}, _b[yRole] = !0, 
                        _b), seriesRoles = (_c = {}, _c[seriesRole] = !0, _c), valuesBySeries = [];
                        for (var index in values) {
                            var seriesData = {
                                values: values[index]
                            };
                            highlights && (seriesData.highlights = highlights[index]), valuesBySeries.push([ seriesData ]);
                        }
                        var regressionDataView = data.createCategoricalDataViewBuilder().withCategory({
                            source: getRegressionMetadataColumn(xColumnSource, regressionXQueryName, !1, "", categoricalRoles),
                            values: categories,
                            identityFrom: {
                                fields: [ data.SQExprBuilder.columnRef(data.SQExprBuilder.entity("s", "RegressionEntity"), "RegressionCategories") ]
                            }
                        }).withGroupedValues({
                            groupColumn: {
                                source: getRegressionMetadataColumn(yColumnSource, regressionSeriesQueryName, yColumnSource.isMeasure, "Regression", seriesRoles),
                                values: groupValues,
                                identityFrom: {
                                    fields: [ data.SQExprBuilder.columnRef(data.SQExprBuilder.entity("s", "RegressionEntity"), "RegressionSeries") ]
                                }
                            },
                            valueColumns: [ {
                                source: getRegressionMetadataColumn(yColumnSource, DataViewRegression.regressionYQueryName, yColumnSource.isMeasure, "", valueRoles)
                            } ],
                            data: valuesBySeries
                        }).build();
                        return data.DataViewTransform.transformObjects(regressionDataView, 1, objectDescriptors, objectDefinitions, [], colorAllocatorFactory), 
                        regressionDataView;
                        var _a, _b, _c;
                    }
                }
                function hasHighlightValues(columns) {
                    return _.any(columns, (function(column) {
                        var valueColumn = column;
                        return null != valueColumn.highlights;
                    }));
                }
                return {
                    apply: function(sourceDataView, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory) {
                        return transform(sourceDataView, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);
                    }
                };
            }));
        })(DataViewRegression = data.DataViewRegression || (data.DataViewRegression = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var DataViewSelectTransform;
        !(function(DataViewSelectTransform) {
            function projectionsFromSelects(selects, projectionActiveItems) {
                if (_.isEmpty(selects)) return {};
                for (var projections = {}, _i = 0, selects_1 = selects; _i < selects_1.length; _i++) {
                    var select = selects_1[_i];
                    if (select) {
                        var roles = select.roles;
                        if (roles) for (var roleName in roles) if (roles[roleName]) {
                            var qp = projections[roleName];
                            qp || (qp = projections[roleName] = new data.QueryProjectionCollection([])), qp.all().push({
                                queryRef: select.queryName
                            }), projectionActiveItems && projectionActiveItems[roleName] && (qp.activeProjectionRefs = _.map(projectionActiveItems[roleName], (function(activeItem) {
                                return activeItem.queryRef;
                            })));
                        }
                    }
                }
                return projections;
            }
            function createRoleKindFromMetadata(selects, metadata) {
                for (var roleKindByQueryRef = {}, _i = 0, _a = metadata.columns; _i < _a.length; _i++) {
                    var column = _a[_i];
                    if (!(!column.index && 0 !== column.index || column.index < 0 || column.index >= selects.length)) {
                        var select = selects[column.index];
                        if (select) {
                            var queryRef = select.queryName;
                            queryRef && void 0 === roleKindByQueryRef[queryRef] && (roleKindByQueryRef[queryRef] = column.isMeasure ? powerbi.VisualDataRoleKind.Measure : powerbi.VisualDataRoleKind.Grouping);
                        }
                    }
                }
                return roleKindByQueryRef;
            }
            function findExprQueryName(expr, selectTransforms) {
                if (data.SQExpr.isSelectRef(expr)) return expr.expressionName;
                if (selectTransforms) {
                    var select = _.find(selectTransforms, (function(select) {
                        return select.expr && data.SQExpr.equals(select.expr, expr);
                    }));
                    if (select) return select.queryName;
                }
            }
            function findExprSelectIndex(expr, selectTransforms) {
                var queryName;
                data.SQExpr.isSelectRef(expr) && (queryName = expr.expressionName);
                for (var selectIdx = 0, selectLen = selectTransforms.length; selectIdx < selectLen; selectIdx++) {
                    var selectTransform = selectTransforms[selectIdx];
                    if (selectTransform && (!queryName || selectTransform.queryName)) if (queryName) {
                        if (selectTransform.queryName === queryName) return selectIdx;
                    } else if (data.SQExpr.equals(selectTransform.expr, expr)) return selectIdx;
                }
                return -1;
            }
            DataViewSelectTransform.projectionsFromSelects = projectionsFromSelects, DataViewSelectTransform.createRoleKindFromMetadata = createRoleKindFromMetadata, 
            DataViewSelectTransform.findExprQueryName = findExprQueryName, DataViewSelectTransform.findExprSelectIndex = findExprSelectIndex;
        })(DataViewSelectTransform = data.DataViewSelectTransform || (data.DataViewSelectTransform = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function createCategoricalEvalContext(colorAllocatorProvider, dataViewCategorical, selectTransforms) {
            return new CategoricalEvalContext(colorAllocatorProvider, dataViewCategorical, selectTransforms);
        }
        function findRuleInputColumns(dataViewCategorical, inputRole) {
            return findRuleInputInColumns(dataViewCategorical.values, inputRole) || findRuleInputInColumns(dataViewCategorical.categories, inputRole);
        }
        function findRuleInputInColumns(columns, inputRole) {
            if (columns) {
                for (var filteredColumns = [], _i = 0, columns_7 = columns; _i < columns_7.length; _i++) {
                    var column = columns_7[_i], roles = column.source.roles;
                    roles && roles[inputRole] && filteredColumns.push(column);
                }
                return filteredColumns;
            }
        }
        function findValueColumn(columns, selectIdx) {
            if (columns) return _.find(columns, (function(column) {
                return !column.identity && column.source.index === selectIdx;
            }));
        }
        data.createCategoricalEvalContext = createCategoricalEvalContext;
        var CategoricalEvalContext = (function() {
            function CategoricalEvalContext(colorAllocatorProvider, dataView, selectTransforms) {
                this.colorAllocatorProvider = colorAllocatorProvider, this.dataView = dataView, 
                this.selectTransforms = selectTransforms, this.columnsByRole = {};
            }
            return CategoricalEvalContext.prototype.getColorAllocator = function(expr) {
                return this.colorAllocatorProvider.get(expr);
            }, CategoricalEvalContext.prototype.getExprValue = function(expr) {
                var rowIdx = this.index;
                if (_.isNumber(rowIdx)) {
                    var selectTransforms = this.selectTransforms;
                    if (selectTransforms) {
                        var selectIdx = data.DataViewSelectTransform.findExprSelectIndex(expr, selectTransforms);
                        if (selectIdx !== -1) {
                            var dataView = this.dataView, column = findValueColumn(dataView.values, selectIdx);
                            if (column) return column.values[rowIdx];
                        }
                    }
                }
            }, CategoricalEvalContext.prototype.getRoleValues = function(roleName) {
                var _this = this, columnsByRole = this.columnsByRole, columns = columnsByRole[roleName];
                if (columns || (columns = columnsByRole[roleName] = findRuleInputColumns(this.dataView, roleName)), 
                columns) {
                    var index = this.index;
                    return null != index ? _.map(columns, (function(column) {
                        return column.values[_this.index];
                    })) : void 0;
                }
            }, CategoricalEvalContext.prototype.setCurrentRowIndex = function(index) {
                this.index = index;
            }, CategoricalEvalContext;
        })();
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function createTableEvalContext(colorAllocatorProvider, dataViewTable, selectTransforms) {
            return new TableEvalContext(colorAllocatorProvider, dataViewTable, selectTransforms);
        }
        data.createTableEvalContext = createTableEvalContext;
        var TableEvalContext = (function() {
            function TableEvalContext(colorAllocatorProvider, dataView, selectTransforms) {
                this.colorAllocatorProvider = colorAllocatorProvider, this.dataView = dataView, 
                this.selectTransforms = selectTransforms;
            }
            return TableEvalContext.prototype.getColorAllocator = function(expr) {
                return this.colorAllocatorProvider.get(expr);
            }, TableEvalContext.prototype.getExprValue = function(expr) {
                var row = this.row;
                if (null != row) return data.getExprValueFromTable(expr, this.selectTransforms, this.dataView.columns, row);
            }, TableEvalContext.prototype.getRoleValues = function(roleName) {}, TableEvalContext.prototype.setCurrentRow = function(row) {
                this.row = row;
            }, TableEvalContext;
        })();
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var RuleEvaluation = (function() {
            function RuleEvaluation() {}
            return RuleEvaluation.prototype.evaluate = function(evalContext) {}, RuleEvaluation;
        })();
        data.RuleEvaluation = RuleEvaluation;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var ColorRuleEvaluation = (function(_super) {
            function ColorRuleEvaluation(inputRole, allocator) {
                var _this = this;
                return _this = _super.call(this) || this, _this.inputRole = inputRole, _this.allocator = allocator, 
                _this;
            }
            return __extends(ColorRuleEvaluation, _super), ColorRuleEvaluation.prototype.evaluate = function(evalContext) {
                var roleValues = evalContext.getRoleValues(this.inputRole), value = _.first(roleValues);
                if (void 0 !== value) return this.allocator.color(value);
            }, ColorRuleEvaluation;
        })(data.RuleEvaluation);
        data.ColorRuleEvaluation = ColorRuleEvaluation;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var ConceptualSchema = (function() {
            function ConceptualSchema() {}
            return ConceptualSchema.prototype.findProperty = function(entityName, propertyName) {
                var entity = this.entities.withName(entityName);
                if (entity && !_.isEmpty(entity.properties)) return entity.properties.withName(propertyName);
            }, Object.defineProperty(ConceptualSchema.prototype, "isExtensionSchema", {
                get: function() {
                    return this.hasOwnProperty("extends");
                },
                enumerable: !0,
                configurable: !0
            }), ConceptualSchema.prototype.findHierarchy = function(entityName, name) {
                var entity = this.entities.withName(entityName);
                if (entity && !_.isEmpty(entity.hierarchies)) return entity.hierarchies.withName(name);
            }, ConceptualSchema.prototype.findHierarchyByVariation = function(variationEntityName, variationColumnName, variationName, hierarchyName) {
                var targetEntity = this.findTargetEntityOfVariation(variationEntityName, variationColumnName, variationName);
                if (targetEntity && !_.isEmpty(targetEntity.hierarchies)) return targetEntity.hierarchies.withName(hierarchyName);
            }, ConceptualSchema.prototype.findTargetEntityOfVariation = function(variationEntityName, variationColumnName, variationName) {
                var variationEntity = this.entities.withName(variationEntityName);
                if (variationEntity && !_.isEmpty(variationEntity.properties)) {
                    var variationProperty = variationEntity.properties.withName(variationColumnName);
                    if (variationProperty) {
                        var variationColumn = variationProperty.column;
                        if (variationColumn && !_.isEmpty(variationColumn.variations)) {
                            var variation = variationColumn.variations.withName(variationName);
                            return variation ? variation.navigationProperty ? variation.navigationProperty.targetEntity : variationEntity : void 0;
                        }
                    }
                }
            }, ConceptualSchema.prototype.findPropertyWithKpi = function(entityName, kpiProperty) {
                var entity = this.entities.withName(entityName);
                if (entity && !_.isEmpty(entity.properties)) for (var _i = 0, _a = entity.properties; _i < _a.length; _i++) {
                    var prop = _a[_i];
                    if (prop && prop.measure && prop.measure.kpi && (prop.measure.kpi.status === kpiProperty || prop.measure.kpi.goal === kpiProperty)) return prop;
                }
            }, ConceptualSchema;
        })();
        data.ConceptualSchema = ConceptualSchema;
        var ConceptualDataCategory;
        !(function(ConceptualDataCategory) {
            ConceptualDataCategory[ConceptualDataCategory.None = 0] = "None", ConceptualDataCategory[ConceptualDataCategory.Address = 1] = "Address", 
            ConceptualDataCategory[ConceptualDataCategory.City = 2] = "City", ConceptualDataCategory[ConceptualDataCategory.Company = 3] = "Company", 
            ConceptualDataCategory[ConceptualDataCategory.Continent = 4] = "Continent", ConceptualDataCategory[ConceptualDataCategory.Country = 5] = "Country", 
            ConceptualDataCategory[ConceptualDataCategory.County = 6] = "County", ConceptualDataCategory[ConceptualDataCategory.Date = 7] = "Date", 
            ConceptualDataCategory[ConceptualDataCategory.Image = 8] = "Image", ConceptualDataCategory[ConceptualDataCategory.ImageUrl = 9] = "ImageUrl", 
            ConceptualDataCategory[ConceptualDataCategory.Latitude = 10] = "Latitude", ConceptualDataCategory[ConceptualDataCategory.Longitude = 11] = "Longitude", 
            ConceptualDataCategory[ConceptualDataCategory.Organization = 12] = "Organization", 
            ConceptualDataCategory[ConceptualDataCategory.Place = 13] = "Place", ConceptualDataCategory[ConceptualDataCategory.PostalCode = 14] = "PostalCode", 
            ConceptualDataCategory[ConceptualDataCategory.Product = 15] = "Product", ConceptualDataCategory[ConceptualDataCategory.StateOrProvince = 16] = "StateOrProvince", 
            ConceptualDataCategory[ConceptualDataCategory.WebUrl = 17] = "WebUrl";
        })(ConceptualDataCategory = data.ConceptualDataCategory || (data.ConceptualDataCategory = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var ScriptResultUtil, StringExtensions = jsCommon.StringExtensions, FieldExprPattern = powerbi.data.FieldExprPattern;
    !(function(ScriptResultUtil) {
        function findScriptResultMapping(dataViewMappings) {
            if (dataViewMappings && 1 === dataViewMappings.length && dataViewMappings[0]) return dataViewMappings[0].scriptResult;
        }
        function extractScriptResult(dataViewMappings) {
            var scriptResultMapping = findScriptResultMapping(dataViewMappings);
            if (scriptResultMapping) {
                var objects = dataViewMappings[0].metadata && dataViewMappings[0].metadata.objects;
                return extractScriptResultFromDataViewObjects(scriptResultMapping, objects);
            }
        }
        function extractScriptResultFromVisualConfig(dataViewMappings, objects) {
            if (objects) {
                var scriptResultMapping = findScriptResultMapping(dataViewMappings);
                if (scriptResultMapping && scriptResultMapping.script && scriptResultMapping.script.source && scriptResultMapping.script.provider) {
                    var sourceExpr = powerbi.data.DataViewObjectDefinitions.getValue(objects, scriptResultMapping.script.source, null), providerExpr = powerbi.data.DataViewObjectDefinitions.getValue(objects, scriptResultMapping.script.provider, null), source = sourceExpr ? sourceExpr.value : null, provider = providerExpr ? providerExpr.value : null;
                    return getScriptInfo(source, provider, scriptResultMapping.script.scriptOutputType);
                }
            }
        }
        function extractScriptResultDefaultFromDataViewMappings(dataViewMappings) {
            return extractScriptResultDefault(findScriptResultMapping(dataViewMappings));
        }
        function extractScriptResultFromDataViewObjects(scriptResultMapping, dataViewObjects) {
            if (scriptResultMapping && scriptResultMapping.script && scriptResultMapping.script.source && scriptResultMapping.script.provider && dataViewObjects) {
                var source = powerbi.DataViewObjects.getValue(dataViewObjects, scriptResultMapping.script.source), provider = powerbi.DataViewObjects.getValue(dataViewObjects, scriptResultMapping.script.provider);
                return getScriptInfo(source, provider, scriptResultMapping.script.scriptOutputType);
            }
        }
        function extractScriptResultDefault(scriptResultMapping) {
            return extractScriptResultDefaultFromDataViewMappingScriptDefinition(scriptResultMapping && scriptResultMapping.script);
        }
        function extractScriptResultDefaultFromDataViewMappingScriptDefinition(scriptMapping) {
            if (scriptMapping) {
                var scriptSourceDefault = scriptMapping.scriptSourceDefault, scriptProviderDefault = scriptMapping.scriptProviderDefault, scriptOutputType = scriptMapping.scriptOutputType;
                return getScriptInfo(scriptSourceDefault, scriptProviderDefault, scriptOutputType);
            }
        }
        function getScriptInfo(source, provider, scriptOutputType) {
            if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(source) && !StringExtensions.isNullOrUndefinedOrWhiteSpaceString(provider)) return {
                source: source,
                provider: provider,
                outputType: scriptOutputType || DefaultOutputType
            };
        }
        function getScriptInput(projections, selects, schema, mapping, objects) {
            if (mapping && mapping.script) return getScriptInputFromScriptDefinition(projections, selects, schema, mapping.script, objects);
        }
        function getScriptInputFromScriptDefinition(projections, selects, schema, scriptDefinition, objects) {
            var customRoleSupport = !!extractScriptResultDefaultFromDataViewMappingScriptDefinition(scriptDefinition), scriptInput = {
                VariableName: "dataset",
                Columns: [],
                Parameters: []
            };
            if (projections && selects && !_.isEmpty(selects)) {
                var scriptInputColumnNames = [], scriptInputColumns = [];
                for (var role in projections) for (var _i = 0, _a = projections[role].all(); _i < _a.length; _i++) {
                    var projection = _a[_i], select = selects.withName(projection.queryRef);
                    if (select) {
                        var scriptInputColumn = {
                            QueryName: select.name
                        }, name_1 = FieldExprPattern.visit(select.expr, new ScriptInputColumnNameVisitor(schema));
                        customRoleSupport && (scriptInputColumn.Role = role, name_1 = role + "." + name_1), 
                        scriptInputColumns.push(scriptInputColumn), scriptInputColumnNames.push(name_1);
                    }
                }
                scriptInputColumnNames = StringExtensions.ensureUniqueNames(scriptInputColumnNames);
                for (var i = 0; i < scriptInputColumnNames.length; i++) {
                    var scriptInputColumn = scriptInputColumns[i];
                    scriptInputColumn.Name = scriptInputColumnNames[i];
                }
                scriptInput.Columns = scriptInputColumns;
            }
            return scriptInput.Parameters = getScriptParameters(scriptDefinition, objects), 
            scriptInput;
        }
        function getScriptParameters(scriptDefinition, objects) {
            var parameters = [];
            if (objects) for (var objectName in objects) {
                var object = powerbi.DataViewObjects.getObject(objects, objectName);
                if (object) for (var propertyName in object) {
                    var parameterValue = getParameterValue(scriptDefinition, object, objectName, propertyName);
                    if (parameterValue) {
                        var parameter = {
                            ObjectName: objectName,
                            PropertyName: propertyName,
                            Value: parameterValue
                        };
                        parameters.push(parameter);
                    }
                }
            }
            return parameters;
        }
        function getParameterValue(scriptDefinition, object, objectName, propertyName) {
            if (!(scriptDefinition && scriptDefinition.source && scriptDefinition.source.objectName === objectName && scriptDefinition.source.propertyName === propertyName || scriptDefinition && scriptDefinition.provider && scriptDefinition.provider.objectName === objectName && scriptDefinition.provider.propertyName === propertyName)) {
                var colorValue = powerbi.DataViewObject.getFillColorByPropertyName(object, propertyName);
                if (colorValue) return powerbi.data.PrimitiveValueEncoding.text(colorValue);
                var value = powerbi.DataViewObject.getValue(object, propertyName);
                if (void 0 !== value && null !== value) switch (typeof value) {
                  case "string":
                    return powerbi.data.PrimitiveValueEncoding.text(value);

                  case "number":
                    var numberValue = value;
                    return powerbi.Double.isInteger(numberValue) ? powerbi.data.PrimitiveValueEncoding.integer(numberValue) : powerbi.data.PrimitiveValueEncoding.double(numberValue);

                  case "boolean":
                    return powerbi.data.PrimitiveValueEncoding.boolean(value);
                }
            }
        }
        var DefaultOutputType = "png";
        ScriptResultUtil.findScriptResultMapping = findScriptResultMapping, ScriptResultUtil.extractScriptResult = extractScriptResult, 
        ScriptResultUtil.extractScriptResultFromVisualConfig = extractScriptResultFromVisualConfig, 
        ScriptResultUtil.extractScriptResultDefaultFromDataViewMappings = extractScriptResultDefaultFromDataViewMappings, 
        ScriptResultUtil.extractScriptResultDefaultFromDataViewMappingScriptDefinition = extractScriptResultDefaultFromDataViewMappingScriptDefinition, 
        ScriptResultUtil.getScriptInput = getScriptInput, ScriptResultUtil.getScriptInputFromScriptDefinition = getScriptInputFromScriptDefinition;
        var ScriptInputColumnNameVisitor = (function() {
            function ScriptInputColumnNameVisitor(federatedSchema) {
                this.federatedSchema = federatedSchema;
            }
            return ScriptInputColumnNameVisitor.prototype.visitColumn = function(column) {
                return ScriptInputColumnNameVisitor.getNameForProperty(column, this.federatedSchema);
            }, ScriptInputColumnNameVisitor.prototype.visitColumnAggr = function(columnAggr) {
                return ScriptInputColumnNameVisitor.getNameForProperty(columnAggr, this.federatedSchema);
            }, ScriptInputColumnNameVisitor.prototype.visitGroupingColumn = function(column) {
                return ScriptInputColumnNameVisitor.getNameForProperty(column, this.federatedSchema);
            }, ScriptInputColumnNameVisitor.prototype.visitGroupingColumnAggr = function(columnAggr) {
                return ScriptInputColumnNameVisitor.getNameForProperty(columnAggr, this.federatedSchema);
            }, ScriptInputColumnNameVisitor.prototype.visitColumnHierarchyLevelVariation = function(columnHierarchyLevelVariation) {
                return ScriptInputColumnNameVisitor.getVariationLevelName(columnHierarchyLevelVariation, this.federatedSchema);
            }, ScriptInputColumnNameVisitor.prototype.visitEntity = function(entity) {
                return entity.entity;
            }, ScriptInputColumnNameVisitor.prototype.visitEntityAggr = function(entityAggr) {
                return entityAggr.entity;
            }, ScriptInputColumnNameVisitor.prototype.visitHierarchy = function(hierarchy) {
                return ScriptInputColumnNameVisitor.getNameForHierarchy(hierarchy, this.federatedSchema);
            }, ScriptInputColumnNameVisitor.prototype.visitHierarchyLevel = function(hierarchyLevel) {}, 
            ScriptInputColumnNameVisitor.prototype.visitHierarchyLevelAggr = function(hierarchyLevelAggr) {
                return ScriptInputColumnNameVisitor.getNameForProperty(hierarchyLevelAggr, this.federatedSchema);
            }, ScriptInputColumnNameVisitor.prototype.visitMeasure = function(measure) {
                return ScriptInputColumnNameVisitor.getNameForProperty(measure, this.federatedSchema);
            }, ScriptInputColumnNameVisitor.prototype.visitSelectRef = function(selectRef) {
                return FieldExprPattern.visit(selectRef, this);
            }, ScriptInputColumnNameVisitor.prototype.visitPercentile = function(percentile) {
                return FieldExprPattern.visit(percentile.arg, this);
            }, ScriptInputColumnNameVisitor.prototype.visitPercentOfGrandTotal = function(percentOfGrandTotal) {
                return FieldExprPattern.visit(percentOfGrandTotal.baseExpr, this);
            }, ScriptInputColumnNameVisitor.prototype.visitPercentOfRoleTotal = function(percentOfRoleTotal) {
                return FieldExprPattern.visit(percentOfRoleTotal.baseExpr, this);
            }, ScriptInputColumnNameVisitor.prototype.visitTransformOutputRoleRef = function(transformOutputRoleRef) {
                return FieldExprPattern.visit(transformOutputRoleRef, this);
            }, ScriptInputColumnNameVisitor.prototype.visitFilteredEval = function(filteredEval) {
                return FieldExprPattern.visit(filteredEval, this);
            }, ScriptInputColumnNameVisitor.getNameForHierarchy = function(pattern, federatedScheam) {
                var schema = federatedScheam.schema(pattern.schema), hierarchy = schema.findHierarchy(pattern.entity, pattern.name);
                if (hierarchy) return hierarchy.name;
            }, ScriptInputColumnNameVisitor.getNameForProperty = function(pattern, federatedSchema) {
                var schema = federatedSchema.schema(pattern.schema), property = schema.findProperty(pattern.entity, pattern.name);
                if (property) return property.name;
            }, ScriptInputColumnNameVisitor.getVariationLevelName = function(pattern, federatedSchema) {
                var source = pattern.source, prop = federatedSchema.schema(source.schema).findProperty(source.entity, source.name);
                if (prop) for (var variations = prop.column.variations, _i = 0, variations_1 = variations; _i < variations_1.length; _i++) {
                    var variation = variations_1[_i];
                    if (variation.name === pattern.variationName) for (var _a = 0, _b = variation.defaultHierarchy.levels; _a < _b.length; _a++) {
                        var level = _b[_a];
                        if (level.name === pattern.level.level) return level.column.name;
                    }
                }
            }, ScriptInputColumnNameVisitor;
        })();
    })(ScriptResultUtil = powerbi.ScriptResultUtil || (powerbi.ScriptResultUtil = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var segmentation;
        !(function(segmentation) {
            var DataViewMerger;
            !(function(DataViewMerger) {
                function mergeDataViews(source, segment) {
                    !powerbi.DataViewAnalysis.isMetadataEquivalent(source.metadata, segment.metadata), 
                    segment.metadata.segment || delete source.metadata.segment, source.table && segment.table && mergeTables(source.table, segment.table), 
                    source.categorical && segment.categorical && mergeCategorical(source.categorical, segment.categorical), 
                    source.tree && segment.tree && mergeTreeNodes(source.tree.root, segment.tree.root, !0), 
                    source.matrix && segment.matrix && mergeTreeNodes(source.matrix.rows.root, segment.matrix.rows.root, !1);
                }
                function mergeTables(source, segment) {
                    if (!_.isEmpty(segment.rows)) {
                        var mergeIndex = segment.lastMergeIndex + 1;
                        merge(source.rows, segment.rows, mergeIndex), segment.identity && merge(source.identity, segment.identity, mergeIndex);
                    }
                }
                function mergeCategorical(source, segment) {
                    if (!_.isEmpty(source.categories) && !_.isEmpty(segment.categories)) {
                        for (var mergeIndex = segment.lastMergeIndex + 1, segmentCategoriesLength = segment.categories.length, categoryIndex = 0; categoryIndex < segmentCategoriesLength; categoryIndex++) {
                            var segmentCategory = segment.categories[categoryIndex], sourceCategory = source.categories[categoryIndex];
                            segmentCategory.values && merge(sourceCategory.values, segmentCategory.values, mergeIndex);
                        }
                        segment.categories[0].identity && merge(source.categories[0].identity, segment.categories[0].identity, mergeIndex);
                    }
                    if (source.values && segment.values) for (var segmentValuesLength = segment.values.length, valueIndex = 0; valueIndex < segmentValuesLength; valueIndex++) {
                        var segmentValue = segment.values[valueIndex], sourceValue = source.values[valueIndex];
                        !sourceValue.values && segmentValue.values && (sourceValue.values = []);
                        var mergeIndex = segment.lastMergeIndex + 1;
                        segmentValue.values && merge(sourceValue.values, segmentValue.values, mergeIndex), 
                        segmentValue.highlights && merge(sourceValue.highlights, segmentValue.highlights, mergeIndex);
                    }
                }
                function merge(source, segment, index) {
                    if (index >= segment.length) return segment;
                    var result = [];
                    return void 0 !== index && (result = segment.splice(0, index)), Array.prototype.push.apply(source, segment), 
                    result;
                }
                function mergeTreeNodes(sourceRoot, segmentRoot, allowDifferentStructure) {
                    if (segmentRoot.children && 0 !== segmentRoot.children.length) {
                        if (allowDifferentStructure && (!sourceRoot.children || 0 === sourceRoot.children.length)) return void (sourceRoot.children = segmentRoot.children);
                        var firstAppendIndex = findFirstAppendIndex(segmentRoot.children), lastSourceChild = sourceRoot.children[sourceRoot.children.length - 1], mergedChildren = merge(sourceRoot.children, segmentRoot.children, firstAppendIndex);
                        mergedChildren.length > 0 && mergeTreeNodes(lastSourceChild, mergedChildren[mergedChildren.length - 1], allowDifferentStructure);
                    }
                }
                function findFirstAppendIndex(children) {
                    if (0 === children.length) return 0;
                    for (var i = 0; i < children.length; i++) {
                        var childSegment = children[i];
                        if (!childSegment.isMerge) break;
                    }
                    return i;
                }
                DataViewMerger.mergeDataViews = mergeDataViews, DataViewMerger.mergeTables = mergeTables, 
                DataViewMerger.mergeCategorical = mergeCategorical, DataViewMerger.mergeTreeNodes = mergeTreeNodes;
            })(DataViewMerger = segmentation.DataViewMerger || (segmentation.DataViewMerger = {}));
        })(segmentation = data.segmentation || (data.segmentation = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var ArrayExtensions = jsCommon.ArrayExtensions, SQExprRewriter = (function() {
            function SQExprRewriter() {}
            return SQExprRewriter.prototype.visitColumnRef = function(expr) {
                var origArg = expr.source, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? expr : new data.SQColumnRefExpr(rewrittenArg, expr.ref);
            }, SQExprRewriter.prototype.visitMeasureRef = function(expr) {
                var origArg = expr.source, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? expr : new data.SQMeasureRefExpr(rewrittenArg, expr.ref);
            }, SQExprRewriter.prototype.visitAggr = function(expr) {
                var origArg = expr.arg, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? expr : new data.SQAggregationExpr(rewrittenArg, expr.func);
            }, SQExprRewriter.prototype.visitSelectRef = function(expr) {
                return expr;
            }, SQExprRewriter.prototype.visitPercentile = function(expr) {
                var origArg = expr.arg, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? expr : new data.SQPercentileExpr(rewrittenArg, expr.k, expr.exclusive);
            }, SQExprRewriter.prototype.visitGroupRef = function(expr) {
                for (var origSource = expr.source, rewrittenSource = expr.source.accept(this), origGroupedColumns = expr.groupedExprs, rewrittenGroupedColumns = new Array(origGroupedColumns.length), i = 0; i < origGroupedColumns.length; i++) rewrittenGroupedColumns[i] = origGroupedColumns[i].accept(this);
                return origSource === rewrittenSource && data.SQExprUtils.sequenceEqual(origGroupedColumns, rewrittenGroupedColumns) ? expr : new data.SQGroupRefExpr(expr.ref, rewrittenSource, rewrittenGroupedColumns);
            }, SQExprRewriter.prototype.visitHierarchy = function(expr) {
                var origArg = expr.arg, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? expr : new data.SQHierarchyExpr(rewrittenArg, expr.hierarchy);
            }, SQExprRewriter.prototype.visitHierarchyLevel = function(expr) {
                var origArg = expr.arg, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? expr : new data.SQHierarchyLevelExpr(rewrittenArg, expr.level);
            }, SQExprRewriter.prototype.visitPropertyVariationSource = function(expr) {
                var origArg = expr.arg, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? expr : new data.SQPropertyVariationSourceExpr(rewrittenArg, expr.name, expr.property);
            }, SQExprRewriter.prototype.visitEntity = function(expr) {
                return expr;
            }, SQExprRewriter.prototype.visitSubqueryRef = function(expr) {
                return expr;
            }, SQExprRewriter.prototype.visitNamedQueryRef = function(expr) {
                return expr;
            }, SQExprRewriter.prototype.visitAnd = function(orig) {
                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);
                return origLeft === rewrittenLeft && origRight === rewrittenRight ? orig : new data.SQAndExpr(rewrittenLeft, rewrittenRight);
            }, SQExprRewriter.prototype.visitBetween = function(orig) {
                var origArg = orig.arg, rewrittenArg = origArg.accept(this), origLower = orig.lower, rewrittenLower = origLower.accept(this), origUpper = orig.upper, rewrittenUpper = origUpper.accept(this);
                return origArg === rewrittenArg && origLower === rewrittenLower && origUpper === rewrittenUpper ? orig : new data.SQBetweenExpr(rewrittenArg, rewrittenLower, rewrittenUpper);
            }, SQExprRewriter.prototype.visitIn = function(orig) {
                var rewrittenValues, origArgs = orig.args, rewrittenArgs = this.rewriteAll(origArgs), origValues = orig.values, origTable = orig.table, rewrittenTable = origTable;
                if (origValues) for (var i = 0, len = origValues.length; i < len; i++) {
                    var origValueTuple = origValues[i], rewrittenValueTuple = this.rewriteAll(origValueTuple);
                    origValueTuple === rewrittenValueTuple || rewrittenValues || (rewrittenValues = ArrayExtensions.take(origValues, i)), 
                    rewrittenValues && rewrittenValues.push(rewrittenValueTuple);
                }
                return origTable && (rewrittenTable = origTable.accept(this)), origArgs !== rewrittenArgs || rewrittenValues || origTable !== rewrittenTable ? new data.SQInExpr(rewrittenArgs, rewrittenValues || origValues, rewrittenTable) : orig;
            }, SQExprRewriter.prototype.rewriteAll = function(origExprs) {
                for (var rewrittenResult, i = 0, len = origExprs.length; i < len; i++) {
                    var origExpr = origExprs[i], rewrittenExpr = origExpr.accept(this);
                    origExpr === rewrittenExpr || rewrittenResult || (rewrittenResult = ArrayExtensions.take(origExprs, i)), 
                    rewrittenResult && rewrittenResult.push(rewrittenExpr);
                }
                return rewrittenResult || origExprs;
            }, SQExprRewriter.prototype.visitOr = function(orig) {
                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);
                return origLeft === rewrittenLeft && origRight === rewrittenRight ? orig : new data.SQOrExpr(rewrittenLeft, rewrittenRight);
            }, SQExprRewriter.prototype.visitCompare = function(orig) {
                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);
                return origLeft === rewrittenLeft && origRight === rewrittenRight ? orig : new data.SQCompareExpr(orig.comparison, rewrittenLeft, rewrittenRight);
            }, SQExprRewriter.prototype.visitContains = function(orig) {
                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);
                return origLeft === rewrittenLeft && origRight === rewrittenRight ? orig : new data.SQContainsExpr(rewrittenLeft, rewrittenRight);
            }, SQExprRewriter.prototype.visitExists = function(orig) {
                var origArg = orig.arg, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? orig : new data.SQExistsExpr(rewrittenArg);
            }, SQExprRewriter.prototype.visitNot = function(orig) {
                var origArg = orig.arg, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? orig : new data.SQNotExpr(rewrittenArg);
            }, SQExprRewriter.prototype.visitStartsWith = function(orig) {
                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);
                return origLeft === rewrittenLeft && origRight === rewrittenRight ? orig : new data.SQStartsWithExpr(rewrittenLeft, rewrittenRight);
            }, SQExprRewriter.prototype.visitConstant = function(expr) {
                return expr;
            }, SQExprRewriter.prototype.visitFloor = function(orig) {
                var origArg = orig.arg, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? orig : new data.SQFloorExpr(rewrittenArg, orig.size, orig.timeUnit);
            }, SQExprRewriter.prototype.visitDateSpan = function(orig) {
                var origArg = orig.arg, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? orig : new data.SQDateSpanExpr(orig.unit, rewrittenArg);
            }, SQExprRewriter.prototype.visitDateAdd = function(orig) {
                var origArg = orig.arg, rewrittenArg = origArg.accept(this);
                return origArg === rewrittenArg ? orig : new data.SQDateAddExpr(orig.unit, orig.amount, rewrittenArg);
            }, SQExprRewriter.prototype.visitNow = function(orig) {
                return orig;
            }, SQExprRewriter.prototype.visitDefaultValue = function(orig) {
                return orig;
            }, SQExprRewriter.prototype.visitAnyValue = function(orig) {
                return orig;
            }, SQExprRewriter.prototype.visitArithmetic = function(orig) {
                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);
                return origLeft === rewrittenLeft && origRight === rewrittenRight ? orig : new data.SQArithmeticExpr(rewrittenLeft, rewrittenRight, orig.operator);
            }, SQExprRewriter.prototype.visitScopedEval = function(orig) {
                var origExpression = orig.expression, rewrittenExpression = origExpression.accept(this), origScope = orig.scope, rewrittenScope = this.rewriteAll(origScope);
                return origExpression === rewrittenExpression && origScope === rewrittenScope ? orig : new data.SQScopedEvalExpr(rewrittenExpression, rewrittenScope);
            }, SQExprRewriter.prototype.visitFilteredEval = function(orig) {
                for (var origExpression = orig.expression, rewrittenExpression = origExpression.accept(this), areFiltersRewritten = !1, rewrittenFilters = [], _i = 0, _a = orig.filters; _i < _a.length; _i++) {
                    var origFilter = _a[_i], target = origFilter.target, rewrittenTarget = void 0;
                    _.isEmpty(target) || (rewrittenTarget = this.rewriteAll(target));
                    var condition = origFilter.condition, rewrittenCondition = origFilter.condition.accept(this);
                    target === rewrittenTarget && condition === rewrittenCondition || (areFiltersRewritten = !0), 
                    rewrittenFilters.push({
                        target: rewrittenTarget,
                        condition: rewrittenCondition
                    });
                }
                return origExpression !== rewrittenExpression || areFiltersRewritten ? new data.SQFilteredEvalExpr(rewrittenExpression, rewrittenFilters) : orig;
            }, SQExprRewriter.prototype.visitWithRef = function(orig) {
                return orig;
            }, SQExprRewriter.prototype.visitTransformTableRef = function(orig) {
                return orig;
            }, SQExprRewriter.prototype.visitTransformOutputRoleRef = function(orig) {
                return orig;
            }, SQExprRewriter.prototype.visitRoleRef = function(orig) {
                return orig;
            }, SQExprRewriter.prototype.visitFillRule = function(orig) {
                var origInput = orig.input, rewrittenInput = origInput.accept(this), origRule = orig.rule, origGradient2 = origRule.linearGradient2, rewrittenGradient2 = origGradient2;
                origGradient2 && (rewrittenGradient2 = this.visitLinearGradient2(origGradient2));
                var origGradient3 = origRule.linearGradient3, rewrittenGradient3 = origGradient3;
                origGradient3 && (rewrittenGradient3 = this.visitLinearGradient3(origGradient3));
                var origConditional = origRule.conditional, rewrittenConditional = origConditional;
                if (origConditional && (rewrittenConditional = this.visitConditionalColorRule(origConditional)), 
                origInput !== rewrittenInput || origGradient2 !== rewrittenGradient2 || origGradient3 !== rewrittenGradient3 || origConditional !== rewrittenConditional) {
                    var rewrittenRule = {};
                    return rewrittenGradient2 && (rewrittenRule.linearGradient2 = rewrittenGradient2), 
                    rewrittenGradient3 && (rewrittenRule.linearGradient3 = rewrittenGradient3), rewrittenConditional && (rewrittenRule.conditional = rewrittenConditional), 
                    new data.SQFillRuleExpr(rewrittenInput, rewrittenRule);
                }
                return orig;
            }, SQExprRewriter.prototype.visitLinearGradient2 = function(origGradient) {
                var origMin = origGradient.min, rewrittenMin = this.visitFillRuleStop(origMin), origMax = origGradient.max, rewrittenMax = this.visitFillRuleStop(origMax), origNullStrategy = origGradient.nullColoringStrategy, rewrittenNullStrategy = this.visitFillNullStrategy(origNullStrategy);
                if (origMin !== rewrittenMin || origMax !== rewrittenMax || origNullStrategy !== rewrittenNullStrategy) {
                    var output = {
                        min: rewrittenMin,
                        max: rewrittenMax
                    };
                    return rewrittenNullStrategy && (output.nullColoringStrategy = rewrittenNullStrategy), 
                    output;
                }
                return origGradient;
            }, SQExprRewriter.prototype.visitLinearGradient3 = function(origGradient) {
                var origMin = origGradient.min, rewrittenMin = this.visitFillRuleStop(origMin), origMid = origGradient.mid, rewrittenMid = this.visitFillRuleStop(origMid), origMax = origGradient.max, rewrittenMax = this.visitFillRuleStop(origMax), origNullStrategy = origGradient.nullColoringStrategy, rewrittenNullStrategy = this.visitFillNullStrategy(origNullStrategy);
                if (origMin !== rewrittenMin || origMid !== rewrittenMid || origMax !== rewrittenMax || origNullStrategy !== rewrittenNullStrategy) {
                    var output = {
                        min: rewrittenMin,
                        mid: rewrittenMid,
                        max: rewrittenMax
                    };
                    return rewrittenNullStrategy && (output.nullColoringStrategy = rewrittenNullStrategy), 
                    output;
                }
                return origGradient;
            }, SQExprRewriter.prototype.visitFillRuleStop = function(stop) {
                var origColor = stop.color, rewrittenColor = stop.color.accept(this), origValue = stop.value, rewrittenValue = origValue;
                if (origValue && (rewrittenValue = origValue.accept(this)), origColor !== rewrittenColor || origValue !== rewrittenValue) {
                    var rewrittenStop = {
                        color: rewrittenColor
                    };
                    return rewrittenValue && (rewrittenStop.value = rewrittenValue), rewrittenStop;
                }
                return stop;
            }, SQExprRewriter.prototype.visitConditionalColorRule = function(input) {
                var _this = this, oldCases = input.cases, newCases = oldCases.map((function(rule) {
                    return _this.visitRuleColorCase(rule);
                })), oldNullStrategy = input.nullColoringStrategy, newNullStrategy = this.visitFillNullStrategy(oldNullStrategy);
                if (oldNullStrategy !== newNullStrategy || _.any(newCases, (function(rule, i) {
                    return rule !== oldCases[i];
                }))) {
                    var output = {
                        cases: newCases
                    };
                    return newNullStrategy && (output.nullColoringStrategy = newNullStrategy), output;
                }
                return input;
            }, SQExprRewriter.prototype.visitRuleColorCase = function(input) {
                var oldCondition = input.condition, newCondition = oldCondition.accept(this), oldColor = input.color, newColor = oldColor.accept(this);
                if (oldCondition !== newCondition || oldColor !== newColor) {
                    var newCase = {
                        condition: newCondition,
                        color: newColor
                    };
                    return newCase;
                }
                return input;
            }, SQExprRewriter.prototype.visitFillNullStrategy = function(input) {
                if (input) {
                    var origStrategy = input.strategy, rewrittenStrategy = origStrategy.accept(this), origColor = input.color, rewrittenColor = origColor;
                    if (origColor && (rewrittenColor = origColor.accept(this)), origStrategy !== rewrittenStrategy || origColor !== rewrittenColor) {
                        var output = {
                            strategy: rewrittenStrategy
                        };
                        return rewrittenColor && (output.color = rewrittenColor), output;
                    }
                    return input;
                }
            }, SQExprRewriter.prototype.visitThemeColor = function(orig) {
                return orig;
            }, SQExprRewriter.prototype.visitResourcePackageItem = function(orig) {
                return orig;
            }, SQExprRewriter.prototype.visitDiscretize = function(orig) {
                var rewritten = orig.source.accept(this);
                return rewritten === orig.source ? orig : new data.SQDiscretizeExpr(rewritten, orig.count);
            }, SQExprRewriter.prototype.visitMember = function(orig) {
                var rewritten = orig.source.accept(this);
                return rewritten === orig.source ? orig : new data.SQMemberExpr(rewritten, orig.member);
            }, SQExprRewriter;
        })();
        data.SQExprRewriter = SQExprRewriter;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var EqualsToInRewriter;
        !(function(EqualsToInRewriter) {
            function run(expr) {
                return expr.accept(new Rewriter());
            }
            EqualsToInRewriter.run = run;
            var Rewriter = (function(_super) {
                function Rewriter() {
                    return _super.call(this) || this;
                }
                return __extends(Rewriter, _super), Rewriter.prototype.visitCompare = function(expr) {
                    if (0 !== expr.comparison) return this.visitUnsupported(expr);
                    if (!this.isSupported(expr.left) || !this.isSupported(expr.right)) return this.visitUnsupported(expr);
                    var leftIsComparand = this.isComparand(expr.left), rightIsComparand = this.isComparand(expr.right);
                    if (leftIsComparand === rightIsComparand) return this.visitUnsupported(expr);
                    var operand = leftIsComparand ? expr.left : expr.right, value = leftIsComparand ? expr.right : expr.left, current = this.current;
                    return current ? (current.add(operand, value), expr) : data.SQExprBuilder.inValues([ operand ], [ [ value ] ]);
                }, Rewriter.prototype.visitOr = function(expr) {
                    if (!this.isSupported(expr.left) || !this.isSupported(expr.right)) return this.visitUnsupported(expr);
                    var current;
                    return this.current || (current = this.current = new InBuilder()), expr.left.accept(this), 
                    expr.right.accept(this), current ? (this.current = null, current.complete() || expr) : expr;
                }, Rewriter.prototype.visitAnd = function(expr) {
                    if (!this.isSupported(expr.left) || !this.isSupported(expr.right)) return this.visitUnsupported(expr);
                    var current = this.current;
                    return current ? (current.cancel(), expr) : _super.prototype.visitAnd.call(this, expr);
                }, Rewriter.prototype.visitUnsupported = function(expr) {
                    var current = this.current;
                    return current && current.cancel(), expr;
                }, Rewriter.prototype.isSupported = function(expr) {
                    return expr instanceof data.SQCompareExpr || expr instanceof data.SQColumnRefExpr || expr instanceof data.SQConstantExpr || expr instanceof data.SQHierarchyLevelExpr || expr instanceof data.SQOrExpr || expr instanceof data.SQAndExpr;
                }, Rewriter.prototype.isComparand = function(expr) {
                    return expr instanceof data.SQColumnRefExpr || expr instanceof data.SQHierarchyLevelExpr;
                }, Rewriter;
            })(data.SQExprRewriter), InBuilder = (function() {
                function InBuilder() {}
                return InBuilder.prototype.add = function(operand, value) {
                    if (!this.cancelled) {
                        if (this.operand && !data.SQExpr.equals(operand, this.operand)) return void this.cancel();
                        this.operand = operand;
                        var values = this.values;
                        values || (values = this.values = []), values.push(value);
                    }
                }, InBuilder.prototype.cancel = function() {
                    this.cancelled = !0;
                }, InBuilder.prototype.complete = function() {
                    if (!this.cancelled && this.operand) return data.SQExprBuilder.inValues([ this.operand ], _.map(this.values, (function(v) {
                        return [ v ];
                    })));
                }, InBuilder;
            })();
        })(EqualsToInRewriter = data.EqualsToInRewriter || (data.EqualsToInRewriter = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var FilterKindDetector;
        !(function(FilterKindDetector) {
            function run(expr) {
                var detector = new FilterKindDetectionVisitor();
                return expr.accept(detector), detector.sawSubquery ? 3 : detector.filterKind;
            }
            FilterKindDetector.run = run;
            var FilterKindDetectionVisitor = (function(_super) {
                function FilterKindDetectionVisitor() {
                    var _this = _super.call(this) || this;
                    return _this.filterKind = 0, _this.sawSubquery = !1, _this;
                }
                return __extends(FilterKindDetectionVisitor, _super), FilterKindDetectionVisitor.prototype.visitMeasureRef = function(expr) {
                    this.filterKind = 1;
                }, FilterKindDetectionVisitor.prototype.visitExists = function(expr) {
                    this.filterKind = 2;
                }, FilterKindDetectionVisitor.prototype.visitAggr = function(expr) {
                    this.filterKind = 1;
                }, FilterKindDetectionVisitor.prototype.visitSubqueryRef = function(expr) {
                    this.sawSubquery = !0;
                }, FilterKindDetectionVisitor;
            })(data.DefaultSQExprVisitorWithTraversal);
        })(FilterKindDetector = data.FilterKindDetector || (data.FilterKindDetector = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SQExprConverter;
        !(function(SQExprConverter) {
            function asScopeIdsContainer(filter, fieldSQExprs) {
                var filterItems = filter.conditions(), filterItem = filterItems[0];
                if (filterItem) {
                    var visitor = new FilterScopeIdsCollectorVisitor(fieldSQExprs);
                    if (filterItem.accept(visitor)) return visitor.getResult();
                }
            }
            function getFirstComparandValue(identity) {
                var comparandExpr = identity.expr.accept(new FindComparandVisitor());
                if (comparandExpr) return comparandExpr.value;
            }
            function getAllComparands(identity) {
                return identity.expr.accept(new FindAllComparandsVisitor());
            }
            SQExprConverter.asScopeIdsContainer = asScopeIdsContainer, SQExprConverter.getFirstComparandValue = getFirstComparandValue, 
            SQExprConverter.getAllComparands = getAllComparands;
        })(SQExprConverter = data.SQExprConverter || (data.SQExprConverter = {}));
        var FilterScopeIdsCollectorVisitor = (function(_super) {
            function FilterScopeIdsCollectorVisitor(fieldSQExprs) {
                var _this = _super.call(this) || this;
                _this.isRoot = !0, _this.isNot = !1, _this.keyExprsCount = null, _this.valueExprs = [], 
                _this.fieldExprs = [];
                for (var _i = 0, fieldSQExprs_1 = fieldSQExprs; _i < fieldSQExprs_1.length; _i++) {
                    var field = fieldSQExprs_1[_i];
                    _this.fieldExprs.push(data.SQExprBuilder.removeEntityVariables(field));
                }
                return _this;
            }
            return __extends(FilterScopeIdsCollectorVisitor, _super), FilterScopeIdsCollectorVisitor.prototype.getResult = function() {
                for (var valueExprs = this.valueExprs, scopeIds = [], valueCount = this.keyExprsCount || 1, startIndex = 0, endIndex = valueCount, len = valueExprs.length; startIndex < len && endIndex <= len; ) {
                    var values = valueExprs.slice(startIndex, endIndex), scopeId = FilterScopeIdsCollectorVisitor.getScopeIdentity(this.fieldExprs, values);
                    jsCommon.ArrayExtensions.isInArray(scopeIds, scopeId, powerbi.DataViewScopeIdentity.equals) || scopeIds.push(scopeId), 
                    startIndex += valueCount, endIndex += valueCount;
                }
                return {
                    isNot: this.isNot,
                    scopeIds: scopeIds
                };
            }, FilterScopeIdsCollectorVisitor.getScopeIdentity = function(fieldExprs, valueExprs) {
                for (var compoundSQExpr, i = 0, len = fieldExprs.length; i < len; i++) {
                    var equalsExpr = data.SQExprBuilder.equal(fieldExprs[i], valueExprs[i]);
                    compoundSQExpr = compoundSQExpr ? data.SQExprBuilder.and(compoundSQExpr, equalsExpr) : equalsExpr;
                }
                return data.createDataViewScopeIdentity(compoundSQExpr);
            }, FilterScopeIdsCollectorVisitor.prototype.visitOr = function(expr) {
                return null !== this.keyExprsCount ? this.unsupportedSQExpr() : (this.isRoot = !1, 
                expr.left.accept(this) && expr.right.accept(this));
            }, FilterScopeIdsCollectorVisitor.prototype.visitNot = function(expr) {
                return this.isRoot ? (this.isNot = !0, expr.arg.accept(this)) : this.unsupportedSQExpr();
            }, FilterScopeIdsCollectorVisitor.prototype.visitConstant = function(expr) {
                return this.isRoot && 0 === expr.type.primitiveType ? this.unsupportedSQExpr() : (this.valueExprs.push(expr), 
                !0);
            }, FilterScopeIdsCollectorVisitor.prototype.visitCompare = function(expr) {
                return null !== this.keyExprsCount ? this.unsupportedSQExpr() : (this.isRoot = !1, 
                0 !== expr.comparison ? this.unsupportedSQExpr() : expr.left.accept(this) && expr.right.accept(this));
            }, FilterScopeIdsCollectorVisitor.prototype.visitIn = function(expr) {
                if (!expr.values) return !1;
                this.keyExprsCount = 0;
                var result;
                this.isRoot = !1;
                for (var _i = 0, _a = expr.args; _i < _a.length; _i++) {
                    var arg = _a[_i];
                    if (result = arg.accept(this), !result) return this.unsupportedSQExpr();
                    this.keyExprsCount++;
                }
                if (this.keyExprsCount !== this.fieldExprs.length) return this.unsupportedSQExpr();
                for (var values = expr.values, _b = 0, values_1 = values; _b < values_1.length; _b++) for (var valueTuple = values_1[_b], _c = (valueTuple.length, 
                0), valueTuple_1 = valueTuple; _c < valueTuple_1.length; _c++) {
                    var value = valueTuple_1[_c];
                    if (result = value.accept(this), !result) return this.unsupportedSQExpr();
                }
                return result;
            }, FilterScopeIdsCollectorVisitor.prototype.visitColumnRef = function(expr) {
                if (this.isRoot) return this.unsupportedSQExpr();
                var fixedExpr = data.SQExprBuilder.removeEntityVariables(expr);
                return null !== this.keyExprsCount ? data.SQExpr.equals(this.fieldExprs[this.keyExprsCount], fixedExpr) : data.SQExpr.equals(this.fieldExprs[0], fixedExpr);
            }, FilterScopeIdsCollectorVisitor.prototype.visitDefaultValue = function(expr) {
                return this.isRoot || null !== this.keyExprsCount ? this.unsupportedSQExpr() : (this.valueExprs.push(expr), 
                !0);
            }, FilterScopeIdsCollectorVisitor.prototype.visitAnyValue = function(expr) {
                return this.isRoot || null !== this.keyExprsCount ? this.unsupportedSQExpr() : (this.valueExprs.push(expr), 
                !0);
            }, FilterScopeIdsCollectorVisitor.prototype.visitDefault = function(expr) {
                return this.unsupportedSQExpr();
            }, FilterScopeIdsCollectorVisitor.prototype.unsupportedSQExpr = function() {
                return !1;
            }, FilterScopeIdsCollectorVisitor;
        })(data.DefaultSQExprVisitor), FindComparandVisitor = (function(_super) {
            function FindComparandVisitor() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(FindComparandVisitor, _super), FindComparandVisitor.prototype.visitAnd = function(expr) {
                return expr.left.accept(this) || expr.right.accept(this);
            }, FindComparandVisitor.prototype.visitCompare = function(expr) {
                if (0 === expr.comparison) {
                    if (expr.right instanceof data.SQConstantExpr) return expr.right;
                    if (expr.left instanceof data.SQConstantExpr) return expr.left;
                }
            }, FindComparandVisitor;
        })(data.DefaultSQExprVisitor), FindAllComparandsVisitor = (function(_super) {
            function FindAllComparandsVisitor() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(FindAllComparandsVisitor, _super), FindAllComparandsVisitor.prototype.visitAnd = function(expr) {
                var comparandsList = [];
                return comparandsList = comparandsList.concat(expr.left.accept(this)), comparandsList = comparandsList.concat(expr.right.accept(this));
            }, FindAllComparandsVisitor.prototype.visitCompare = function(expr) {
                if (0 === expr.comparison) {
                    var comparandsList = [];
                    return expr.right instanceof data.SQConstantExpr ? comparandsList.push({
                        expr: expr.left,
                        value: expr.right.value
                    }) : expr.left instanceof data.SQConstantExpr && comparandsList.push({
                        expr: expr.right,
                        value: expr.left.value
                    }), comparandsList;
                }
            }, FindAllComparandsVisitor;
        })(data.DefaultSQExprVisitor);
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var RelativeDateFilterPattern;
        !(function(RelativeDateFilterPattern) {
            function buildSemanticFilter(params) {
                var condition = buildFilterCondition(params);
                return data.SemanticFilter.fromSQExpr(condition);
            }
            function buildFilterCondition(params, dayIsCalendarUnit) {
                void 0 === dayIsCalendarUnit && (dayIsCalendarUnit = !1);
                var field = params.field, options = params.options, condition = null, now = data.SQExprBuilder.now(), timeUnit = toSemantiQueryTimeUnit(options.relativeUnit), calendarPeriod = isCalendarPeriod(options.relativeUnit, dayIsCalendarUnit);
                switch (options.relativeQualifier) {
                  case data.RelativeDateQualifier.Current:
                    var current = data.SQExprBuilder.dateSpan(timeUnit, now);
                    condition = data.SQExprBuilder.compare(0, field, current);
                    break;

                  case data.RelativeDateQualifier.Last:
                    if (calendarPeriod) condition = getCalendarPeriodSQExpr(-options.duration, -1, timeUnit, field); else {
                        var upperBound = options.includeToday ? now : data.SQExprBuilder.dateAdd(0, -1, now), upper = data.SQExprBuilder.dateSpan(0, upperBound), lower = data.SQExprBuilder.dateSpan(0, data.SQExprBuilder.dateAdd(timeUnit, -options.duration, data.SQExprBuilder.dateAdd(0, 1, upperBound)));
                        condition = data.SQExprBuilder.between(field, lower, upper);
                    }
                    break;

                  case data.RelativeDateQualifier.Next:
                    if (calendarPeriod) condition = getCalendarPeriodSQExpr(1, options.duration, timeUnit, field); else {
                        var lowerBound = options.includeToday ? now : data.SQExprBuilder.dateAdd(0, 1, now), lower = data.SQExprBuilder.dateSpan(0, lowerBound), upper = data.SQExprBuilder.dateSpan(0, data.SQExprBuilder.dateAdd(timeUnit, options.duration, data.SQExprBuilder.dateAdd(0, -1, lowerBound)));
                        condition = data.SQExprBuilder.between(field, lower, upper);
                    }
                }
                return condition;
            }
            function getCalendarPeriodSQExpr(lowerBound, upperBound, timeUnit, field) {
                var now = data.SQExprBuilder.now(), lower = data.SQExprBuilder.dateSpan(timeUnit, data.SQExprBuilder.dateAdd(timeUnit, lowerBound, now)), upper = data.SQExprBuilder.dateSpan(timeUnit, data.SQExprBuilder.dateAdd(timeUnit, upperBound, now));
                return data.SQExprBuilder.between(field, lower, upper);
            }
            function toSemantiQueryTimeUnit(relativeUnit) {
                switch (relativeUnit) {
                  case data.RelativeDateUnit.CalendarYear:
                  case data.RelativeDateUnit.Year:
                    return 3;

                  case data.RelativeDateUnit.CalendarMonth:
                  case data.RelativeDateUnit.Month:
                    return 2;

                  case data.RelativeDateUnit.CalendarWeek:
                  case data.RelativeDateUnit.Week:
                    return 1;

                  case data.RelativeDateUnit.Day:
                    return 0;

                  default:
                    return;
                }
            }
            function isCalendarPeriod(relativeUnit, dayIsCalendarUnit) {
                switch (void 0 === dayIsCalendarUnit && (dayIsCalendarUnit = !1), relativeUnit) {
                  case data.RelativeDateUnit.Year:
                  case data.RelativeDateUnit.Month:
                  case data.RelativeDateUnit.Week:
                    return !1;

                  case data.RelativeDateUnit.Day:
                    return dayIsCalendarUnit;

                  case data.RelativeDateUnit.CalendarYear:
                  case data.RelativeDateUnit.CalendarMonth:
                  case data.RelativeDateUnit.CalendarWeek:
                    return !0;

                  default:
                    return;
                }
            }
            function toRelativeDateUnit(timeUnit, isCalendarPeriod) {
                switch (timeUnit) {
                  case 0:
                    return data.RelativeDateUnit.Day;

                  case 1:
                    return isCalendarPeriod ? data.RelativeDateUnit.CalendarWeek : data.RelativeDateUnit.Week;

                  case 2:
                    return isCalendarPeriod ? data.RelativeDateUnit.CalendarMonth : data.RelativeDateUnit.Month;

                  case 3:
                    return isCalendarPeriod ? data.RelativeDateUnit.CalendarYear : data.RelativeDateUnit.Year;

                  default:
                    return;
                }
            }
            function extractParametersFromSemanticFilter(filter) {
                if (filter) {
                    var conditions = filter.conditions();
                    if (conditions && 1 === conditions.length) return extractParametersFromCondition(conditions[0]);
                }
            }
            function extractParametersFromCondition(condition) {
                var visitor = new RelativeDateFilterExtractor();
                if (visitor.tryExtractParametersFrom(condition)) return {
                    field: visitor.field,
                    options: visitor.options
                };
            }
            RelativeDateFilterPattern.buildSemanticFilter = buildSemanticFilter, RelativeDateFilterPattern.buildFilterCondition = buildFilterCondition, 
            RelativeDateFilterPattern.toSemantiQueryTimeUnit = toSemantiQueryTimeUnit, RelativeDateFilterPattern.isCalendarPeriod = isCalendarPeriod, 
            RelativeDateFilterPattern.toRelativeDateUnit = toRelativeDateUnit, RelativeDateFilterPattern.extractParametersFromSemanticFilter = extractParametersFromSemanticFilter, 
            RelativeDateFilterPattern.extractParametersFromCondition = extractParametersFromCondition;
            var RelativeDateFilterExtractor = (function() {
                function RelativeDateFilterExtractor() {}
                return RelativeDateFilterExtractor.prototype.tryExtractParametersFrom = function(condition) {
                    return this.tryExtractCurrent(condition) || this.tryExtractLastOrNext(condition);
                }, RelativeDateFilterExtractor.prototype.tryExtractCurrent = function(condition) {
                    if (data.SQExpr.isCompare(condition)) {
                        var comparison = condition;
                        if (data.SQExpr.isColumn(comparison.left) && (this.field = comparison.left, data.SQExpr.isDateSpan(comparison.right))) {
                            var dateSpan = comparison.right, unit = toRelativeDateUnit(dateSpan.unit, !1);
                            if (void 0 !== unit && data.SQExpr.isNow(dateSpan.arg) && (this.options = {
                                duration: 1,
                                includeToday: !0,
                                relativeQualifier: data.RelativeDateQualifier.Current,
                                relativeUnit: toRelativeDateUnit(dateSpan.unit, !1)
                            }, this.validateOptions(condition))) return !0;
                        }
                    }
                    return !1;
                }, RelativeDateFilterExtractor.prototype.tryExtractLastOrNext = function(condition) {
                    if (data.SQExpr.isBetween(condition)) {
                        var between = condition;
                        if (data.SQExpr.isColumn(between.arg) && (this.field = between.arg, data.SQExpr.isDateSpan(between.upper) && data.SQExpr.isDateSpan(between.lower))) {
                            if (this.options = this.getOptionsFromDateSpan(between.lower, data.RelativeDateQualifier.Last), 
                            this.validateOptions(condition)) return !0;
                            if (this.options = this.getOptionsFromDateSpan(between.upper, data.RelativeDateQualifier.Next), 
                            this.validateOptions(condition)) return !0;
                        }
                    }
                    return !1;
                }, RelativeDateFilterExtractor.prototype.getOptionsFromDateSpan = function(expr, relativeQualifier) {
                    if (data.SQExpr.isDateSpan(expr)) {
                        var dateSpan = expr;
                        return this.getOptionsFromDateAdd(dateSpan.arg, dateSpan.unit, relativeQualifier);
                    }
                }, RelativeDateFilterExtractor.prototype.getOptionsFromDateAdd = function(expr, dateSpanTimeUnit, relativeQualifier) {
                    if (data.SQExpr.isDateAdd(expr)) {
                        var dateAdd = expr, isCalendar = dateSpanTimeUnit === dateAdd.unit && 0 !== dateSpanTimeUnit, includeToday = !!isCalendar || this.getIncludeToday(dateAdd.arg);
                        switch (relativeQualifier) {
                          case data.RelativeDateQualifier.Last:
                            if (dateAdd.amount < 0) return {
                                duration: -dateAdd.amount,
                                includeToday: includeToday,
                                relativeQualifier: relativeQualifier,
                                relativeUnit: toRelativeDateUnit(dateAdd.unit, isCalendar)
                            };
                            break;

                          case data.RelativeDateQualifier.Next:
                            if (dateAdd.amount > 0) return {
                                duration: dateAdd.amount,
                                includeToday: includeToday,
                                relativeQualifier: relativeQualifier,
                                relativeUnit: toRelativeDateUnit(dateAdd.unit, isCalendar)
                            };
                        }
                    }
                }, RelativeDateFilterExtractor.prototype.getIncludeToday = function(expr) {
                    if (data.SQExpr.isDateAdd(expr)) {
                        var dateAdd = expr;
                        return data.SQExpr.isNow(dateAdd.arg);
                    }
                    return !1;
                }, RelativeDateFilterExtractor.prototype.validateOptions = function(condition) {
                    if (!this.field || !this.options) return !1;
                    var params = {
                        field: this.field,
                        options: this.options
                    };
                    return data.SQExpr.equals(condition, buildFilterCondition(params)) || this.options.relativeUnit === data.RelativeDateUnit.Day && !this.options.includeToday && data.SQExpr.equals(condition, buildFilterCondition(params, !0));
                }, RelativeDateFilterExtractor;
            })();
        })(RelativeDateFilterPattern = data.RelativeDateFilterPattern || (data.RelativeDateFilterPattern = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var ScopeIdentityExtractor, ArrayExtensions = jsCommon.ArrayExtensions;
        !(function(ScopeIdentityExtractor) {
            function getKeys(expr) {
                var extractor = new ScopeIdKeysAndValuesExtractorImpl();
                return expr.accept(extractor), extractor.malformed ? null : ArrayExtensions.emptyToNull(extractor.keys);
            }
            function getValues(expr) {
                var extractor = new ScopeIdKeysAndValuesExtractorImpl();
                return expr.accept(extractor), extractor.malformed ? null : ArrayExtensions.emptyToNull(extractor.values);
            }
            function getKeyValuePairs(expr) {
                var extractor = new ScopeIdKeysAndValuesExtractorImpl();
                return expr.accept(extractor), extractor.malformed ? null : ArrayExtensions.emptyToNull(extractor.pairs);
            }
            function getInExpr(expr) {
                if (data.SQExpr.isIn(expr)) return expr;
                var extractor = new ScopeIdKeysAndValuesExtractorImpl();
                if (expr.accept(extractor), !extractor.malformed) {
                    var keys = ArrayExtensions.emptyToNull(extractor.keys), keyValues = ArrayExtensions.emptyToNull(extractor.values);
                    return keys && keyValues ? data.SQExprBuilder.inValues(keys, [ keyValues ]) : void 0;
                }
            }
            function getSubset(expr, subsetFieldExprs) {
                var extractor = new ScopeIdSubsetExtractorImpl(subsetFieldExprs);
                return expr.accept(extractor), extractor.getResult();
            }
            ScopeIdentityExtractor.getKeys = getKeys, ScopeIdentityExtractor.getValues = getValues, 
            ScopeIdentityExtractor.getKeyValuePairs = getKeyValuePairs, ScopeIdentityExtractor.getInExpr = getInExpr, 
            ScopeIdentityExtractor.getSubset = getSubset;
            var ScopeIdKeysAndValuesExtractorImpl = (function(_super) {
                function ScopeIdKeysAndValuesExtractorImpl() {
                    var _this = null !== _super && _super.apply(this, arguments) || this;
                    return _this.keys = [], _this.values = [], _this.pairs = [], _this;
                }
                return __extends(ScopeIdKeysAndValuesExtractorImpl, _super), ScopeIdKeysAndValuesExtractorImpl.prototype.visitAnd = function(expr) {
                    expr.left.accept(this), expr.right.accept(this);
                }, ScopeIdKeysAndValuesExtractorImpl.prototype.visitCompare = function(expr) {
                    return 0 !== expr.comparison ? void this.visitDefault(expr) : (this.pairs.push(expr), 
                    expr.left.accept(this), void expr.right.accept(this));
                }, ScopeIdKeysAndValuesExtractorImpl.prototype.visitColumnRef = function(expr) {
                    this.keys.push(expr);
                }, ScopeIdKeysAndValuesExtractorImpl.prototype.visitGroupRef = function(expr) {
                    this.keys.push(expr);
                }, ScopeIdKeysAndValuesExtractorImpl.prototype.visitHierarchyLevel = function(expr) {
                    this.keys.push(expr);
                }, ScopeIdKeysAndValuesExtractorImpl.prototype.visitConstant = function(expr) {
                    this.values.push(expr);
                }, ScopeIdKeysAndValuesExtractorImpl.prototype.visitArithmetic = function(expr) {
                    this.keys.push(expr);
                }, ScopeIdKeysAndValuesExtractorImpl.prototype.visitDefault = function(expr) {
                    this.malformed = !0;
                }, ScopeIdKeysAndValuesExtractorImpl;
            })(data.DefaultSQExprVisitor), ScopeIdSubsetExtractorImpl = (function(_super) {
                function ScopeIdSubsetExtractorImpl(identityFieldExprs) {
                    var _this = _super.call(this) || this;
                    return _this.identityFieldExprs = identityFieldExprs, _this.identityComparisonExprs = [], 
                    _this.identityComparisonExprCount = 0, _this;
                }
                return __extends(ScopeIdSubsetExtractorImpl, _super), ScopeIdSubsetExtractorImpl.prototype.getResult = function() {
                    if (!this.malformed && this.identityComparisonExprCount === this.identityFieldExprs.length) {
                        for (var result, _i = 0, _a = this.identityComparisonExprs; _i < _a.length; _i++) {
                            var identityComparisonExpr = _a[_i];
                            result = result ? data.SQExprBuilder.and(result, identityComparisonExpr) : identityComparisonExpr;
                        }
                        return result;
                    }
                }, ScopeIdSubsetExtractorImpl.prototype.visitAnd = function(expr) {
                    expr.left.accept(this), expr.right.accept(this);
                }, ScopeIdSubsetExtractorImpl.prototype.visitCompare = function(expr) {
                    if (0 !== expr.comparison) return void this.visitDefault(expr);
                    var matchingFieldExprIndex = _.findIndex(this.identityFieldExprs, (function(fieldExpr) {
                        return data.SQExpr.equals(expr.left, fieldExpr);
                    }));
                    matchingFieldExprIndex >= 0 && !this.identityComparisonExprs[matchingFieldExprIndex] && (this.identityComparisonExprs[matchingFieldExprIndex] = expr, 
                    this.identityComparisonExprCount++);
                }, ScopeIdSubsetExtractorImpl.prototype.visitDefault = function(expr) {
                    this.malformed = !0;
                }, ScopeIdSubsetExtractorImpl;
            })(data.DefaultSQExprVisitor);
        })(ScopeIdentityExtractor = data.ScopeIdentityExtractor || (data.ScopeIdentityExtractor = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var TopNFilterPattern;
        !(function(TopNFilterPattern) {
            function extractParametersFromFilter(filter, from) {
                if (filter) {
                    if (filter instanceof data.SemanticFilter) {
                        var conditions = filter.conditions();
                        return extractParametersFromCondition(filter.from(), conditions[0]);
                    }
                    return extractParametersFromCondition(from, filter.condition);
                }
            }
            function buildFilterFromParameters(parameters) {
                var subquery = buildSubquery(parameters), subquerySource = new data.SQFromSubquerySource(subquery), from = new data.SQFrom(), addSubquerySourceResult = from.ensureSource(subquerySource, "subquery"), condition = data.SQExprBuilder.inTable([ parameters.fieldBeingFiltered ], data.SQExprBuilder.subqueryRef(addSubquerySourceResult.name));
                return data.SemanticFilter.fromSQFromAndSQExpr(from, condition);
            }
            function extractParametersFromCondition(from, condition) {
                var conditionVisitor = new TopNFilterConditionVisitor();
                if (conditionVisitor.visitCondition(condition)) {
                    var sources = from.sources(), source = sources && sources[conditionVisitor.subqueryName];
                    if (source && data.isSQFromSubquerySource(source)) {
                        var orderBy = source.subquery.orderBy();
                        if (!orderBy || 1 !== orderBy.length) return;
                        var sortDefinition = orderBy[0], orderByExpr = TopNOrderByExtractor.run(sortDefinition);
                        if (!orderByExpr) return;
                        return {
                            fieldBeingFiltered: conditionVisitor.fieldBeingFiltered,
                            isTop: 2 === sortDefinition.direction,
                            itemCount: source.subquery.top(),
                            orderByField: orderByExpr
                        };
                    }
                }
            }
            function buildSubquery(parameters) {
                var from = new data.SQFrom(), fieldBeingFiltered = data.SQExprRewriterWithSourceRenames.rewrite(parameters.fieldBeingFiltered, null, from), orderByExpr = data.SQExprRewriterWithSourceRenames.rewrite(parameters.orderByField, null, from), direction = parameters.isTop ? 2 : 1, query = data.SemanticQuery.createWith({
                    from: from,
                    orderBy: [ {
                        expr: orderByExpr,
                        direction: direction
                    } ],
                    select: [ {
                        name: "field",
                        expr: fieldBeingFiltered
                    } ],
                    top: parameters.itemCount
                });
                return query;
            }
            TopNFilterPattern.extractParametersFromFilter = extractParametersFromFilter, TopNFilterPattern.buildFilterFromParameters = buildFilterFromParameters, 
            TopNFilterPattern.extractParametersFromCondition = extractParametersFromCondition;
        })(TopNFilterPattern = data.TopNFilterPattern || (data.TopNFilterPattern = {}));
        var TopNOrderByExtractor, TopNFilterConditionVisitor = (function(_super) {
            function TopNFilterConditionVisitor() {
                var _this = _super.call(this) || this;
                return _this.fieldBeingFiltered = null, _this.subqueryName = null, _this;
            }
            return __extends(TopNFilterConditionVisitor, _super), TopNFilterConditionVisitor.prototype.visitCondition = function(condition) {
                return condition.accept(this, 0);
            }, TopNFilterConditionVisitor.prototype.visitIn = function(expr, position) {
                return 0 === position && (!(!expr.args || 1 !== expr.args.length || !expr.args[0].accept(this, 1)) && !(!expr.table || !expr.table.accept(this, 2)));
            }, TopNFilterConditionVisitor.prototype.visitColumnRef = function(expr, position) {
                return 1 === position && (this.fieldBeingFiltered = expr, !0);
            }, TopNFilterConditionVisitor.prototype.visitHierarchyLevel = function(expr, position) {
                return 1 === position && (this.fieldBeingFiltered = expr, !0);
            }, TopNFilterConditionVisitor.prototype.visitGroupRef = function(expr, position) {
                return 1 === position && (this.fieldBeingFiltered = expr, !0);
            }, TopNFilterConditionVisitor.prototype.visitSubqueryRef = function(expr, position) {
                return 2 === position && (this.subqueryName = expr.variable, !0);
            }, TopNFilterConditionVisitor;
        })(data.DefaultSQExprVisitorWithArg);
        !(function(TopNOrderByExtractor) {
            function run(sortDefinition) {
                var visitor = new TopNSubqueryOrderByVisitor();
                if (visitor.visitOrderBy(sortDefinition.expr)) return visitor.orderByField;
            }
            TopNOrderByExtractor.run = run;
            var TopNSubqueryOrderByVisitor = (function(_super) {
                function TopNSubqueryOrderByVisitor() {
                    var _this = _super.call(this) || this;
                    return _this.orderByField = null, _this;
                }
                return __extends(TopNSubqueryOrderByVisitor, _super), TopNSubqueryOrderByVisitor.prototype.visitOrderBy = function(orderBy) {
                    return orderBy.accept(this, 0);
                }, TopNSubqueryOrderByVisitor.prototype.visitAggr = function(expr, position) {
                    return 0 === position && (this.orderByField = expr, !0);
                }, TopNSubqueryOrderByVisitor.prototype.visitMeasureRef = function(expr, position) {
                    return 0 === position && (this.orderByField = expr, !0);
                }, TopNSubqueryOrderByVisitor;
            })(data.DefaultSQExprVisitorWithArg);
        })(TopNOrderByExtractor || (TopNOrderByExtractor = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var TopNFilterPruner;
        !(function(TopNFilterPruner) {
            function removeUnnecessaryTopNFilters(filterPossiblyWithTopN, selectorFilter) {
                if (!selectorFilter || !filterPossiblyWithTopN) return filterPossiblyWithTopN;
                var conditions = selectorFilter.conditions();
                if (!conditions || 1 !== conditions.length) return filterPossiblyWithTopN;
                var selectorConditionVisitor = new SelectorConditionVisitor();
                if (!selectorConditionVisitor.visitCondition(conditions[0])) return filterPossiblyWithTopN;
                for (var prunedWhereClause, selectedFields = selectorConditionVisitor.fieldsBeingFiltered, topNFromClause = filterPossiblyWithTopN.from(), topNWhereClause = filterPossiblyWithTopN.where(), _loop_8 = function(i, count) {
                    var potentialTopNFilter = topNWhereClause[i], parameters = data.TopNFilterPattern.extractParametersFromFilter(potentialTopNFilter, topNFromClause);
                    parameters && _.find(selectedFields, (function(field) {
                        return data.SQExpr.equals(parameters.fieldBeingFiltered, field);
                    })) ? prunedWhereClause || (prunedWhereClause = _.take(topNWhereClause, i)) : prunedWhereClause && prunedWhereClause.push(potentialTopNFilter);
                }, i = 0, count = topNWhereClause.length; i < count; i++) _loop_8(i, count);
                return prunedWhereClause ? data.SemanticFilter.fromSQFromAndSQFilters(topNFromClause, prunedWhereClause) : filterPossiblyWithTopN;
            }
            TopNFilterPruner.removeUnnecessaryTopNFilters = removeUnnecessaryTopNFilters;
        })(TopNFilterPruner = data.TopNFilterPruner || (data.TopNFilterPruner = {}));
        var SelectorConditionVisitor = (function(_super) {
            function SelectorConditionVisitor() {
                var _this = _super.call(this) || this;
                return _this.fieldsBeingFiltered = [], _this;
            }
            return __extends(SelectorConditionVisitor, _super), SelectorConditionVisitor.prototype.visitCondition = function(condition) {
                return condition.accept(this, 0);
            }, SelectorConditionVisitor.prototype.visitIn = function(expr, position) {
                if (0 !== position) return !1;
                if (!expr.args) return !1;
                for (var _i = 0, _a = expr.args; _i < _a.length; _i++) {
                    var arg = _a[_i];
                    if (!arg.accept(this, 1)) return !1;
                }
                return !!expr.values && !expr.table;
            }, SelectorConditionVisitor.prototype.visitColumnRef = function(expr, position) {
                return 1 === position && (this.fieldsBeingFiltered.push(expr), !0);
            }, SelectorConditionVisitor;
        })(data.DefaultSQExprVisitorWithArg);
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SubqueryRewriter;
        !(function(SubqueryRewriter) {
            function makeSubqueriesLowerPrecedenceThanColumnFilters(semanticFilter) {
                var columnFilters = _.filter(semanticFilter.where(), (function(filter) {
                    return 0 === data.FilterKindDetector.run(filter.condition);
                }));
                if (_.isEmpty(columnFilters)) return semanticFilter;
                var origFrom = semanticFilter.from(), rewrittenFrom = EnsureFiltersInSubqueryRewriter.ensureFiltersInSubqueries(origFrom, columnFilters, origFrom);
                return origFrom === rewrittenFrom ? semanticFilter : data.SemanticFilter.fromSQFromAndSQFilters(rewrittenFrom, semanticFilter.where());
            }
            function makeSubqueriesLowerPrecedenceThanSpecificFilters(lowerPrecedenceFilter, higherPrecedenceFilters) {
                for (var lowerPrecedenceFrom = lowerPrecedenceFilter.from(), rewrittenLowerPrecedenceFrom = lowerPrecedenceFrom, _i = 0, higherPrecedenceFilters_1 = higherPrecedenceFilters; _i < higherPrecedenceFilters_1.length; _i++) {
                    var higherPrecedenceFilter = higherPrecedenceFilters_1[_i];
                    rewrittenLowerPrecedenceFrom = EnsureFiltersInSubqueryRewriter.ensureFiltersInSubqueries(rewrittenLowerPrecedenceFrom, higherPrecedenceFilter.where(), higherPrecedenceFilter.from());
                }
                return lowerPrecedenceFrom === rewrittenLowerPrecedenceFrom ? lowerPrecedenceFilter : data.SemanticFilter.fromSQFromAndSQFilters(rewrittenLowerPrecedenceFrom, lowerPrecedenceFilter.where());
            }
            function rewriteSubqueriesForContainingQuery(semanticFilter, visualSemanticQuery) {
                var eligibleProjections = _.filter(_.map(visualSemanticQuery.select(), (function(select) {
                    return select.expr;
                })), (function(expr) {
                    return !data.SQExprUtils.isMeasure(expr);
                }));
                if (_.isEmpty(eligibleProjections)) return semanticFilter;
                var filters = _.map(eligibleProjections, (function(projection) {
                    return {
                        condition: data.SQExprBuilder.equal(projection, data.SQExprBuilder.anyValue(!0))
                    };
                })), origFrom = semanticFilter.from(), rewrittenFrom = EnsureFiltersInSubqueryRewriter.ensureFiltersInSubqueries(origFrom, filters, origFrom);
                return origFrom === rewrittenFrom ? semanticFilter : data.SemanticFilter.fromSQFromAndSQFilters(rewrittenFrom, semanticFilter.where());
            }
            SubqueryRewriter.makeSubqueriesLowerPrecedenceThanColumnFilters = makeSubqueriesLowerPrecedenceThanColumnFilters, 
            SubqueryRewriter.makeSubqueriesLowerPrecedenceThanSpecificFilters = makeSubqueriesLowerPrecedenceThanSpecificFilters, 
            SubqueryRewriter.rewriteSubqueriesForContainingQuery = rewriteSubqueriesForContainingQuery;
        })(SubqueryRewriter = data.SubqueryRewriter || (data.SubqueryRewriter = {}));
        var EnsureFiltersInSubqueryRewriter = (function() {
            function EnsureFiltersInSubqueryRewriter(filtersToEnsure, filtersToEnsureFrom) {
                this.filtersToEnsure = filtersToEnsure, this.filtersToEnsureFrom = filtersToEnsureFrom, 
                this.modifiedSubquery = !1;
            }
            return EnsureFiltersInSubqueryRewriter.ensureFiltersInSubqueries = function(from, filtersToEnsure, filtersToEnsureFrom) {
                var rewriter = new EnsureFiltersInSubqueryRewriter(filtersToEnsure, filtersToEnsureFrom), rewrittenFrom = data.SemanticQueryRewriter.rewriteFrom(from, rewriter);
                return rewrittenFrom;
            }, EnsureFiltersInSubqueryRewriter.prototype.visitEntity = function(source, key) {
                return source;
            }, EnsureFiltersInSubqueryRewriter.prototype.visitSubquery = function(currentSubquery, key) {
                for (var currentWhere = currentSubquery.subquery.where(), filtersToAdd = [], _loop_9 = function(filterToEnsure) {
                    _.find(currentWhere, (function(existingFilter) {
                        return data.SQFilter.equals(filterToEnsure, existingFilter);
                    })) || filtersToAdd.push(filterToEnsure);
                }, _i = 0, _a = this.filtersToEnsure; _i < _a.length; _i++) {
                    var filterToEnsure = _a[_i];
                    _loop_9(filterToEnsure);
                }
                return 0 === filtersToAdd.length ? currentSubquery : (this.modifiedSubquery = !0, 
                new data.SQFromSubquerySource(currentSubquery.subquery.addWhere(filtersToAdd, this.filtersToEnsureFrom)));
            }, EnsureFiltersInSubqueryRewriter.prototype.visitExpr = function(source, key) {
                return source;
            }, EnsureFiltersInSubqueryRewriter;
        })();
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var PrimitiveValueEncoding;
        !(function(PrimitiveValueEncoding) {
            function decimal(value) {
                return value + "M";
            }
            function double(value) {
                return value + "D";
            }
            function integer(value) {
                return value + "L";
            }
            function dateTime(value) {
                var date = new Date(value.getTime() - 6e4 * value.getTimezoneOffset()), dateTimeString = date.toISOString();
                return _.endsWith(dateTimeString, "Z") && (dateTimeString = dateTimeString.substr(0, dateTimeString.length - 1)), 
                "datetime'" + dateTimeString + "'";
            }
            function text(value) {
                return "'" + value.replace(SingleQuoteRegex, "''") + "'";
            }
            function nullEncoding() {
                return "null";
            }
            function boolean(value) {
                return value ? "true" : "false";
            }
            var SingleQuoteRegex = /'/g;
            PrimitiveValueEncoding.decimal = decimal, PrimitiveValueEncoding.double = double, 
            PrimitiveValueEncoding.integer = integer, PrimitiveValueEncoding.dateTime = dateTime, 
            PrimitiveValueEncoding.text = text, PrimitiveValueEncoding.nullEncoding = nullEncoding, 
            PrimitiveValueEncoding.boolean = boolean;
        })(PrimitiveValueEncoding = data.PrimitiveValueEncoding || (data.PrimitiveValueEncoding = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function createSQAggregationOperations() {
            return new SQAggregationOperations();
        }
        function getMetadataForUnderlyingType(expr, schema) {
            var metadata = data.SQExprBuilder.removeAggregate(expr).getMetadata(schema);
            return metadata || (metadata = expr.getMetadata(schema)), metadata;
        }
        function capabilities(expr, schema) {
            var fieldExpr = data.SQExprConverter.asFieldPattern(expr), fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr), currentSchema = schema.schema(fieldExprItem.schema);
            return currentSchema.capabilities;
        }
        function defaultAggregateToQueryAggregateFunction(aggregate) {
            switch (aggregate) {
              case 6:
                return 1;

              case 3:
                return 5;

              case 7:
                return 2;

              case 5:
                return 4;

              case 4:
                return 3;

              case 2:
                return 0;
            }
        }
        data.createSQAggregationOperations = createSQAggregationOperations;
        var SQAggregationOperations = (function() {
            function SQAggregationOperations() {}
            return SQAggregationOperations.prototype.getSupportedAggregates = function(expr, schema, targetTypes) {
                var metadata = getMetadataForUnderlyingType(expr, schema);
                if (!metadata) return [];
                var valueType = metadata.type, fieldKind = metadata.kind, isPropertyIdentity = metadata.idOnEntityKey;
                if (!valueType) return [];
                if (1 === fieldKind) return [];
                if (valueType.numeric || valueType.integer) {
                    var aggregates_1 = [ 0, 1, 3, 4, 2, 5, 7, 8 ];
                    return capabilities(expr, schema).supportsMedian && aggregates_1.push(6), aggregates_1;
                }
                var aggregates = [];
                (valueType.dateTime || valueType.text && capabilities(expr, schema).supportsStringMinMax) && (_.isEmpty(targetTypes) || powerbi.ValueType.isCompatibleTo(valueType, targetTypes)) && (aggregates.push(3), 
                aggregates.push(4));
                var distinctCountAggExists = 2 === data.SQExprInfo.getAggregate(expr);
                return isPropertyIdentity && !distinctCountAggExists || aggregates.push(2), aggregates.push(5), 
                aggregates;
            }, SQAggregationOperations.prototype.isSupportedAggregate = function(expr, schema, aggregate, targetTypes) {
                var supportedAggregates = this.getSupportedAggregates(expr, schema, targetTypes);
                return _.contains(supportedAggregates, aggregate);
            }, SQAggregationOperations.prototype.createExprWithAggregate = function(expr, schema, aggregateNonNumericFields, targetTypes, preferredAggregate) {
                var aggregate;
                return aggregate = null != preferredAggregate && this.isSupportedAggregate(expr, schema, preferredAggregate, targetTypes) ? preferredAggregate : this.defaultAggregate(expr, schema, aggregateNonNumericFields, targetTypes), 
                void 0 !== aggregate && (expr = data.SQExprBuilder.aggregate(expr, aggregate)), 
                expr;
            }, SQAggregationOperations.prototype.defaultAggregate = function(expr, schema, forceAggregation, targetTypes) {
                void 0 === forceAggregation && (forceAggregation = !1);
                var property = expr.getConceptualProperty(schema, !0);
                if (property) {
                    var aggregate;
                    if (property && 0 === property.kind) {
                        var propertyDefaultAggregate = property.column ? property.column.defaultAggregate : null, type = property.type;
                        if ((type.integer || type.numeric) && 1 !== propertyDefaultAggregate) aggregate = defaultAggregateToQueryAggregateFunction(propertyDefaultAggregate), 
                        void 0 === aggregate && (aggregate = 0); else if (forceAggregation && (type.dateTime || type.text && capabilities(expr, schema).supportsStringMinMax) && (_.isEmpty(targetTypes) || powerbi.ValueType.isCompatibleTo(type, targetTypes))) return 3;
                        void 0 === aggregate && forceAggregation && (aggregate = 5);
                    }
                    return aggregate;
                }
            }, SQAggregationOperations;
        })();
        data.defaultAggregateToQueryAggregateFunction = defaultAggregateToQueryAggregateFunction;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SQHierarchyExprUtils;
        !(function(SQHierarchyExprUtils) {
            function getConceptualHierarchyLevelFromExpr(conceptualSchema, fieldExpr) {
                var hierarchyLevel = getHierarchyLevel(fieldExpr);
                if (hierarchyLevel) return SQHierarchyExprUtils.getConceptualHierarchyLevel(conceptualSchema, hierarchyLevel.schema, hierarchyLevel.entity, hierarchyLevel.name, hierarchyLevel.level);
            }
            function getConceptualHierarchyLevel(conceptualSchema, schemaName, entity, hierarchy, hierarchyLevel) {
                var schema = conceptualSchema.schema(schemaName), conceptualHierarchy = schema.findHierarchy(entity, hierarchy);
                if (conceptualHierarchy) return conceptualHierarchy.levels.withName(hierarchyLevel);
            }
            function getConceptualHierarchy(sqExpr, federatedSchema) {
                if (sqExpr instanceof data.SQHierarchyExpr) {
                    var hierarchy = sqExpr;
                    if (sqExpr.arg instanceof data.SQEntityExpr) {
                        var entityExpr = sqExpr.arg;
                        return federatedSchema.schema(entityExpr.schema).findHierarchy(entityExpr.entity, hierarchy.hierarchy);
                    }
                    if (sqExpr.arg instanceof data.SQPropertyVariationSourceExpr) {
                        var variationExpr = sqExpr.arg, sourceEntityExpr = variationExpr.arg;
                        return federatedSchema.schema(sourceEntityExpr.schema).findHierarchyByVariation(sourceEntityExpr.entity, variationExpr.property, variationExpr.name, hierarchy.hierarchy);
                    }
                }
            }
            function expandExpr(schema, expr, suppressHierarchyLevelExpansion) {
                return SQExprHierarchyToHierarchyLevelConverter.convert(expr, schema) || SQExprVariationConverter.expand(expr, schema) || !suppressHierarchyLevelExpansion && SQExprHierarchyLevelConverter.expand(expr, schema) || expr;
            }
            function isHierarchyOrVariation(schema, expr) {
                if (expr instanceof data.SQHierarchyExpr || expr instanceof data.SQHierarchyLevelExpr) return !0;
                var conceptualProperty = expr.getConceptualProperty(schema);
                if (conceptualProperty) {
                    var column = conceptualProperty.column;
                    if (column && column.variations && column.variations.length > 0) return !0;
                }
                return !1;
            }
            function getSourceVariationExpr(hierarchyLevelExpr) {
                var fieldExprPattern = data.SQExprConverter.asFieldPattern(hierarchyLevelExpr);
                if (fieldExprPattern.columnHierarchyLevelVariation) {
                    var entity = data.SQExprBuilder.entity(fieldExprPattern.columnHierarchyLevelVariation.source.schema, fieldExprPattern.columnHierarchyLevelVariation.source.entity);
                    return data.SQExprBuilder.columnRef(entity, fieldExprPattern.columnHierarchyLevelVariation.source.name);
                }
            }
            function getSourceHierarchy(hierarchyLevelExpr) {
                var fieldExprPattern = data.SQExprConverter.asFieldPattern(hierarchyLevelExpr), hierarchyLevel = fieldExprPattern.hierarchyLevel;
                if (hierarchyLevel) {
                    var entity = data.SQExprBuilder.entity(hierarchyLevel.schema, hierarchyLevel.entity, hierarchyLevel.entityVar);
                    return data.SQExprBuilder.hierarchy(entity, hierarchyLevel.name);
                }
            }
            function getHierarchySourceAsVariationSource(hierarchyLevelExpr) {
                if (hierarchyLevelExpr.arg instanceof data.SQHierarchyExpr) {
                    var hierarchyRef = hierarchyLevelExpr.arg;
                    return hierarchyRef.arg instanceof data.SQPropertyVariationSourceExpr ? hierarchyRef.arg : void 0;
                }
            }
            function areHierarchyLevelsOrdered(allLevels, firstExpr, secondExpr) {
                if (!(firstExpr instanceof data.SQHierarchyLevelExpr && secondExpr instanceof data.SQHierarchyLevelExpr)) return !1;
                var firstLevel = firstExpr, secondLevel = secondExpr;
                if (!data.SQExpr.equals(firstLevel.arg, secondLevel.arg)) return !1;
                var firstIndex = data.SQExprUtils.indexOfExpr(allLevels, firstLevel), secondIndex = data.SQExprUtils.indexOfExpr(allLevels, secondLevel);
                return firstIndex !== -1 && secondIndex !== -1 && firstIndex < secondIndex;
            }
            function getInsertionIndex(allLevels, orderedSubsetOfLevels, expr) {
                for (var insertIndex = 0; insertIndex < orderedSubsetOfLevels.length && areHierarchyLevelsOrdered(allLevels, orderedSubsetOfLevels[insertIndex], expr); ) insertIndex++;
                return insertIndex;
            }
            function getHierarchyLevel(fieldExpr) {
                return fieldExpr.hierarchyLevel || fieldExpr.hierarchyLevelAggr || fieldExpr.columnHierarchyLevelVariation && fieldExpr.columnHierarchyLevelVariation.level;
            }
            SQHierarchyExprUtils.getConceptualHierarchyLevelFromExpr = getConceptualHierarchyLevelFromExpr, 
            SQHierarchyExprUtils.getConceptualHierarchyLevel = getConceptualHierarchyLevel, 
            SQHierarchyExprUtils.getConceptualHierarchy = getConceptualHierarchy, SQHierarchyExprUtils.expandExpr = expandExpr, 
            SQHierarchyExprUtils.isHierarchyOrVariation = isHierarchyOrVariation, SQHierarchyExprUtils.getSourceVariationExpr = getSourceVariationExpr, 
            SQHierarchyExprUtils.getSourceHierarchy = getSourceHierarchy, SQHierarchyExprUtils.getHierarchySourceAsVariationSource = getHierarchySourceAsVariationSource, 
            SQHierarchyExprUtils.areHierarchyLevelsOrdered = areHierarchyLevelsOrdered, SQHierarchyExprUtils.getInsertionIndex = getInsertionIndex;
        })(SQHierarchyExprUtils = data.SQHierarchyExprUtils || (data.SQHierarchyExprUtils = {}));
        var SQExprHierarchyToHierarchyLevelConverter;
        !(function(SQExprHierarchyToHierarchyLevelConverter) {
            function convert(sqExpr, federatedSchema) {
                if (sqExpr instanceof data.SQHierarchyExpr) {
                    var hierarchyExpr = sqExpr, conceptualHierarchy = SQHierarchyExprUtils.getConceptualHierarchy(hierarchyExpr, federatedSchema);
                    if (conceptualHierarchy) return _.map(conceptualHierarchy.levels, (function(hierarchyLevel) {
                        return data.SQExprBuilder.hierarchyLevel(sqExpr, hierarchyLevel.name);
                    }));
                }
            }
            SQExprHierarchyToHierarchyLevelConverter.convert = convert;
        })(SQExprHierarchyToHierarchyLevelConverter = data.SQExprHierarchyToHierarchyLevelConverter || (data.SQExprHierarchyToHierarchyLevelConverter = {}));
        var SQExprHierarchyLevelConverter;
        !(function(SQExprHierarchyLevelConverter) {
            function expand(expr, schema) {
                var exprs = [];
                if (expr instanceof data.SQHierarchyLevelExpr) {
                    var fieldExpr = data.SQExprConverter.asFieldPattern(expr);
                    if (fieldExpr.hierarchyLevel) {
                        var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr), hierarchy = schema.schema(fieldExprItem.schema).findHierarchy(fieldExprItem.entity, fieldExpr.hierarchyLevel.name);
                        if (hierarchy) for (var hierarchyLevels = hierarchy.levels, _i = 0, hierarchyLevels_2 = hierarchyLevels; _i < hierarchyLevels_2.length; _i++) {
                            var hierarchyLevel = hierarchyLevels_2[_i];
                            if (hierarchyLevel.name === fieldExpr.hierarchyLevel.level) {
                                exprs.push(expr);
                                break;
                            }
                            exprs.push(data.SQExprBuilder.hierarchyLevel(data.SQExprBuilder.hierarchy(data.SQExprBuilder.entity(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.entityVar), hierarchy.name), hierarchyLevel.name));
                        }
                    }
                }
                if (!_.isEmpty(exprs)) return exprs;
            }
            SQExprHierarchyLevelConverter.expand = expand;
        })(SQExprHierarchyLevelConverter || (SQExprHierarchyLevelConverter = {}));
        var SQExprVariationConverter;
        !(function(SQExprVariationConverter) {
            function expand(expr, schema) {
                var exprs, conceptualProperty = expr.getConceptualProperty(schema);
                if (conceptualProperty) {
                    var column = conceptualProperty.column;
                    if (column && column.variations && column.variations.length > 0) {
                        var variations = column.variations, variation = variations[0], fieldExpr = data.SQExprConverter.asFieldPattern(expr), fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);
                        if (exprs = [], variation.defaultHierarchy) for (var hierarchyExpr = data.SQExprBuilder.hierarchy(data.SQExprBuilder.propertyVariationSource(data.SQExprBuilder.entity(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.entityVar), variation.name, conceptualProperty.name), variation.defaultHierarchy.name), _i = 0, _a = variation.defaultHierarchy.levels; _i < _a.length; _i++) {
                            var level = _a[_i];
                            exprs.push(data.SQExprBuilder.hierarchyLevel(hierarchyExpr, level.name));
                        }
                    }
                }
                return exprs;
            }
            SQExprVariationConverter.expand = expand;
        })(SQExprVariationConverter || (SQExprVariationConverter = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SQExprGroupUtils;
        !(function(SQExprGroupUtils) {
            function groupExprs(schema, exprs) {
                for (var groups = [], i = 0, len = exprs.length; i < len; i++) {
                    var expr = exprs[i];
                    expr instanceof data.SQHierarchyLevelExpr ? addChildToGroup(schema, groups, expr, i) : groups.push({
                        expr: expr,
                        children: null,
                        selectQueryIndex: i
                    });
                }
                return groups;
            }
            function addChildToGroup(schema, groups, expr, selectQueryIndex) {
                var shouldAddExpressionToNewGroup = !0, exprSource = data.SQHierarchyExprUtils.getSourceVariationExpr(expr) || data.SQHierarchyExprUtils.getSourceHierarchy(expr), lastGroup = _.last(groups);
                if (lastGroup && lastGroup.children && data.SQExpr.equals(lastGroup.expr, exprSource)) {
                    var expandedExpr = data.SQHierarchyExprUtils.expandExpr(schema, expr.arg);
                    if (expandedExpr instanceof Array) {
                        var allHierarchyLevels = expandedExpr;
                        shouldAddExpressionToNewGroup = !data.SQHierarchyExprUtils.areHierarchyLevelsOrdered(allHierarchyLevels, _.last(lastGroup.children), expr);
                    }
                }
                shouldAddExpressionToNewGroup ? groups.push({
                    expr: exprSource,
                    children: [ expr ],
                    selectQueryIndex: selectQueryIndex
                }) : lastGroup.children.push(expr);
            }
            SQExprGroupUtils.groupExprs = groupExprs;
        })(SQExprGroupUtils = data.SQExprGroupUtils || (data.SQExprGroupUtils = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var ArrayExtensions = jsCommon.ArrayExtensions, StringExtensions = jsCommon.StringExtensions, SQExpr = (function() {
            function SQExpr(kind) {
                this._kind = kind;
            }
            return SQExpr.equals = function(x, y, ignoreCase, ignoreVariables) {
                return SQExprEqualityVisitor.run(x, y, ignoreCase, ignoreVariables);
            }, SQExpr.prototype.validate = function(schema, aggrUtils, errors) {
                var validator = new SQExprValidationVisitor(schema, aggrUtils, errors);
                return this.accept(validator), validator.errors;
            }, SQExpr.prototype.accept = function(visitor, arg) {}, Object.defineProperty(SQExpr.prototype, "kind", {
                get: function() {
                    return this._kind;
                },
                enumerable: !0,
                configurable: !0
            }), SQExpr.isArithmetic = function(expr) {
                return 23 === expr.kind;
            }, SQExpr.isFloor = function(expr) {
                return 34 === expr.kind;
            }, SQExpr.isColumn = function(expr) {
                return 2 === expr.kind;
            }, SQExpr.isConstant = function(expr) {
                return 17 === expr.kind;
            }, SQExpr.isEntity = function(expr) {
                return 0 === expr.kind;
            }, SQExpr.isHierarchy = function(expr) {
                return 6 === expr.kind;
            }, SQExpr.isHierarchyLevel = function(expr) {
                return 7 === expr.kind;
            }, SQExpr.isIn = function(expr) {
                return 10 === expr.kind;
            }, SQExpr.isAggregation = function(expr) {
                return 4 === expr.kind;
            }, SQExpr.isMinAggregation = function(expr) {
                return SQExpr.isAggregation(expr) && 3 === expr.func;
            }, SQExpr.isMaxAggregation = function(expr) {
                return SQExpr.isAggregation(expr) && 4 === expr.func;
            }, SQExpr.isAvgAggregation = function(expr) {
                return SQExpr.isAggregation(expr) && 1 === expr.func;
            }, SQExpr.isMedianAggregation = function(expr) {
                return SQExpr.isAggregation(expr) && 6 === expr.func;
            }, SQExpr.isMeasure = function(expr) {
                return 3 === expr.kind;
            }, SQExpr.isPercentile = function(expr) {
                return 28 === expr.kind;
            }, SQExpr.isPropertyVariationSource = function(expr) {
                return 5 === expr.kind;
            }, SQExpr.isSelectRef = function(expr) {
                return 29 === expr.kind;
            }, SQExpr.isScopedEval = function(expr) {
                return 26 === expr.kind;
            }, SQExpr.isFilteredEval = function(expr) {
                return 39 === expr.kind;
            }, SQExpr.isSubqueryRef = function(expr) {
                return 1 === expr.kind;
            }, SQExpr.isWithRef = function(expr) {
                return 27 === expr.kind;
            }, SQExpr.isTransformTableRef = function(expr) {
                return 30 === expr.kind;
            }, SQExpr.isTransformOutputRoleRef = function(expr) {
                return 31 === expr.kind;
            }, SQExpr.isResourcePackageItem = function(expr) {
                return 25 === expr.kind;
            }, SQExpr.isCompareRef = function(expr) {
                return 13 === expr.kind;
            }, SQExpr.isGroupRef = function(expr) {
                return 33 === expr.kind;
            }, SQExpr.isRoleRef = function(expr) {
                return 35 === expr.kind;
            }, SQExpr.isNamedQueryRef = function(expr) {
                return 37 === expr.kind;
            }, SQExpr.isBetween = function(expr) {
                return 9 === expr.kind;
            }, SQExpr.isAnd = function(expr) {
                return 8 === expr.kind;
            }, SQExpr.isOr = function(expr) {
                return 11 === expr.kind;
            }, SQExpr.isCompare = function(expr) {
                return 13 === expr.kind;
            }, SQExpr.isContains = function(expr) {
                return 12 === expr.kind;
            }, SQExpr.isDateSpan = function(expr) {
                return 18 === expr.kind;
            }, SQExpr.isDateAdd = function(expr) {
                return 19 === expr.kind;
            }, SQExpr.isExists = function(expr) {
                return 15 === expr.kind;
            }, SQExpr.isNot = function(expr) {
                return 16 === expr.kind;
            }, SQExpr.isNow = function(expr) {
                return 20 === expr.kind;
            }, SQExpr.isDefaultValue = function(expr) {
                return 22 === expr.kind;
            }, SQExpr.isAnyValue = function(expr) {
                return 21 === expr.kind;
            }, SQExpr.isStartsWith = function(expr) {
                return 14 === expr.kind;
            }, SQExpr.isFillRule = function(expr) {
                return 24 === expr.kind;
            }, SQExpr.isThemeColor = function(expr) {
                return 32 === expr.kind;
            }, SQExpr.isDiscretize = function(expr) {
                return 36 === expr.kind;
            }, SQExpr.isMember = function(expr) {
                return 38 === expr.kind;
            }, SQExpr.prototype.getMetadata = function(federatedSchema) {
                var field = data.SQExprConverter.asFieldPattern(this);
                if (field) return field.column || field.columnAggr || field.groupingColumn || field.groupingColumnAggr || field.measure ? this.getMetadataForProperty(field, federatedSchema) : field.hierarchyLevel || field.hierarchyLevelAggr ? this.getMetadataForHierarchyLevel(field, federatedSchema) : field.columnHierarchyLevelVariation ? this.getMetadataForVariation(field, federatedSchema) : SQExpr.getMetadataForEntity(field, federatedSchema);
            }, SQExpr.prototype.getKeyColumns = function(schema) {
                var columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(schema, this);
                if (columnRefExpr) {
                    var keySQExprs = [], keys = this.getPropertyKeys(schema);
                    if (keys && keys.length > 0) for (var i = 0, len = keys.length; i < len; i++) keySQExprs.push(SQExprBuilder.columnRef(columnRefExpr.source, keys[i].name)); else keySQExprs.push(columnRefExpr);
                    return keySQExprs;
                }
            }, SQExpr.prototype.hasGroupOnKeys = function(schema) {
                var columnRefExpr = this.getTargetColumnRef(schema);
                if (columnRefExpr) {
                    var keys = this.getPropertyKeys(schema);
                    if (!keys || keys.length < 1) return !1;
                    if (keys.length > 1) return !0;
                    var keySqExpr = SQExprBuilder.columnRef(columnRefExpr.source, keys[0].name);
                    return !SQExpr.equals(keySqExpr, this);
                }
            }, SQExpr.prototype.getPropertyKeys = function(schema) {
                var property = this.getConceptualProperty(schema, !0);
                if (property) return property.column ? property.column.keys : void 0;
            }, SQExpr.prototype.getOrderByColumns = function(schema) {
                var columnRefExpr = this.getTargetColumnRef(schema);
                if (columnRefExpr) {
                    var property = columnRefExpr.getConceptualProperty(schema, !0), orderBy = property && property.column && property.column.orderBy;
                    if (_.isEmpty(orderBy)) return [];
                    for (var expressions = new Array(orderBy.length), i = 0, len = orderBy.length; i < len; i++) expressions[i] = SQExprBuilder.columnRef(columnRefExpr.source, orderBy[i].name);
                    return expressions;
                }
            }, SQExpr.prototype.getConceptualProperty = function(federatedSchema, translateHierarchy) {
                var field = data.SQExprConverter.asFieldPattern(this);
                if (field) {
                    var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(field), propertyName = data.FieldExprPattern.getPropertyName(field);
                    if (propertyName) return federatedSchema.schema(fieldExprItem.schema).findProperty(fieldExprItem.entity, propertyName);
                    if (translateHierarchy) {
                        var fieldExprHierachyLevel = field.hierarchyLevel || field.hierarchyLevelAggr;
                        if (fieldExprHierachyLevel) {
                            var fieldExprEntity = data.FieldExprPattern.toFieldExprEntityItemPattern(field), hierarchy = federatedSchema.schema(fieldExprEntity.schema).findHierarchy(fieldExprEntity.entity, fieldExprHierachyLevel.name);
                            if (hierarchy) {
                                var hierarchyLevel = hierarchy.levels.withName(fieldExprHierachyLevel.level);
                                if (hierarchyLevel) return hierarchyLevel.column;
                            }
                        }
                    }
                }
            }, SQExpr.prototype.getTargetEntityForVariation = function(federatedSchema, variationName) {
                var property = this.getConceptualProperty(federatedSchema);
                if (property && property.column && !_.isEmpty(property.column.variations)) for (var variations = property.column.variations, _i = 0, variations_2 = variations; _i < variations_2.length; _i++) {
                    var variation = variations_2[_i];
                    if (variation.name === variationName) return variation.navigationProperty.targetEntity.name;
                }
            }, SQExpr.prototype.getTargetEntity = function() {
                return TargetEntityFinder.getEntityExpr(this);
            }, SQExpr.prototype.getTargetColumnRef = function(schema) {
                return SQExprColumnRefInfoVisitor.getColumnRefSQExpr(schema, this);
            }, SQExpr.prototype.getMetadataForVariation = function(field, federatedSchema) {
                var columnHierarchyLevelVariation = field.columnHierarchyLevelVariation, fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(field), sourceProperty = federatedSchema.schema(fieldExprItem.schema).findProperty(fieldExprItem.entity, columnHierarchyLevelVariation.source.name);
                if (sourceProperty && sourceProperty.column && sourceProperty.column.variations) for (var _i = 0, _a = sourceProperty.column.variations; _i < _a.length; _i++) {
                    var variation = _a[_i];
                    if (variation.defaultHierarchy && variation.defaultHierarchy.levels) for (var _b = 0, _c = variation.defaultHierarchy.levels; _b < _c.length; _b++) {
                        var level = _c[_b];
                        if (level.name === columnHierarchyLevelVariation.level.level) {
                            var property = level.column;
                            return {
                                kind: 1 === property.kind ? 1 : 0,
                                type: property.type,
                                format: property.format,
                                idOnEntityKey: !!property.column && property.column.idOnEntityKey,
                                defaultAggregate: property.column ? property.column.defaultAggregate : null
                            };
                        }
                    }
                }
            }, SQExpr.prototype.getMetadataForHierarchyLevel = function(field, federatedSchema) {
                var property = this.getConceptualProperty(federatedSchema, !0);
                if (property) return this.getPropertyMetadata(field, property);
            }, SQExpr.prototype.getPropertyMetadata = function(field, property) {
                var format = property.format, type = property.type, columnAggregate = field.columnAggr || field.groupingColumnAggr || field.hierarchyLevelAggr;
                if (columnAggregate) switch (columnAggregate.aggregate) {
                  case 2:
                  case 5:
                    type = powerbi.ValueType.fromExtendedType(260), format = void 0;
                    break;

                  case 1:
                  case 7:
                  case 8:
                    type.integer && (type = powerbi.ValueType.fromExtendedType(259), format = powerbi.NumberFormat.getFormatForWholeNumberAverage(format));
                }
                return {
                    kind: 1 === property.kind || columnAggregate && void 0 !== columnAggregate.aggregate ? 1 : 0,
                    type: type,
                    format: format,
                    idOnEntityKey: !!property.column && property.column.idOnEntityKey,
                    aggregate: columnAggregate ? columnAggregate.aggregate : void 0,
                    defaultAggregate: property.column ? property.column.defaultAggregate : null
                };
            }, SQExpr.prototype.getMetadataForProperty = function(field, federatedSchema) {
                var property = this.getConceptualProperty(federatedSchema);
                if (property) return this.getPropertyMetadata(field, property);
            }, SQExpr.getMetadataForEntity = function(field, federatedSchema) {
                var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(field), entity = federatedSchema.schema(fieldExprItem.schema).entities.withName(fieldExprItem.entity);
                if (entity && field.entityAggr) switch (field.entityAggr.aggregate) {
                  case 2:
                  case 5:
                    return {
                        kind: 1,
                        type: powerbi.ValueType.fromExtendedType(260),
                        format: void 0,
                        idOnEntityKey: !1,
                        aggregate: field.entityAggr.aggregate
                    };
                }
            }, SQExpr;
        })();
        data.SQExpr = SQExpr;
        var SQEntityExpr = (function(_super) {
            function SQEntityExpr(schema, entity, variable) {
                var _this = this;
                return _this = _super.call(this, 0) || this, _this.schema = schema, _this.entity = entity, 
                variable && (_this.variable = variable), _this;
            }
            return __extends(SQEntityExpr, _super), SQEntityExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitEntity(this, arg);
            }, SQEntityExpr.prototype.as = function(variable) {
                return new SQEntityExpr(this.schema, this.entity, variable);
            }, SQEntityExpr;
        })(SQExpr);
        data.SQEntityExpr = SQEntityExpr;
        var SQSubqueryRefExpr = (function(_super) {
            function SQSubqueryRefExpr(variable) {
                var _this = this;
                return _this = _super.call(this, 1) || this, _this.variable = variable, _this;
            }
            return __extends(SQSubqueryRefExpr, _super), SQSubqueryRefExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitSubqueryRef(this, arg);
            }, SQSubqueryRefExpr.prototype.as = function(variable) {
                return new SQSubqueryRefExpr(variable);
            }, SQSubqueryRefExpr;
        })(SQExpr);
        data.SQSubqueryRefExpr = SQSubqueryRefExpr;
        var SQNamedQueryRefExpr = (function(_super) {
            function SQNamedQueryRefExpr(queryName, variable) {
                var _this = this;
                return _this = _super.call(this, 37) || this, _this.queryName = queryName, variable && (_this.variable = variable), 
                _this;
            }
            return __extends(SQNamedQueryRefExpr, _super), SQNamedQueryRefExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitNamedQueryRef(this, arg);
            }, SQNamedQueryRefExpr.prototype.as = function(variable) {
                return new SQNamedQueryRefExpr(this.queryName, variable);
            }, SQNamedQueryRefExpr;
        })(SQExpr);
        data.SQNamedQueryRefExpr = SQNamedQueryRefExpr;
        var SQArithmeticExpr = (function(_super) {
            function SQArithmeticExpr(left, right, operator) {
                var _this = this;
                return _this = _super.call(this, 23) || this, _this.left = left, _this.right = right, 
                _this.operator = operator, _this;
            }
            return __extends(SQArithmeticExpr, _super), SQArithmeticExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitArithmetic(this, arg);
            }, SQArithmeticExpr.prototype.getMetadata = function(federatedSchema) {
                var metadata = this.left.getMetadata(federatedSchema);
                return metadata && 3 === this.operator && (metadata.format = "#,##0.00%", metadata.type = powerbi.ValueType.fromExtendedType(259)), 
                metadata;
            }, SQArithmeticExpr;
        })(SQExpr);
        data.SQArithmeticExpr = SQArithmeticExpr;
        var SQFloorExpr = (function(_super) {
            function SQFloorExpr(arg, size, timeUnit) {
                var _this = this;
                return _this = _super.call(this, 34) || this, _this.arg = arg, _this.size = size, 
                null != timeUnit && (_this.timeUnit = timeUnit), _this;
            }
            return __extends(SQFloorExpr, _super), SQFloorExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitFloor(this, arg);
            }, SQFloorExpr;
        })(SQExpr);
        data.SQFloorExpr = SQFloorExpr;
        var SQScopedEvalExpr = (function(_super) {
            function SQScopedEvalExpr(expression, scope) {
                var _this = this;
                return _this = _super.call(this, 26) || this, _this.expression = expression, _this.scope = scope, 
                _this;
            }
            return __extends(SQScopedEvalExpr, _super), SQScopedEvalExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitScopedEval(this, arg);
            }, SQScopedEvalExpr.prototype.getMetadata = function(federatedSchema) {
                return this.expression.getMetadata(federatedSchema);
            }, SQScopedEvalExpr;
        })(SQExpr);
        data.SQScopedEvalExpr = SQScopedEvalExpr;
        var SQFilteredEvalExpr = (function(_super) {
            function SQFilteredEvalExpr(expression, filters) {
                var _this = this;
                return _this = _super.call(this, 39) || this, _this.expression = expression, _this.filters = filters, 
                _this;
            }
            return __extends(SQFilteredEvalExpr, _super), SQFilteredEvalExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitFilteredEval(this, arg);
            }, SQFilteredEvalExpr.prototype.getMetadata = function(federatedSchema) {
                return this.expression.getMetadata(federatedSchema);
            }, SQFilteredEvalExpr;
        })(SQExpr);
        data.SQFilteredEvalExpr = SQFilteredEvalExpr;
        var SQWithRefExpr = (function(_super) {
            function SQWithRefExpr(expressionName) {
                var _this = this;
                return _this = _super.call(this, 27) || this, _this.expressionName = expressionName, 
                _this;
            }
            return __extends(SQWithRefExpr, _super), SQWithRefExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitWithRef(this, arg);
            }, SQWithRefExpr;
        })(SQExpr);
        data.SQWithRefExpr = SQWithRefExpr;
        var SQPropRefExpr = (function(_super) {
            function SQPropRefExpr(kind, source, ref) {
                var _this = this;
                return _this = _super.call(this, kind) || this, _this.source = source, _this.ref = ref, 
                _this;
            }
            return __extends(SQPropRefExpr, _super), SQPropRefExpr;
        })(SQExpr);
        data.SQPropRefExpr = SQPropRefExpr;
        var SQColumnRefExpr = (function(_super) {
            function SQColumnRefExpr(source, ref, kind) {
                return _super.call(this, kind || 2, source, ref) || this;
            }
            return __extends(SQColumnRefExpr, _super), SQColumnRefExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitColumnRef(this, arg);
            }, SQColumnRefExpr;
        })(SQPropRefExpr);
        data.SQColumnRefExpr = SQColumnRefExpr;
        var SQMeasureRefExpr = (function(_super) {
            function SQMeasureRefExpr(source, ref) {
                return _super.call(this, 3, source, ref) || this;
            }
            return __extends(SQMeasureRefExpr, _super), SQMeasureRefExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitMeasureRef(this, arg);
            }, SQMeasureRefExpr;
        })(SQPropRefExpr);
        data.SQMeasureRefExpr = SQMeasureRefExpr;
        var SQAggregationExpr = (function(_super) {
            function SQAggregationExpr(arg, func) {
                var _this = this;
                return _this = _super.call(this, 4) || this, _this.arg = arg, _this.func = func, 
                _this;
            }
            return __extends(SQAggregationExpr, _super), SQAggregationExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitAggr(this, arg);
            }, SQAggregationExpr;
        })(SQExpr);
        data.SQAggregationExpr = SQAggregationExpr;
        var SQPercentileExpr = (function(_super) {
            function SQPercentileExpr(arg, k, exclusive) {
                var _this = this;
                return _this = _super.call(this, 28) || this, _this.arg = arg, _this.k = k, _this.exclusive = exclusive, 
                _this;
            }
            return __extends(SQPercentileExpr, _super), SQPercentileExpr.prototype.getMetadata = function(federatedSchema) {
                var argMetadata = this.arg.getMetadata(federatedSchema);
                if (argMetadata) return {
                    kind: 1,
                    type: argMetadata.type
                };
            }, SQPercentileExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitPercentile(this, arg);
            }, SQPercentileExpr;
        })(SQExpr);
        data.SQPercentileExpr = SQPercentileExpr;
        var SQPropertyVariationSourceExpr = (function(_super) {
            function SQPropertyVariationSourceExpr(arg, name, property) {
                var _this = this;
                return _this = _super.call(this, 5) || this, _this.arg = arg, _this.name = name, 
                _this.property = property, _this;
            }
            return __extends(SQPropertyVariationSourceExpr, _super), SQPropertyVariationSourceExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitPropertyVariationSource(this, arg);
            }, SQPropertyVariationSourceExpr;
        })(SQExpr);
        data.SQPropertyVariationSourceExpr = SQPropertyVariationSourceExpr;
        var SQGroupRefExpr = (function(_super) {
            function SQGroupRefExpr(name, source, groupedExprs) {
                var _this = this;
                return _this = _super.call(this, source, name, 33) || this, _this.groupedExprs = groupedExprs, 
                _this;
            }
            return __extends(SQGroupRefExpr, _super), SQGroupRefExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitGroupRef(this, arg);
            }, SQGroupRefExpr;
        })(SQColumnRefExpr);
        data.SQGroupRefExpr = SQGroupRefExpr;
        var SQHierarchyExpr = (function(_super) {
            function SQHierarchyExpr(arg, hierarchy) {
                var _this = this;
                return _this = _super.call(this, 6) || this, _this.arg = arg, _this.hierarchy = hierarchy, 
                _this;
            }
            return __extends(SQHierarchyExpr, _super), SQHierarchyExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitHierarchy(this, arg);
            }, SQHierarchyExpr;
        })(SQExpr);
        data.SQHierarchyExpr = SQHierarchyExpr;
        var SQHierarchyLevelExpr = (function(_super) {
            function SQHierarchyLevelExpr(arg, level) {
                var _this = this;
                return _this = _super.call(this, 7) || this, _this.arg = arg, _this.level = level, 
                _this;
            }
            return __extends(SQHierarchyLevelExpr, _super), SQHierarchyLevelExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitHierarchyLevel(this, arg);
            }, SQHierarchyLevelExpr;
        })(SQExpr);
        data.SQHierarchyLevelExpr = SQHierarchyLevelExpr;
        var SQSelectRefExpr = (function(_super) {
            function SQSelectRefExpr(expressionName, attributeKind) {
                var _this = this;
                return _this = _super.call(this, 29) || this, _this.expressionName = expressionName, 
                _this.attributeKind = attributeKind, _this;
            }
            return __extends(SQSelectRefExpr, _super), SQSelectRefExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitSelectRef(this, arg);
            }, SQSelectRefExpr;
        })(SQExpr);
        data.SQSelectRefExpr = SQSelectRefExpr;
        var SQAndExpr = (function(_super) {
            function SQAndExpr(left, right) {
                var _this = this;
                return _this = _super.call(this, 8) || this, _this.left = left, _this.right = right, 
                _this;
            }
            return __extends(SQAndExpr, _super), SQAndExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitAnd(this, arg);
            }, SQAndExpr;
        })(SQExpr);
        data.SQAndExpr = SQAndExpr;
        var SQBetweenExpr = (function(_super) {
            function SQBetweenExpr(arg, lower, upper) {
                var _this = this;
                return _this = _super.call(this, 9) || this, _this.arg = arg, _this.lower = lower, 
                _this.upper = upper, _this;
            }
            return __extends(SQBetweenExpr, _super), SQBetweenExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitBetween(this, arg);
            }, SQBetweenExpr;
        })(SQExpr);
        data.SQBetweenExpr = SQBetweenExpr;
        var SQInExpr = (function(_super) {
            function SQInExpr(args, values, table) {
                var _this = this;
                return _this = _super.call(this, 10) || this, _this.args = args, values && (_this.values = values), 
                table && (_this.table = table), _this;
            }
            return __extends(SQInExpr, _super), SQInExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitIn(this, arg);
            }, SQInExpr;
        })(SQExpr);
        data.SQInExpr = SQInExpr;
        var SQOrExpr = (function(_super) {
            function SQOrExpr(left, right) {
                var _this = this;
                return _this = _super.call(this, 11) || this, _this.left = left, _this.right = right, 
                _this;
            }
            return __extends(SQOrExpr, _super), SQOrExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitOr(this, arg);
            }, SQOrExpr;
        })(SQExpr);
        data.SQOrExpr = SQOrExpr;
        var SQCompareExpr = (function(_super) {
            function SQCompareExpr(comparison, left, right) {
                var _this = this;
                return _this = _super.call(this, 13) || this, _this.comparison = comparison, _this.left = left, 
                _this.right = right, _this;
            }
            return __extends(SQCompareExpr, _super), SQCompareExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitCompare(this, arg);
            }, SQCompareExpr;
        })(SQExpr);
        data.SQCompareExpr = SQCompareExpr;
        var SQContainsExpr = (function(_super) {
            function SQContainsExpr(left, right) {
                var _this = this;
                return _this = _super.call(this, 12) || this, _this.left = left, _this.right = right, 
                _this;
            }
            return __extends(SQContainsExpr, _super), SQContainsExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitContains(this, arg);
            }, SQContainsExpr;
        })(SQExpr);
        data.SQContainsExpr = SQContainsExpr;
        var SQStartsWithExpr = (function(_super) {
            function SQStartsWithExpr(left, right) {
                var _this = this;
                return _this = _super.call(this, 14) || this, _this.left = left, _this.right = right, 
                _this;
            }
            return __extends(SQStartsWithExpr, _super), SQStartsWithExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitStartsWith(this, arg);
            }, SQStartsWithExpr;
        })(SQExpr);
        data.SQStartsWithExpr = SQStartsWithExpr;
        var SQExistsExpr = (function(_super) {
            function SQExistsExpr(arg) {
                var _this = this;
                return _this = _super.call(this, 15) || this, _this.arg = arg, _this;
            }
            return __extends(SQExistsExpr, _super), SQExistsExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitExists(this, arg);
            }, SQExistsExpr;
        })(SQExpr);
        data.SQExistsExpr = SQExistsExpr;
        var SQNotExpr = (function(_super) {
            function SQNotExpr(arg) {
                var _this = this;
                return _this = _super.call(this, 16) || this, _this.arg = arg, _this;
            }
            return __extends(SQNotExpr, _super), SQNotExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitNot(this, arg);
            }, SQNotExpr;
        })(SQExpr);
        data.SQNotExpr = SQNotExpr;
        var SQConstantExpr = (function(_super) {
            function SQConstantExpr(type, value, valueEncoded) {
                var _this = this;
                return _this = _super.call(this, 17) || this, _this.type = type, _this.value = value, 
                _this.valueEncoded = valueEncoded, _this;
            }
            return __extends(SQConstantExpr, _super), SQConstantExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitConstant(this, arg);
            }, SQConstantExpr.prototype.getMetadata = function() {
                return {
                    kind: 1,
                    type: this.type
                };
            }, SQConstantExpr;
        })(SQExpr);
        data.SQConstantExpr = SQConstantExpr;
        var SQDateSpanExpr = (function(_super) {
            function SQDateSpanExpr(unit, arg) {
                var _this = this;
                return _this = _super.call(this, 18) || this, _this.unit = unit, _this.arg = arg, 
                _this;
            }
            return __extends(SQDateSpanExpr, _super), SQDateSpanExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitDateSpan(this, arg);
            }, SQDateSpanExpr;
        })(SQExpr);
        data.SQDateSpanExpr = SQDateSpanExpr;
        var SQDateAddExpr = (function(_super) {
            function SQDateAddExpr(unit, amount, arg) {
                var _this = this;
                return _this = _super.call(this, 19) || this, _this.unit = unit, _this.arg = arg, 
                _this.amount = amount, _this;
            }
            return __extends(SQDateAddExpr, _super), SQDateAddExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitDateAdd(this, arg);
            }, SQDateAddExpr.prototype.getMetadata = function(federatedSchema) {
                return this.arg.getMetadata(federatedSchema);
            }, SQDateAddExpr;
        })(SQExpr);
        data.SQDateAddExpr = SQDateAddExpr;
        var SQNowExpr = (function(_super) {
            function SQNowExpr() {
                return _super.call(this, 20) || this;
            }
            return __extends(SQNowExpr, _super), SQNowExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitNow(this, arg);
            }, SQNowExpr.prototype.getMetadata = function() {
                return {
                    kind: 1,
                    type: powerbi.ValueType.fromExtendedType(519)
                };
            }, SQNowExpr;
        })(SQExpr);
        data.SQNowExpr = SQNowExpr;
        var SQDefaultValueExpr = (function(_super) {
            function SQDefaultValueExpr() {
                return _super.call(this, 22) || this;
            }
            return __extends(SQDefaultValueExpr, _super), SQDefaultValueExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitDefaultValue(this, arg);
            }, SQDefaultValueExpr;
        })(SQExpr);
        data.SQDefaultValueExpr = SQDefaultValueExpr;
        var SQAnyValueExpr = (function(_super) {
            function SQAnyValueExpr(defaultValueOverridesAncestors) {
                var _this = this;
                return _this = _super.call(this, 21) || this, _this.defaultValueOverridesAncestors = defaultValueOverridesAncestors, 
                _this;
            }
            return __extends(SQAnyValueExpr, _super), SQAnyValueExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitAnyValue(this, arg);
            }, SQAnyValueExpr;
        })(SQExpr);
        data.SQAnyValueExpr = SQAnyValueExpr;
        var SQFillRuleExpr = (function(_super) {
            function SQFillRuleExpr(input, fillRule) {
                var _this = this;
                return _this = _super.call(this, 24) || this, _this.input = input, _this.rule = fillRule, 
                _this;
            }
            return __extends(SQFillRuleExpr, _super), SQFillRuleExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitFillRule(this, arg);
            }, SQFillRuleExpr;
        })(SQExpr);
        data.SQFillRuleExpr = SQFillRuleExpr;
        var SQThemeColorExpr = (function(_super) {
            function SQThemeColorExpr(color, percent) {
                var _this = this;
                return _this = _super.call(this, 32) || this, _this.color = color, _this.percent = percent, 
                _this;
            }
            return __extends(SQThemeColorExpr, _super), SQThemeColorExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitThemeColor(this, arg);
            }, SQThemeColorExpr;
        })(SQExpr);
        data.SQThemeColorExpr = SQThemeColorExpr;
        var SQResourcePackageItemExpr = (function(_super) {
            function SQResourcePackageItemExpr(packageName, packageType, itemName) {
                var _this = this;
                return _this = _super.call(this, 25) || this, _this.packageName = packageName, _this.packageType = packageType, 
                _this.itemName = itemName, _this;
            }
            return __extends(SQResourcePackageItemExpr, _super), SQResourcePackageItemExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitResourcePackageItem(this, arg);
            }, SQResourcePackageItemExpr;
        })(SQExpr);
        data.SQResourcePackageItemExpr = SQResourcePackageItemExpr;
        var SQTransformTableRefExpr = (function(_super) {
            function SQTransformTableRefExpr(source) {
                var _this = this;
                return _this = _super.call(this, 30) || this, _this.source = source, _this;
            }
            return __extends(SQTransformTableRefExpr, _super), SQTransformTableRefExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitTransformTableRef(this, arg);
            }, SQTransformTableRefExpr;
        })(SQExpr);
        data.SQTransformTableRefExpr = SQTransformTableRefExpr;
        var SQTransformOutputRoleRefExpr = (function(_super) {
            function SQTransformOutputRoleRefExpr(role, transform) {
                var _this = this;
                return _this = _super.call(this, 31) || this, _this.role = role, transform && (_this.transform = transform), 
                _this;
            }
            return __extends(SQTransformOutputRoleRefExpr, _super), SQTransformOutputRoleRefExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitTransformOutputRoleRef(this, arg);
            }, SQTransformOutputRoleRefExpr.prototype.getMetadata = function(federatedSchema) {}, 
            SQTransformOutputRoleRefExpr;
        })(SQExpr);
        data.SQTransformOutputRoleRefExpr = SQTransformOutputRoleRefExpr;
        var SQRoleRefExpr = (function(_super) {
            function SQRoleRefExpr(role) {
                var _this = this;
                return _this = _super.call(this, 35) || this, _this.role = role, _this;
            }
            return __extends(SQRoleRefExpr, _super), SQRoleRefExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitRoleRef(this, arg);
            }, SQRoleRefExpr;
        })(SQExpr);
        data.SQRoleRefExpr = SQRoleRefExpr;
        var SQDiscretizeExpr = (function(_super) {
            function SQDiscretizeExpr(source, count) {
                var _this = this;
                return _this = _super.call(this, 36) || this, _this.source = source, _this.count = count, 
                _this;
            }
            return __extends(SQDiscretizeExpr, _super), SQDiscretizeExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitDiscretize(this, arg);
            }, SQDiscretizeExpr;
        })(SQExpr);
        data.SQDiscretizeExpr = SQDiscretizeExpr;
        var SQMemberExpr = (function(_super) {
            function SQMemberExpr(source, member) {
                var _this = this;
                return _this = _super.call(this, 38) || this, _this.source = source, _this.member = member, 
                _this;
            }
            return __extends(SQMemberExpr, _super), SQMemberExpr.prototype.accept = function(visitor, arg) {
                return visitor.visitMember(this, arg);
            }, SQMemberExpr;
        })(SQExpr);
        data.SQMemberExpr = SQMemberExpr;
        var SQExprBuilder;
        !(function(SQExprBuilder) {
            function entity(schema, entity, variable) {
                return new SQEntityExpr(schema, entity, variable);
            }
            function subqueryRef(variable) {
                return new SQSubqueryRefExpr(variable);
            }
            function namedQueryRef(queryName, variable) {
                return new SQNamedQueryRefExpr(queryName, variable);
            }
            function columnRef(source, prop) {
                return new SQColumnRefExpr(source, prop);
            }
            function measureRef(source, prop) {
                return new SQMeasureRefExpr(source, prop);
            }
            function aggregate(source, aggregate) {
                return new SQAggregationExpr(source, aggregate);
            }
            function selectRef(expressionName, attributeType) {
                return new SQSelectRefExpr(expressionName, attributeType);
            }
            function percentile(source, k, exclusive) {
                return new SQPercentileExpr(source, k, exclusive);
            }
            function arithmetic(left, right, operator) {
                return new SQArithmeticExpr(left, right, operator);
            }
            function floor(arg, size, timeUnit) {
                return new SQFloorExpr(arg, size, timeUnit);
            }
            function scopedEval(expression, scope) {
                return new SQScopedEvalExpr(expression, scope);
            }
            function filteredEval(expression, filters) {
                return new SQFilteredEvalExpr(expression, filters);
            }
            function withRef(expressionName) {
                return new SQWithRefExpr(expressionName);
            }
            function groupRef(name, source, groupedColumns) {
                return new SQGroupRefExpr(name, source, groupedColumns);
            }
            function hierarchy(source, hierarchy) {
                return new SQHierarchyExpr(source, hierarchy);
            }
            function propertyVariationSource(source, name, property) {
                return new SQPropertyVariationSourceExpr(source, name, property);
            }
            function hierarchyLevel(source, level) {
                return new SQHierarchyLevelExpr(source, level);
            }
            function transformTableRef(source) {
                return new SQTransformTableRefExpr(source);
            }
            function transformOutputRoleRef(role, transform) {
                return new SQTransformOutputRoleRefExpr(role, transform);
            }
            function roleRef(role) {
                return new SQRoleRefExpr(role);
            }
            function and(left, right) {
                return left ? right ? new SQAndExpr(left, right) : left : right;
            }
            function between(arg, lower, upper) {
                return new SQBetweenExpr(arg, lower, upper);
            }
            function inValues(args, values) {
                return new SQInExpr(args, values, null);
            }
            function inTable(args, table) {
                return new SQInExpr(args, null, table);
            }
            function or(left, right) {
                if (!left) return right;
                if (!right) return left;
                if (SQExpr.isIn(left) && SQExpr.isIn(right)) {
                    var inExpr = tryUseInExprs(left, right);
                    if (inExpr) return inExpr;
                }
                return new SQOrExpr(left, right);
            }
            function tryUseInExprs(left, right) {
                if (left.args && right.args && left.values && right.values) {
                    var leftArgLen = left.args.length, rightArgLen = right.args.length;
                    if (leftArgLen === rightArgLen) {
                        for (var i = 0; i < leftArgLen; ++i) if (!SQExpr.equals(left.args[i], right.args[i])) return;
                        var combinedValues = left.values.concat(right.values);
                        return SQExprBuilder.inValues(left.args, combinedValues);
                    }
                }
            }
            function compare(kind, left, right) {
                return new SQCompareExpr(kind, left, right);
            }
            function contains(left, right) {
                return new SQContainsExpr(left, right);
            }
            function exists(arg) {
                return new SQExistsExpr(arg);
            }
            function equal(left, right) {
                return compare(0, left, right);
            }
            function not(arg) {
                return new SQNotExpr(arg);
            }
            function startsWith(left, right) {
                return new SQStartsWithExpr(left, right);
            }
            function nullConstant() {
                return new SQConstantExpr(powerbi.ValueType.fromExtendedType(0), null, data.PrimitiveValueEncoding.nullEncoding());
            }
            function now() {
                return new SQNowExpr();
            }
            function defaultValue() {
                return new SQDefaultValueExpr();
            }
            function anyValue(defaultValueOverridesAncestors) {
                return new SQAnyValueExpr(defaultValueOverridesAncestors);
            }
            function boolean(value) {
                return new SQConstantExpr(powerbi.ValueType.fromExtendedType(5), value, data.PrimitiveValueEncoding.boolean(value));
            }
            function dateAdd(unit, amount, arg) {
                return new SQDateAddExpr(unit, amount, arg);
            }
            function dateTime(value, valueEncoded) {
                return void 0 === valueEncoded && (valueEncoded = data.PrimitiveValueEncoding.dateTime(value)), 
                new SQConstantExpr(powerbi.ValueType.fromExtendedType(519), value, valueEncoded);
            }
            function dateSpan(unit, arg) {
                return new SQDateSpanExpr(unit, arg);
            }
            function decimal(value, valueEncoded) {
                return void 0 === valueEncoded && (valueEncoded = data.PrimitiveValueEncoding.decimal(value)), 
                new SQConstantExpr(powerbi.ValueType.fromExtendedType(258), value, valueEncoded);
            }
            function double(value, valueEncoded) {
                return void 0 === valueEncoded && (valueEncoded = data.PrimitiveValueEncoding.double(value)), 
                new SQConstantExpr(powerbi.ValueType.fromExtendedType(259), value, valueEncoded);
            }
            function integer(value, valueEncoded) {
                return void 0 === valueEncoded && (valueEncoded = data.PrimitiveValueEncoding.integer(value)), 
                new SQConstantExpr(powerbi.ValueType.fromExtendedType(260), value, valueEncoded);
            }
            function text(value, valueEncoded) {
                return new SQConstantExpr(powerbi.ValueType.fromExtendedType(1), value, valueEncoded || data.PrimitiveValueEncoding.text(value));
            }
            function typedConstant(value, type) {
                return null == value ? nullConstant() : _.isBoolean(value) ? boolean(value) : _.isString(value) ? text(value) : _.isNumber(value) ? type.integer && powerbi.Double.isInteger(value) ? integer(value) : double(value) : value instanceof Date ? dateTime(value) : void 0;
            }
            function setAggregate(expr, aggregate) {
                return FieldExprChangeAggregateRewriter.rewrite(expr, aggregate);
            }
            function removeAggregate(expr) {
                return FieldExprRemoveAggregateRewriter.rewrite(expr);
            }
            function setPercentOfGrandTotal(expr) {
                return SQExprSetPercentOfGrandTotalRewriter.rewrite(expr);
            }
            function removePercentOfGrandTotal(expr) {
                return SQExprRemovePercentOfGrandTotalRewriter.rewrite(expr);
            }
            function setPercentOfRoleTotal(expr, roles) {
                return SQExprSetPercentOfRoleTotalRewriter.rewrite(expr, roles);
            }
            function removePercentOfRoleTotal(expr) {
                return SQExprRemovePercentOfRoleTotalRewriter.rewrite(expr);
            }
            function removeEntityVariables(expr) {
                return SQExprRemoveEntityVariablesRewriter.rewrite(expr);
            }
            function fillRule(expr, rule) {
                return new SQFillRuleExpr(expr, rule);
            }
            function themeColor(color, percent) {
                return new SQThemeColorExpr(color, percent);
            }
            function resourcePackageItem(packageName, packageType, itemName) {
                return new SQResourcePackageItemExpr(packageName, packageType, itemName);
            }
            function discretize(source, count) {
                return new SQDiscretizeExpr(source, count);
            }
            function member(source, member) {
                return new SQMemberExpr(source, member);
            }
            SQExprBuilder.entity = entity, SQExprBuilder.subqueryRef = subqueryRef, SQExprBuilder.namedQueryRef = namedQueryRef, 
            SQExprBuilder.columnRef = columnRef, SQExprBuilder.measureRef = measureRef, SQExprBuilder.aggregate = aggregate, 
            SQExprBuilder.selectRef = selectRef, SQExprBuilder.percentile = percentile, SQExprBuilder.arithmetic = arithmetic, 
            SQExprBuilder.floor = floor, SQExprBuilder.scopedEval = scopedEval, SQExprBuilder.filteredEval = filteredEval, 
            SQExprBuilder.withRef = withRef, SQExprBuilder.groupRef = groupRef, SQExprBuilder.hierarchy = hierarchy, 
            SQExprBuilder.propertyVariationSource = propertyVariationSource, SQExprBuilder.hierarchyLevel = hierarchyLevel, 
            SQExprBuilder.transformTableRef = transformTableRef, SQExprBuilder.transformOutputRoleRef = transformOutputRoleRef, 
            SQExprBuilder.roleRef = roleRef, SQExprBuilder.and = and, SQExprBuilder.between = between, 
            SQExprBuilder.inValues = inValues, SQExprBuilder.inTable = inTable, SQExprBuilder.or = or, 
            SQExprBuilder.compare = compare, SQExprBuilder.contains = contains, SQExprBuilder.exists = exists, 
            SQExprBuilder.equal = equal, SQExprBuilder.not = not, SQExprBuilder.startsWith = startsWith, 
            SQExprBuilder.nullConstant = nullConstant, SQExprBuilder.now = now, SQExprBuilder.defaultValue = defaultValue, 
            SQExprBuilder.anyValue = anyValue, SQExprBuilder.boolean = boolean, SQExprBuilder.dateAdd = dateAdd, 
            SQExprBuilder.dateTime = dateTime, SQExprBuilder.dateSpan = dateSpan, SQExprBuilder.decimal = decimal, 
            SQExprBuilder.double = double, SQExprBuilder.integer = integer, SQExprBuilder.text = text, 
            SQExprBuilder.typedConstant = typedConstant, SQExprBuilder.setAggregate = setAggregate, 
            SQExprBuilder.removeAggregate = removeAggregate, SQExprBuilder.setPercentOfGrandTotal = setPercentOfGrandTotal, 
            SQExprBuilder.removePercentOfGrandTotal = removePercentOfGrandTotal, SQExprBuilder.setPercentOfRoleTotal = setPercentOfRoleTotal, 
            SQExprBuilder.removePercentOfRoleTotal = removePercentOfRoleTotal, SQExprBuilder.removeEntityVariables = removeEntityVariables, 
            SQExprBuilder.fillRule = fillRule, SQExprBuilder.themeColor = themeColor, SQExprBuilder.resourcePackageItem = resourcePackageItem, 
            SQExprBuilder.discretize = discretize, SQExprBuilder.member = member;
        })(SQExprBuilder = data.SQExprBuilder || (data.SQExprBuilder = {}));
        var SQExprInfo;
        !(function(SQExprInfo) {
            function getAggregate(expr) {
                return SQExprAggregateInfoVisitor.getAggregate(expr);
            }
            SQExprInfo.getAggregate = getAggregate;
        })(SQExprInfo = data.SQExprInfo || (data.SQExprInfo = {}));
        var SQExprEqualityVisitor = (function() {
            function SQExprEqualityVisitor(ignoreCase, ignoreVariables) {
                this.ignoreCase = ignoreCase, this.ignoreVariables = ignoreVariables;
            }
            return SQExprEqualityVisitor.run = function(x, y, ignoreCase, ignoreVariables) {
                return x = x || null, y = y || null, x === y || !x == !y && (ignoreVariables ? ignoreCase ? x.accept(SQExprEqualityVisitor.ignoreVariablesAndCaseInstance, y) : x.accept(SQExprEqualityVisitor.ignoreVariablesInstance, y) : ignoreCase ? x.accept(SQExprEqualityVisitor.ignoreCaseInstance, y) : x.accept(SQExprEqualityVisitor.instance, y));
            }, SQExprEqualityVisitor.prototype.visitColumnRef = function(expr, comparand) {
                if (SQExpr.isColumn(comparand) || SQExpr.isGroupRef(comparand)) return expr.ref === comparand.ref && this.equals(expr.source, comparand.source);
            }, SQExprEqualityVisitor.prototype.visitMeasureRef = function(expr, comparand) {
                return SQExpr.isMeasure(comparand) && expr.ref === comparand.ref && this.equals(expr.source, comparand.source);
            }, SQExprEqualityVisitor.prototype.visitAggr = function(expr, comparand) {
                return SQExpr.isAggregation(comparand) && expr.func === comparand.func && this.equals(expr.arg, comparand.arg);
            }, SQExprEqualityVisitor.prototype.visitPercentile = function(expr, comparand) {
                return SQExpr.isPercentile(comparand) && expr.exclusive === comparand.exclusive && expr.k === comparand.k && this.equals(expr.arg, comparand.arg);
            }, SQExprEqualityVisitor.prototype.visitGroupRef = function(expr, comparand) {
                var baseColumnEqual = !1;
                return (SQExpr.isGroupRef(comparand) || SQExpr.isColumn(comparand)) && (baseColumnEqual = expr.ref === comparand.ref && this.equals(expr.source, comparand.source)), 
                SQExpr.isGroupRef(comparand) && (baseColumnEqual = baseColumnEqual && this.equalsAll(expr.groupedExprs, comparand.groupedExprs)), 
                baseColumnEqual;
            }, SQExprEqualityVisitor.prototype.visitHierarchy = function(expr, comparand) {
                return SQExpr.isHierarchy(comparand) && expr.hierarchy === comparand.hierarchy && this.equals(expr.arg, comparand.arg);
            }, SQExprEqualityVisitor.prototype.visitHierarchyLevel = function(expr, comparand) {
                return SQExpr.isHierarchyLevel(comparand) && expr.level === comparand.level && this.equals(expr.arg, comparand.arg);
            }, SQExprEqualityVisitor.prototype.visitPropertyVariationSource = function(expr, comparand) {
                return SQExpr.isPropertyVariationSource(comparand) && expr.name === comparand.name && expr.property === comparand.property && this.equals(expr.arg, comparand.arg);
            }, SQExprEqualityVisitor.prototype.visitSelectRef = function(expr, comparand) {
                return SQExpr.isSelectRef(comparand) && expr.expressionName === comparand.expressionName && (expr.attributeKind === comparand.attributeKind || this.isNullOrUndefined(expr.attributeKind) === this.isNullOrUndefined(comparand.attributeKind));
            }, SQExprEqualityVisitor.prototype.isNullOrUndefined = function(value) {
                return null === value || void 0 === value;
            }, SQExprEqualityVisitor.prototype.visitBetween = function(expr, comparand) {
                return SQExpr.isBetween(comparand) && this.equals(expr.arg, comparand.arg) && this.equals(expr.lower, comparand.lower) && this.equals(expr.upper, comparand.upper);
            }, SQExprEqualityVisitor.prototype.visitIn = function(expr, comparand) {
                if (!SQExpr.isIn(comparand) || !this.equalsAll(expr.args, comparand.args)) return !1;
                var typedComparand = comparand, values = expr.values;
                if (values) {
                    var compareValues = typedComparand.values;
                    if (!compareValues) return !1;
                    if (values.length !== compareValues.length) return !1;
                    for (var i = 0, len = values.length; i < len; i++) if (!this.equalsAll(values[i], compareValues[i])) return !1;
                } else {
                    if (!typedComparand.table) return !1;
                    if (!this.equals(expr.table, typedComparand.table)) return !1;
                }
                return !0;
            }, SQExprEqualityVisitor.prototype.visitEntity = function(expr, comparand) {
                return SQExpr.isEntity(comparand) && expr.schema === comparand.schema && expr.entity === comparand.entity && (this.ignoreVariables || this.optionalEqual(expr.variable, comparand.variable));
            }, SQExprEqualityVisitor.prototype.visitSubqueryRef = function(expr, comparand) {
                return SQExpr.isSubqueryRef(comparand) && expr.variable === comparand.variable;
            }, SQExprEqualityVisitor.prototype.visitNamedQueryRef = function(expr, comparand) {
                return SQExpr.isNamedQueryRef(comparand) && expr.queryName === comparand.queryName && (this.ignoreVariables || this.optionalEqual(expr.variable, comparand.variable));
            }, SQExprEqualityVisitor.prototype.visitAnd = function(expr, comparand) {
                return SQExpr.isAnd(comparand) && this.equals(expr.left, comparand.left) && this.equals(expr.right, comparand.right);
            }, SQExprEqualityVisitor.prototype.visitOr = function(expr, comparand) {
                return SQExpr.isOr(comparand) && this.equals(expr.left, comparand.left) && this.equals(expr.right, comparand.right);
            }, SQExprEqualityVisitor.prototype.visitCompare = function(expr, comparand) {
                return SQExpr.isCompare(comparand) && expr.comparison === comparand.comparison && this.equals(expr.left, comparand.left) && this.equals(expr.right, comparand.right);
            }, SQExprEqualityVisitor.prototype.visitContains = function(expr, comparand) {
                return SQExpr.isContains(comparand) && this.equals(expr.left, comparand.left) && this.equals(expr.right, comparand.right);
            }, SQExprEqualityVisitor.prototype.visitDateSpan = function(expr, comparand) {
                return SQExpr.isDateSpan(comparand) && expr.unit === comparand.unit && this.equals(expr.arg, comparand.arg);
            }, SQExprEqualityVisitor.prototype.visitDateAdd = function(expr, comparand) {
                return SQExpr.isDateAdd(comparand) && expr.unit === comparand.unit && expr.amount === comparand.amount && this.equals(expr.arg, comparand.arg);
            }, SQExprEqualityVisitor.prototype.visitExists = function(expr, comparand) {
                return SQExpr.isExists(comparand) && this.equals(expr.arg, comparand.arg);
            }, SQExprEqualityVisitor.prototype.visitNot = function(expr, comparand) {
                return SQExpr.isNot(comparand) && this.equals(expr.arg, comparand.arg);
            }, SQExprEqualityVisitor.prototype.visitNow = function(expr, comparand) {
                return SQExpr.isNow(comparand);
            }, SQExprEqualityVisitor.prototype.visitDefaultValue = function(expr, comparand) {
                return SQExpr.isDefaultValue(comparand);
            }, SQExprEqualityVisitor.prototype.visitAnyValue = function(expr, comparand) {
                return SQExpr.isAnyValue(comparand);
            }, SQExprEqualityVisitor.prototype.visitResourcePackageItem = function(expr, comparand) {
                return SQExpr.isResourcePackageItem(comparand) && expr.packageName === comparand.packageName && expr.packageType === comparand.packageType && expr.itemName === comparand.itemName;
            }, SQExprEqualityVisitor.prototype.visitStartsWith = function(expr, comparand) {
                return SQExpr.isStartsWith(comparand) && this.equals(expr.left, comparand.left) && this.equals(expr.right, comparand.right);
            }, SQExprEqualityVisitor.prototype.visitConstant = function(expr, comparand) {
                return !(!SQExpr.isConstant(comparand) || expr.type !== comparand.type) && (expr.type.text && this.ignoreCase ? StringExtensions.equalIgnoreCase(expr.valueEncoded, comparand.valueEncoded) : expr.valueEncoded === comparand.valueEncoded);
            }, SQExprEqualityVisitor.prototype.visitFillRule = function(expr, comparand) {
                var _this = this;
                if (!SQExpr.isFillRule(comparand) || !this.equals(expr.input, comparand.input)) return !1;
                var left = expr.rule, right = comparand.rule;
                return left === right || this.equalsNullableObject(left.linearGradient2, right.linearGradient2, (function(x, y) {
                    return _this.visitLinearGradient2(x, y);
                })) && this.equalsNullableObject(left.linearGradient3, right.linearGradient3, (function(x, y) {
                    return _this.visitLinearGradient3(x, y);
                })) && this.equalsNullableObject(left.conditional, right.conditional, (function(x, y) {
                    return _this.visitConditionalColorRule(x, y);
                }));
            }, SQExprEqualityVisitor.prototype.visitLinearGradient2 = function(left, right) {
                var _this = this;
                return this.equalsFillRuleStop(left.min, right.min) && this.equalsFillRuleStop(left.max, right.max) && this.equalsNullableObject(left.nullColoringStrategy, right.nullColoringStrategy, (function(x, y) {
                    return _this.equalsNullStrategy(x, y);
                }));
            }, SQExprEqualityVisitor.prototype.visitLinearGradient3 = function(left, right) {
                var _this = this;
                return this.equalsFillRuleStop(left.min, right.min) && this.equalsFillRuleStop(left.mid, right.mid) && this.equalsFillRuleStop(left.max, right.max) && this.equalsNullableObject(left.nullColoringStrategy, right.nullColoringStrategy, (function(x, y) {
                    return _this.equalsNullStrategy(x, y);
                }));
            }, SQExprEqualityVisitor.prototype.visitConditionalColorRule = function(left, right) {
                var _this = this;
                return this.equalsNullableObject(left.nullColoringStrategy, right.nullColoringStrategy, (function(x, y) {
                    return _this.equalsNullStrategy(x, y);
                })) && ArrayExtensions.sequenceEqual(left.cases, right.cases, (function(x, y) {
                    return _this.equalsRuleColorCase(x, y);
                }));
            }, SQExprEqualityVisitor.prototype.equalsRuleColorCase = function(x, y) {
                return this.equals(x.color, y.color) && this.equals(x.condition, y.condition);
            }, SQExprEqualityVisitor.prototype.visitThemeColor = function(expr, comparand) {
                return SQExpr.isThemeColor(comparand) && expr.color === comparand.color && expr.percent === comparand.percent;
            }, SQExprEqualityVisitor.prototype.equalsFillRuleStop = function(stop1, stop2) {
                return this.equals(stop1.color, stop2.color) && this.equalsNullable(stop1.value, stop2.value);
            }, SQExprEqualityVisitor.prototype.equalsNullStrategy = function(left, right) {
                return this.equals(left.strategy, right.strategy) && this.equalsNullable(left.color, right.color);
            }, SQExprEqualityVisitor.prototype.visitArithmetic = function(expr, comparand) {
                return SQExpr.isArithmetic(comparand) && expr.operator === comparand.operator && this.equals(expr.left, comparand.left) && this.equals(expr.right, comparand.right);
            }, SQExprEqualityVisitor.prototype.visitFloor = function(expr, comparand) {
                return SQExpr.isFloor(comparand) && expr.timeUnit === comparand.timeUnit && expr.size === comparand.size && this.equals(expr.arg, comparand.arg);
            }, SQExprEqualityVisitor.prototype.visitScopedEval = function(expr, comparand) {
                return SQExpr.isScopedEval(comparand) && this.equals(expr.expression, comparand.expression) && this.equalsAll(expr.scope, comparand.scope);
            }, SQExprEqualityVisitor.prototype.visitFilteredEval = function(expr, comparand) {
                return SQExpr.isFilteredEval(comparand) && this.equals(expr.expression, comparand.expression) && expr.filters.length === comparand.filters.length && _.all(expr.filters, (function(filter, index) {
                    return data.SQFilter.equals(filter, comparand.filters[index]);
                }));
            }, SQExprEqualityVisitor.prototype.visitWithRef = function(expr, comparand) {
                return SQExpr.isWithRef(comparand) && expr.expressionName === comparand.expressionName;
            }, SQExprEqualityVisitor.prototype.visitTransformTableRef = function(expr, comparand) {
                return SQExpr.isTransformTableRef(comparand) && expr.source === comparand.source;
            }, SQExprEqualityVisitor.prototype.visitTransformOutputRoleRef = function(expr, comparand) {
                return SQExpr.isTransformOutputRoleRef(comparand) && expr.role === comparand.role && expr.transform === comparand.transform;
            }, SQExprEqualityVisitor.prototype.visitRoleRef = function(expr, comparand) {
                return SQExpr.isRoleRef(comparand) && expr.role === comparand.role;
            }, SQExprEqualityVisitor.prototype.visitDiscretize = function(expr, comparand) {
                return SQExpr.isDiscretize(comparand) && expr.count === comparand.count && this.equals(expr.source, comparand.source);
            }, SQExprEqualityVisitor.prototype.visitMember = function(expr, comparand) {
                return SQExpr.isMember(comparand) && expr.member === comparand.member && this.equals(expr.source, comparand.source);
            }, SQExprEqualityVisitor.prototype.optionalEqual = function(x, y) {
                return !x || !y || x === y;
            }, SQExprEqualityVisitor.prototype.equals = function(x, y) {
                return x.accept(this, y);
            }, SQExprEqualityVisitor.prototype.equalsNullable = function(left, right) {
                var _this = this;
                return this.equalsNullableObject(left, right, (function(x, y) {
                    return _this.equals(x, y);
                }));
            }, SQExprEqualityVisitor.prototype.equalsNullableObject = function(left, right, comparer) {
                return null == left && null == right || null != left && null != right && comparer(left, right);
            }, SQExprEqualityVisitor.prototype.equalsAll = function(left, right) {
                var _this = this;
                return ArrayExtensions.sequenceEqual(left, right, (function(x, y) {
                    return _this.equals(x, y);
                }));
            }, SQExprEqualityVisitor.instance = new SQExprEqualityVisitor((!1), (!1)), SQExprEqualityVisitor.ignoreCaseInstance = new SQExprEqualityVisitor((!0), (!1)), 
            SQExprEqualityVisitor.ignoreVariablesInstance = new SQExprEqualityVisitor((!1), (!0)), 
            SQExprEqualityVisitor.ignoreVariablesAndCaseInstance = new SQExprEqualityVisitor((!0), (!0)), 
            SQExprEqualityVisitor;
        })(), SQExprRootRewriter = (function(_super) {
            function SQExprRootRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(SQExprRootRewriter, _super), SQExprRootRewriter.prototype.visitDefault = function(expr) {
                return expr;
            }, SQExprRootRewriter;
        })(data.DefaultSQExprVisitor), SQExprRootRewriterWithArg = (function(_super) {
            function SQExprRootRewriterWithArg() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(SQExprRootRewriterWithArg, _super), SQExprRootRewriterWithArg.prototype.visitDefault = function(expr, arg) {
                return expr;
            }, SQExprRootRewriterWithArg;
        })(data.DefaultSQExprVisitorWithArg), SQExprValidationVisitor = (function(_super) {
            function SQExprValidationVisitor(schema, aggrUtils, errors) {
                var _this = this;
                return _this = _super.call(this) || this, _this.schema = schema, _this.aggrUtils = aggrUtils, 
                errors && (_this.errors = errors), _this;
            }
            return __extends(SQExprValidationVisitor, _super), SQExprValidationVisitor.prototype.visitIn = function(expr) {
                var inExpr = _super.prototype.visitIn.call(this, expr), args = inExpr.args, values = inExpr.values;
                if (values) for (var _i = 0, values_2 = values; _i < values_2.length; _i++) for (var valueTuple = values_2[_i], i = 0, len = valueTuple.length; i < len; ++i) this.validateCompatibleType(args[i], valueTuple[i]); else {
                    var table = inExpr.table;
                    this.validateIsTableRef(table);
                }
                return inExpr;
            }, SQExprValidationVisitor.prototype.visitCompare = function(expr) {
                var compareExpr = _super.prototype.visitCompare.call(this, expr);
                return this.validateCompatibleType(compareExpr.left, compareExpr.right), compareExpr;
            }, SQExprValidationVisitor.prototype.visitColumnRef = function(expr) {
                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);
                return fieldExpr && this.validateColumnExpr(fieldExpr), expr;
            }, SQExprValidationVisitor.prototype.visitMeasureRef = function(expr) {
                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);
                if (fieldExpr) {
                    var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr), entity = this.validateEntity(fieldExprItem.schema, fieldExprItem.entity);
                    if (entity) {
                        var prop = entity.properties.withName(fieldExpr.measure.name);
                        prop && 1 === prop.kind && this.isQueryable(fieldExpr) || this.register(5);
                    }
                }
                return expr;
            }, SQExprValidationVisitor.prototype.visitAggr = function(expr) {
                var aggregateExpr = _super.prototype.visitAggr.call(this, expr), columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(this.schema, aggregateExpr.arg);
                return columnRefExpr && (this.aggrUtils.isSupportedAggregate(expr, this.schema, expr.func, null) || this.register(0)), 
                aggregateExpr;
            }, SQExprValidationVisitor.prototype.visitGroupRef = function(expr) {
                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);
                if (fieldExpr) {
                    var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr), entity = this.validateEntity(fieldExprItem.schema, fieldExprItem.entity);
                    if (entity) {
                        var prop = entity.properties.withName(fieldExpr.groupingColumn.name);
                        prop && 0 === prop.kind && this.validateExprSequence(expr.groupedExprs) && prop.column.groupingMetadata && this.isQueryable(fieldExpr) || this.register(4);
                    }
                }
                return expr;
            }, SQExprValidationVisitor.prototype.visitHierarchy = function(expr) {
                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);
                if (fieldExpr) {
                    var fieldExprItem = fieldExpr.hierarchy;
                    fieldExprItem ? this.validateHierarchy(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.name) : this.register(6);
                }
                return expr;
            }, SQExprValidationVisitor.prototype.visitHierarchyLevel = function(expr) {
                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);
                if (fieldExpr) {
                    var hierarchyLevelFieldExprItem = fieldExpr.hierarchyLevel, hierarchyLevelVariationFieldExprItem = fieldExpr.columnHierarchyLevelVariation;
                    hierarchyLevelFieldExprItem ? this.validateHierarchyLevel(hierarchyLevelFieldExprItem.schema, hierarchyLevelFieldExprItem.entity, hierarchyLevelFieldExprItem.name, hierarchyLevelFieldExprItem.level) : hierarchyLevelVariationFieldExprItem ? this.validateHierarchyLevelVariation(hierarchyLevelVariationFieldExprItem) : this.register(7);
                }
                return expr;
            }, SQExprValidationVisitor.prototype.visitPercentile = function(expr) {
                if (expr.arg.accept(this), _.isEmpty(this.errors)) {
                    var argMetadata = expr.arg.getMetadata(this.schema);
                    argMetadata && 0 === argMetadata.kind && argMetadata.type && (argMetadata.type.integer || argMetadata.type.numeric) || this.register(12);
                }
                return expr;
            }, SQExprValidationVisitor.prototype.visitDiscretize = function(expr) {
                return expr.source.accept(this), expr.count <= 0 && this.register(15), expr;
            }, SQExprValidationVisitor.prototype.visitEntity = function(expr) {
                return this.validateEntity(expr.schema, expr.entity), expr;
            }, SQExprValidationVisitor.prototype.visitSubqueryRef = function(expr) {
                return expr;
            }, SQExprValidationVisitor.prototype.visitNamedQueryRef = function(expr) {
                return expr;
            }, SQExprValidationVisitor.prototype.visitContains = function(expr) {
                return this.validateStartOrContainsArgs(expr.left, expr.right), expr;
            }, SQExprValidationVisitor.prototype.visitStartsWith = function(expr) {
                return this.validateStartOrContainsArgs(expr.left, expr.right), expr;
            }, SQExprValidationVisitor.prototype.visitArithmetic = function(expr) {
                return this.validateArithmeticTypes(expr.operator, expr.left, expr.right), expr;
            }, SQExprValidationVisitor.prototype.visitScopedEval = function(expr) {
                for (var _i = 0, _a = expr.scope; _i < _a.length; _i++) {
                    var scopeRef = _a[_i];
                    SQExpr.isWithRef(scopeRef) || SQExpr.isColumn(scopeRef) || this.register(13);
                }
                return expr;
            }, SQExprValidationVisitor.prototype.visitFilteredEval = function(expr) {
                expr.expression.accept(this), 0 === _.size(expr.filters) && this.register(16);
                for (var _i = 0, _a = expr.filters; _i < _a.length; _i++) {
                    var filter = _a[_i];
                    if (!_.isEmpty(filter.target)) for (var _b = 0, _c = filter.target; _b < _c.length; _b++) {
                        var target = _c[_b];
                        target.accept(this);
                    }
                    filter.condition.accept(this);
                }
                return expr;
            }, SQExprValidationVisitor.prototype.visitWithRef = function(expr) {
                return expr;
            }, SQExprValidationVisitor.prototype.visitTransformTableRef = function(expr) {
                return expr;
            }, SQExprValidationVisitor.prototype.visitTransformOutputRoleRef = function(expr) {
                return expr;
            }, SQExprValidationVisitor.prototype.visitRoleRef = function(expr) {
                return expr;
            }, SQExprValidationVisitor.prototype.validateExprSequence = function(exprs) {
                var _this = this;
                return _.reduce(exprs, (function(result, expr) {
                    return result = result && _.isEmpty(expr.validate(_this.schema, _this.aggrUtils, _this.errors));
                }), !0);
            }, SQExprValidationVisitor.prototype.validateStartOrContainsArgs = function(left, right) {
                left.accept(this), right.accept(this), _.isEmpty(this.errors) && (SQExpr.isConstant(right) && right.type.text ? this.validateCompatibleType(left, right, !0) : this.register(10));
            }, SQExprValidationVisitor.prototype.validateArithmeticTypes = function(operator, left, right) {
                data.SQExprUtils.supportsArithmetic(operator, left, this.schema) || this.register(9), 
                data.SQExprUtils.supportsArithmetic(operator, right, this.schema) || this.register(10);
            }, SQExprValidationVisitor.prototype.validateCompatibleType = function(left, right, strictTypeCheck) {
                var isInvalid, leftMetadata = left.getMetadata(this.schema), leftType = leftMetadata && leftMetadata.type, rightMetadata = right.getMetadata(this.schema), rightType = rightMetadata && rightMetadata.type;
                isInvalid = strictTypeCheck ? !leftType || !rightType || !leftType.isCompatibleFrom(rightType) : leftType && rightType && !leftType.isCompatibleFrom(rightType), 
                isInvalid && this.register(11);
            }, SQExprValidationVisitor.prototype.validateEntity = function(schemaName, entityName) {
                var schema = this.schema.schema(schemaName);
                if (schema) {
                    var entity = schema.entities.withName(entityName);
                    if (entity) return entity;
                    this.register(2);
                } else this.register(1);
            }, SQExprValidationVisitor.prototype.validateIsTableRef = function(expr) {
                1 !== expr.kind && 0 !== expr.kind && this.register(14);
            }, SQExprValidationVisitor.prototype.validateHierarchy = function(schemaName, entityName, hierarchyName) {
                var entity = this.validateEntity(schemaName, entityName);
                if (entity) {
                    var hierarchy = entity.hierarchies.withName(hierarchyName);
                    if (hierarchy) return hierarchy;
                    this.register(6);
                }
            }, SQExprValidationVisitor.prototype.validateHierarchyLevel = function(schemaName, entityName, hierarchyName, levelName) {
                var hierarchy = this.validateHierarchy(schemaName, entityName, hierarchyName);
                if (hierarchy) {
                    var hierarchyLevel = hierarchy.levels.withName(levelName);
                    if (hierarchyLevel) return hierarchyLevel;
                    this.register(7);
                }
            }, SQExprValidationVisitor.prototype.validateHierarchyLevelVariation = function(fieldExpr) {
                var variationSourceFieldExpr = fieldExpr.source, schema = this.schema.schema(variationSourceFieldExpr.schema), sourceProperty = schema.findProperty(variationSourceFieldExpr.entity, variationSourceFieldExpr.name);
                this.validateColumnExpr({
                    column: fieldExpr.source
                });
                var sourceColumn = sourceProperty && sourceProperty.column;
                if (sourceColumn) {
                    var variation = sourceProperty.column.variations.withName(fieldExpr.variationName);
                    if (variation) {
                        var variationHierarchy = schema.findHierarchyByVariation(variationSourceFieldExpr.entity, variationSourceFieldExpr.name, fieldExpr.variationName, fieldExpr.level.name);
                        if (variationHierarchy) {
                            var level = variationHierarchy.levels.withName(fieldExpr.level.level);
                            if (level) return variation;
                        }
                    }
                    this.register(8);
                }
            }, SQExprValidationVisitor.prototype.validateColumnExpr = function(fieldExpr) {
                var columnExpr = fieldExpr.column, entity = this.validateEntity(columnExpr.schema, columnExpr.entity);
                if (entity) {
                    var prop = entity.properties.withName(columnExpr.name);
                    if (prop && 0 === prop.kind && this.isQueryable(fieldExpr)) return prop;
                    this.register(3);
                }
            }, SQExprValidationVisitor.prototype.register = function(error) {
                this.errors || (this.errors = []), this.errors.push(error);
            }, SQExprValidationVisitor.prototype.isQueryable = function(fieldExpr) {
                var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);
                if (fieldExpr.hierarchyLevel || fieldExpr.hierarchyLevelAggr) {
                    var hierarchyLevelConceptualProperty = data.SQHierarchyExprUtils.getConceptualHierarchyLevelFromExpr(this.schema, fieldExpr);
                    return hierarchyLevelConceptualProperty && 1 !== hierarchyLevelConceptualProperty.column.queryable;
                }
                return 1 !== this.schema.schema(fieldExprItem.schema).findProperty(fieldExprItem.entity, data.FieldExprPattern.getPropertyName(fieldExpr)).queryable;
            }, SQExprValidationVisitor;
        })(data.SQExprRewriter);
        data.SQExprValidationVisitor = SQExprValidationVisitor;
        var SQExprAggregateInfoVisitor = (function(_super) {
            function SQExprAggregateInfoVisitor() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(SQExprAggregateInfoVisitor, _super), SQExprAggregateInfoVisitor.prototype.visitAggr = function(expr) {
                return expr.func;
            }, SQExprAggregateInfoVisitor.prototype.visitDefault = function(expr) {}, SQExprAggregateInfoVisitor.getAggregate = function(expr) {
                var visitor = new SQExprAggregateInfoVisitor();
                return expr.accept(visitor);
            }, SQExprAggregateInfoVisitor;
        })(data.DefaultSQExprVisitor), SQExprColumnRefInfoVisitor = (function(_super) {
            function SQExprColumnRefInfoVisitor(schema) {
                var _this = _super.call(this) || this;
                return _this.schema = schema, _this;
            }
            return __extends(SQExprColumnRefInfoVisitor, _super), SQExprColumnRefInfoVisitor.prototype.visitColumnRef = function(expr) {
                return expr;
            }, SQExprColumnRefInfoVisitor.prototype.visitGroupRef = function(expr) {
                return expr;
            }, SQExprColumnRefInfoVisitor.prototype.visitHierarchyLevel = function(expr) {
                var ref = expr.level, hierarchy = expr.arg, sourceExpr = hierarchy.accept(this);
                if (hierarchy && SQExpr.isPropertyVariationSource(hierarchy.arg)) {
                    var propertyVariationSource = hierarchy.arg, targetEntity = sourceExpr.getTargetEntityForVariation(this.schema, propertyVariationSource.name);
                    if (sourceExpr && targetEntity) {
                        var schemaName = sourceExpr.source.schema, targetEntityExpr = SQExprBuilder.entity(schemaName, targetEntity), schemaHierarchy = this.schema.schema(schemaName).findHierarchy(targetEntity, hierarchy.hierarchy);
                        if (schemaHierarchy) for (var _i = 0, _a = schemaHierarchy.levels; _i < _a.length; _i++) {
                            var level = _a[_i];
                            if (level.name === ref) return new SQColumnRefExpr(targetEntityExpr, level.column.name);
                        }
                    }
                } else {
                    var entityExpr = hierarchy.arg, hierarchyLevelRef = data.SQHierarchyExprUtils.getConceptualHierarchyLevel(this.schema, entityExpr.schema, entityExpr.entity, hierarchy.hierarchy, expr.level);
                    if (hierarchyLevelRef) return new SQColumnRefExpr(hierarchy.arg, hierarchyLevelRef.column.name);
                }
            }, SQExprColumnRefInfoVisitor.prototype.visitHierarchy = function(expr) {
                return expr.arg.accept(this);
            }, SQExprColumnRefInfoVisitor.prototype.visitPropertyVariationSource = function(expr) {
                var propertyName = expr.property;
                return new SQColumnRefExpr(expr.arg, propertyName);
            }, SQExprColumnRefInfoVisitor.prototype.visitAggr = function(expr) {
                return expr.arg.accept(this);
            }, SQExprColumnRefInfoVisitor.prototype.visitDefault = function(expr) {}, SQExprColumnRefInfoVisitor.getColumnRefSQExpr = function(schema, expr) {
                var visitor = new SQExprColumnRefInfoVisitor(schema);
                return expr.accept(visitor);
            }, SQExprColumnRefInfoVisitor;
        })(data.DefaultSQExprVisitor), TargetEntityFinder = (function(_super) {
            function TargetEntityFinder() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(TargetEntityFinder, _super), TargetEntityFinder.prototype.visitEntity = function(expr) {
                var currentExpr = this.result;
                void 0 === currentExpr || SQExpr.equals(currentExpr, expr) ? this.result = expr : this.result = null;
            }, TargetEntityFinder.prototype.visitFilteredEval = function(expr) {
                expr.expression.accept(this);
            }, TargetEntityFinder.getEntityExpr = function(expr) {
                var visitor = new TargetEntityFinder();
                return expr.accept(visitor), visitor.result || void 0;
            }, TargetEntityFinder;
        })(data.DefaultSQExprVisitorWithTraversal), SQExprChangeAggregateRewriter = (function(_super) {
            function SQExprChangeAggregateRewriter(func) {
                var _this = this;
                return _this = _super.call(this) || this, _this.func = func, _this;
            }
            return __extends(SQExprChangeAggregateRewriter, _super), SQExprChangeAggregateRewriter.prototype.visitAggr = function(expr) {
                return expr.func === this.func ? expr : new SQAggregationExpr(expr.arg, this.func);
            }, SQExprChangeAggregateRewriter.prototype.visitColumnRef = function(expr) {
                return new SQAggregationExpr(expr, this.func);
            }, SQExprChangeAggregateRewriter.prototype.visitGroupRef = function(expr) {
                return new SQAggregationExpr(expr, this.func);
            }, SQExprChangeAggregateRewriter.prototype.visitHierarchyLevel = function(expr) {
                return new SQAggregationExpr(expr, this.func);
            }, SQExprChangeAggregateRewriter.rewrite = function(expr, func) {
                var rewriter = new SQExprChangeAggregateRewriter(func);
                return expr.accept(rewriter);
            }, SQExprChangeAggregateRewriter;
        })(SQExprRootRewriter), FieldExprChangeAggregateRewriter = (function() {
            function FieldExprChangeAggregateRewriter(sqExpr, aggregate) {
                this.sqExpr = sqExpr, this.aggregate = aggregate;
            }
            return FieldExprChangeAggregateRewriter.rewrite = function(sqExpr, aggregate) {
                return data.FieldExprPattern.visit(sqExpr, new FieldExprChangeAggregateRewriter(sqExpr, aggregate));
            }, FieldExprChangeAggregateRewriter.prototype.visitPercentOfGrandTotal = function(pattern) {
                return pattern.baseExpr = data.SQExprConverter.asFieldPattern(SQExprChangeAggregateRewriter.rewrite(SQExprBuilder.fieldExpr(pattern.baseExpr), this.aggregate)), 
                SQExprBuilder.fieldExpr({
                    percentOfGrandTotal: pattern
                });
            }, FieldExprChangeAggregateRewriter.prototype.visitPercentOfRoleTotal = function(pattern) {
                return pattern.baseExpr = data.SQExprConverter.asFieldPattern(SQExprChangeAggregateRewriter.rewrite(SQExprBuilder.fieldExpr(pattern.baseExpr), this.aggregate)), 
                SQExprBuilder.fieldExpr({
                    percentOfRoleTotal: pattern
                });
            }, FieldExprChangeAggregateRewriter.prototype.visitFilteredEval = function(filteredEval) {
                return filteredEval.baseExpr = data.SQExprConverter.asFieldPattern(SQExprChangeAggregateRewriter.rewrite(SQExprBuilder.fieldExpr(filteredEval.baseExpr), this.aggregate)), 
                SQExprBuilder.fieldExpr({
                    filteredEval: filteredEval
                });
            }, FieldExprChangeAggregateRewriter.prototype.visitColumn = function(column) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitColumnAggr = function(columnAggr) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitGroupingColumn = function(column) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitGroupingColumnAggr = function(columnAggr) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitColumnHierarchyLevelVariation = function(columnHierarchyLevelVariation) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitSelectRef = function(selectRef) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitEntity = function(entity) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitEntityAggr = function(entityAggr) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitHierarchy = function(hierarchy) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitHierarchyLevel = function(hierarchyLevel) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitHierarchyLevelAggr = function(hierarchyLevelAggr) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitMeasure = function(measure) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitPercentile = function(percentile) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.visitTransformOutputRoleRef = function(transformOutputRoleRef) {
                return this.defaultRewrite();
            }, FieldExprChangeAggregateRewriter.prototype.defaultRewrite = function() {
                return SQExprChangeAggregateRewriter.rewrite(this.sqExpr, this.aggregate);
            }, FieldExprChangeAggregateRewriter;
        })(), FieldExprRemoveAggregateRewriter = (function() {
            function FieldExprRemoveAggregateRewriter(sqExpr) {
                this.sqExpr = sqExpr;
            }
            return FieldExprRemoveAggregateRewriter.rewrite = function(sqExpr) {
                return data.FieldExprPattern.visit(sqExpr, new FieldExprRemoveAggregateRewriter(sqExpr));
            }, FieldExprRemoveAggregateRewriter.prototype.visitPercentOfGrandTotal = function(pattern) {
                return FieldExprRemoveAggregateRewriter.rewrite(SQExprBuilder.fieldExpr(pattern.baseExpr));
            }, FieldExprRemoveAggregateRewriter.prototype.visitPercentOfRoleTotal = function(pattern) {
                return FieldExprRemoveAggregateRewriter.rewrite(SQExprBuilder.fieldExpr(pattern.baseExpr));
            }, FieldExprRemoveAggregateRewriter.prototype.visitFilteredEval = function(filteredEval) {
                return FieldExprRemoveAggregateRewriter.rewrite(SQExprBuilder.fieldExpr(filteredEval.baseExpr));
            }, FieldExprRemoveAggregateRewriter.prototype.visitColumn = function(column) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitColumnAggr = function(columnAggr) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitGroupingColumn = function(column) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitGroupingColumnAggr = function(columnAggr) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitColumnHierarchyLevelVariation = function(columnHierarchyLevelVariation) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitSelectRef = function(selectRef) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitEntity = function(entity) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitEntityAggr = function(entityAggr) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitHierarchy = function(hierarchy) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitHierarchyLevel = function(hierarchyLevel) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitHierarchyLevelAggr = function(hierarchyLevelAggr) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitMeasure = function(measure) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitPercentile = function(percentile) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.visitTransformOutputRoleRef = function(transformOutputRoleRef) {
                return this.defaultRewrite();
            }, FieldExprRemoveAggregateRewriter.prototype.defaultRewrite = function() {
                return SQExprRemoveAggregateRewriter.rewrite(this.sqExpr);
            }, FieldExprRemoveAggregateRewriter;
        })(), SQExprRemoveAggregateRewriter = (function(_super) {
            function SQExprRemoveAggregateRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(SQExprRemoveAggregateRewriter, _super), SQExprRemoveAggregateRewriter.prototype.visitAggr = function(expr) {
                return expr.arg;
            }, SQExprRemoveAggregateRewriter.rewrite = function(expr) {
                return expr.accept(SQExprRemoveAggregateRewriter.instance);
            }, SQExprRemoveAggregateRewriter.instance = new SQExprRemoveAggregateRewriter(), 
            SQExprRemoveAggregateRewriter;
        })(SQExprRootRewriter), SQExprRemoveEntityVariablesRewriter = (function(_super) {
            function SQExprRemoveEntityVariablesRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(SQExprRemoveEntityVariablesRewriter, _super), SQExprRemoveEntityVariablesRewriter.prototype.visitEntity = function(expr) {
                return expr.variable ? SQExprBuilder.entity(expr.schema, expr.entity) : expr;
            }, SQExprRemoveEntityVariablesRewriter.rewrite = function(expr) {
                return expr.accept(SQExprRemoveEntityVariablesRewriter.instance);
            }, SQExprRemoveEntityVariablesRewriter.instance = new SQExprRemoveEntityVariablesRewriter(), 
            SQExprRemoveEntityVariablesRewriter;
        })(data.SQExprRewriter), SQExprRemovePercentOfGrandTotalRewriter = (function(_super) {
            function SQExprRemovePercentOfGrandTotalRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(SQExprRemovePercentOfGrandTotalRewriter, _super), SQExprRemovePercentOfGrandTotalRewriter.rewrite = function(expr) {
                return expr.accept(SQExprRemovePercentOfGrandTotalRewriter.instance);
            }, SQExprRemovePercentOfGrandTotalRewriter.prototype.visitDefault = function(expr) {
                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);
                return fieldExpr && fieldExpr.percentOfGrandTotal && (expr = SQExprBuilder.fieldExpr(fieldExpr.percentOfGrandTotal.baseExpr)), 
                expr;
            }, SQExprRemovePercentOfGrandTotalRewriter.instance = new SQExprRemovePercentOfGrandTotalRewriter(), 
            SQExprRemovePercentOfGrandTotalRewriter;
        })(SQExprRootRewriter), SQExprSetPercentOfGrandTotalRewriter = (function(_super) {
            function SQExprSetPercentOfGrandTotalRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(SQExprSetPercentOfGrandTotalRewriter, _super), SQExprSetPercentOfGrandTotalRewriter.rewrite = function(expr) {
                return expr.accept(SQExprSetPercentOfGrandTotalRewriter.instance);
            }, SQExprSetPercentOfGrandTotalRewriter.prototype.visitDefault = function(expr) {
                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);
                return fieldExpr && !fieldExpr.percentOfGrandTotal && (expr = SQExprBuilder.fieldExpr({
                    percentOfGrandTotal: {
                        baseExpr: fieldExpr
                    }
                })), expr;
            }, SQExprSetPercentOfGrandTotalRewriter.instance = new SQExprSetPercentOfGrandTotalRewriter(), 
            SQExprSetPercentOfGrandTotalRewriter;
        })(SQExprRootRewriter), SQExprRemovePercentOfRoleTotalRewriter = (function(_super) {
            function SQExprRemovePercentOfRoleTotalRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(SQExprRemovePercentOfRoleTotalRewriter, _super), SQExprRemovePercentOfRoleTotalRewriter.rewrite = function(expr) {
                return expr.accept(SQExprRemovePercentOfRoleTotalRewriter.instance);
            }, SQExprRemovePercentOfRoleTotalRewriter.prototype.visitDefault = function(expr) {
                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);
                return fieldExpr && fieldExpr.percentOfRoleTotal && (expr = SQExprBuilder.fieldExpr(fieldExpr.percentOfRoleTotal.baseExpr)), 
                expr;
            }, SQExprRemovePercentOfRoleTotalRewriter.instance = new SQExprRemovePercentOfRoleTotalRewriter(), 
            SQExprRemovePercentOfRoleTotalRewriter;
        })(SQExprRootRewriter), SQExprSetPercentOfRoleTotalRewriter = (function(_super) {
            function SQExprSetPercentOfRoleTotalRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(SQExprSetPercentOfRoleTotalRewriter, _super), SQExprSetPercentOfRoleTotalRewriter.rewrite = function(expr, roles) {
                return expr.accept(SQExprSetPercentOfRoleTotalRewriter.instance, roles);
            }, SQExprSetPercentOfRoleTotalRewriter.prototype.visitDefault = function(expr, roles) {
                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);
                return fieldExpr && !fieldExpr.percentOfRoleTotal && (expr = SQExprBuilder.fieldExpr({
                    percentOfRoleTotal: {
                        baseExpr: fieldExpr,
                        roles: roles
                    }
                })), expr;
            }, SQExprSetPercentOfRoleTotalRewriter.instance = new SQExprSetPercentOfRoleTotalRewriter(), 
            SQExprSetPercentOfRoleTotalRewriter;
        })(SQExprRootRewriterWithArg), HierarchyVisitor = (function(_super) {
            function HierarchyVisitor() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(HierarchyVisitor, _super), HierarchyVisitor.prototype.visitHierarchyLevel = function(expr) {
                return expr.arg.accept(this);
            }, HierarchyVisitor.prototype.visitHierarchy = function(expr) {
                return expr.arg.accept(this);
            }, HierarchyVisitor.prototype.visitPropertyVariationSource = function(expr) {
                return expr.property;
            }, HierarchyVisitor.getProperty = function(expr) {
                var visitor = new HierarchyVisitor();
                return expr.accept(visitor);
            }, HierarchyVisitor;
        })(data.DefaultSQExprVisitor);
        data.HierarchyVisitor = HierarchyVisitor;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SQExprUtils, ArrayExtensions = jsCommon.ArrayExtensions, StringExtensions = jsCommon.StringExtensions;
        !(function(SQExprUtils) {
            function supportsArithmetic(operator, expr, schema) {
                var metadata = expr.getMetadata(schema), type = metadata && metadata.type;
                return !(!metadata || !type) && (2 === operator || 3 === operator ? type.numeric : type.numeric || type.dateTime || type.duration);
            }
            function indexOfExpr(items, searchElement) {
                for (var i = 0, len = items.length; i < len; i++) if (data.SQExpr.equals(items[i], searchElement)) return i;
                return -1;
            }
            function indexOfNamedExpr(items, searchElement) {
                for (var i = 0, len = items.length; i < len; i++) {
                    var item = items[i];
                    if (item && data.SQExpr.equals(item.expr, searchElement)) return i;
                }
                return -1;
            }
            function sequenceEqual(x, y) {
                var len = x.length;
                if (len !== y.length) return !1;
                for (var i = 0; i < len; i++) if (!data.SQExpr.equals(x[i], y[i])) return !1;
                return !0;
            }
            function uniqueName(namedItems, expr, exprDefaultName) {
                for (var names = {}, i = 0, len = namedItems.length; i < len; i++) names[namedItems[i].name] = !0;
                return StringExtensions.findUniqueName(names, exprDefaultName || defaultName(expr));
            }
            function defaultName(expr, fallback) {
                return void 0 === fallback && (fallback = "select"), expr ? expr.accept(SQExprDefaultNameGenerator.instance, fallback) : fallback;
            }
            function isMeasure(expr) {
                return expr.accept(IsMeasureVisitor.instance);
            }
            function isAnyValue(expr) {
                return expr.accept(IsAnyValueVisitor.instance);
            }
            function isDefaultValue(expr) {
                return expr.accept(IsDefaultValueVisitor.instance);
            }
            function discourageAggregation(expr, schema) {
                var capabilities = getSchemaCapabilities(expr, schema);
                return capabilities && capabilities.discourageQueryAggregateUsage;
            }
            function getAggregateBehavior(expr, schema) {
                var column = getConceptualColumn(expr, schema);
                if (column) return column.aggregateBehavior;
            }
            function getSchemaCapabilities(expr, schema) {
                var field = data.SQExprConverter.asFieldPattern(expr);
                if (field) {
                    var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(field), conceptualSchema = schema.schema(fieldExprItem.schema);
                    return conceptualSchema ? conceptualSchema.capabilities : void 0;
                }
            }
            function getKpiMetadata(expr, schema) {
                var kpiStatusProperty = getKpiStatusProperty(expr, schema);
                if (kpiStatusProperty) return kpiStatusProperty.kpiValue.measure.kpi.statusMetadata;
                var kpiTrendProperty = getKpiTrendProperty(expr, schema);
                return kpiTrendProperty ? kpiTrendProperty.kpiValue.measure.kpi.trendMetadata : void 0;
            }
            function getParameterMetadata(expr, schema) {
                var property = expr.getConceptualProperty(schema);
                return property && property.column && property.column.parameterMetadata;
            }
            function getConceptualEntity(entityExpr, schema) {
                var conceptualEntity = schema.schema(entityExpr.schema).entities.withName(entityExpr.entity);
                return conceptualEntity;
            }
            function getColumnnsWithKey(keyExpr, schema) {
                var keyColumnExpr = keyExpr.getTargetColumnRef(schema);
                if (keyColumnExpr) {
                    var keyColumn = keyColumnExpr.getConceptualProperty(schema);
                    if (keyColumn && keyColumn.column) {
                        var entityExpr = keyColumnExpr.getTargetEntity();
                        if (entityExpr) {
                            var entity = getConceptualEntity(entityExpr, schema);
                            if (entity) {
                                for (var displayProperties = [], _i = 0, _a = entity.properties; _i < _a.length; _i++) {
                                    var property = _a[_i];
                                    property.column && property.column.keys && _.contains(property.column.keys, keyColumn) && displayProperties.push(data.SQExprBuilder.columnRef(entityExpr, property.name));
                                }
                                return displayProperties;
                            }
                        }
                    }
                }
            }
            function tryGetExprFromFilter(filter) {
                if (data.SQExpr.isIn(filter.condition) && 1 === _.size(filter.condition.args)) return filter.condition.args[0];
                if (data.SQExpr.isCompare(filter.condition)) {
                    if (data.SQExpr.isConstant(filter.condition.left)) return filter.condition.right;
                    if (data.SQExpr.isConstant(filter.condition.right)) return filter.condition.left;
                }
            }
            function getKpiStatusProperty(expr, schema) {
                var property = expr.getConceptualProperty(schema);
                if (property) {
                    var kpiValue = property.kpiValue;
                    return kpiValue && kpiValue.measure.kpi.status === property ? property : void 0;
                }
            }
            function getKpiTrendProperty(expr, schema) {
                var property = expr.getConceptualProperty(schema);
                if (property) {
                    var kpiValue = property.kpiValue;
                    return kpiValue && kpiValue.measure.kpi.trend === property ? property : void 0;
                }
            }
            function getDefaultValue(fieldSQExpr, schema) {
                var column = getConceptualColumn(fieldSQExpr, schema);
                if (column) return column.defaultValue;
            }
            function getConceptualColumn(fieldSQExpr, schema) {
                if (fieldSQExpr && schema) {
                    var sqField = data.SQExprConverter.asFieldPattern(fieldSQExpr);
                    if (sqField) {
                        var column = sqField.column || sqField.groupingColumn;
                        if (column) {
                            if (schema.schema(column.schema) && column.name) {
                                var property = schema.schema(column.schema).findProperty(column.entity, column.name);
                                if (property) return property.column;
                            }
                        } else {
                            var hierarchyLevelField = sqField.hierarchyLevel;
                            if (hierarchyLevelField) {
                                var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(sqField), schemaName = fieldExprItem.schema;
                                if (schema.schema(schemaName)) {
                                    var hierarchy = schema.schema(schemaName).findHierarchy(fieldExprItem.entity, hierarchyLevelField.name);
                                    if (hierarchy) {
                                        var hierarchyLevel = hierarchy.levels.withName(hierarchyLevelField.level);
                                        if (hierarchyLevel && hierarchyLevel.column) return hierarchyLevel.column.column;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            function getDefaultValues(fieldSQExprs, schema) {
                if (!_.isEmpty(fieldSQExprs) && schema) {
                    for (var result = [], _i = 0, fieldSQExprs_2 = fieldSQExprs; _i < fieldSQExprs_2.length; _i++) {
                        var sqExpr = fieldSQExprs_2[_i], defaultValue = getDefaultValue(sqExpr, schema);
                        defaultValue && result.push(defaultValue);
                    }
                    return result;
                }
            }
            function getDataViewScopeIdentityComparisonExpr(fieldsExpr, values) {
                for (var compareExprs = [], i = 0; i < fieldsExpr.length; i++) compareExprs.push(data.SQExprBuilder.compare(0, fieldsExpr[i], values[i]));
                if (!_.isEmpty(compareExprs)) {
                    for (var resultExpr, _i = 0, compareExprs_1 = compareExprs; _i < compareExprs_1.length; _i++) {
                        var compareExpr = compareExprs_1[_i];
                        resultExpr = data.SQExprBuilder.and(resultExpr, compareExpr);
                    }
                    return resultExpr;
                }
            }
            function getActiveTablesNames(queryDefn) {
                var tables = [], entitiesVisitor = new data.SQFromEntitiesVisitor();
                if (queryDefn) {
                    var selectedItems = queryDefn.from();
                    if (void 0 !== selectedItems) for (var _i = 0, _a = selectedItems.keys(); _i < _a.length; _i++) {
                        var key = _a[_i];
                        selectedItems.source(key).accept(entitiesVisitor, null);
                    }
                }
                return tables = _.map(entitiesVisitor.entities, (function(value) {
                    return value.entity;
                }));
            }
            function isRelatedToMany(schema, sourceExpr, targetExpr) {
                return isRelated(schema, sourceExpr, targetExpr, 0, 2) || isRelated(schema, targetExpr, sourceExpr, 2, 0);
            }
            function isRelatedToOne(schema, sourceExpr, targetExpr) {
                return isRelated(schema, sourceExpr, targetExpr, 2, 0) || isRelated(schema, targetExpr, sourceExpr, 0, 2);
            }
            function isRelated(schema, sourceExpr, targetExpr, sourceMultiplicity, targetMultiplicity) {
                var source = SQExprUtils.getConceptualEntity(sourceExpr, schema);
                if (_.isEmpty(source.navigationProperties)) return !1;
                var target = SQExprUtils.getConceptualEntity(targetExpr, schema), queue = [];
                for (queue.push(source); !_.isEmpty(queue); ) {
                    var current = queue.shift(), navProperties = current.navigationProperties;
                    if (!_.isEmpty(navProperties)) for (var _i = 0, navProperties_1 = navProperties; _i < navProperties_1.length; _i++) {
                        var navProperty = navProperties_1[_i];
                        if (navProperty.isActive && navProperty.targetMultiplicity === targetMultiplicity && navProperty.sourceMultiplicity === sourceMultiplicity) {
                            if (navProperty.targetEntity === target) return !0;
                            queue.push(navProperty.targetEntity);
                        }
                    }
                }
                return !1;
            }
            function isRelatedOneToOne(schema, sourceExpr, targetExpr) {
                var source = SQExprUtils.getConceptualEntity(sourceExpr, schema), target = SQExprUtils.getConceptualEntity(targetExpr, schema), sourceNavigations = source.navigationProperties, targetNavigations = target.navigationProperties;
                return (!_.isEmpty(sourceNavigations) || !_.isEmpty(targetNavigations)) && (hasOneToOneNavigation(sourceNavigations, target) || hasOneToOneNavigation(targetNavigations, source));
            }
            function hasOneToOneNavigation(navigationProperties, targetEntity) {
                if (_.isEmpty(navigationProperties)) return !1;
                for (var _i = 0, navigationProperties_1 = navigationProperties; _i < navigationProperties_1.length; _i++) {
                    var navigationProperty = navigationProperties_1[_i];
                    if (navigationProperty.isActive && navigationProperty.targetEntity === targetEntity && 0 === navigationProperty.sourceMultiplicity && 0 === navigationProperty.targetMultiplicity) return !0;
                }
                return !1;
            }
            function concatUnique(leftExprs, rightExprs) {
                for (var concatExprs = ArrayExtensions.copy(leftExprs), _i = 0, rightExprs_1 = rightExprs; _i < rightExprs_1.length; _i++) {
                    var expr = rightExprs_1[_i];
                    indexOfExpr(concatExprs, expr) === -1 && concatExprs.push(expr);
                }
                return concatExprs;
            }
            function detectTransformExpr(expr) {
                var detector = new TransformExprDetectionVisitor();
                return expr.accept(detector), detector.sawTransformOutputRoleRef;
            }
            function isExprValidForSorting(expr) {
                return !data.SQExpr.isFilteredEval(expr);
            }
            function isExprValidForFiltering(expr) {
                return !(data.SQExpr.isFilteredEval(expr) || data.SQExpr.isTransformOutputRoleRef(expr));
            }
            function isExprValidForClustering(expr) {
                return !(data.SQExpr.isFilteredEval(expr) || data.SQExpr.isHierarchy(expr) || data.SQExpr.isHierarchyLevel(expr));
            }
            function isExprValidForForecasting(expr) {
                return !data.SQExpr.isFilteredEval(expr);
            }
            SQExprUtils.supportsArithmetic = supportsArithmetic, SQExprUtils.indexOfExpr = indexOfExpr, 
            SQExprUtils.indexOfNamedExpr = indexOfNamedExpr, SQExprUtils.sequenceEqual = sequenceEqual, 
            SQExprUtils.uniqueName = uniqueName, SQExprUtils.defaultName = defaultName, SQExprUtils.isMeasure = isMeasure, 
            SQExprUtils.isAnyValue = isAnyValue, SQExprUtils.isDefaultValue = isDefaultValue, 
            SQExprUtils.discourageAggregation = discourageAggregation, SQExprUtils.getAggregateBehavior = getAggregateBehavior, 
            SQExprUtils.getSchemaCapabilities = getSchemaCapabilities, SQExprUtils.getKpiMetadata = getKpiMetadata, 
            SQExprUtils.getParameterMetadata = getParameterMetadata, SQExprUtils.getConceptualEntity = getConceptualEntity, 
            SQExprUtils.getColumnnsWithKey = getColumnnsWithKey, SQExprUtils.tryGetExprFromFilter = tryGetExprFromFilter, 
            SQExprUtils.getDefaultValue = getDefaultValue, SQExprUtils.getDefaultValues = getDefaultValues, 
            SQExprUtils.getDataViewScopeIdentityComparisonExpr = getDataViewScopeIdentityComparisonExpr, 
            SQExprUtils.getActiveTablesNames = getActiveTablesNames, SQExprUtils.isRelatedToMany = isRelatedToMany, 
            SQExprUtils.isRelatedToOne = isRelatedToOne, SQExprUtils.isRelatedOneToOne = isRelatedOneToOne, 
            SQExprUtils.concatUnique = concatUnique, SQExprUtils.detectTransformExpr = detectTransformExpr, 
            SQExprUtils.isExprValidForSorting = isExprValidForSorting, SQExprUtils.isExprValidForFiltering = isExprValidForFiltering, 
            SQExprUtils.isExprValidForClustering = isExprValidForClustering, SQExprUtils.isExprValidForForecasting = isExprValidForForecasting;
            var SQExprDefaultNameGenerator = (function(_super) {
                function SQExprDefaultNameGenerator() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(SQExprDefaultNameGenerator, _super), SQExprDefaultNameGenerator.prototype.visitEntity = function(expr) {
                    return expr.entity;
                }, SQExprDefaultNameGenerator.prototype.visitNamedQueryRef = function(expr) {
                    return "QueryRef(" + expr.queryName + ")";
                }, SQExprDefaultNameGenerator.prototype.visitColumnRef = function(expr) {
                    return expr.source.accept(this) + "." + expr.ref;
                }, SQExprDefaultNameGenerator.prototype.visitGroupRef = function(expr) {
                    return expr.source.accept(this) + "." + expr.ref;
                }, SQExprDefaultNameGenerator.prototype.visitMeasureRef = function(expr) {
                    return expr.source.accept(this) + "." + expr.ref;
                }, SQExprDefaultNameGenerator.prototype.visitHierarchy = function(expr) {
                    return expr.arg.accept(this) + "." + expr.hierarchy;
                }, SQExprDefaultNameGenerator.prototype.visitHierarchyLevel = function(expr) {
                    return expr.arg.accept(this) + "." + expr.level;
                }, SQExprDefaultNameGenerator.prototype.visitPropertyVariationSource = function(expr) {
                    return expr.arg.accept(this) + "." + expr.property + "." + expr.name;
                }, SQExprDefaultNameGenerator.prototype.visitAggr = function(expr) {
                    return data.aggregateFunctionName(expr.func) + "(" + expr.arg.accept(this) + ")";
                }, SQExprDefaultNameGenerator.prototype.visitPercentile = function(expr) {
                    var func = expr.exclusive ? "Percentile.Exc(" : "Percentile.Inc(";
                    return func + expr.arg.accept(this) + ", " + expr.k + ")";
                }, SQExprDefaultNameGenerator.prototype.visitArithmetic = function(expr) {
                    return powerbi.data.getArithmeticOperatorName(expr.operator) + "(" + expr.left.accept(this) + ", " + expr.right.accept(this) + ")";
                }, SQExprDefaultNameGenerator.prototype.visitConstant = function(expr) {
                    return "const";
                }, SQExprDefaultNameGenerator.prototype.visitTransformOutputRoleRef = function(expr) {
                    var name = expr.role;
                    return expr.transform && (name += "." + expr.transform), name;
                }, SQExprDefaultNameGenerator.prototype.visitScopedEval = function(expr) {
                    var _this = this;
                    return "ScopedEval(" + expr.expression.accept(this) + ", [" + _.map(expr.scope, (function(expr) {
                        return expr.accept(_this);
                    })).join(", ") + "])";
                }, SQExprDefaultNameGenerator.prototype.visitFilteredEval = function(expr) {
                    var _this = this, filterNameGenerator = function(filter) {
                        var filterString = "{";
                        return _.isEmpty(filter.target) || (filterString += "Target(" + _.map(filter.target, (function(target) {
                            return target.accept(_this);
                        })).join(", ") + "), "), filterString += "Condition(" + filter.condition.accept(_this) + ")}";
                    };
                    return "FilteredEval(" + expr.expression.accept(this) + ", [" + _.map(expr.filters, (function(filter) {
                        return filterNameGenerator(filter);
                    })).join(", ") + "])";
                }, SQExprDefaultNameGenerator.prototype.visitRoleRef = function(expr) {
                    return "Role." + expr.role;
                }, SQExprDefaultNameGenerator.prototype.visitDiscretize = function(expr) {
                    return "Discretize(" + expr.source.accept(this) + ", " + expr.count + ")";
                }, SQExprDefaultNameGenerator.prototype.visitMember = function(expr) {
                    return "Member(" + expr.source.accept(this) + ", " + expr.member + ")";
                }, SQExprDefaultNameGenerator.prototype.visitCompare = function(expr) {
                    var left = expr.left.accept(this), right = expr.right.accept(this), operator = "";
                    switch (expr.comparison) {
                      case 0:
                        operator = "=";
                        break;

                      case 1:
                        operator = ">";
                        break;

                      case 2:
                        operator = ">=";
                        break;

                      case 3:
                        operator = "<";
                        break;

                      case 4:
                        operator = "<=";
                    }
                    return "" + left + operator + right;
                }, SQExprDefaultNameGenerator.prototype.visitDefault = function(expr, fallback) {
                    return fallback || "expr";
                }, SQExprDefaultNameGenerator.instance = new SQExprDefaultNameGenerator(), SQExprDefaultNameGenerator;
            })(data.DefaultSQExprVisitorWithArg), IsMeasureVisitor = (function(_super) {
                function IsMeasureVisitor() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(IsMeasureVisitor, _super), IsMeasureVisitor.prototype.visitMeasureRef = function(expr) {
                    return !0;
                }, IsMeasureVisitor.prototype.visitAggr = function(expr) {
                    return !0;
                }, IsMeasureVisitor.prototype.visitArithmetic = function(expr) {
                    return !0;
                }, IsMeasureVisitor.prototype.visitDefault = function(expr) {
                    return !1;
                }, IsMeasureVisitor.instance = new IsMeasureVisitor(), IsMeasureVisitor;
            })(data.DefaultSQExprVisitor), IsDefaultValueVisitor = (function(_super) {
                function IsDefaultValueVisitor() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(IsDefaultValueVisitor, _super), IsDefaultValueVisitor.prototype.visitCompare = function(expr) {
                    return 0 === expr.comparison && expr.right.accept(this);
                }, IsDefaultValueVisitor.prototype.visitAnd = function(expr) {
                    return expr.left.accept(this) && expr.right.accept(this);
                }, IsDefaultValueVisitor.prototype.visitDefaultValue = function(expr) {
                    return !0;
                }, IsDefaultValueVisitor.prototype.visitDefault = function(expr) {
                    return !1;
                }, IsDefaultValueVisitor.instance = new IsDefaultValueVisitor(), IsDefaultValueVisitor;
            })(data.DefaultSQExprVisitor), IsAnyValueVisitor = (function(_super) {
                function IsAnyValueVisitor() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(IsAnyValueVisitor, _super), IsAnyValueVisitor.prototype.visitCompare = function(expr) {
                    return 0 === expr.comparison && expr.right.accept(this);
                }, IsAnyValueVisitor.prototype.visitAnd = function(expr) {
                    return expr.left.accept(this) && expr.right.accept(this);
                }, IsAnyValueVisitor.prototype.visitAnyValue = function(expr) {
                    return !0;
                }, IsAnyValueVisitor.prototype.visitDefault = function(expr) {
                    return !1;
                }, IsAnyValueVisitor.instance = new IsAnyValueVisitor(), IsAnyValueVisitor;
            })(data.DefaultSQExprVisitor), TransformExprDetectionVisitor = (function(_super) {
                function TransformExprDetectionVisitor() {
                    var _this = _super.call(this) || this;
                    return _this.sawTransformOutputRoleRef = !1, _this;
                }
                return __extends(TransformExprDetectionVisitor, _super), TransformExprDetectionVisitor.prototype.visitTransformOutputRoleRef = function(expr) {
                    this.sawTransformOutputRoleRef = !0;
                }, TransformExprDetectionVisitor;
            })(data.DefaultSQExprVisitorWithTraversal);
        })(SQExprUtils = data.SQExprUtils || (data.SQExprUtils = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SemanticQueryRewriter = (function() {
            function SemanticQueryRewriter(exprRewriter) {
                this.exprRewriter = exprRewriter;
            }
            return SemanticQueryRewriter.rewriteFrom = function(fromValue, sourceRewriter) {
                for (var updatedFromContents, originalFrom = fromValue, originalFromKeys = originalFrom.keys(), i = 0, len = originalFromKeys.length; i < len; i++) {
                    var keyName = originalFromKeys[i], orig = originalFrom.source(keyName), rewritten = orig.accept(sourceRewriter, keyName);
                    (orig !== rewritten || updatedFromContents) && (updatedFromContents || (updatedFromContents = _.pick(originalFrom.sources(), originalFromKeys.slice(0, i))), 
                    updatedFromContents[keyName] = rewritten);
                }
                return updatedFromContents ? new data.SQFrom(updatedFromContents) : originalFrom;
            }, SemanticQueryRewriter.prototype.rewriteFrom = function(fromValue) {
                return SemanticQueryRewriter.rewriteFrom(fromValue, new data.SQFromSourceRewriter(this.exprRewriter));
            }, SemanticQueryRewriter.prototype.rewriteSelect = function(selectItems, from) {
                return this.rewriteNamedSQExpressions(selectItems, from);
            }, SemanticQueryRewriter.prototype.rewriteGroupBy = function(groupByitems, from) {
                if (!_.isEmpty(groupByitems)) return this.rewriteNamedSQExpressions(groupByitems, from);
            }, SemanticQueryRewriter.prototype.rewriteNamedSQExpressions = function(expressions, from) {
                var _this = this;
                return _.map(expressions, (function(item) {
                    return {
                        name: item.name,
                        expr: data.SQExprRewriterWithSourceRenames.rewrite(item.expr.accept(_this.exprRewriter), from, from)
                    };
                }));
            }, SemanticQueryRewriter.prototype.rewriteOrderBy = function(orderByItems, from) {
                if (!_.isEmpty(orderByItems)) {
                    for (var orderBy = [], i = 0, len = orderByItems.length; i < len; i++) {
                        var item = orderByItems[i], updatedExpr = data.SQExprRewriterWithSourceRenames.rewrite(item.expr.accept(this.exprRewriter), from, from);
                        orderBy.push({
                            direction: item.direction,
                            expr: updatedExpr
                        });
                    }
                    return orderBy;
                }
            }, SemanticQueryRewriter.prototype.rewriteWhere = function(whereItems, from) {
                var _this = this;
                if (!_.isEmpty(whereItems)) {
                    for (var where = [], i = 0, len = whereItems.length; i < len; i++) {
                        var originalWhere = whereItems[i], updatedWhere = {
                            condition: data.SQExprRewriterWithSourceRenames.rewrite(originalWhere.condition.accept(this.exprRewriter), from, from)
                        };
                        originalWhere.target && (updatedWhere.target = _.map(originalWhere.target, (function(e) {
                            return data.SQExprRewriterWithSourceRenames.rewrite(e.accept(_this.exprRewriter), from, from);
                        }))), where.push(updatedWhere);
                    }
                    return where;
                }
            }, SemanticQueryRewriter.prototype.rewriteTransform = function(transformItems, from) {
                var _this = this;
                if (!_.isEmpty(transformItems)) {
                    for (var transforms = [], _i = 0, transformItems_1 = transformItems; _i < transformItems_1.length; _i++) {
                        var transformItem = transformItems_1[_i], inputColumns = void 0;
                        transformItem.input.table && !_.isEmpty(transformItem.input.table.columns) && (inputColumns = _.map(transformItem.input.table.columns, (function(c) {
                            return {
                                role: c.role,
                                expression: {
                                    name: c.expression.name,
                                    expr: data.SQExprRewriterWithSourceRenames.rewrite(c.expression.expr.accept(_this.exprRewriter), from, from)
                                }
                            };
                        })));
                        var newTransform = {
                            name: transformItem.name,
                            algorithm: transformItem.algorithm,
                            input: {
                                parameters: transformItem.input.parameters
                            },
                            output: transformItem.output
                        };
                        transformItem.input.table && (newTransform.input.table = {
                            name: transformItem.input.table.name,
                            columns: inputColumns
                        }), transforms.push(newTransform);
                    }
                    return transforms;
                }
            }, SemanticQueryRewriter;
        })();
        data.SemanticQueryRewriter = SemanticQueryRewriter;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function equals(left, right) {
            if (left === right) return !0;
            if (left && right) {
                if (isSQFromEntitySource(left) && isSQFromEntitySource(right)) return left.equals(right);
                if (isSQFromSubquerySource(left) && isSQFromSubquerySource(right)) return left.equals(right);
                if (isSQFromExprSource(left) && isSQFromExprSource(right)) return left.equals(right);
            }
            return !1;
        }
        function isSQFromEntitySource(source) {
            return null != source.entity;
        }
        function isSQFromSubquerySource(source) {
            return null != source.subquery;
        }
        function isSQFromExprSource(source) {
            return null != source.expr;
        }
        var ArrayExtensions = jsCommon.ArrayExtensions, StringExtensions = jsCommon.StringExtensions, SQFromEntitySource = (function() {
            function SQFromEntitySource(schema, entity) {
                this.schema = schema, this.entity = entity;
            }
            return SQFromEntitySource.prototype.accept = function(visitor, arg) {
                return visitor.visitEntity(this, arg);
            }, SQFromEntitySource.prototype.equals = function(source) {
                return source && this.entity === source.entity && this.schema === source.schema;
            }, SQFromEntitySource;
        })();
        data.SQFromEntitySource = SQFromEntitySource;
        var SQFromSubquerySource = (function() {
            function SQFromSubquerySource(subquery) {
                this.subquery = subquery;
            }
            return SQFromSubquerySource.prototype.accept = function(visitor, arg) {
                return visitor.visitSubquery(this, arg);
            }, SQFromSubquerySource.prototype.equals = function(source) {
                return source && data.SemanticQuery.equals(this.subquery, source.subquery);
            }, SQFromSubquerySource;
        })();
        data.SQFromSubquerySource = SQFromSubquerySource;
        var SQFromExprSource = (function() {
            function SQFromExprSource(expr) {
                this.expr = expr;
            }
            return SQFromExprSource.prototype.accept = function(visitor, arg) {
                return visitor.visitExpr(this, arg);
            }, SQFromExprSource.prototype.equals = function(source) {
                return source && data.SQExpr.equals(this.expr, source.expr);
            }, SQFromExprSource;
        })();
        data.SQFromExprSource = SQFromExprSource;
        var SQFrom = (function() {
            function SQFrom(items) {
                this.items = items || {};
            }
            return SQFrom.prototype.keys = function() {
                return Object.keys(this.items);
            }, SQFrom.prototype.source = function(key) {
                return this.items[key];
            }, SQFrom.prototype.sources = function() {
                return this.items;
            }, SQFrom.prototype.ensureSource = function(source, desiredVariableName) {
                var key = this.getSourceKeyFromItems(source);
                if (key) return {
                    name: key
                };
                var uniqueName = this.addSource(source, desiredVariableName);
                return {
                    name: uniqueName,
                    new: !0
                };
            }, SQFrom.prototype.remove = function(key) {
                delete this.items[key];
            }, SQFrom.prototype.getSourceKeyFromItems = function(source) {
                var keys = this.keys();
                for (var i in keys) {
                    var key = keys[i], item = this.items[key];
                    if (equals(item, source)) return key;
                }
            }, SQFrom.prototype.addSource = function(source, desiredVariableName) {
                for (var candidateName = desiredVariableName || source.accept(new SQFromSourceCandidateNameVisitor(), null), uniqueName = candidateName, usedNames = {}, _i = 0, _a = this.keys(); _i < _a.length; _i++) {
                    var key = _a[_i];
                    usedNames[key] = !0;
                }
                return uniqueName = StringExtensions.findUniqueName(usedNames, uniqueName), this.items[uniqueName] = source, 
                uniqueName;
            }, SQFrom.prototype.clone = function() {
                var cloned = new SQFrom();
                return $.extend(cloned.items, this.items), cloned;
            }, SQFrom.prototype.equals = function(comparand) {
                var _this = this;
                if (!comparand) return !1;
                var localKeys = this.keys(), comparandKeys = comparand.keys();
                return localKeys.length === comparandKeys.length && ArrayExtensions.sequenceEqual(localKeys, comparandKeys, (function(localKey, comparandKey) {
                    return equals(_this.source(localKey), comparand.source(comparandKey));
                }));
            }, SQFrom.prototype.renameSources = function(usedNames) {
                for (var rewrittenItems, items = this.items, keys = Object.keys(items), i = 0, count = keys.length; i < count; i++) {
                    var originalKey = keys[i], rewrittenKey = originalKey;
                    if (usedNames[originalKey] && (rewrittenKey = StringExtensions.findUniqueName(usedNames, originalKey), 
                    !rewrittenItems)) {
                        rewrittenItems = {};
                        for (var j = 0; j < i; j++) {
                            var keyToCopy = keys[j];
                            rewrittenItems[keyToCopy] = items[keyToCopy];
                        }
                    }
                    usedNames[rewrittenKey] = !0, rewrittenItems && (rewrittenItems[rewrittenKey] = items[originalKey]);
                }
                return rewrittenItems ? new SQFrom(rewrittenItems) : this;
            }, SQFrom;
        })();
        data.SQFrom = SQFrom, data.equals = equals, data.isSQFromEntitySource = isSQFromEntitySource, 
        data.isSQFromSubquerySource = isSQFromSubquerySource, data.isSQFromExprSource = isSQFromExprSource;
        var SQFromSourceCandidateNameVisitor = (function() {
            function SQFromSourceCandidateNameVisitor() {}
            return SQFromSourceCandidateNameVisitor.prototype.visitEntity = function(source) {
                var ref = source.entity, idx = ref.lastIndexOf(".");
                return idx >= 0 && idx !== ref.length - 1 && (ref = ref.substr(idx + 1)), ref.substring(0, 1).toLowerCase();
            }, SQFromSourceCandidateNameVisitor.prototype.visitSubquery = function(source) {
                return "q";
            }, SQFromSourceCandidateNameVisitor.prototype.visitExpr = function(source) {
                return "x";
            }, SQFromSourceCandidateNameVisitor;
        })();
        data.SQFromSourceCandidateNameVisitor = SQFromSourceCandidateNameVisitor;
        var SQFromEntitiesVisitor = (function() {
            function SQFromEntitiesVisitor() {
                this.entities = [];
            }
            return SQFromEntitiesVisitor.prototype.visitEntity = function(source, key) {
                this.entities.push(new data.SQEntityExpr(source.schema, source.entity, key));
            }, SQFromEntitiesVisitor.prototype.visitSubquery = function(source, key) {}, SQFromEntitiesVisitor.prototype.visitExpr = function(source, key) {}, 
            SQFromEntitiesVisitor;
        })();
        data.SQFromEntitiesVisitor = SQFromEntitiesVisitor;
        var SQFromSourceRewriter = (function() {
            function SQFromSourceRewriter(exprRewriter) {
                this.exprRewriter = exprRewriter;
            }
            return SQFromSourceRewriter.prototype.visitEntity = function(source, key) {
                var originalEntityExpr = data.SQExprBuilder.entity(source.schema, source.entity, key), updatedEntityExpr = originalEntityExpr.accept(this.exprRewriter);
                return new SQFromEntitySource(updatedEntityExpr.schema, updatedEntityExpr.entity);
            }, SQFromSourceRewriter.prototype.visitSubquery = function(source, key) {
                var originalSubquery = source.subquery, updatedSubquery = originalSubquery.rewrite(this.exprRewriter);
                return new SQFromSubquerySource(updatedSubquery);
            }, SQFromSourceRewriter.prototype.visitExpr = function(source, key) {
                var originalExpr = source.expr, updatedExpr = originalExpr.accept(this.exprRewriter);
                return new SQFromExprSource(updatedExpr);
            }, SQFromSourceRewriter;
        })();
        data.SQFromSourceRewriter = SQFromSourceRewriter;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var ArrayExtensions = jsCommon.ArrayExtensions, SemanticQuery = (function() {
            function SemanticQuery(from, where, orderBy, select, groupBy, transforms, top) {
                this.fromValue = from, this.whereItems = where, this.orderByItems = orderBy, this.selectItems = select, 
                this.groupByItems = groupBy, this.transformItems = transforms, null != top && (this.topValue = top);
            }
            return SemanticQuery.create = function() {
                return SemanticQuery.empty || (SemanticQuery.empty = new SemanticQuery(new data.SQFrom(), null, null, [], null, null, null)), 
                SemanticQuery.empty;
            }, SemanticQuery.createWith = function(clauses, suppressNormalization) {
                return suppressNormalization || (clauses = SemanticQuery.normalize(clauses)), new SemanticQuery(clauses.from, clauses.where, clauses.orderBy, clauses.select, clauses.groupBy, clauses.transforms, clauses.top);
            }, SemanticQuery.prototype.createModified = function(modifiedClauses) {
                return SemanticQuery.createWith({
                    from: void 0 !== modifiedClauses.from ? modifiedClauses.from : this.fromValue,
                    where: void 0 !== modifiedClauses.where ? modifiedClauses.where : this.whereItems,
                    transforms: void 0 !== modifiedClauses.transforms ? modifiedClauses.transforms : this.transformItems,
                    orderBy: void 0 !== modifiedClauses.orderBy ? modifiedClauses.orderBy : this.orderByItems,
                    select: void 0 !== modifiedClauses.select ? modifiedClauses.select : this.selectItems,
                    groupBy: void 0 !== modifiedClauses.groupBy ? modifiedClauses.groupBy : this.groupByItems,
                    top: void 0 !== modifiedClauses.top ? modifiedClauses.top : this.topValue
                });
            }, SemanticQuery.normalize = function(clauses) {
                var semanticQueryUnderConstruction = {
                    clauses: {
                        from: clauses.from,
                        where: clauses.where,
                        orderBy: clauses.orderBy,
                        select: clauses.select,
                        groupBy: clauses.groupBy,
                        transforms: clauses.transforms,
                        top: clauses.top
                    },
                    usedSourceNames: {}
                };
                return SemanticQuery.removeUnreferencedKeys(semanticQueryUnderConstruction), SemanticQuery.renameSources(semanticQueryUnderConstruction), 
                SemanticQuery.renameSourcesInSubqueries(semanticQueryUnderConstruction), semanticQueryUnderConstruction.clauses;
            }, SemanticQuery.removeUnreferencedKeys = function(semanticQueryUnderConstruction) {
                var clauses = semanticQueryUnderConstruction.clauses, from = clauses.from, where = clauses.where, orderBy = clauses.orderBy, select = clauses.select, groupBy = clauses.groupBy, transform = clauses.transforms, unreferencedKeyFinder = new UnreferencedKeyFinder(from.keys());
                if (where) for (var i = 0, len = where.length; i < len; i++) {
                    var filter = where[i];
                    filter.condition.accept(unreferencedKeyFinder);
                    var filterTarget = filter.target;
                    if (filterTarget) for (var j = 0, jlen = filterTarget.length; j < jlen; j++) filterTarget[j] && filterTarget[j].accept(unreferencedKeyFinder);
                }
                if (transform) for (var i = 0, len = transform.length; i < len; i++) {
                    var table = transform[i].input.table;
                    if (table && !_.isEmpty(table.columns)) for (var _i = 0, _a = table.columns; _i < _a.length; _i++) {
                        var column = _a[_i];
                        column.expression.expr.accept(unreferencedKeyFinder);
                    }
                }
                if (orderBy) for (var i = 0, len = orderBy.length; i < len; i++) orderBy[i].expr.accept(unreferencedKeyFinder);
                for (var i = 0, len = select.length; i < len; i++) select[i].expr.accept(unreferencedKeyFinder);
                if (groupBy) for (var i = 0, len = groupBy.length; i < len; i++) groupBy[i].expr.accept(unreferencedKeyFinder);
                var unreferencedKeys = unreferencedKeyFinder.result();
                if (unreferencedKeys) {
                    for (var trimmedFrom = from.clone(), _b = 0, unreferencedKeys_1 = unreferencedKeys; _b < unreferencedKeys_1.length; _b++) {
                        var unreferencedKey = unreferencedKeys_1[_b];
                        trimmedFrom.remove(unreferencedKey);
                    }
                    semanticQueryUnderConstruction.clauses.from = trimmedFrom;
                }
            }, SemanticQuery.renameSources = function(semanticQueryUnderConstruction) {
                var originalFrom = semanticQueryUnderConstruction.clauses.from, rewrittenFrom = originalFrom.renameSources(semanticQueryUnderConstruction.usedSourceNames);
                rewrittenFrom !== originalFrom && (semanticQueryUnderConstruction.clauses.from = rewrittenFrom, 
                SemanticQuery.rewriteClauses(semanticQueryUnderConstruction.clauses, new SQExprRewriterWithSourceRenames(originalFrom, rewrittenFrom)));
            }, SemanticQuery.renameSourcesInSubqueries = function(semanticQueryUnderConstruction) {
                semanticQueryUnderConstruction.clauses.from = SubquerySourceRenamer.renameSources(SemanticQuery.renameSourcesInQuery, semanticQueryUnderConstruction.clauses.from, semanticQueryUnderConstruction.usedSourceNames);
            }, SemanticQuery.renameSourcesInQuery = function(semanticQuery, usedSourceNames) {
                var semanticQueryUnderConstruction = {
                    clauses: semanticQuery.getClauses(),
                    usedSourceNames: usedSourceNames
                }, originalFrom = semanticQueryUnderConstruction.clauses.from;
                return SemanticQuery.renameSources(semanticQueryUnderConstruction), SemanticQuery.renameSourcesInSubqueries(semanticQueryUnderConstruction), 
                semanticQueryUnderConstruction.clauses.from === originalFrom ? semanticQuery : SemanticQuery.createWith(semanticQueryUnderConstruction.clauses);
            }, SemanticQuery.prototype.from = function(value) {
                return value ? this.createModified({
                    from: value
                }) : this.fromValue.clone();
            }, SemanticQuery.prototype.select = function(values) {
                return _.isEmpty(arguments) ? this.getSelect() : this.setSelect(values);
            }, SemanticQuery.prototype.getSelect = function() {
                return SemanticQuery.createNamedExpressionArray(this.selectItems);
            }, SemanticQuery.createNamedExpressionArray = function(items) {
                return ArrayExtensions.extendWithName(_.map(items, (function(s) {
                    return {
                        name: s.name,
                        expr: s.expr
                    };
                })));
            }, SemanticQuery.prototype.setSelect = function(values) {
                var from = this.fromValue.clone(), selectItems = SemanticQuery.rewriteExpressionsWithSourceRenames(values, from);
                return this.createModified({
                    from: from,
                    select: selectItems
                });
            }, SemanticQuery.rewriteExpressionsWithSourceRenames = function(values, from) {
                for (var items = [], i = 0, len = values.length; i < len; i++) {
                    var value = values[i];
                    items.push({
                        name: value.name,
                        expr: SQExprRewriterWithSourceRenames.rewrite(value.expr, null, from)
                    });
                }
                return items;
            }, SemanticQuery.prototype.removeSelect = function(expr) {
                for (var originalItems = this.selectItems, selectItems = [], i = 0, len = originalItems.length; i < len; i++) {
                    var originalExpr = originalItems[i];
                    data.SQExpr.equals(originalExpr.expr, expr) || selectItems.push(originalExpr);
                }
                return this.createModified({
                    select: selectItems
                });
            }, SemanticQuery.prototype.removeOrderBy = function(expr) {
                for (var sorts = this.orderBy(), i = sorts.length - 1; i >= 0; i--) data.SQExpr.equals(sorts[i].expr, expr) && sorts.splice(i, 1);
                return this.createModified({
                    orderBy: sorts
                });
            }, SemanticQuery.prototype.removeTransform = function(transform) {
                for (var transforms = this.transforms(), i = 0, len = transforms.length; i < len; i++) if (transforms[i].name === transform.name) {
                    transforms.splice(i, 1);
                    break;
                }
                return this.createModified({
                    transforms: transforms
                });
            }, SemanticQuery.prototype.selectNameOf = function(expr) {
                var index = data.SQExprUtils.indexOfNamedExpr(this.selectItems, expr);
                if (index >= 0) return this.selectItems[index].name;
            }, SemanticQuery.prototype.setSelectAt = function(index, expr) {
                if (!(index >= this.selectItems.length)) {
                    var select = this.select(), from = this.fromValue.clone(), originalName = select[index].name;
                    return select[index] = {
                        name: originalName,
                        expr: SQExprRewriterWithSourceRenames.rewrite(expr, null, from)
                    }, this.createModified({
                        from: from,
                        select: select
                    });
                }
            }, SemanticQuery.prototype.addSelect = function(expr, exprName) {
                var selectItems = this.select(), from = this.fromValue.clone();
                return selectItems.push(this.createNamedExpr(selectItems, from, expr, exprName)), 
                this.createModified({
                    from: from,
                    select: selectItems
                });
            }, SemanticQuery.prototype.createNamedExpr = function(currentNames, from, expr, exprName) {
                return {
                    name: data.SQExprUtils.uniqueName(currentNames, expr, exprName),
                    expr: SQExprRewriterWithSourceRenames.rewrite(expr, null, from)
                };
            }, SemanticQuery.prototype.groupBy = function(values) {
                return _.isEmpty(arguments) ? this.getGroupBy() : this.setGroupBy(values);
            }, SemanticQuery.prototype.getGroupBy = function() {
                return SemanticQuery.createNamedExpressionArray(this.groupByItems);
            }, SemanticQuery.prototype.setGroupBy = function(values) {
                var from = this.fromValue.clone(), groupByItems = SemanticQuery.rewriteExpressionsWithSourceRenames(values, from);
                return this.createModified({
                    from: from,
                    groupBy: groupByItems
                });
            }, SemanticQuery.prototype.addGroupBy = function(expr) {
                var groupByItems = this.groupBy(), from = this.fromValue.clone();
                return groupByItems.push(this.createNamedExpr(groupByItems, from, expr)), this.createModified({
                    from: from,
                    groupBy: groupByItems
                });
            }, SemanticQuery.prototype.orderBy = function(values) {
                return _.isEmpty(arguments) ? this.getOrderBy() : this.setOrderBy(values);
            }, SemanticQuery.prototype.getOrderBy = function() {
                var result = [], orderBy = this.orderByItems;
                if (orderBy) for (var i = 0, len = orderBy.length; i < len; i++) {
                    var clause = orderBy[i];
                    result.push({
                        expr: clause.expr,
                        direction: clause.direction
                    });
                }
                return result;
            }, SemanticQuery.prototype.setOrderBy = function(values) {
                for (var updatedOrderBy = [], from = this.fromValue.clone(), i = 0, len = values.length; i < len; i++) {
                    var clause = values[i];
                    updatedOrderBy.push({
                        expr: SQExprRewriterWithSourceRenames.rewrite(clause.expr, null, from),
                        direction: clause.direction
                    });
                }
                return this.createModified({
                    from: from,
                    orderBy: updatedOrderBy
                });
            }, SemanticQuery.prototype.where = function(filters, sourceFrom) {
                return _.isEmpty(arguments) ? this.getWhere() : this.setWhere([], filters, sourceFrom);
            }, SemanticQuery.prototype.getWhere = function() {
                var result = [], whereItems = this.whereItems;
                if (whereItems) for (var i = 0, len = whereItems.length; i < len; i++) result.push(whereItems[i]);
                return result;
            }, SemanticQuery.prototype.setWhere = function(existingFilters, newFilters, newFiltersFrom) {
                for (var updatedWhere = _.clone(existingFilters), updatedFrom = this.fromValue.clone(), _i = 0, newFilters_1 = newFilters; _i < newFilters_1.length; _i++) {
                    var newFilter = newFilters_1[_i], updatedFilter = {
                        condition: SQExprRewriterWithSourceRenames.rewrite(newFilter.condition, newFiltersFrom, updatedFrom)
                    };
                    newFilter.target && (updatedFilter.target = _.map(newFilter.target, (function(t) {
                        return SQExprRewriterWithSourceRenames.rewrite(t, newFiltersFrom, updatedFrom);
                    }))), updatedWhere.push(updatedFilter);
                }
                return this.createModified({
                    from: updatedFrom,
                    where: updatedWhere
                });
            }, SemanticQuery.prototype.addWhere = function(newFilters, newFiltersFrom) {
                return this.setWhere(this.where(), newFilters, newFiltersFrom);
            }, SemanticQuery.prototype.addSemanticFilter = function(filter) {
                return this.setWhere(this.where(), filter.where(), filter.from());
            }, SemanticQuery.prototype.transforms = function(transforms) {
                return _.isEmpty(arguments) ? this.getTransforms() : this.setTransforms(transforms);
            }, SemanticQuery.prototype.getTransforms = function() {
                var transforms = [];
                if (!_.isEmpty(this.transformItems)) for (var _i = 0, _a = this.transformItems; _i < _a.length; _i++) {
                    var transform = _a[_i];
                    transforms.push(transform);
                }
                return transforms;
            }, SemanticQuery.prototype.setTransforms = function(transforms) {
                for (var _this = this, from = this.fromValue.clone(), transformItems = [], _i = 0, transforms_1 = transforms; _i < transforms_1.length; _i++) {
                    var transform = transforms_1[_i], inputColumns = void 0;
                    transform.input.table && !_.isEmpty(transform.input.table.columns) && (inputColumns = _.map(transform.input.table.columns, (function(c) {
                        return {
                            role: c.role,
                            expression: _this.createNamedExpr(ArrayExtensions.extendWithName([]), from, c.expression.expr, c.expression.name)
                        };
                    })));
                    var newTransform = {
                        name: transform.name,
                        algorithm: transform.algorithm,
                        input: {
                            parameters: transform.input.parameters
                        },
                        output: transform.output
                    };
                    transform.input.table && (newTransform.input.table = {
                        name: transform.input.table.name,
                        columns: inputColumns
                    }), transformItems.push(newTransform);
                }
                return this.createModified({
                    from: from,
                    transforms: transforms
                });
            }, SemanticQuery.prototype.top = function(value) {
                return _.isEmpty(arguments) ? this.topValue : this.setTop(value);
            }, SemanticQuery.prototype.setTop = function(top) {
                return this.createModified({
                    top: top
                });
            }, SemanticQuery.prototype.rewrite = function(exprRewriter) {
                var clauses = this.getClauses();
                return SemanticQuery.rewriteClauses(clauses, exprRewriter), this.createModified(clauses);
            }, SemanticQuery.prototype.getClauses = function() {
                return {
                    from: this.fromValue,
                    where: this.whereItems,
                    orderBy: this.orderByItems,
                    select: this.selectItems,
                    groupBy: this.groupByItems,
                    transforms: this.transformItems,
                    top: this.topValue
                };
            }, SemanticQuery.rewriteClauses = function(clauses, exprRewriter) {
                var rewriter = new data.SemanticQueryRewriter(exprRewriter);
                clauses.from = rewriter.rewriteFrom(clauses.from), clauses.where = rewriter.rewriteWhere(clauses.where, clauses.from), 
                clauses.orderBy = rewriter.rewriteOrderBy(clauses.orderBy, clauses.from), clauses.select = rewriter.rewriteSelect(clauses.select, clauses.from), 
                clauses.groupBy = rewriter.rewriteGroupBy(clauses.groupBy, clauses.from), clauses.transforms = rewriter.rewriteTransform(clauses.transforms, clauses.from);
            }, SemanticQuery.equals = function(x, y) {
                return x.from().equals(y.from()) && ArrayExtensions.sequenceEqual(x.where(), y.where(), data.SQFilter.equals) && ArrayExtensions.sequenceEqual(x.orderBy(), y.orderBy(), data.SQUtils.sqSortDefinitionEquals) && ArrayExtensions.sequenceEqual(x.select(), y.select(), data.SQUtils.namedSQExprEquals) && ArrayExtensions.sequenceEqual(x.groupBy(), y.groupBy(), data.SQUtils.namedSQExprEquals) && ArrayExtensions.sequenceEqual(x.transforms(), y.transforms(), data.SQUtils.sqTransformEquals) && x.top() === y.top();
            }, SemanticQuery;
        })();
        data.SemanticQuery = SemanticQuery;
        var SemanticFilter = (function() {
            function SemanticFilter(from, where) {
                this.fromValue = from, this.whereItems = where;
            }
            return SemanticFilter.fromSQExpr = function(condition) {
                return SemanticFilter.fromSQFromAndSQExpr(new data.SQFrom(), condition);
            }, SemanticFilter.fromSQFromAndSQExpr = function(from, condition) {
                var rewrittenCondition = SQExprRewriterWithSourceRenames.rewrite(condition, from, from), where = [ {
                    condition: rewrittenCondition
                } ];
                return new SemanticFilter(from, where);
            }, SemanticFilter.fromSQFromAndSQFilters = function(from, where) {
                return new SemanticFilter(from, where);
            }, SemanticFilter.getDefaultValueFilter = function(fieldSQExprs) {
                return SemanticFilter.getDataViewScopeIdentityComparisonFilters(fieldSQExprs, data.SQExprBuilder.defaultValue());
            }, SemanticFilter.getAnyValueFilter = function(fieldSQExprs) {
                return SemanticFilter.getDataViewScopeIdentityComparisonFilters(fieldSQExprs, data.SQExprBuilder.anyValue());
            }, SemanticFilter.getDataViewScopeIdentityComparisonFilters = function(fieldSQExprs, value) {
                if (fieldSQExprs instanceof Array) {
                    var values = Array.apply(null, Array(fieldSQExprs.length)).map((function() {
                        return value;
                    }));
                    return SemanticFilter.fromSQExpr(data.SQExprUtils.getDataViewScopeIdentityComparisonExpr(fieldSQExprs, values));
                }
                return SemanticFilter.fromSQExpr(data.SQExprBuilder.equal(fieldSQExprs, value));
            }, SemanticFilter.prototype.from = function() {
                return this.fromValue.clone();
            }, SemanticFilter.prototype.conditions = function() {
                for (var expressions = [], where = this.whereItems, i = 0, len = where.length; i < len; i++) {
                    var filter = where[i];
                    expressions.push(filter.condition);
                }
                return expressions;
            }, SemanticFilter.prototype.where = function() {
                for (var result = [], whereItems = this.whereItems, i = 0, len = whereItems.length; i < len; i++) result.push(whereItems[i]);
                return result;
            }, SemanticFilter.prototype.rewrite = function(exprRewriter) {
                var rewriter = new data.SemanticQueryRewriter(exprRewriter), from = rewriter.rewriteFrom(this.fromValue), where = rewriter.rewriteWhere(this.whereItems, from);
                return new SemanticFilter(from, where);
            }, SemanticFilter.prototype.validate = function(schema, aggrUtils, errors) {
                var validator = new data.SQExprValidationVisitor(schema, aggrUtils, errors);
                return this.rewrite(validator), validator.errors;
            }, SemanticFilter.merge = function(filters) {
                if (_.isEmpty(filters)) return null;
                if (1 === filters.length) return filters[0];
                for (var firstFilter = filters[0], from = firstFilter.from(), where = ArrayExtensions.take(firstFilter.whereItems, firstFilter.whereItems.length), i = 1, len = filters.length; i < len; i++) SemanticFilter.applyFilter(filters[i], from, where);
                return new SemanticFilter(from, where);
            }, SemanticFilter.isDefaultFilter = function(filter) {
                return !(!filter || 1 !== filter.where().length) && data.SQExprUtils.isDefaultValue(filter.where()[0].condition);
            }, SemanticFilter.isAnyFilter = function(filter) {
                return !(!filter || 1 !== filter.where().length) && data.SQExprUtils.isAnyValue(filter.where()[0].condition);
            }, SemanticFilter.isSameFilter = function(leftFilter, rightFilter) {
                return !!jsCommon.JsonComparer.equals(leftFilter, rightFilter) && !(SemanticFilter.isDefaultFilter(leftFilter) && SemanticFilter.isAnyFilter(rightFilter) || SemanticFilter.isAnyFilter(leftFilter) && SemanticFilter.isDefaultFilter(rightFilter));
            }, SemanticFilter.applyFilter = function(filter, from, where) {
                for (var filterWhereItems = filter.whereItems, _i = 0, filterWhereItems_1 = filterWhereItems; _i < filterWhereItems_1.length; _i++) {
                    var filterWhereItem = filterWhereItems_1[_i], updatedWhereItem = {
                        condition: SQExprRewriterWithSourceRenames.rewrite(filterWhereItem.condition, filter.fromValue, from)
                    };
                    filterWhereItem.target && (updatedWhereItem.target = _.map(filterWhereItem.target, (function(e) {
                        return SQExprRewriterWithSourceRenames.rewrite(e, filter.fromValue, from);
                    }))), where.push(updatedWhereItem);
                }
            }, SemanticFilter;
        })();
        data.SemanticFilter = SemanticFilter;
        var SQExprRewriterWithSourceRenames = (function(_super) {
            function SQExprRewriterWithSourceRenames(sourceFrom, destinationFrom) {
                var _this = this;
                return _this = _super.call(this) || this, _this.sourceFrom = sourceFrom, _this.destinationFrom = destinationFrom, 
                _this;
            }
            return __extends(SQExprRewriterWithSourceRenames, _super), SQExprRewriterWithSourceRenames.prototype.visitEntity = function(expr) {
                var existingDestinationSource = this.destinationFrom.source(expr.variable);
                if (existingDestinationSource && data.isSQFromEntitySource(existingDestinationSource) && existingDestinationSource.schema === expr.schema && existingDestinationSource.entity === expr.entity) return expr;
                var resultOfEnsure = this.destinationFrom.ensureSource(new data.SQFromEntitySource(expr.schema, expr.entity), expr.variable);
                return resultOfEnsure.name !== expr.variable ? new data.SQEntityExpr(expr.schema, expr.entity, resultOfEnsure.name) : expr;
            }, SQExprRewriterWithSourceRenames.prototype.visitSubqueryRef = function(expr) {
                if (!this.sourceFrom) return expr;
                var sourceSource = this.sourceFrom.source(expr.variable), existingDestinationSource = this.destinationFrom.source(expr.variable);
                if (existingDestinationSource && data.isSQFromSubquerySource(existingDestinationSource) && SemanticQuery.equals(sourceSource.subquery, existingDestinationSource.subquery)) return expr;
                var resultOfEnsure = this.destinationFrom.ensureSource(new data.SQFromSubquerySource(sourceSource.subquery), expr.variable);
                return resultOfEnsure.name !== expr.variable ? new data.SQSubqueryRefExpr(resultOfEnsure.name) : expr;
            }, SQExprRewriterWithSourceRenames.prototype.visitNamedQueryRef = function(expr) {
                var existingDestinationSource = this.destinationFrom.source(expr.variable);
                if (existingDestinationSource && data.isSQFromExprSource(existingDestinationSource)) {
                    var sourceExpr = existingDestinationSource.expr;
                    if (data.SQExpr.equals(sourceExpr, expr)) return expr;
                }
                var resultOfEnsure = this.destinationFrom.ensureSource(new data.SQFromExprSource(expr), expr.variable);
                if (resultOfEnsure.name !== expr.variable) return new data.SQNamedQueryRefExpr(expr.queryName, resultOfEnsure.name);
            }, SQExprRewriterWithSourceRenames.rewrite = function(expr, sourceFrom, destinationFrom) {
                var rewriter = new SQExprRewriterWithSourceRenames(sourceFrom, destinationFrom);
                return expr.accept(rewriter);
            }, SQExprRewriterWithSourceRenames;
        })(data.SQExprRewriter);
        data.SQExprRewriterWithSourceRenames = SQExprRewriterWithSourceRenames;
        var UnreferencedKeyFinder = (function(_super) {
            function UnreferencedKeyFinder(keys) {
                var _this = this;
                return _this = _super.call(this) || this, _this.keys = keys, _this;
            }
            return __extends(UnreferencedKeyFinder, _super), UnreferencedKeyFinder.prototype.visitEntity = function(expr) {
                this.removeKey(expr.variable);
            }, UnreferencedKeyFinder.prototype.visitSubqueryRef = function(expr) {
                this.removeKey(expr.variable);
            }, UnreferencedKeyFinder.prototype.visitNamedQueryRef = function(expr) {
                this.removeKey(expr.variable);
            }, UnreferencedKeyFinder.prototype.removeKey = function(key) {
                var index = this.keys.indexOf(key);
                index >= 0 && this.keys.splice(index, 1);
            }, UnreferencedKeyFinder.prototype.result = function() {
                return this.keys;
            }, UnreferencedKeyFinder;
        })(data.DefaultSQExprVisitorWithTraversal), SubquerySourceRenamer = (function() {
            function SubquerySourceRenamer(renameSources, from, usedSourceNames) {
                this.renameSources = renameSources, this.from = from, this.usedSourceNames = usedSourceNames;
            }
            return SubquerySourceRenamer.renameSources = function(renameSources, from, usedSourceNames) {
                var renamer = new SubquerySourceRenamer(renameSources, from, usedSourceNames);
                return data.SemanticQueryRewriter.rewriteFrom(from, renamer);
            }, SubquerySourceRenamer.prototype.visitEntity = function(source, key) {
                return source;
            }, SubquerySourceRenamer.prototype.visitSubquery = function(source, key) {
                var originalSubquery = source.subquery, rewrittenSubquery = this.renameSources(originalSubquery, this.usedSourceNames);
                return rewrittenSubquery === originalSubquery ? source : new data.SQFromSubquerySource(rewrittenSubquery);
            }, SubquerySourceRenamer.prototype.visitExpr = function(source, key) {
                return source;
            }, SubquerySourceRenamer;
        })();
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SQFilter, ArrayExtensions = jsCommon.ArrayExtensions;
        !(function(SQFilter) {
            function equals(leftFilter, rightFilter) {
                return leftFilter || (leftFilter = null), rightFilter || (rightFilter = null), leftFilter === rightFilter || !!leftFilter == !!rightFilter && (!!targetsEqual(leftFilter, rightFilter) && data.SQExpr.equals(leftFilter.condition, rightFilter.condition));
            }
            function targetsEqual(leftFilter, rightFilter) {
                return ArrayExtensions.sequenceEqual(leftFilter.target, rightFilter.target, data.SQExpr.equals);
            }
            function contains(filters, searchTarget) {
                return !_.isEmpty(filters) && _.any(filters, (function(filter) {
                    return equals(filter, searchTarget);
                }));
            }
            SQFilter.equals = equals, SQFilter.targetsEqual = targetsEqual, SQFilter.contains = contains;
        })(SQFilter = data.SQFilter || (data.SQFilter = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SQUtils, ArrayExtensions = jsCommon.ArrayExtensions;
        !(function(SQUtils) {
            function sqSortDefinitionEquals(left, right) {
                return !left && !right || !(!left || !right) && (left.direction === right.direction && data.SQExpr.equals(left.expr, right.expr));
            }
            function namedSQExprEquals(left, right) {
                return !left && !right || !(!left || !right) && data.SQExpr.equals(left.expr, right.expr);
            }
            function sqTransformTableColumnsEquals(left, right) {
                return !left && !right || !(!left || !right) && (left.role === right.role && namedSQExprEquals(left.expression, right.expression));
            }
            function sqTransformTableEquals(left, right) {
                return !left && !right || !(!left || !right) && ArrayExtensions.sequenceEqual(left.columns, right.columns, (function(left, right) {
                    return sqTransformTableColumnsEquals(left, right);
                }));
            }
            function sqTransformInputEquals(left, right) {
                return !left && !right || !(!left || !right) && (ArrayExtensions.sequenceEqual(left.parameters, right.parameters, (function(left, right) {
                    return namedSQExprEquals(left, right);
                })) && sqTransformTableEquals(left.table, right.table));
            }
            function sqTransformOutputEquals(left, right) {
                return !left && !right || !(!left || !right) && sqTransformTableEquals(left.table, right.table);
            }
            function sqTransformEquals(left, right) {
                return !left && !right || !(!left || !right) && (left.algorithm === right.algorithm && sqTransformInputEquals(left.input, right.input) && sqTransformOutputEquals(left.output, right.output));
            }
            SQUtils.sqSortDefinitionEquals = sqSortDefinitionEquals, SQUtils.namedSQExprEquals = namedSQExprEquals, 
            SQUtils.sqTransformTableColumnsEquals = sqTransformTableColumnsEquals, SQUtils.sqTransformTableEquals = sqTransformTableEquals, 
            SQUtils.sqTransformInputEquals = sqTransformInputEquals, SQUtils.sqTransformOutputEquals = sqTransformOutputEquals, 
            SQUtils.sqTransformEquals = sqTransformEquals;
        })(SQUtils = data.SQUtils || (data.SQUtils = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function createCategoricalDataViewBuilder() {
            return new CategoricalDataViewBuilder();
        }
        function getScopeIdentity(source, index, value, valueType) {
            var identities = source.identities;
            return identities ? identities[index] : data.createDataViewScopeIdentity(SQExprBuilder.equal(source.fields[0], SQExprBuilder.typedConstant(value, valueType)));
        }
        function pushIfNotExists(items, itemToAdd) {
            _.contains(items, itemToAdd) || items.push(itemToAdd);
        }
        function applySeriesData(target, source, categoryLength) {
            var values = source.values;
            target.values = values;
            var highlights = source.highlights;
            highlights && (target.highlights = highlights);
            var aggregates;
            void 0 !== source.minLocal && (aggregates || (aggregates = {}), aggregates.minLocal = source.minLocal), 
            void 0 !== source.maxLocal && (aggregates || (aggregates = {}), aggregates.maxLocal = source.maxLocal), 
            aggregates && (target.source.aggregates = aggregates, _.extend(target, aggregates));
        }
        var DataViewTransform = powerbi.data.DataViewTransform, SQExprBuilder = powerbi.data.SQExprBuilder;
        data.createCategoricalDataViewBuilder = createCategoricalDataViewBuilder;
        var CategoricalDataViewBuilder = (function() {
            function CategoricalDataViewBuilder() {
                this.categories = [], this.staticMeasureColumns = [], this.dynamicMeasureColumns = [], 
                this.columnIndex = 0;
            }
            return CategoricalDataViewBuilder.prototype.withCategory = function(options) {
                var categoryValues = options.values, identityFrom = options.identityFrom, type = options.source.type, categoryColumn = {
                    source: options.source,
                    identityFields: options.identityFrom.fields,
                    identity: options.identityFrom.identities || [],
                    values: categoryValues
                };
                if (!options.identityFrom.identities) for (var categoryIndex = 0, categoryLength = categoryValues.length; categoryIndex < categoryLength; categoryIndex++) categoryColumn.identity.push(getScopeIdentity(identityFrom, categoryIndex, categoryValues[categoryIndex], type));
                return this.categories || (this.categories = []), this.categories.push(categoryColumn), 
                this;
            }, CategoricalDataViewBuilder.prototype.withCategories = function(categories) {
                return _.isEmpty(this.categories) ? this.categories = categories : Array.prototype.push.apply(this.categories, categories), 
                this;
            }, CategoricalDataViewBuilder.prototype.withValues = function(options) {
                for (var columns = options.columns, _i = 0, columns_8 = columns; _i < columns_8.length; _i++) {
                    var column = columns_8[_i];
                    this.staticMeasureColumns.push(column.source);
                }
                return this.staticSeriesValues = columns, this;
            }, CategoricalDataViewBuilder.prototype.withGroupedValues = function(options) {
                var groupColumn = options.groupColumn;
                this.dynamicSeriesMetadata = {
                    column: groupColumn.source,
                    identityFrom: groupColumn.identityFrom,
                    values: groupColumn.values
                };
                for (var valueColumns = options.valueColumns, _i = 0, valueColumns_1 = valueColumns; _i < valueColumns_1.length; _i++) {
                    var valueColumn = valueColumns_1[_i];
                    this.dynamicMeasureColumns.push(valueColumn.source);
                }
                return this.dynamicSeriesValues = options.data, this;
            }, CategoricalDataViewBuilder.prototype.fillData = function(dataViewValues) {
                var categoryColumn = _.first(this.categories), categoryLength = categoryColumn && categoryColumn.values ? categoryColumn.values.length : 0;
                if (this.hasDynamicSeries()) for (var seriesIndex = 0, seriesLength = this.dynamicSeriesMetadata.values.length; seriesIndex < seriesLength; seriesIndex++) for (var seriesMeasures = this.dynamicSeriesValues[seriesIndex], measureIndex = 0, measuresLen = this.dynamicMeasureColumns.length; measureIndex < measuresLen; measureIndex++) {
                    var groupIndex = seriesIndex * measuresLen + measureIndex;
                    applySeriesData(dataViewValues[groupIndex], seriesMeasures[measureIndex], categoryLength);
                }
                if (this.hasStaticSeries()) for (var staticColumnsStartingIndex = this.hasDynamicSeries() ? this.dynamicSeriesValues.length * this.dynamicMeasureColumns.length : 0, measureIndex = 0, measuresLen = this.staticMeasureColumns.length; measureIndex < measuresLen; measureIndex++) applySeriesData(dataViewValues[staticColumnsStartingIndex + measureIndex], this.staticSeriesValues[measureIndex], categoryLength);
            }, CategoricalDataViewBuilder.prototype.build = function() {
                for (var metadataColumns = [], categorical = {}, categoryMetadata = this.categories, dynamicSeriesMetadata = this.dynamicSeriesMetadata, _i = 0, categoryMetadata_1 = categoryMetadata; _i < categoryMetadata_1.length; _i++) {
                    var columnMetadata = categoryMetadata_1[_i];
                    pushIfNotExists(metadataColumns, columnMetadata.source);
                }
                if (this.hasDynamicSeries()) {
                    pushIfNotExists(metadataColumns, dynamicSeriesMetadata.column), categorical.values = DataViewTransform.createValueColumns([], dynamicSeriesMetadata.identityFrom.fields, dynamicSeriesMetadata.column);
                    for (var seriesValues = dynamicSeriesMetadata.values, seriesIndex = 0; seriesIndex < seriesValues.length; seriesIndex++) for (var seriesValue = seriesValues[seriesIndex], seriesIdentity = getScopeIdentity(dynamicSeriesMetadata.identityFrom, seriesIndex, seriesValue, dynamicSeriesMetadata.column.type), _a = 0, _b = this.dynamicMeasureColumns; _a < _b.length; _a++) {
                        var measure = _b[_a], column = _.toPlainObject(measure);
                        column.groupName = seriesValue, pushIfNotExists(metadataColumns, column), categorical.values.push({
                            source: column,
                            values: [],
                            identity: seriesIdentity
                        });
                    }
                    if (0 === seriesValues.length) for (var _c = 0, _d = this.dynamicMeasureColumns; _c < _d.length; _c++) {
                        var measure = _d[_c], column = _.toPlainObject(measure);
                        pushIfNotExists(metadataColumns, column), categorical.values.push({
                            source: column,
                            values: []
                        });
                    }
                    if (this.hasStaticSeries()) {
                        var dynamicSeriesGroups_1 = categorical.values.grouped();
                        categorical.values.grouped = function() {
                            return dynamicSeriesGroups_1;
                        }, this.appendStaticMeasureColumns(metadataColumns, categorical.values);
                    }
                } else categorical.values = DataViewTransform.createValueColumns(), this.appendStaticMeasureColumns(metadataColumns, categorical.values);
                var categories = this.categories;
                _.isEmpty(categories) || (categorical.categories = categories), this.fillData(categorical.values);
                var dataView = {
                    metadata: {
                        columns: metadataColumns
                    },
                    categorical: categorical
                };
                if (this.isLegalDataView(dataView)) return dataView;
            }, CategoricalDataViewBuilder.prototype.appendStaticMeasureColumns = function(metadataColumns, valueColumns) {
                if (!_.isEmpty(this.staticMeasureColumns)) for (var _i = 0, _a = this.staticMeasureColumns; _i < _a.length; _i++) {
                    var column = _a[_i];
                    pushIfNotExists(metadataColumns, column), valueColumns.push({
                        source: column,
                        values: []
                    });
                }
            }, CategoricalDataViewBuilder.prototype.isLegalDataView = function(dataView) {
                return !(this.hasDynamicSeries() && this.hasStaticSeries() && CategoricalDataViewBuilder.isVisualDataView(dataView.metadata.columns));
            }, CategoricalDataViewBuilder.isVisualDataView = function(metadataColumns) {
                return !_.isEmpty(metadataColumns) && _.any(metadataColumns, (function(metadataColumn) {
                    return !!metadataColumn.queryName;
                }));
            }, CategoricalDataViewBuilder.prototype.hasDynamicSeries = function() {
                return !!this.dynamicSeriesMetadata;
            }, CategoricalDataViewBuilder.prototype.hasStaticSeries = function() {
                return !!this.staticSeriesValues;
            }, CategoricalDataViewBuilder;
        })();
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function createStaticEvalContext(colorAllocatorCache, dataView, selectTransforms, themeColors) {
            return new StaticEvalContext(colorAllocatorCache || data.createColorAllocatorCache(), themeColors, dataView || {
                metadata: {
                    columns: []
                }
            }, selectTransforms);
        }
        function getExprValueFromTable(expr, selectTransforms, tableColumns, tableRow) {
            var selectIdx = data.DataViewSelectTransform.findExprSelectIndex(expr, selectTransforms);
            if (!(selectIdx < 0)) {
                var columnIdx = _.findIndex(tableColumns, (function(column) {
                    return column.index === selectIdx;
                }));
                if (!(columnIdx < 0)) {
                    if (SQExpr.isSelectRef(expr) && 0 === expr.attributeKind) {
                        var column = tableColumns[columnIdx], formatStringColumn = column.formatSource && column.formatSource.formatString;
                        if (columnIdx = tableColumns.indexOf(formatStringColumn), columnIdx < 0) return;
                    }
                    return tableRow[columnIdx];
                }
            }
        }
        function findAggregateValue(expr, selectTransforms, columns) {
            var isSelfAggregate, selectIdx = data.DataViewSelectTransform.findExprSelectIndex(expr, selectTransforms);
            if (selectIdx < 0 && !SQExpr.isMeasure(expr)) {
                if (selectIdx = data.DataViewSelectTransform.findExprSelectIndex(expr.arg, selectTransforms), 
                selectIdx < 0) return;
            } else isSelfAggregate = !0;
            var column = _.find(columns, (function(column) {
                return column.index === selectIdx && column.aggregates;
            }));
            if (column) {
                var columnAggr = column.aggregates, aggregateValue = isSelfAggregate ? columnAggr.single : findAggregates(columnAggr, expr);
                return void 0 !== aggregateValue ? aggregateValue : void 0;
            }
        }
        function findAggregates(aggregates, expr) {
            if (SQExpr.isPercentile(expr)) {
                var percentile = _.find(aggregates.percentiles, (function(percentile) {
                    if (percentile.k === expr.k) {
                        var isExclusive = !!percentile.exclusive;
                        return expr.exclusive === isExclusive;
                    }
                }));
                if (percentile) return percentile.value;
            } else if (SQExpr.isAggregation(expr)) switch (expr.func) {
              case 3:
                return getOptional(aggregates.min, aggregates.minLocal);

              case 4:
                return getOptional(aggregates.max, aggregates.maxLocal);

              case 6:
                return aggregates.median;

              case 1:
                return aggregates.average;
            }
        }
        function getOptional(value1, value2) {
            return void 0 !== value1 ? value1 : value2;
        }
        var SQExpr = powerbi.data.SQExpr;
        data.createStaticEvalContext = createStaticEvalContext;
        var StaticEvalContext = (function() {
            function StaticEvalContext(colorAllocatorCache, themeColors, dataView, selectTransforms) {
                this.colorAllocatorCache = colorAllocatorCache, this.dataView = dataView, this.selectTransforms = selectTransforms, 
                this.themeColors = themeColors;
            }
            return StaticEvalContext.prototype.getColorAllocator = function(expr) {
                return this.colorAllocatorCache.get(expr);
            }, StaticEvalContext.prototype.getThemeColor = function(colorIdx) {
                var themeColors = this.themeColors;
                if (themeColors) return themeColors.get(colorIdx);
            }, StaticEvalContext.prototype.getExprValue = function(expr) {
                var dataView = this.dataView, selectTransforms = this.selectTransforms;
                if (dataView && selectTransforms) {
                    if (SQExpr.isAggregation(expr) || SQExpr.isPercentile(expr) || SQExpr.isMeasure(expr)) {
                        var columnAggregate = findAggregateValue(expr, selectTransforms, dataView.metadata.columns);
                        if (void 0 !== columnAggregate) return columnAggregate;
                    }
                    return !dataView.table || _.isEmpty(dataView.table.columns) || _.isEmpty(dataView.table.rows) ? void 0 : getExprValueFromTable(expr, selectTransforms, dataView.table.columns, dataView.table.rows[0]);
                }
            }, StaticEvalContext.prototype.getRoleValues = function(roleName) {}, StaticEvalContext;
        })();
        data.getExprValueFromTable = getExprValueFromTable;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function createMatrixEvalContext(colorAllocatorProvider, dataViewMatrix) {
            return new MatrixEvalContext(colorAllocatorProvider, dataViewMatrix);
        }
        var SQExpr = powerbi.data.SQExpr;
        data.createMatrixEvalContext = createMatrixEvalContext;
        var MatrixEvalContext = (function() {
            function MatrixEvalContext(colorAllocatorProvider, dataView) {
                this.colorAllocatorProvider = colorAllocatorProvider, this.dataView = dataView, 
                dataView && (this.valueSourcesQueryNames = _.map(dataView.valueSources, (function(source) {
                    return source.queryName;
                })));
            }
            return MatrixEvalContext.prototype.getColorAllocator = function(expr) {
                return this.colorAllocatorProvider.get(expr);
            }, MatrixEvalContext.prototype.getExprValue = function(expr) {
                if (SQExpr.isSelectRef(expr)) return this.valueNode ? this.evaluateValue(expr) : this.rowPath ? this.evaluateRowHeader(expr) : this.columnPath ? this.evaluateColumnHeader(expr) : void 0;
            }, MatrixEvalContext.prototype.evaluateValue = function(expr) {
                var exprValueSourceIndex, valueSources = this.dataView.valueSources, currentValueColumnIndex = this.valueNode.valueSourceIndex || 0;
                if (exprValueSourceIndex = _.findIndex(valueSources, (function(source) {
                    return source.queryName === expr.expressionName;
                })), !(exprValueSourceIndex < 0)) {
                    var exprColumn = valueSources[exprValueSourceIndex];
                    if (0 === expr.attributeKind && exprColumn.formatSource && exprColumn.formatSource.formatString && (exprValueSourceIndex = _.findIndex(valueSources, (function(source) {
                        return source === exprColumn.formatSource.formatString;
                    }))), exprValueSourceIndex === currentValueColumnIndex) return this.valueNode.value;
                    var exprColumnLeafIndex = exprValueSourceIndex - currentValueColumnIndex + this.columnLeafIndex, exprValueNode = _.last(this.rowPath).values[exprColumnLeafIndex];
                    return exprValueNode ? exprValueNode.value : void 0;
                }
            }, MatrixEvalContext.prototype.evaluateRowHeader = function(expr) {}, MatrixEvalContext.prototype.evaluateColumnHeader = function(expr) {}, 
            MatrixEvalContext.prototype.getRoleValues = function(roleName) {
                var rowNode = _.last(this.rowPath);
                if (rowNode && !rowNode.isSubtotal) {
                    for (var valueSources = this.dataView.valueSources, roleValues = [], index = 0, len = valueSources.length; index < len; index++) data.DataRoleHelper.hasRole(valueSources[index], roleName) && roleValues.push(rowNode.values[index].value);
                    return roleValues.length > 0 ? roleValues : void 0;
                }
            }, MatrixEvalContext.prototype.setCurrentContext = function(valueNode, rowPath, columnPath, columnLeafIndex) {
                this.valueNode = valueNode, this.columnPath = columnPath, this.columnLeafIndex = columnLeafIndex, 
                this.rowPath = rowPath, this.valueNode;
            }, MatrixEvalContext.prototype.getDataView = function() {
                return this.dataView;
            }, MatrixEvalContext.prototype.getValueSourcesQueryNames = function() {
                return this.valueSourcesQueryNames;
            }, MatrixEvalContext.prototype.getRowPath = function() {
                return this.rowPath;
            }, MatrixEvalContext.prototype.getColumnPath = function() {
                return this.columnPath;
            }, MatrixEvalContext.prototype.getIntersection = function() {
                return this.valueNode;
            }, MatrixEvalContext;
        })();
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi_1) {
    var FormattingEncoder, StringExtensions = jsCommon.StringExtensions, Formatting = jsCommon.Formatting, RegExpExtensions = jsCommon.RegExpExtensions;
    !(function(FormattingEncoder) {
        function removeLiterals(format) {
            return literalMatcher.lastIndex = 0, format.replace(literalMatcher, "");
        }
        function preserveLiterals(format, literals) {
            for (literalMatcher.lastIndex = 0; ;) {
                var match = literalMatcher.exec(format);
                if (!match) break;
                var literal = match[0], literalOffset = literalMatcher.lastIndex - literal.length, token = String.fromCharCode(57600 + literals.length);
                literals.push(literal), format = format.substr(0, literalOffset) + token + format.substr(literalMatcher.lastIndex), 
                literalMatcher.lastIndex = literalOffset + 1;
            }
            return format;
        }
        function restoreLiterals(format, literals, quoted) {
            void 0 === quoted && (quoted = !0);
            for (var count = literals.length, i = 0; i < count; i++) {
                var token = String.fromCharCode(57600 + i), literal = literals[i];
                if (!quoted) {
                    var firstChar = literal[0];
                    literal = "\\" === firstChar || 1 === literal.length || literal[literal.length - 1] !== firstChar ? literal.substring(1) : literal.substring(1, literal.length - 1);
                }
                format = format.replace(token, literal);
            }
            return format;
        }
        var literalPatterns = [ "'[^']*'", '"[^"]*"', "\\\\.", "'[^']*$", '"[^"]*$', "\\\\$" ], literalMatcher = new RegExp(literalPatterns.join("|"), "g");
        FormattingEncoder.removeLiterals = removeLiterals, FormattingEncoder.preserveLiterals = preserveLiterals, 
        FormattingEncoder.restoreLiterals = restoreLiterals;
    })(FormattingEncoder || (FormattingEncoder = {}));
    var DateTimeFormat, IndexedTokensRegex = /({{)|(}})|{(\d+[^}]*)}/g, ZeroPlaceholder = "0", DigitPlaceholder = "#", ExponentialFormatChar = "E", NumericPlaceholders = [ ZeroPlaceholder, DigitPlaceholder ], NumericPlaceholderRegex = new RegExp(NumericPlaceholders.join("|"), "g"), FormattingService = (function() {
        function FormattingService() {}
        return FormattingService.prototype.formatValue = function(value, format, culture) {
            if (void 0 === value || null === value) return "";
            var gculture = this.getCulture(culture);
            return DateTimeFormat.canFormat(value) ? DateTimeFormat.format(value, format, gculture) : NumberFormat.canFormat(value) ? NumberFormat.format(value, format, gculture) : value.toString();
        }, FormattingService.prototype.format = function(formatWithIndexedTokens, args, culture) {
            var _this = this;
            if (!formatWithIndexedTokens) return "";
            var result = formatWithIndexedTokens.replace(IndexedTokensRegex, (function(match, left, right, argToken) {
                if (left) return "{";
                if (right) return "}";
                var parts = argToken.split(":"), argIndex = parseInt(parts[0], 10), argFormat = parts[1];
                return _this.formatValue(args[argIndex], argFormat, culture);
            }));
            return result;
        }, FormattingService.prototype.isStandardNumberFormat = function(format) {
            return NumberFormat.isStandardFormat(format);
        }, FormattingService.prototype.formatNumberWithCustomOverride = function(value, format, nonScientificOverrideFormat, culture) {
            var gculture = this.getCulture(culture);
            return NumberFormat.formatWithCustomOverride(value, format, nonScientificOverrideFormat, gculture);
        }, FormattingService.prototype.dateFormatString = function(unit) {
            return this._dateTimeScaleFormatInfo || this.initialize(), this._dateTimeScaleFormatInfo.getFormatString(unit);
        }, FormattingService.prototype.setCurrentCulture = function(cultureSelector) {
            this._currentCultureSelector !== cultureSelector && (this._currentCulture = this.getCulture(cultureSelector), 
            this._currentCultureSelector = cultureSelector, this._dateTimeScaleFormatInfo = new DateTimeScaleFormatInfo(this._currentCulture));
        }, FormattingService.prototype.getCulture = function(cultureSelector) {
            if (null == cultureSelector) return null == this._currentCulture && this.initialize(), 
            this._currentCulture;
            var culture = Globalize.findClosestCulture(cultureSelector);
            return culture || (culture = Globalize.culture("en-US")), culture;
        }, FormattingService.prototype.parseFloat = function(value) {
            return Globalize.parseFloat(value, this.getCulture());
        }, FormattingService.prototype.initialize = function() {
            var cultureName = this.getCurrentCulture();
            this.setCurrentCulture(cultureName);
            var calendarName = this.getUrlParam("calendar");
            if (calendarName) {
                var culture = this._currentCulture, c = culture.calendars[calendarName];
                c && (culture.calendar = c);
            }
        }, FormattingService.prototype.getCurrentCulture = function() {
            var formattingLocale = window.navigator.userLanguage || window.navigator.language || Globalize.culture().name;
            return powerbi.common && (formattingLocale = powerbi.common.formattingLocale || powerbi.common.cultureInfo || formattingLocale), 
            formattingLocale = this.getUrlParam("formatLocale") || this.getUrlParam("language") || formattingLocale;
        }, FormattingService.prototype.getUrlParam = function(name) {
            var param = window.location.search.match(RegExp("[?&]" + name + "=([^&]*)"));
            return param ? param[1] : void 0;
        }, FormattingService;
    })();
    !(function(DateTimeFormat) {
        function canFormat(value) {
            var result = value instanceof Date;
            return result;
        }
        function format(value, format, culture) {
            format = format || "G";
            var isStandard = 1 === format.length;
            try {
                return isStandard ? formatDateStandard(value, format, culture) : formatDateCustom(value, format, culture);
            } catch (e) {
                return formatDateStandard(value, "G", culture);
            }
        }
        function formatDateStandard(value, format, culture) {
            var patterns = culture.calendar.patterns;
            ensurePatterns(culture.calendar);
            var output = Formatting.findDateFormat(value, format, culture.name);
            return format = 1 === output.format.length ? patterns[output.format] : output.format, 
            culture = Globalize.culture("en-US"), Globalize.format(output.value, format, culture);
        }
        function formatDateCustom(value, format, culture) {
            var result, literals = [];
            if (format = FormattingEncoder.preserveLiterals(format, literals), format.indexOf("F") > -1) {
                format = StringExtensions.replaceAll(format, "FFFF", "FFF");
                var milliseconds = value.getMilliseconds();
                if (milliseconds % 10 >= 1 && (format = StringExtensions.replaceAll(format, "FFF", "fff")), 
                format = StringExtensions.replaceAll(format, "FFF", "FF"), milliseconds % 100 / 10 >= 1 && (format = StringExtensions.replaceAll(format, "FF", "ff")), 
                format = StringExtensions.replaceAll(format, "FF", "F"), milliseconds % 1e3 / 100 >= 1 && (format = StringExtensions.replaceAll(format, "F", "f")), 
                format = StringExtensions.replaceAll(format, "F", ""), "" === format || "%" === format) return "";
            }
            return format = processCustomDateTimeFormat(format), result = Globalize.format(value, format, culture), 
            result = localize(result, culture.calendar), result = FormattingEncoder.restoreLiterals(result, literals, !1);
        }
        function processCustomDateTimeFormat(format) {
            return format === _currentCachedFormat ? _currentCachedProcessedFormat : (_currentCachedFormat = format, 
            format = Formatting.fixDateTimeFormat(format), _currentCachedProcessedFormat = format, 
            format);
        }
        function localize(value, dictionary) {
            var timeSeparator = dictionary[":"];
            if (":" === timeSeparator) return value;
            for (var result = "", count = value.length, i = 0; i < count; i++) {
                var char = value.charAt(i);
                switch (char) {
                  case ":":
                    result += timeSeparator;
                    break;

                  default:
                    result += char;
                }
            }
            return result;
        }
        function ensurePatterns(calendar) {
            var patterns = calendar.patterns;
            void 0 === patterns.g && (patterns.g = patterns.f.replace(patterns.D, patterns.d), 
            patterns.G = patterns.F.replace(patterns.D, patterns.d));
        }
        var _currentCachedFormat, _currentCachedProcessedFormat;
        DateTimeFormat.canFormat = canFormat, DateTimeFormat.format = format;
    })(DateTimeFormat || (DateTimeFormat = {}));
    var NumberFormat;
    !(function(NumberFormat) {
        function getNonScientificFormatWithPrecision(baseFormat, numericFormat) {
            if (!numericFormat || void 0 === baseFormat) return baseFormat;
            var newFormat = "{0:" + numericFormat + "}";
            return baseFormat.replace("{0}", newFormat);
        }
        function getNumericFormat(value, baseFormat) {
            if (null == baseFormat) return baseFormat;
            if (hasFormatComponents(baseFormat)) {
                var _a = NumberFormat.getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;
                return value > 0 ? getNumericFormatFromComponent(value, positive) : 0 === value ? getNumericFormatFromComponent(value, zero) : getNumericFormatFromComponent(value, negative);
            }
            return getNumericFormatFromComponent(value, baseFormat);
        }
        function getNumericFormatFromComponent(value, format) {
            var match = RegExpExtensions.run(NumericFormatRegex, format);
            return match ? match[0] : format;
        }
        function addDecimalsToFormat(baseFormat, decimals, trailingZeros) {
            if (null == decimals) return baseFormat;
            if (null == baseFormat && (baseFormat = ZeroPlaceholder), hasFormatComponents(baseFormat)) {
                for (var _a = NumberFormat.getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero, formats = [ positive, negative, zero ], i = 0; i < formats.length; i++) formats[i] = addDecimalsToFormatComponent(formats[i], decimals, trailingZeros);
                return formats.join(NumberFormat.NumberFormatComponentsDelimeter);
            }
            return addDecimalsToFormatComponent(baseFormat, decimals, trailingZeros);
        }
        function addDecimalsToFormatComponent(format, decimals, trailingZeros) {
            if (decimals = Math.abs(decimals), decimals >= 0) {
                var literals = [];
                format = FormattingEncoder.preserveLiterals(format, literals);
                var placeholder = trailingZeros ? ZeroPlaceholder : DigitPlaceholder, decimalPlaceholders = _.repeat(placeholder, Math.abs(decimals)), match = RegExpExtensions.run(DecimalFormatRegex, format);
                if (match) {
                    var beforeDecimal = format.substr(0, match.index), formatDecimal = format.substr(match.index + 1, match[1].length), afterDecimal = format.substr(match.index + match[0].length);
                    if (trailingZeros) formatDecimal = decimalPlaceholders; else {
                        var decimalChange = decimalPlaceholders.length - formatDecimal.length;
                        decimalChange > 0 ? formatDecimal += decimalPlaceholders.slice(-decimalChange) : decimalChange < 0 && (formatDecimal = formatDecimal.slice(0, decimalChange));
                    }
                    formatDecimal.length > 0 && (formatDecimal = DecimalFormatCharacter + formatDecimal), 
                    format = beforeDecimal + formatDecimal + afterDecimal;
                } else decimalPlaceholders.length > 0 && (format = format.replace(LastNumericPlaceholderRegex, "$1" + DecimalFormatCharacter + decimalPlaceholders));
                0 !== literals.length && (format = FormattingEncoder.restoreLiterals(format, literals));
            }
            return format;
        }
        function hasFormatComponents(format) {
            return FormattingEncoder.removeLiterals(format).indexOf(NumberFormat.NumberFormatComponentsDelimeter) !== -1;
        }
        function getComponents(format) {
            var signFormat = {
                hasNegative: !1,
                positive: format,
                negative: format,
                zero: format
            }, literals = [];
            format = FormattingEncoder.preserveLiterals(format, literals);
            var signSpecificFormats = format.split(NumberFormat.NumberFormatComponentsDelimeter), formatCount = signSpecificFormats.length;
            return formatCount > 1 && (0 !== literals.length && (signSpecificFormats = _.map(signSpecificFormats, (function(signSpecificFormat) {
                return FormattingEncoder.restoreLiterals(signSpecificFormat, literals);
            }))), signFormat.hasNegative = !0, signFormat.positive = signFormat.zero = signSpecificFormats[0], 
            signFormat.negative = signSpecificFormats[1], formatCount > 2 && (signFormat.zero = signSpecificFormats[2])), 
            signFormat;
        }
        function canFormat(value) {
            var result = "number" == typeof value;
            return result;
        }
        function isStandardFormat(format) {
            return StandardFormatRegex.test(format);
        }
        function getFormatForWholeNumberAverage(columnFormat) {
            if (columnFormat && !isStandardFormat(columnFormat)) {
                var metadata = getCustomFormatMetadata(columnFormat);
                if (!metadata.hasDots) return addDecimalsToFormat(columnFormat, 2, !0);
            }
            return columnFormat;
        }
        function format(value, format, culture) {
            format = format || "G";
            try {
                return isStandardFormat(format) ? formatNumberStandard(value, format, culture) : formatNumberCustom(value, format, culture);
            } catch (e) {
                return Globalize.format(value, void 0, culture);
            }
        }
        function formatWithCustomOverride(value, format, nonScientificOverrideFormat, culture) {
            return formatNumberCustom(value, format, culture, nonScientificOverrideFormat);
        }
        function formatNumberStandard(value, format, culture) {
            var result, precision = format.length > 1 ? parseInt(format.substr(1, format.length - 1), 10) : void 0, numberFormatInfo = culture.numberFormat, formatChar = format.charAt(0);
            switch (formatChar) {
              case "e":
              case "E":
                void 0 === precision && (precision = 6);
                var mantissaDecimalDigits = _.repeat("0", precision);
                format = "0." + mantissaDecimalDigits + formatChar + "+000", result = formatNumberCustom(value, format, culture);
                break;

              case "f":
              case "F":
                result = void 0 !== precision ? value.toFixed(precision) : value.toFixed(numberFormatInfo.decimals), 
                result = localize(result, numberFormatInfo);
                break;

              case "g":
              case "G":
                var abs = Math.abs(value);
                if (0 === abs || 1e-4 <= abs && abs < 1e15) result = void 0 !== precision ? value.toPrecision(precision) : value.toString(); else {
                    if ("number" != typeof value) return String(value);
                    result = void 0 !== precision ? value.toExponential(precision) : value.toExponential(), 
                    result = result.replace("e", "E");
                }
                result = localize(result, numberFormatInfo);
                break;

              case "r":
              case "R":
                result = value.toString(), result = localize(result, numberFormatInfo);
                break;

              case "x":
              case "X":
                if (result = value.toString(16), "X" === formatChar && (result = result.toUpperCase()), 
                void 0 !== precision) {
                    var actualPrecision = result.length, isNegative = value < 0;
                    isNegative && actualPrecision--;
                    var paddingZerosCount = precision - actualPrecision, paddingZeros = void 0;
                    paddingZerosCount > 0 && (paddingZeros = _.repeat("0", paddingZerosCount)), result = isNegative ? "-" + paddingZeros + result.substr(1) : paddingZeros + result;
                }
                result = localize(result, numberFormatInfo);
                break;

              default:
                result = Globalize.format(value, format, culture);
            }
            return result;
        }
        function formatNumberCustom(value, format, culture, nonScientificOverrideFormat) {
            var result, numberFormatInfo = culture.numberFormat;
            if (!isFinite(value)) return Globalize.format(value, void 0);
            var formatComponents = getComponents(format);
            format = value > 0 ? formatComponents.positive : 0 === value ? formatComponents.zero : formatComponents.negative, 
            formatComponents.hasNegative && (value = Math.abs(value));
            var formatMeta = getCustomFormatMetadata(format, !0), literals = [];
            if (formatMeta.hasLiterals && (format = FormattingEncoder.preserveLiterals(format, literals)), 
            formatMeta.hasE && !nonScientificOverrideFormat) {
                var scientificMatch = RegExpExtensions.run(ScientificFormatRegex, format);
                if (scientificMatch) {
                    var formatM = format.substr(0, scientificMatch.index), formatE = format.substr(scientificMatch.index + 2), precision = getAndSaveCustomFormatPrecision(formatM, formatMeta), scale = getCustomFormatScale(formatM, formatMeta);
                    if (1 !== scale && (value *= scale), "number" != typeof value) return String(value);
                    var s = value.toExponential(precision), indexOfE = s.indexOf("e"), mantissa = s.substr(0, indexOfE), exp = s.substr(indexOfE + 1), resultM = fuseNumberWithCustomFormat(mantissa, formatM, numberFormatInfo), resultE = fuseNumberWithCustomFormat(exp, formatE, numberFormatInfo);
                    "+" === resultE.charAt(0) && "+" !== scientificMatch[0].charAt(1) && (resultE = resultE.substr(1));
                    var e = scientificMatch[0].charAt(0);
                    result = resultM + e + resultE;
                }
            }
            if (void 0 === result) {
                var valueFormatted = void 0, isValueGlobalized = !1, precision = getAndSaveCustomFormatPrecision(format, formatMeta), scale = getCustomFormatScale(format, formatMeta);
                if (1 !== scale && (value *= scale), value = parseFloat(toNonScientific(value, precision)), 
                !isFinite(value)) return Globalize.format(value, void 0);
                if (nonScientificOverrideFormat) {
                    var numericFormat = NumberFormat.getNumericFormat(value, format);
                    nonScientificOverrideFormat = getNonScientificFormatWithPrecision(nonScientificOverrideFormat, numericFormat), 
                    valueFormatted = powerbi_1.formattingService.format(nonScientificOverrideFormat, [ value ], culture.name), 
                    isValueGlobalized = !0;
                } else valueFormatted = toNonScientific(value, precision), valueFormatted = removeExtraneousPrecision(value, valueFormatted, precision, getAndSaveCustomFormatOptionalPrecision(format, formatMeta));
                result = fuseNumberWithCustomFormat(valueFormatted, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized);
            }
            return formatMeta.hasLiterals && (result = FormattingEncoder.restoreLiterals(result, literals, !1)), 
            _lastCustomFormatMeta = formatMeta, result;
        }
        function removeExtraneousPrecision(value, valueFormatted, decimals, optionalDecimals) {
            if (0 === optionalDecimals) return valueFormatted;
            var decimalPoint = valueFormatted.indexOf(".");
            if (decimalPoint === -1) return valueFormatted;
            for (var fractionStart = decimalPoint + 1, optionalStart = fractionStart + (decimals - optionalDecimals), i = optionalStart; i < valueFormatted.length; ++i) {
                var d = valueFormatted[i];
                if ("0" === d || "9" === d) {
                    var shorterFormattedValue = toNonScientific(value, i - fractionStart);
                    if (parseFloat(shorterFormattedValue) === value) return shorterFormattedValue;
                }
            }
            return valueFormatted;
        }
        function toNonScientific(value, precision) {
            var result = "", precisionZeros = 0;
            precision > 16 && (precisionZeros = precision - 16, precision = 16);
            var digitsBeforeDecimalPoint = powerbi_1.Double.log10(Math.abs(value));
            if (digitsBeforeDecimalPoint < 16) {
                if (digitsBeforeDecimalPoint > 0) {
                    var maxPrecision = 16 - digitsBeforeDecimalPoint;
                    precision > maxPrecision && (precisionZeros += precision - maxPrecision, precision = maxPrecision);
                }
                result = value.toFixed(precision);
            } else if (16 === digitsBeforeDecimalPoint) result = value.toFixed(0), precisionZeros += precision, 
            precisionZeros > 0 && (result += "."); else {
                if ("number" != typeof value) return String(value);
                result = value.toExponential(15);
                var indexOfE = result.indexOf("e");
                if (indexOfE > 0) {
                    var indexOfDot = result.indexOf("."), mantissa = result.substr(0, indexOfE), exp = result.substr(indexOfE + 1), powerZeros = parseInt(exp, 10) - (mantissa.length - indexOfDot - 1);
                    result = mantissa.replace(".", "") + _.repeat("0", powerZeros), precision > 0 && (result = result + "." + _.repeat("0", precision));
                }
            }
            return precisionZeros > 0 && (result += _.repeat("0", precisionZeros)), result;
        }
        function getCustomFormatMetadata(format, calculatePrecision, calculateScale, calculatePartsPerScale) {
            if (void 0 !== _lastCustomFormatMeta && format === _lastCustomFormatMeta.format) return _lastCustomFormatMeta;
            for (var literals = [], escaped = FormattingEncoder.preserveLiterals(format, literals), result = {
                format: format,
                hasLiterals: 0 !== literals.length,
                hasE: !1,
                hasCommas: !1,
                hasDots: !1,
                hasPercent: !1,
                hasPermile: !1,
                precision: void 0,
                optionalPrecision: void 0,
                scale: void 0,
                partsPerScale: void 0
            }, i = 0, length_1 = escaped.length; i < length_1; i++) {
                var c = escaped.charAt(i);
                switch (c) {
                  case "e":
                  case "E":
                    result.hasE = !0;
                    break;

                  case ",":
                    result.hasCommas = !0;
                    break;

                  case ".":
                    result.hasDots = !0;
                    break;

                  case "%":
                    result.hasPercent = !0;
                    break;

                  case "‰":
                    result.hasPermile = !0;
                }
            }
            var formatComponents = getComponents(format);
            return calculatePrecision && (result.precision = getAndSaveCustomFormatPrecision(formatComponents.positive, result)), 
            calculatePartsPerScale && (result.partsPerScale = getCustomFormatPartsPerScale(formatComponents.positive, result)), 
            calculateScale && (result.scale = getCustomFormatScale(formatComponents.positive, result)), 
            result;
        }
        function getAndSaveCustomFormatPrecision(format, formatMeta) {
            return ensureCustomFormatPrecision(format, formatMeta), formatMeta.precision;
        }
        function getAndSaveCustomFormatOptionalPrecision(format, formatMeta) {
            return ensureCustomFormatPrecision(format, formatMeta), formatMeta.optionalPrecision;
        }
        function ensureCustomFormatPrecision(format, formatMeta) {
            if (!(formatMeta.precision > -1)) {
                var precision = 0, optional = 0;
                if (formatMeta.hasDots) {
                    formatMeta.hasLiterals && (format = FormattingEncoder.removeLiterals(format));
                    var dotIndex = format.indexOf(".");
                    if (dotIndex > -1) {
                        for (var count = format.length, i = dotIndex; i < count; i++) {
                            var char = format.charAt(i);
                            if (char.match(NumericPlaceholderRegex) && ++precision, char === DigitPlaceholder ? ++optional : optional = 0, 
                            char === ExponentialFormatChar) break;
                        }
                        if (precision > 19) {
                            var precisionReduction = precision - 19;
                            optional = Math.max(0, optional - precisionReduction), precision = 19;
                        }
                    }
                }
                formatMeta.precision = precision, formatMeta.optionalPrecision = optional;
            }
        }
        function getCustomFormatPartsPerScale(format, formatMeta) {
            if (null != formatMeta.partsPerScale) return formatMeta.partsPerScale;
            var result = 1;
            return formatMeta.hasPercent && format.indexOf("%") > -1 && (result = 100 * result), 
            formatMeta.hasPermile && format.indexOf("‰") > -1 && (result = 1e3 * result), formatMeta.partsPerScale = result, 
            result;
        }
        function getCustomFormatScale(format, formatMeta) {
            if (formatMeta.scale > -1) return formatMeta.scale;
            var result = getCustomFormatPartsPerScale(format, formatMeta);
            if (formatMeta.hasCommas) {
                var dotIndex = format.indexOf(".");
                dotIndex === -1 && (dotIndex = format.length);
                for (var i = dotIndex - 1; i > -1; i--) {
                    var char = format.charAt(i);
                    if ("," !== char) break;
                    result /= 1e3;
                }
            }
            return formatMeta.scale = result, result;
        }
        function fuseNumberWithCustomFormat(value, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized) {
            var suppressModifyValue = !!nonScientificOverrideFormat, formatParts = format.split(".", 2);
            if (2 === formatParts.length) {
                var wholeFormat = formatParts[0], fractionFormat = formatParts[1], displayUnit = "";
                nonScientificOverrideFormat && (displayUnit = nonScientificOverrideFormat.replace(NumericalPlaceHolderRegex, ""), 
                value = value.replace(displayUnit, ""));
                var globalizedDecimalSeparator = numberFormatInfo["."], decimalSeparator = isValueGlobalized ? globalizedDecimalSeparator : ".", valueParts = value.split(decimalSeparator, 2), wholeValue = 1 === valueParts.length ? valueParts[0] + displayUnit : valueParts[0], fractionValue = 2 === valueParts.length ? valueParts[1] + displayUnit : "";
                fractionValue = fractionValue.replace(TrailingZerosRegex, "");
                var wholeFormattedValue = fuseNumberWithCustomFormatLeft(wholeValue, wholeFormat, numberFormatInfo, suppressModifyValue), fractionFormattedValue = fuseNumberWithCustomFormatRight(fractionValue, fractionFormat, suppressModifyValue);
                return fractionFormattedValue.fmtOnly || "" === fractionFormattedValue.value ? wholeFormattedValue + fractionFormattedValue.value : wholeFormattedValue + globalizedDecimalSeparator + fractionFormattedValue.value;
            }
            return fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue);
        }
        function fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue) {
            var groupSymbolIndex = format.indexOf(","), enableGroups = groupSymbolIndex > -1 && groupSymbolIndex < Math.max(format.lastIndexOf("0"), format.lastIndexOf("#")) && numberFormatInfo[","], groupDigitCount = 0, groupIndex = 0, groupSizes = numberFormatInfo.groupSizes || [ 3 ], groupSize = groupSizes[0], groupSeparator = numberFormatInfo[","], sign = "", firstChar = value.charAt(0);
            "+" !== firstChar && "-" !== firstChar || (sign = numberFormatInfo[firstChar], value = value.substr(1));
            for (var isZero = "0" === value, result = "", leftBuffer = "", vi = value.length - 1, fmtOnly = !0, fi = format.length - 1; fi > -1; fi--) {
                var formatChar = format.charAt(fi);
                switch (formatChar) {
                  case ZeroPlaceholder:
                  case DigitPlaceholder:
                    fmtOnly = !1, "" !== leftBuffer && (result = leftBuffer + result, leftBuffer = ""), 
                    suppressModifyValue || ((vi > -1 || formatChar === ZeroPlaceholder) && enableGroups && (groupDigitCount === groupSize ? (result = groupSeparator + result, 
                    groupIndex++, groupIndex < groupSizes.length && (groupSize = groupSizes[groupIndex]), 
                    groupDigitCount = 1) : groupDigitCount++), vi > -1 ? (isZero && formatChar === DigitPlaceholder || (result = value.charAt(vi) + result), 
                    vi--) : formatChar !== DigitPlaceholder && (result = formatChar + result));
                    break;

                  case ",":
                    break;

                  default:
                    leftBuffer = formatChar + leftBuffer;
                }
            }
            if (!suppressModifyValue) {
                if (vi > -1 && "" !== result) if (enableGroups) for (;vi > -1; ) groupDigitCount === groupSize ? (result = groupSeparator + result, 
                groupIndex++, groupIndex < groupSizes.length && (groupSize = groupSizes[groupIndex]), 
                groupDigitCount = 1) : groupDigitCount++, result = value.charAt(vi) + result, vi--; else result = value.substr(0, vi + 1) + result;
                return sign + leftBuffer + result;
            }
            return fmtOnly ? sign + leftBuffer + result : sign + leftBuffer + value + result;
        }
        function fuseNumberWithCustomFormatRight(value, format, suppressModifyValue) {
            var vi = 0, fCount = format.length, vCount = value.length;
            if (suppressModifyValue) {
                var lastChar = format.charAt(fCount - 1);
                return lastChar.match(NumericPlaceholderRegex) ? {
                    value: value,
                    fmtOnly: "" === value
                } : {
                    value: value + lastChar,
                    fmtOnly: "" === value
                };
            }
            for (var result = "", fmtOnly = !0, fi = 0; fi < fCount; fi++) {
                var formatChar = format.charAt(fi);
                if (vi < vCount) switch (formatChar) {
                  case ZeroPlaceholder:
                  case DigitPlaceholder:
                    result += value[vi++], fmtOnly = !1;
                    break;

                  default:
                    result += formatChar;
                } else formatChar !== DigitPlaceholder && (result += formatChar, fmtOnly = fmtOnly && formatChar !== ZeroPlaceholder);
            }
            return {
                value: result,
                fmtOnly: fmtOnly
            };
        }
        function localize(value, dictionary) {
            var plus = dictionary["+"], minus = dictionary["-"], dot = dictionary["."], comma = dictionary[","];
            if ("+" === plus && "-" === minus && "." === dot && "," === comma) return value;
            for (var count = value.length, result = "", i = 0; i < count; i++) {
                var char = value.charAt(i);
                switch (char) {
                  case "+":
                    result += plus;
                    break;

                  case "-":
                    result += minus;
                    break;

                  case ".":
                    result += dot;
                    break;

                  case ",":
                    result += comma;
                    break;

                  default:
                    result += char;
                }
            }
            return result;
        }
        var NumericalPlaceHolderRegex = /\{.+\}/, ScientificFormatRegex = /e[+-]*[0#]+/i, StandardFormatRegex = /^[a-z]\d{0,2}$/i, TrailingZerosRegex = /0+$/, DecimalFormatRegex = /\.([0#]*)/g, NumericFormatRegex = /[0#,\.]+[0,#]*/g, LastNumericPlaceholderRegex = /([0#])(?=[^0#]*$)/, DecimalFormatCharacter = ".";
        NumberFormat.NumberFormatComponentsDelimeter = ";", NumberFormat.getNumericFormat = getNumericFormat, 
        NumberFormat.addDecimalsToFormat = addDecimalsToFormat, NumberFormat.hasFormatComponents = hasFormatComponents, 
        NumberFormat.getComponents = getComponents;
        var _lastCustomFormatMeta;
        NumberFormat.canFormat = canFormat, NumberFormat.isStandardFormat = isStandardFormat, 
        NumberFormat.getFormatForWholeNumberAverage = getFormatForWholeNumberAverage, NumberFormat.format = format, 
        NumberFormat.formatWithCustomOverride = formatWithCustomOverride, NumberFormat.getCustomFormatMetadata = getCustomFormatMetadata;
    })(NumberFormat = powerbi_1.NumberFormat || (powerbi_1.NumberFormat = {}));
    var DateTimeScaleFormatInfo = (function() {
        function DateTimeScaleFormatInfo(culture) {
            var calendar = culture.calendar, patterns = calendar.patterns, monthAbbreviations = calendar.months.namesAbbr, cultureHasMonthAbbr = monthAbbreviations && monthAbbreviations[0], yearMonthPattern = patterns.Y, monthDayPattern = patterns.M, fullPattern = patterns.f, longTimePattern = patterns.T, shortTimePattern = patterns.t, separator = fullPattern.indexOf(",") > -1 ? ", " : " ", hasYearSymbol = 0 === yearMonthPattern.indexOf("yyyy'") && yearMonthPattern.length > 6 && "'" === yearMonthPattern[6];
            this.YearPattern = hasYearSymbol ? yearMonthPattern.substr(0, 7) : "yyyy";
            var yearPos = fullPattern.indexOf("yy"), monthPos = fullPattern.indexOf("MMMM");
            this.MonthPattern = cultureHasMonthAbbr && monthPos > -1 ? yearPos > monthPos ? "MMM yyyy" : "yyyy MMM" : yearMonthPattern, 
            this.DayPattern = cultureHasMonthAbbr ? monthDayPattern.replace("MMMM", "MMM") : monthDayPattern;
            var minutePos = fullPattern.indexOf("mm"), pmPos = fullPattern.indexOf("tt"), shortHourPattern = pmPos > -1 ? shortTimePattern.replace(":mm ", "") : shortTimePattern;
            switch (this.HourPattern = yearPos < minutePos ? this.DayPattern + separator + shortHourPattern : shortHourPattern + separator + this.DayPattern, 
            this.MinutePattern = shortTimePattern, this.SecondPattern = longTimePattern, this.MillisecondPattern = longTimePattern.replace("ss", "ss.fff"), 
            culture.name) {
              case "fi-FI":
                this.DayPattern = this.DayPattern.replace("'ta'", ""), this.HourPattern = this.HourPattern.replace("'ta'", "");
            }
        }
        return DateTimeScaleFormatInfo.prototype.getFormatString = function(unit) {
            switch (unit) {
              case powerbi_1.DateTimeUnit.Year:
                return this.YearPattern;

              case powerbi_1.DateTimeUnit.Month:
                return this.MonthPattern;

              case powerbi_1.DateTimeUnit.Week:
              case powerbi_1.DateTimeUnit.Day:
                return this.DayPattern;

              case powerbi_1.DateTimeUnit.Hour:
                return this.HourPattern;

              case powerbi_1.DateTimeUnit.Minute:
                return this.MinutePattern;

              case powerbi_1.DateTimeUnit.Second:
                return this.SecondPattern;

              case powerbi_1.DateTimeUnit.Millisecond:
                return this.MillisecondPattern;
            }
        }, DateTimeScaleFormatInfo;
    })();
    powerbi_1.formattingService = new FormattingService();
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var SQExprShortSerializer;
        !(function(SQExprShortSerializer) {
            function serialize(expr) {
                return JSON.stringify(expr.accept(SQExprSerializer.instance));
            }
            function serializeArray(exprs) {
                for (var str = "[", i = 0, len = exprs.length; i < len; i++) i > 0 && (str += ","), 
                str += SQExprShortSerializer.serialize(exprs[i]);
                return str + "]";
            }
            SQExprShortSerializer.serialize = serialize, SQExprShortSerializer.serializeArray = serializeArray;
            var SQExprSerializer = (function(_super) {
                function SQExprSerializer() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(SQExprSerializer, _super), SQExprSerializer.prototype.visitColumnRef = function(expr) {
                    return {
                        col: {
                            s: expr.source.accept(this),
                            r: expr.ref
                        }
                    };
                }, SQExprSerializer.prototype.visitMeasureRef = function(expr) {
                    return {
                        measure: {
                            s: expr.source.accept(this),
                            r: expr.ref
                        }
                    };
                }, SQExprSerializer.prototype.visitAggr = function(expr) {
                    return {
                        agg: {
                            a: expr.arg.accept(this),
                            f: expr.func
                        }
                    };
                }, SQExprSerializer.prototype.visitEntity = function(expr) {
                    return {
                        e: expr.entity
                    };
                }, SQExprSerializer.prototype.visitHierarchyLevel = function(expr) {
                    return {
                        h: expr.arg.accept(this),
                        l: expr.level
                    };
                }, SQExprSerializer.prototype.visitHierarchy = function(expr) {
                    return {
                        e: expr.arg.accept(this),
                        h: expr.hierarchy
                    };
                }, SQExprSerializer.prototype.visitPropertyVariationSource = function(expr) {
                    return {
                        e: expr.arg.accept(this),
                        n: expr.name,
                        p: expr.property
                    };
                }, SQExprSerializer.prototype.visitAnd = function(expr) {
                    return {
                        and: {
                            l: expr.left.accept(this),
                            r: expr.right.accept(this)
                        }
                    };
                }, SQExprSerializer.prototype.visitCompare = function(expr) {
                    return {
                        comp: {
                            k: expr.comparison,
                            l: expr.left.accept(this),
                            r: expr.right.accept(this)
                        }
                    };
                }, SQExprSerializer.prototype.visitConstant = function(expr) {
                    return {
                        const: {
                            t: expr.type.primitiveType,
                            v: expr.value
                        }
                    };
                }, SQExprSerializer.prototype.visitArithmetic = function(expr) {
                    return {
                        arithmetic: {
                            o: expr.operator,
                            l: expr.left.accept(this),
                            r: expr.right.accept(this)
                        }
                    };
                }, SQExprSerializer.prototype.visitScopedEval = function(expr) {
                    return {
                        scopedEval: {
                            e: expr.expression.accept(this),
                            s: serializeArray(expr.scope)
                        }
                    };
                }, SQExprSerializer.prototype.visitFilteredEval = function(expr) {
                    var _this = this, filterShortSerializer = function(filter) {
                        var filterObject = {};
                        return _.isEmpty(filter.target) || (filterObject.t = _.map(filter.target, (function(target) {
                            return target.accept(_this);
                        }))), filterObject.c = filter.condition.accept(_this), filterObject;
                    };
                    return {
                        filteredEval: {
                            e: expr.expression.accept(this),
                            f: "[" + _.map(expr.filters, (function(filter) {
                                return JSON.stringify(filterShortSerializer(filter));
                            })).join(", ") + "]"
                        }
                    };
                }, SQExprSerializer.prototype.visitWithRef = function(expr) {
                    return {
                        withRef: {
                            e: expr.expressionName
                        }
                    };
                }, SQExprSerializer.prototype.visitTransformTableRef = function(expr) {
                    return {
                        transformTableRef: {
                            source: expr.source
                        }
                    };
                }, SQExprSerializer.prototype.visitTransformOutputRoleRef = function(expr) {
                    var ref = {
                        transformOutputRoleRef: {
                            role: expr.role
                        }
                    };
                    return expr.transform && (ref.transformOutputRoleRef.transform = expr.transform), 
                    ref;
                }, SQExprSerializer.prototype.visitFloor = function(expr) {
                    var ref = {
                        floor: {
                            a: expr.arg.accept(this),
                            s: expr.size
                        }
                    };
                    return null != expr.timeUnit && (ref.floor.timeunit = expr.timeUnit), ref;
                }, SQExprSerializer.prototype.visitRoleRef = function(expr) {
                    return {
                        roleRef: {
                            role: expr.role
                        }
                    };
                }, SQExprSerializer.prototype.visitNot = function(expr) {
                    return {
                        not: expr.arg.accept(this)
                    };
                }, SQExprSerializer.prototype.visitIn = function(expr) {
                    return {
                        in: {
                            c: serializeArray(expr.args),
                            v: _.map(expr.values, (function(v) {
                                return serializeArray(v);
                            }))
                        }
                    };
                }, SQExprSerializer.prototype.visitDefault = function(expr) {}, SQExprSerializer.instance = new SQExprSerializer(), 
                SQExprSerializer;
            })(data.DefaultSQExprVisitor);
        })(SQExprShortSerializer = data.SQExprShortSerializer || (data.SQExprShortSerializer = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var Selector = powerbi.data.Selector, SelectionId = (function() {
            function SelectionId(selector, highlight, selectorsByColumn) {
                this.selector = selector, this.highlight = highlight, this.key = JSON.stringify({
                    selector: selector ? Selector.getKey(selector) : null,
                    highlight: highlight
                }), this.keyWithoutHighlight = JSON.stringify({
                    selector: selector ? Selector.getKey(selector) : null
                }), this.selectorsByColumn = selectorsByColumn;
            }
            return SelectionId.prototype.equals = function(other) {
                return this.selector && other.selector ? this.highlight === other.highlight && Selector.equals(this.selector, other.selector) : !this.selector == !other.selector && this.highlight === other.highlight;
            }, SelectionId.isEqual = function(one, other) {
                return one === other || null != one && null != other && one.equals(other);
            }, SelectionId.prototype.includes = function(other, ignoreHighlight) {
                void 0 === ignoreHighlight && (ignoreHighlight = !1);
                var thisSelector = this.selector, otherSelector = other.selector;
                if (!thisSelector || !otherSelector) return !1;
                var thisData = thisSelector.data, otherData = otherSelector.data;
                if (!thisData && thisSelector.metadata && thisSelector.metadata !== otherSelector.metadata) return !1;
                if (!ignoreHighlight && this.highlight !== other.highlight) return !1;
                if (thisData) {
                    if (!otherData) return !1;
                    if (thisData.length > 0) for (var i = 0, ilen = thisData.length; i < ilen; i++) {
                        var thisValue = thisData[i];
                        if (!otherData.some((function(otherValue) {
                            return powerbi.DataViewScopeIdentity.equals(thisValue, otherValue);
                        }))) return !1;
                    }
                }
                return !0;
            }, SelectionId.prototype.getKey = function() {
                return this.key;
            }, SelectionId.prototype.getKeyWithoutHighlight = function() {
                return this.keyWithoutHighlight;
            }, SelectionId.prototype.hasIdentity = function() {
                return this.selector && !!this.selector.data;
            }, SelectionId.prototype.getSelector = function() {
                return this.selector;
            }, SelectionId.prototype.getSelectorsByColumn = function() {
                return this.selectorsByColumn;
            }, SelectionId.createNull = function(highlight) {
                return void 0 === highlight && (highlight = !1), new SelectionId(null, highlight);
            }, SelectionId.createWithId = function(id, highlight) {
                void 0 === highlight && (highlight = !1);
                var selector = null;
                return id && (selector = {
                    data: [ id ]
                }), new SelectionId(selector, highlight);
            }, SelectionId.createWithMeasure = function(measureId, highlight) {
                void 0 === highlight && (highlight = !1);
                var selector = {
                    metadata: measureId
                }, selectionId = new SelectionId(selector, highlight);
                return selectionId.selectorsByColumn = {
                    metadata: [ measureId ]
                }, selectionId;
            }, SelectionId.createWithIdAndMeasure = function(id, measureId, highlight) {
                void 0 === highlight && (highlight = !1);
                var selector = {};
                id && (selector.data = [ id ]), measureId && (selector.metadata = measureId), id || measureId || (selector = null);
                var selectionId = new SelectionId(selector, highlight);
                return selectionId;
            }, SelectionId.createWithIdAndMeasureAndCategory = function(id, measureId, queryName, highlight) {
                void 0 === highlight && (highlight = !1);
                var selectionId = this.createWithIdAndMeasure(id, measureId, highlight);
                return selectionId.selector && (selectionId.selectorsByColumn = {}, id && queryName && (selectionId.selectorsByColumn.dataMap = {}, 
                selectionId.selectorsByColumn.dataMap[queryName] = [ id ]), measureId && (selectionId.selectorsByColumn.metadata = [ measureId ])), 
                selectionId;
            }, SelectionId.createWithIds = function(id1, id2, highlight) {
                void 0 === highlight && (highlight = !1);
                var selector = null, selectorData = SelectionId.idArray(id1, id2);
                return selectorData && (selector = {
                    data: selectorData
                }), new SelectionId(selector, highlight);
            }, SelectionId.createWithIdsAndMeasure = function(id1, id2, measureId, highlight) {
                void 0 === highlight && (highlight = !1);
                var selector = {}, selectorData = SelectionId.idArray(id1, id2);
                return selectorData && (selector.data = selectorData), measureId && (selector.metadata = measureId), 
                id1 || id2 || measureId || (selector = null), new SelectionId(selector, highlight);
            }, SelectionId.createWithSelectorForColumnAndMeasure = function(dataMap, measureId, highlight) {
                void 0 === highlight && (highlight = !1);
                var selectorsByColumn = {};
                _.isEmpty(dataMap) || (selectorsByColumn.dataMap = dataMap), measureId && (selectorsByColumn.metadata = [ measureId ]), 
                dataMap || measureId || (selectorsByColumn = null);
                var selector = Selector.convertSelectorsByColumnToSelector(selectorsByColumn);
                return new SelectionId(selector, highlight, selectorsByColumn);
            }, SelectionId.createWithSelectorForColumnAndMeasures = function(dataMap, measureIds, highlight) {
                void 0 === highlight && (highlight = !1);
                var selectorsByColumn = {};
                _.isEmpty(dataMap) || (selectorsByColumn.dataMap = dataMap), _.isEmpty(measureIds) || (selectorsByColumn.metadata = measureIds), 
                !dataMap && _.isEmpty(measureIds) && (selectorsByColumn = null);
                var selector = Selector.convertSelectorsByColumnToSelector(selectorsByColumn);
                return new SelectionId(selector, highlight, selectorsByColumn);
            }, SelectionId.createWithHighlight = function(original) {
                var newId = new SelectionId(original.getSelector(), (!0));
                return newId.selectorsByColumn = original.selectorsByColumn, newId;
            }, SelectionId.idArray = function(id1, id2) {
                if (id1 || id2) {
                    var data_5 = [];
                    return id1 && data_5.push(id1), id2 && id2 !== id1 && data_5.push(id2), data_5;
                }
            }, SelectionId;
        })();
        visuals.SelectionId = SelectionId;
        var SelectionIdBuilder = (function() {
            function SelectionIdBuilder() {}
            return SelectionIdBuilder.builder = function() {
                return new SelectionIdBuilder();
            }, SelectionIdBuilder.prototype.withColumnIdentity = function(identity, queryName) {
                return this.addItemToDataMap(queryName, identity), this;
            }, SelectionIdBuilder.prototype.withCategoryIdentity = function(categoryColumn, identity) {
                return categoryColumn && categoryColumn.source && categoryColumn.source.queryName && this.addItemToDataMap(categoryColumn.source.queryName, identity), 
                this;
            }, SelectionIdBuilder.prototype.withCategory = function(categoryColumn, index) {
                return categoryColumn && categoryColumn.source && categoryColumn.source.queryName && categoryColumn.identity && this.addItemToDataMap(categoryColumn.source.queryName, categoryColumn.identity[index]), 
                this;
            }, SelectionIdBuilder.prototype.withSeries = function(seriesColumn, valueColumn) {
                return seriesColumn && seriesColumn.source && seriesColumn.source.queryName && valueColumn && this.addItemToDataMap(seriesColumn.source.queryName, valueColumn.identity), 
                this;
            }, SelectionIdBuilder.prototype.withMeasure = function(measureId) {
                return this.ensureMeasures(), null != measureId && this.measures.push(measureId), 
                this;
            }, SelectionIdBuilder.prototype.withMeasures = function(measureIds) {
                this.ensureMeasures();
                for (var _i = 0, measureIds_1 = measureIds; _i < measureIds_1.length; _i++) {
                    var measureId = measureIds_1[_i];
                    this.measures.push(measureId);
                }
                return this;
            }, SelectionIdBuilder.prototype.createSelectionId = function() {
                return SelectionId.createWithSelectorForColumnAndMeasures(this.dataMap, this.measures);
            }, SelectionIdBuilder.prototype.ensureMeasures = function() {
                void 0 === this.measures && (this.measures = []);
            }, SelectionIdBuilder.prototype.addItemToDataMap = function(queryName, id) {
                if (id) {
                    this.dataMap || (this.dataMap = {});
                    var dataMap = this.dataMap, currentItem = dataMap[queryName];
                    return null == currentItem ? void (dataMap[queryName] = [ id ]) : void currentItem.push(id);
                }
            }, SelectionIdBuilder;
        })();
        visuals.SelectionIdBuilder = SelectionIdBuilder;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var VisualStylePresetHelpers;
    !(function(VisualStylePresetHelpers) {
        function getStylePreset(stylePresets, name) {
            if (stylePresets) {
                _.isEmpty(name) && (name = stylePresets.defaultPresetName);
                var preset = stylePresets.presets[name];
                return preset || (preset = stylePresets.presets[stylePresets.defaultPresetName]), 
                preset;
            }
        }
        function getStylePresetsEnum(stylePresets) {
            var members = [];
            if (stylePresets) {
                var presets = stylePresets.presets;
                if (presets) for (var name_2 in presets) {
                    var stylePreset = presets[name_2];
                    members.push({
                        value: stylePreset.name,
                        displayName: stylePreset.displayName
                    });
                }
            }
            return powerbi.createEnumType(members);
        }
        VisualStylePresetHelpers.getStylePreset = getStylePreset, VisualStylePresetHelpers.getStylePresetsEnum = getStylePresetsEnum;
    })(VisualStylePresetHelpers = powerbi.VisualStylePresetHelpers || (powerbi.VisualStylePresetHelpers = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var ArrayExtensions = jsCommon.ArrayExtensions, DataColorPalette = (function() {
            function DataColorPalette(colors, sentimentcolors) {
                this.basePickerColors = [ {
                    value: "#FFFFFF"
                }, {
                    value: "#000000"
                } ], this.colors = colors || DefaultColorManager.getDefaultColors(), this.sentimentColors = sentimentcolors || DefaultColorManager.defaultSentimentColors, 
                this.scales = {}, (_a = this.basePickerColors).push.apply(_a, _.take(this.colors, 8));
                var _a;
            }
            return DataColorPalette.prototype.getColorScaleByKey = function(key) {
                var scale = this.scales[key];
                return void 0 === scale && (scale = this.createScale(), this.scales[key] = scale), 
                scale;
            }, DataColorPalette.prototype.getNewColorScale = function() {
                return this.createScale();
            }, DataColorPalette.prototype.getColorByIndex = function(index) {
                return this.colors[index];
            }, DataColorPalette.prototype.getSentimentColors = function() {
                return this.sentimentColors;
            }, DataColorPalette.prototype.getBasePickerColors = function() {
                return this.basePickerColors;
            }, DataColorPalette.prototype.getAllColors = function() {
                return this.colors;
            }, DataColorPalette.prototype.createScale = function() {
                return D3ColorScale.createFromColors(this.colors);
            }, DataColorPalette;
        })();
        visuals.DataColorPalette = DataColorPalette;
        var D3ColorScale = (function() {
            function D3ColorScale(scale) {
                this.scale = scale;
            }
            return D3ColorScale.prototype.getColor = function(key) {
                return this.scale(key);
            }, D3ColorScale.prototype.clearAndRotateScale = function() {
                var offset = this.scale.domain().length, rotatedColors = ArrayExtensions.rotate(this.scale.range(), offset);
                this.scale = d3.scale.ordinal().range(rotatedColors);
            }, D3ColorScale.prototype.clone = function() {
                return new D3ColorScale(this.scale.copy());
            }, D3ColorScale.prototype.getDomain = function() {
                return this.scale.domain();
            }, D3ColorScale.createFromColors = function(colors) {
                return new D3ColorScale(d3.scale.ordinal().range(colors));
            }, D3ColorScale;
        })();
        visuals.D3ColorScale = D3ColorScale;
        var DefaultColorManager = (function() {
            function DefaultColorManager() {}
            return DefaultColorManager.getDefaultColors = function() {
                if (!DefaultColorManager.defaultColors) {
                    DefaultColorManager.defaultColors = [];
                    for (var baseColors = DefaultColorManager.defaultBaseColors, i = 0; i < DefaultColorManager.colorSectorCount; ++i) for (var j = 0, jlen = baseColors.length; j < jlen; ++j) DefaultColorManager.defaultColors.push({
                        value: jsCommon.Color.rotate(baseColors[j].value, i / DefaultColorManager.colorSectorCount)
                    });
                }
                return DefaultColorManager.defaultColors;
            }, DefaultColorManager.colorSectorCount = 12, DefaultColorManager.defaultBaseColors = [ {
                value: "#01B8AA"
            }, {
                value: "#374649"
            }, {
                value: "#FD625E"
            }, {
                value: "#F2C80F"
            }, {
                value: "#5F6B6D"
            }, {
                value: "#8AD4EB"
            }, {
                value: "#FE9666"
            }, {
                value: "#A66999"
            }, {
                value: "#3599B8"
            }, {
                value: "#DFBFBF"
            }, {
                value: "#4AC5BB"
            }, {
                value: "#5F6B6D"
            }, {
                value: "#FB8281"
            }, {
                value: "#F4D25A"
            }, {
                value: "#7F898A"
            }, {
                value: "#A4DDEE"
            }, {
                value: "#FDAB89"
            }, {
                value: "#B687AC"
            }, {
                value: "#28738A"
            }, {
                value: "#A78F8F"
            }, {
                value: "#168980"
            }, {
                value: "#293537"
            }, {
                value: "#BB4A4A"
            }, {
                value: "#B59525"
            }, {
                value: "#475052"
            }, {
                value: "#6A9FB0"
            }, {
                value: "#BD7150"
            }, {
                value: "#7B4F71"
            }, {
                value: "#1B4D5C"
            }, {
                value: "#706060"
            }, {
                value: "#0F5C55"
            }, {
                value: "#1C2325"
            }, {
                value: "#7D3231"
            }, {
                value: "#796419"
            }, {
                value: "#303637"
            }, {
                value: "#476A75"
            }, {
                value: "#7E4B36"
            }, {
                value: "#52354C"
            }, {
                value: "#0D262E"
            }, {
                value: "#544848"
            } ], DefaultColorManager.defaultSentimentColors = [ {
                value: "#C0433A"
            }, {
                value: "#E8D62E"
            }, {
                value: "#79C75B"
            } ], DefaultColorManager;
        })();
        visuals.DefaultColorManager = DefaultColorManager;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function createColorAllocatorFactory() {
            return new ColorAllocatorFactory();
        }
        function isColorAsZero(nullColoringStrategy) {
            return nullColoringStrategy.strategy === powerbi.NullStrategy.asZero;
        }
        function getColorFromNullStrategy(nullColoringStrategy) {
            switch (nullColoringStrategy.strategy) {
              case powerbi.NullStrategy.noColor:
                return;

              case powerbi.NullStrategy.specificColor:
                return nullColoringStrategy.color;

              case powerbi.NullStrategy.asZero:            }
        }
        var Color = jsCommon.Color, DataViewObjectEvaluator = powerbi.data.DataViewObjectEvaluator, SQExpr = powerbi.data.SQExpr;
        visuals.createColorAllocatorFactory = createColorAllocatorFactory;
        var ColorAllocatorFactory = (function() {
            function ColorAllocatorFactory() {}
            return ColorAllocatorFactory.prototype.linearGradient2 = function(options) {
                return new LinearGradient2Allocator(options);
            }, ColorAllocatorFactory.prototype.linearGradient3 = function(options, splitScales) {
                return splitScales ? new LinearGradient3AllocatorWithSplittedScales(options) : new LinearGradient3Allocator(options);
            }, ColorAllocatorFactory.prototype.conditionalColor = function(rule, evalContext) {
                return new ConditionalColorAllocator(rule, evalContext);
            }, ColorAllocatorFactory;
        })(), LinearGradient2Allocator = (function() {
            function LinearGradient2Allocator(options) {
                this.options = options;
                var min = options.min, max = options.max;
                this.scale = Color.createLinearColorScale([ min.value, max.value ], [ min.color, max.color ], !0);
            }
            return LinearGradient2Allocator.prototype.color = function(value) {
                var nullColoringStrategy = this.options.nullColoringStrategy;
                if (null === value && nullColoringStrategy) {
                    if (!isColorAsZero(nullColoringStrategy)) return getColorFromNullStrategy(nullColoringStrategy);
                    value = 0;
                }
                return this.scale(value);
            }, LinearGradient2Allocator;
        })(), LinearGradient3Allocator = (function() {
            function LinearGradient3Allocator(options) {
                this.options = options;
                var min = options.min, mid = options.mid, max = options.max;
                this.scale = Color.createLinearColorScale([ min.value, mid.value, max.value ], [ min.color, mid.color, max.color ], !0);
            }
            return LinearGradient3Allocator.prototype.color = function(value) {
                var nullColoringStrategy = this.options.nullColoringStrategy;
                if (null === value && nullColoringStrategy) {
                    if (!isColorAsZero(nullColoringStrategy)) return getColorFromNullStrategy(nullColoringStrategy);
                    value = 0;
                }
                return this.scale(value);
            }, LinearGradient3Allocator;
        })(), LinearGradient3AllocatorWithSplittedScales = (function() {
            function LinearGradient3AllocatorWithSplittedScales(options) {
                this.options = options;
                var min = options.min, mid = options.mid, max = options.max;
                this.scale1 = Color.createLinearColorScale([ min.value, mid.value ], [ min.color, mid.color ], !0), 
                this.scale2 = Color.createLinearColorScale([ mid.value, max.value ], [ mid.color, max.color ], !0);
            }
            return LinearGradient3AllocatorWithSplittedScales.prototype.color = function(value) {
                var nullColoringStrategy = this.options.nullColoringStrategy;
                if (null === value && nullColoringStrategy) {
                    if (!isColorAsZero(nullColoringStrategy)) return getColorFromNullStrategy(nullColoringStrategy);
                    value = 0;
                }
                return value <= this.options.mid.value ? this.scale1(value) : this.scale2(value);
            }, LinearGradient3AllocatorWithSplittedScales;
        })(), ConditionalColorAllocator = (function() {
            function ConditionalColorAllocator(rule, evalContext) {
                this.rule = rule, this.evalContext = evalContext;
            }
            return ConditionalColorAllocator.prototype.color = function(value) {
                var nullColoringStrategy = this.rule.nullColoringStrategy;
                if (null === value && nullColoringStrategy) {
                    if (!isColorAsZero(nullColoringStrategy)) return getColorFromNullStrategy(nullColoringStrategy);
                    value = 0;
                }
                var colorCases = this.rule.cases;
                if (!_.isEmpty(colorCases)) for (var i = colorCases.length - 1; i >= 0; i--) {
                    var colorCase = colorCases[i], condition = colorCase.condition;
                    if (condition && (SQExpr.isCompare(condition) || SQExpr.isAnd(condition))) {
                        var isConditionMet = DataViewObjectEvaluator.evaluateValue(this.evalContext, condition, powerbi.ValueType.fromPrimitiveTypeAndCategory(5));
                        if (isConditionMet) return colorCase.color;
                    }
                }
            }, ConditionalColorAllocator;
        })();
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));;"use strict";

var __assign = this && this.__assign || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
    }
    return t;
}, __extends = this && this.__extends || (function() {
    var extendStatics = Object.setPrototypeOf || {
        __proto__: []
    } instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    };
    return function(d, b) {
        function __() {
            this.constructor = d;
        }
        extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
    };
})(), powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var SQExprShortSerializer = powerbi.data.SQExprShortSerializer, ColorHelper = (function() {
            function ColorHelper(colors, fillProp, defaultDataPointColor, defaultCategoryColor) {
                this.colors = colors, this.fillProp = fillProp, this.defaultDataPointColor = defaultDataPointColor, 
                this.defaultCategoryColor = defaultCategoryColor, this.defaultColorScale = colors.getNewColorScale();
            }
            return ColorHelper.prototype.getColorForSeriesValue = function(objects, fieldIds, value) {
                return this.fillProp && powerbi.DataViewObjects.getFillColor(objects, this.fillProp) || this.defaultDataPointColor || this.getColorScaleForSeries(fieldIds).getColor(value).value;
            }, ColorHelper.prototype.getColorScaleForSeries = function(fieldIds) {
                return this.colors.getColorScaleByKey(SQExprShortSerializer.serializeArray(fieldIds || []));
            }, ColorHelper.prototype.getColorForStaticSeries = function(objects, measureKey) {
                var scaleColor = this.defaultColorScale.getColor(measureKey).value;
                return this.fillProp && powerbi.DataViewObjects.getFillColor(objects, this.fillProp) || this.defaultDataPointColor || scaleColor;
            }, ColorHelper.prototype.getColorForMeasure = function(objects, measureKey) {
                var scaleColor = this.defaultColorScale.getColor(measureKey).value;
                return this.fillProp && powerbi.DataViewObjects.getFillColor(objects, this.fillProp) || this.defaultCategoryColor || this.defaultDataPointColor || scaleColor;
            }, ColorHelper.normalizeSelector = function(selector, isSingleSeries) {
                return selector && (isSingleSeries || selector.data) ? {
                    data: selector.data
                } : selector;
            }, ColorHelper;
        })();
        visuals.ColorHelper = ColorHelper;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var dataviewReaders;
        !(function(dataviewReaders) {
            var categorical;
            !(function(categorical) {
                function createColorReader(columnReader, objectReader, dataReader, options) {
                    return new ColorReader(columnReader, objectReader, dataReader, options);
                }
                var ColorHelper = powerbi.visuals.ColorHelper;
                categorical.createColorReader = createColorReader;
                var ColorReader = (function() {
                    function ColorReader(columnReader, objectReader, dataReader, options) {
                        if (this.columnReader = columnReader, this.objectReader = objectReader, this.dataReader = dataReader, 
                        options && options.colorOptions) {
                            this.colorPalette = options.colorOptions.visualStyle.colorPalette.dataColors, this.valueRole = options.colorOptions.valueRole;
                            var defaultColor = powerbi.DataViewObjects.getFillColor(this.objectReader.getStaticObjects(), ColorReader.defaultColorProp), defaultCategoryColor = powerbi.DataViewObjects.getFillColor(this.objectReader.getStaticObjects(), ColorReader.defaultCategoryColorProp);
                            this.colorHelper = new ColorHelper(this.colorPalette, ColorReader.fillProp, options.colorOptions.ignoreDefaultColor ? void 0 : defaultColor, options.colorOptions.ignoreDefaultCategoryColor ? void 0 : defaultCategoryColor), 
                            this.colorReaderIsValid = !0;
                        } else this.colorReaderIsValid = !1;
                    }
                    return ColorReader.prototype.createByCategory = function(categoryIndex) {
                        if (this.colorReaderIsValid) return this.colorHelper.getColorForSeriesValue(this.objectReader.getCategoryDataObjects(categoryIndex), this.columnReader.getCategoryColumnIdentityFields(), this.getCategoryValueForColor(categoryIndex));
                    }, ColorReader.prototype.createBySeries = function(seriesIndex, categoryIndex) {
                        if (this.colorReaderIsValid) {
                            var valueQueryName = "";
                            return this.valueRole && (valueQueryName = this.columnReader.getValueQueryName(this.valueRole, seriesIndex) || ""), 
                            this.columnReader.hasDynamicSeries() ? this.colorHelper.getColorForSeriesValue(this.objectReader.getSeriesDataObjects(seriesIndex), this.columnReader.getDynamicSeriesColumnIdentityFields(), this.dataReader.getSeriesName(seriesIndex)) : this.columnReader.hasStaticSeries() ? this.colorHelper.getColorForStaticSeries(this.objectReader.getSeriesDataObjects(seriesIndex), valueQueryName) : this.columnReader.hasCategories() && null != categoryIndex ? this.colorHelper.getColorForMeasure(this.objectReader.getCategoryDataObjects(categoryIndex), valueQueryName) : this.colorHelper.getColorForMeasure(this.objectReader.getValueMetadataObjects(this.valueRole, seriesIndex), valueQueryName);
                        }
                    }, ColorReader.prototype.createByValue = function(seriesIndex) {
                        if (this.colorReaderIsValid && null != this.valueRole) {
                            var queryName = this.columnReader.getValueQueryName(this.valueRole, 0) || "";
                            return this.colorHelper.getColorForMeasure(this.objectReader.getValueMetadataObjects(this.valueRole, seriesIndex), queryName);
                        }
                    }, ColorReader.prototype.getCategoryValueForColor = function(categoryIndex) {
                        var categoryColumns = this.columnReader.getAllCategoryColumns();
                        if (categoryColumns) return _.first(categoryColumns).values[categoryIndex];
                    }, ColorReader.defaultColorProp = {
                        objectName: "dataPoint",
                        propertyName: "defaultColor"
                    }, ColorReader.defaultCategoryColorProp = {
                        objectName: "dataPoint",
                        propertyName: "defaultCategoryColor"
                    }, ColorReader.fillProp = {
                        objectName: "dataPoint",
                        propertyName: "fill"
                    }, ColorReader;
                })();
            })(categorical = dataviewReaders.categorical || (dataviewReaders.categorical = {}));
        })(dataviewReaders = data.dataviewReaders || (data.dataviewReaders = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var dataviewReaders;
        !(function(dataviewReaders) {
            var categorical;
            !(function(categorical_1) {
                function createColumnReader(dataView, options) {
                    return new ColumnReader(dataView, options);
                }
                var DataRoleHelper = powerbi.data.DataRoleHelper;
                categorical_1.createColumnReader = createColumnReader;
                var ColumnReader = (function() {
                    function ColumnReader(dataView, options) {
                        this.dataView = dataView;
                        var categorical;
                        dataView && (categorical = dataView.categorical);
                        var categories;
                        categorical && (categories = this.categories = categorical.categories), this.hasValidCategories = !_.isEmpty(categories), 
                        options && (this.staticSeriesRole = options.staticSeriesRole);
                        var values;
                        if (categorical && (values = categorical.values), this.dataHasAnyValidValues = !1, 
                        null != values) {
                            var grouped = dataView.categorical.values.grouped();
                            if (grouped.length > 0) {
                                this.grouped = grouped;
                                var valueRoleIndexMapping = {}, firstGroupValues = grouped[0].values;
                                this.dataHasAnyValidValues = !!grouped[0].identity || !_.isEmpty(firstGroupValues) && !_.isEmpty(firstGroupValues[0].values);
                                for (var valueIndex = 0, valueCount = firstGroupValues.length; valueIndex < valueCount; valueIndex++) {
                                    var valueRoles = firstGroupValues[valueIndex].source.roles;
                                    for (var role in valueRoles) valueRoles[role] && (valueRoleIndexMapping[role] || (valueRoleIndexMapping[role] = []), 
                                    valueRoleIndexMapping[role].push(valueIndex));
                                }
                                this.valueRoleIndexMapping = valueRoleIndexMapping;
                            }
                            this.dataHasDynamicSeries = !!this.dataView.categorical.values.source;
                        }
                        this.dataHasStaticSeries = !this.dataHasDynamicSeries && this.getValueColumnCount(this.staticSeriesRole) > 1;
                    }
                    return ColumnReader.prototype.hasCategories = function() {
                        return this.hasValidCategories;
                    }, ColumnReader.prototype.hasCategoryWithRole = function(roleName) {
                        return DataRoleHelper.getCategoryIndexOfRole(this.categories, roleName) !== -1;
                    }, ColumnReader.prototype.getCategoryCount = function() {
                        return this.hasValidCategories ? _.last(this.categories).values.length : 0;
                    }, ColumnReader.prototype.hasCompositeCategories = function() {
                        return !!this.hasValidCategories && this.categories.length > 1;
                    }, ColumnReader.prototype.getCategoryColumn = function(roleName) {
                        if (this.hasValidCategories) {
                            var categories = this.categories, index = roleName ? DataRoleHelper.getCategoryIndexOfRole(categories, roleName) : 0;
                            return categories[index];
                        }
                    }, ColumnReader.prototype.getCategoryMetadataColumn = function(roleName) {
                        var categoryColumn = this.getCategoryColumn(roleName);
                        if (categoryColumn) return categoryColumn.source;
                    }, ColumnReader.prototype.getCategoryColumnIdentityFields = function(roleName) {
                        var categoryColumn = this.getCategoryColumn(roleName);
                        return categoryColumn ? categoryColumn.identityFields : void 0;
                    }, ColumnReader.prototype.getAllCategoryColumns = function(roleName) {
                        if (null == roleName) return this.categories;
                        if (this.hasValidCategories) {
                            var categories_1 = this.categories, indexes = roleName ? DataRoleHelper.getCategoryIndexesOfRole(categories_1, roleName) : [ 0 ];
                            return _.map(indexes, (function(index) {
                                return categories_1[index];
                            }));
                        }
                        return [];
                    }, ColumnReader.prototype.hasValues = function(roleName) {
                        return !!this.valueRoleIndexMapping && !_.isEmpty(this.valueRoleIndexMapping[roleName]);
                    }, ColumnReader.prototype.hasAnyValidValues = function() {
                        return this.dataHasAnyValidValues;
                    }, ColumnReader.prototype.getValueColumnCount = function(roleName) {
                        return this.hasValues(roleName) ? this.valueRoleIndexMapping[roleName].length : 0;
                    }, ColumnReader.prototype.hasHighlights = function() {
                        return !!(this.grouped && this.grouped[0] && this.grouped[0].values[0]) && !_.isEmpty(this.grouped[0].values[0].highlights);
                    }, ColumnReader.prototype.getValueColumn = function(roleName, seriesIndex) {
                        if (void 0 === seriesIndex && (seriesIndex = 0), this.hasValues(roleName)) return this.dataHasDynamicSeries ? this.getValueColumnInternal(roleName, seriesIndex, 0) : this.getValueColumnInternal(roleName, 0, seriesIndex);
                    }, ColumnReader.prototype.getAllValueColumnsForRole = function(roleName, seriesIndex) {
                        if (void 0 === seriesIndex && (seriesIndex = 0), this.hasValues(roleName)) {
                            for (var roleIndices = this.valueRoleIndexMapping[roleName], valueColumnForRoleCount = roleIndices.length, valueColumns = [], valueColumnIndexForRole = 0; valueColumnIndexForRole < valueColumnForRoleCount; valueColumnIndexForRole++) valueColumns.push(this.getValueColumnInternal(roleName, seriesIndex, valueColumnIndexForRole));
                            return valueColumns;
                        }
                    }, ColumnReader.prototype.getValueColumnInternal = function(roleName, groupIndex, valueColumnIndexInRole) {
                        if (this.hasValues(roleName)) {
                            var valueColumnIndex = this.valueRoleIndexMapping[roleName][valueColumnIndexInRole];
                            return this.grouped[groupIndex].values[valueColumnIndex];
                        }
                    }, ColumnReader.prototype.getValueMetadataColumn = function(roleName, seriesIndex) {
                        void 0 === seriesIndex && (seriesIndex = 0);
                        var valueColumn = this.getValueColumn(roleName, seriesIndex);
                        if (valueColumn) return valueColumn.source;
                    }, ColumnReader.prototype.getAllValueMetadataColumnsForRole = function(roleName, seriesIndex) {
                        if (void 0 === seriesIndex && (seriesIndex = 0), this.hasValues(roleName)) return _.map(this.getAllValueColumnsForRole(roleName, seriesIndex), (function(valueColumn) {
                            return valueColumn.source;
                        }));
                    }, ColumnReader.prototype.getValueQueryName = function(roleName, seriesIndex) {
                        var metadataColumn = this.getValueMetadataColumn(roleName, seriesIndex);
                        if (metadataColumn) return metadataColumn.queryName;
                    }, ColumnReader.prototype.getAllValueQueryNames = function(roleName, seriesIndex) {
                        var metadataColumns = this.getAllValueMetadataColumnsForRole(roleName, seriesIndex);
                        if (!_.isEmpty(metadataColumns)) return _.map(metadataColumns, (function(column) {
                            return column.queryName;
                        }));
                    }, ColumnReader.prototype.getAllValueRoles = function() {
                        var roles = _.keys(this.valueRoleIndexMapping);
                        if (!_.isEmpty(roles)) return roles;
                    }, ColumnReader.prototype.hasDynamicSeries = function() {
                        return this.dataHasDynamicSeries;
                    }, ColumnReader.prototype.hasStaticSeries = function() {
                        return this.dataHasStaticSeries;
                    }, ColumnReader.prototype.getSeriesCount = function() {
                        if (!this.dataHasAnyValidValues) return 0;
                        if (this.dataHasDynamicSeries) return this.grouped.length;
                        if (this.dataHasStaticSeries) {
                            var roleIndexMap = this.valueRoleIndexMapping[this.staticSeriesRole];
                            if (roleIndexMap) return roleIndexMap.length;
                        }
                        return 1;
                    }, ColumnReader.prototype.getSeriesValueColumns = function() {
                        var hasDynamicSeries = this.dataHasDynamicSeries;
                        if (hasDynamicSeries) return this.dataView.categorical.values;
                    }, ColumnReader.prototype.getSeriesMetadataColumn = function() {
                        var seriesColumns = this.getSeriesValueColumns();
                        if (seriesColumns) return seriesColumns.source;
                    }, ColumnReader.prototype.getSeriesValueColumnGroup = function(seriesIndex) {
                        var hasDynamicSeries = this.dataHasDynamicSeries;
                        if (this.dataHasAnyValidValues && hasDynamicSeries) return this.grouped[seriesIndex];
                    }, ColumnReader.prototype.getDynamicSeriesColumnIdentityFields = function() {
                        var seriesColumns = this.getSeriesValueColumns();
                        return seriesColumns ? seriesColumns.identityFields : void 0;
                    }, ColumnReader.prototype.getStaticObjects = function() {
                        if (this.dataView && this.dataView.metadata && this.dataView.metadata.objects) return this.dataView.metadata.objects;
                    }, ColumnReader.prototype.getMetadataColumns = function(role) {
                        var result = [];
                        return this.dataView && this.dataView.metadata && this.dataView.metadata.columns && (result = _.filter(this.dataView.metadata.columns, (function(column) {
                            return null != column.roles && column.roles[role] === !0;
                        }))), _.isEmpty(result) ? void 0 : result;
                    }, ColumnReader;
                })();
            })(categorical = dataviewReaders.categorical || (dataviewReaders.categorical = {}));
        })(dataviewReaders = data.dataviewReaders || (data.dataviewReaders = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var dataviewReaders;
        !(function(dataviewReaders) {
            var categorical;
            !(function(categorical) {
                function createDataReader(columnReader, options) {
                    return new DataReader(columnReader, options);
                }
                categorical.createDataReader = createDataReader;
                var DataReader = (function() {
                    function DataReader(columnReader, options) {
                        this.columnReader = columnReader, this.dataHasDynamicSeries = columnReader.hasDynamicSeries(), 
                        this.dataHasStaticSeries = columnReader.hasStaticSeries(), this.hasAnyValidValues = columnReader.hasAnyValidValues(), 
                        options && (this.staticSeriesRole = options.staticSeriesRole);
                    }
                    return DataReader.prototype.hasCategories = function() {
                        return this.columnReader.hasCategories();
                    }, DataReader.prototype.hasCategoryWithRole = function(roleName) {
                        return this.columnReader.hasCategoryWithRole(roleName);
                    }, DataReader.prototype.hasCompositeCategories = function() {
                        return this.columnReader.hasCompositeCategories();
                    }, DataReader.prototype.getCategoryCount = function() {
                        return this.columnReader.getCategoryCount();
                    }, DataReader.prototype.getCategoryValue = function(roleName, categoryIndex) {
                        var categoryColumn = this.columnReader.getCategoryColumn(roleName);
                        return categoryColumn ? categoryColumn.values[categoryIndex] : void 0;
                    }, DataReader.prototype.getAllCategoryValuesForRole = function(roleName, categoryIndex) {
                        var categoryColumns = this.columnReader.getAllCategoryColumns(roleName);
                        return categoryColumns ? _.map(categoryColumns, (function(categoryColumn) {
                            return categoryColumn.values[categoryIndex];
                        })) : void 0;
                    }, DataReader.prototype.getCategoryMetadataColumn = function(roleName) {
                        var categoryColumn = this.columnReader.getCategoryColumn(roleName);
                        return categoryColumn ? categoryColumn.source : void 0;
                    }, DataReader.prototype.getCategoryDisplayName = function(roleName) {
                        var targetColumn = this.columnReader.getCategoryColumn(roleName);
                        if (targetColumn && targetColumn.source) return targetColumn.source.displayName;
                    }, DataReader.prototype.getAllCategoryDisplayNamesForRole = function(roleName) {
                        var targetColumns = this.columnReader.getAllCategoryColumns(roleName);
                        if (targetColumns) return _.map(targetColumns, (function(targetColumn) {
                            return targetColumn.source && targetColumn.source.displayName;
                        }));
                    }, DataReader.prototype.getCategoryType = function(roleName) {
                        var targetMetadataColumn = this.columnReader.getCategoryMetadataColumn(roleName);
                        if (targetMetadataColumn) return targetMetadataColumn.type;
                    }, DataReader.prototype.hasValues = function(roleName) {
                        return this.columnReader.hasValues(roleName);
                    }, DataReader.prototype.hasHighlights = function() {
                        return this.columnReader.hasHighlights();
                    }, DataReader.prototype.getValue = function(roleName, categoryIndex, seriesIndex) {
                        if (void 0 === seriesIndex && (seriesIndex = 0), this.hasValues(roleName)) {
                            var valueColumn = this.columnReader.getValueColumn(roleName, seriesIndex);
                            if (valueColumn) return valueColumn.values[categoryIndex];
                        }
                    }, DataReader.prototype.getHighlight = function(roleName, categoryIndex, seriesIndex) {
                        if (void 0 === seriesIndex && (seriesIndex = 0), this.hasValues(roleName) && this.hasHighlights()) {
                            var valueColumn = this.columnReader.getValueColumn(roleName, seriesIndex);
                            if (valueColumn) return valueColumn.highlights[categoryIndex];
                        }
                    }, DataReader.prototype.getValueType = function(roleName, seriesIndex) {
                        var targetMetadataColumn = this.columnReader.getValueMetadataColumn(roleName, seriesIndex);
                        if (targetMetadataColumn) return targetMetadataColumn.type;
                    }, DataReader.prototype.getAllValuesForRole = function(roleName, categoryIndex, seriesIndex) {
                        if (void 0 === seriesIndex && (seriesIndex = 0), this.hasValues(roleName)) {
                            this.dataHasDynamicSeries || (seriesIndex = 0);
                            var valueColumns = this.columnReader.getAllValueColumnsForRole(roleName, seriesIndex);
                            return _.map(valueColumns, (function(valueColumn) {
                                return valueColumn.values[categoryIndex];
                            }));
                        }
                    }, DataReader.prototype.getAllHighlightsForRole = function(roleName, categoryIndex, seriesIndex) {
                        if (void 0 === seriesIndex && (seriesIndex = 0), this.hasValues(roleName) && this.hasHighlights()) {
                            this.dataHasDynamicSeries || (seriesIndex = 0);
                            var valueColumns = this.columnReader.getAllValueColumnsForRole(roleName, seriesIndex);
                            return _.map(valueColumns, (function(valueColumn) {
                                return valueColumn.highlights[categoryIndex];
                            }));
                        }
                    }, DataReader.prototype.getAllValueTypesForRole = function(roleName, seriesIndex) {
                        var targetMetadataColumns = this.columnReader.getAllValueMetadataColumnsForRole(roleName, seriesIndex);
                        if (targetMetadataColumns) return _.map(targetMetadataColumns, (function(targetMetadataColumn) {
                            return targetMetadataColumn.type;
                        }));
                    }, DataReader.prototype.getFirstNonNullValueForCategory = function(roleName, categoryIndex) {
                        if (this.hasValues(roleName)) {
                            var seriesCount = this.getSeriesCount();
                            if (!this.dataHasDynamicSeries) return this.getValue(roleName, categoryIndex);
                            for (var seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) {
                                var value = this.getValue(roleName, categoryIndex, seriesIndex);
                                if (null != value) return value;
                            }
                        }
                    }, DataReader.prototype.getValueDisplayName = function(roleName) {
                        if (this.hasValues(roleName)) {
                            var metadataColumn = this.columnReader.getValueMetadataColumn(roleName);
                            if (metadataColumn) return metadataColumn.displayName;
                        }
                    }, DataReader.prototype.getAllValueDisplayNamesForRole = function(roleName) {
                        if (this.hasValues(roleName)) {
                            var metadataColumns = this.columnReader.getAllValueMetadataColumnsForRole(roleName);
                            if (!_.isEmpty(metadataColumns)) return _.map(metadataColumns, (function(metadataColumn) {
                                return metadataColumn.displayName;
                            }));
                        }
                    }, DataReader.prototype.getValueQueryName = function(roleName, seriesIndex) {
                        return this.columnReader.getValueQueryName(roleName, seriesIndex);
                    }, DataReader.prototype.hasSeries = function() {
                        return this.dataHasDynamicSeries || this.dataHasStaticSeries;
                    }, DataReader.prototype.getSeriesCount = function() {
                        return this.columnReader.getSeriesCount();
                    }, DataReader.prototype.getSeriesName = function(seriesIndex) {
                        if (this.hasSeries()) if (this.dataHasDynamicSeries) {
                            var seriesValueColumnGroup = this.columnReader.getSeriesValueColumnGroup(seriesIndex);
                            if (seriesValueColumnGroup) return seriesValueColumnGroup.name;
                        } else if (this.dataHasStaticSeries && this.hasValues(this.staticSeriesRole)) {
                            var metadataColumn = this.columnReader.getValueMetadataColumn(this.staticSeriesRole, seriesIndex);
                            if (metadataColumn) return metadataColumn.displayName;
                        }
                    }, DataReader.prototype.getSeriesDisplayName = function() {
                        if (this.dataHasDynamicSeries) return this.columnReader.getSeriesValueColumns().source.displayName;
                    }, DataReader.prototype.getSeriesType = function() {
                        var targetMetadataColumn = this.columnReader.getSeriesMetadataColumn();
                        if (targetMetadataColumn) return targetMetadataColumn.type;
                    }, DataReader;
                })();
            })(categorical = dataviewReaders.categorical || (dataviewReaders.categorical = {}));
        })(dataviewReaders = data.dataviewReaders || (data.dataviewReaders = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        function createDataViewCategoricalReader(dataView, options) {
            var columnReader = data.dataviewReaders.categorical.createColumnReader(dataView, options), dataReader = data.dataviewReaders.categorical.createDataReader(columnReader, options), objectReader = data.dataviewReaders.categorical.createObjectReader(columnReader, options);
            return {
                data: dataReader,
                identities: data.dataviewReaders.categorical.createIdentityReader(columnReader, options),
                objects: objectReader,
                colors: data.dataviewReaders.categorical.createColorReader(columnReader, objectReader, dataReader, options)
            };
        }
        function createDataViewCategoricalReaderAdvanced(dataView, options) {
            var columnReader = data.dataviewReaders.categorical.createColumnReader(dataView, options), dataReader = data.dataviewReaders.categorical.createDataReader(columnReader, options), objectReader = data.dataviewReaders.categorical.createObjectReader(columnReader, options);
            return {
                data: dataReader,
                identities: data.dataviewReaders.categorical.createIdentityReader(columnReader, options),
                objects: objectReader,
                colors: data.dataviewReaders.categorical.createColorReader(columnReader, objectReader, dataReader, options),
                columns: columnReader
            };
        }
        data.createDataViewCategoricalReader = createDataViewCategoricalReader, data.createDataViewCategoricalReaderAdvanced = createDataViewCategoricalReaderAdvanced;
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var dataviewReaders;
        !(function(dataviewReaders) {
            var categorical;
            !(function(categorical) {
                function createIdentityReader(columnReader, options) {
                    return new IdentityReader(columnReader, options);
                }
                categorical.createIdentityReader = createIdentityReader;
                var IdentityReader = (function() {
                    function IdentityReader(columnReader, options) {
                        this.columnReader = columnReader, this.dataHasDynamicSeries = columnReader.hasDynamicSeries(), 
                        this.dataHasStaticSeries = columnReader.hasStaticSeries(), this.hasAnyValidValues = columnReader.hasAnyValidValues(), 
                        this.valueRoles = columnReader.getAllValueRoles(), options && (this.staticSeriesRole = options.staticSeriesRole);
                    }
                    return IdentityReader.prototype.createForCategory = function(categoryIndex, valueRoleNames) {
                        return new powerbi.visuals.SelectionIdBuilder().withCategory(this.columnReader.getCategoryColumn(), categoryIndex).withMeasures(this.mapRolesToValueMetadata(valueRoleNames)).createSelectionId();
                    }, IdentityReader.prototype.createForDataPoint = function(categoryIndex, seriesIndex, valueRoleNames) {
                        this.dataHasDynamicSeries || this.dataHasStaticSeries;
                        var builder = new powerbi.visuals.SelectionIdBuilder().withCategory(this.columnReader.getCategoryColumn(), categoryIndex);
                        return null != seriesIndex && this.dataHasDynamicSeries && builder.withSeries(this.columnReader.getSeriesValueColumns(), this.columnReader.getSeriesValueColumnGroup(seriesIndex)), 
                        builder.withMeasures(this.mapRolesToValueMetadata(valueRoleNames, seriesIndex)), 
                        builder.createSelectionId();
                    }, IdentityReader.prototype.createForSeries = function(seriesIndex, valueRoleNames) {
                        var builder = new powerbi.visuals.SelectionIdBuilder();
                        return this.dataHasDynamicSeries && builder.withSeries(this.columnReader.getSeriesValueColumns(), this.columnReader.getSeriesValueColumnGroup(seriesIndex)), 
                        builder.withMeasures(this.mapRolesToValueMetadata(valueRoleNames, seriesIndex)), 
                        builder.createSelectionId();
                    }, IdentityReader.prototype.createForValue = function(seriesIndex, valueRoleNames) {
                        return new powerbi.visuals.SelectionIdBuilder().withMeasures(this.mapRolesToValueMetadata(valueRoleNames, seriesIndex)).createSelectionId();
                    }, IdentityReader.prototype.mapRolesToValueMetadata = function(valueRoles, seriesIndex) {
                        var valueMetadata = [], roleIndex = 0, staticSeriesRole = this.staticSeriesRole, hasStaticSeries = this.columnReader.hasStaticSeries();
                        null == valueRoles && (valueRoles = this.columnReader.getAllValueRoles() || []), 
                        hasStaticSeries && valueMetadata.push(this.columnReader.getValueQueryName(staticSeriesRole, seriesIndex));
                        for (var roleCount = valueRoles.length; roleIndex < roleCount; roleIndex++) {
                            var valueRole = valueRoles[roleIndex];
                            valueRole === staticSeriesRole && hasStaticSeries || valueMetadata.push.apply(valueMetadata, this.columnReader.getAllValueQueryNames(valueRole));
                        }
                        return valueMetadata;
                    }, IdentityReader;
                })();
            })(categorical = dataviewReaders.categorical || (dataviewReaders.categorical = {}));
        })(dataviewReaders = data.dataviewReaders || (data.dataviewReaders = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var data;
    !(function(data) {
        var dataviewReaders;
        !(function(dataviewReaders) {
            var categorical;
            !(function(categorical) {
                function createObjectReader(columnReader, options) {
                    return new ObjectReader(columnReader, options);
                }
                categorical.createObjectReader = createObjectReader;
                var ObjectReader = (function() {
                    function ObjectReader(columnReader, options) {
                        this.columnReader = columnReader, this.staticObjects = columnReader.getStaticObjects(), 
                        options && (this.staticSeriesRole = options.staticSeriesRole, options.colorOptions && (this.dataColors = options.colorOptions.visualStyle.colorPalette.dataColors));
                    }
                    return ObjectReader.prototype.getStaticObjects = function() {
                        return this.staticObjects;
                    }, ObjectReader.prototype.getCategoryMetadataObjects = function(roleName) {
                        var categoryColumn = this.columnReader.getCategoryColumn(roleName);
                        if (categoryColumn) return categoryColumn.source.objects;
                    }, ObjectReader.prototype.getAllCategoryMetadataObjectsForRole = function(roleName) {
                        var categoryColumns = this.columnReader.getAllCategoryColumns(roleName);
                        if (categoryColumns) return _.map(categoryColumns, (function(categoryColumn) {
                            return categoryColumn.source.objects;
                        }));
                    }, ObjectReader.prototype.getCategoryDataObjects = function(categoryIndex) {
                        var categoryColumn = this.columnReader.getCategoryColumn();
                        if (categoryColumn && categoryColumn.objects) return categoryColumn.objects[categoryIndex];
                    }, ObjectReader.prototype.getValueMetadataObjects = function(roleName, seriesIndex) {
                        var valueColumn = this.columnReader.getValueMetadataColumn(roleName, seriesIndex);
                        if (valueColumn) return valueColumn.objects;
                    }, ObjectReader.prototype.getAllValueMetadataObjectsForRole = function(roleName) {
                        var metadataColumns = this.columnReader.getAllValueMetadataColumnsForRole(roleName);
                        return _.map(metadataColumns, (function(column) {
                            return column.objects;
                        }));
                    }, ObjectReader.prototype.getSeriesMetadataObjects = function() {
                        if (this.columnReader.hasDynamicSeries()) {
                            var seriesColumn = this.columnReader.getSeriesMetadataColumn();
                            return seriesColumn ? seriesColumn.objects : void 0;
                        }
                    }, ObjectReader.prototype.getSeriesDataObjects = function(seriesIndex) {
                        var seriesColumn;
                        if (seriesColumn = this.columnReader.hasDynamicSeries() ? this.columnReader.getSeriesValueColumnGroup(seriesIndex) : this.columnReader.getValueMetadataColumn(this.staticSeriesRole, seriesIndex)) return seriesColumn.objects;
                    }, ObjectReader.prototype.getCategoryFormatString = function(roleName) {
                        return powerbi.DataViewObjects.getValue(this.getCategoryMetadataObjects(roleName), ObjectReader.StandardFormatStringProp);
                    }, ObjectReader.prototype.getAllCategoryFormatStringsForRole = function(roleName) {
                        return _.map(this.getAllCategoryMetadataObjectsForRole(roleName), (function(objects) {
                            return powerbi.DataViewObjects.getValue(objects, ObjectReader.StandardFormatStringProp);
                        }));
                    }, ObjectReader.prototype.getValueFormatString = function(roleName, seriesIndex) {
                        if (!this.columnReader.hasStaticSeries || roleName !== this.staticSeriesRole || null != seriesIndex) return powerbi.DataViewObjects.getValue(this.getValueMetadataObjects(roleName, seriesIndex), ObjectReader.StandardFormatStringProp);
                    }, ObjectReader.prototype.getAllValueFormatStringsForRole = function(roleName) {
                        var objects = this.getAllValueMetadataObjectsForRole(roleName);
                        return _.map(objects, (function(object) {
                            return powerbi.DataViewObjects.getValue(object, ObjectReader.StandardFormatStringProp);
                        }));
                    }, ObjectReader.prototype.getSeriesFormatString = function(seriesIndex) {
                        if (!this.columnReader.hasStaticSeries()) return this.columnReader.hasDynamicSeries() ? powerbi.DataViewObjects.getValue(this.getSeriesMetadataObjects(), ObjectReader.StandardFormatStringProp) : void 0;
                    }, ObjectReader.StandardFormatStringProp = {
                        objectName: "general",
                        propertyName: "formatString"
                    }, ObjectReader;
                })();
            })(categorical = dataviewReaders.categorical || (dataviewReaders.categorical = {}));
        })(dataviewReaders = data.dataviewReaders || (data.dataviewReaders = {}));
    })(data = powerbi.data || (powerbi.data = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var Font;
        !(function(Font) {
            function normalizeFamily(family, quoteFontsWithWhitespace) {
                if (void 0 === quoteFontsWithWhitespace && (quoteFontsWithWhitespace = !0), _.isEmpty(family)) return family;
                if (family.indexOf(",") === -1) return family.indexOf(" ") === -1 ? family : quoteFontsWithWhitespace ? quoteFontFamily(family) : unQuoteFamily(family);
                var families = family.split(",");
                return families.map((function(currentFamily) {
                    return normalizeFamily(currentFamily.trim(), quoteFontsWithWhitespace);
                })).join(Font.FamilyDelimiter);
            }
            function unQuoteFamily(family) {
                if (family) return family.replace(/['"]+/g, "");
            }
            function quoteFontFamily(family) {
                if (family) return Font.FamilyQuote + family.replace(/['"]+/g, "") + Font.FamilyQuote;
            }
            Font.FamilyQuote = '"', Font.FamilyDelimiter = ", ";
            var FamilyInfo = (function() {
                function FamilyInfo(families) {
                    this.families = families;
                }
                return Object.defineProperty(FamilyInfo.prototype, "family", {
                    get: function() {
                        return this.getFamily();
                    },
                    enumerable: !0,
                    configurable: !0
                }), FamilyInfo.prototype.getFamily = function() {
                    return this.families.join(Font.FamilyDelimiter);
                }, Object.defineProperty(FamilyInfo.prototype, "css", {
                    get: function() {
                        return this.getCSS();
                    },
                    enumerable: !0,
                    configurable: !0
                }), FamilyInfo.prototype.getCSS = function() {
                    return this.families ? this.families.map((function(font) {
                        return font.indexOf(" ") > -1 ? "'" + font + "'" : font;
                    })).join(", ") : null;
                }, FamilyInfo;
            })();
            Font.FamilyInfo = FamilyInfo, Font.Family = {
                light: new FamilyInfo([ "Segoe UI Light", "wf_segoe-ui_light", "helvetica", "arial", "sans-serif" ]),
                semilight: new FamilyInfo([ "Segoe UI Semilight", "wf_segoe-ui_semilight", "helvetica", "arial", "sans-serif" ]),
                regular: new FamilyInfo([ "Segoe UI", "wf_segoe-ui_normal", "helvetica", "arial", "sans-serif" ]),
                semibold: new FamilyInfo([ "Segoe UI Semibold", "wf_segoe-ui_semibold", "helvetica", "arial", "sans-serif" ]),
                bold: new FamilyInfo([ "Segoe UI Bold", "wf_segoe-ui_bold", "helvetica", "arial", "sans-serif" ]),
                lightSecondary: new FamilyInfo([ "wf_standard-font_light", "helvetica", "arial", "sans-serif" ]),
                regularSecondary: new FamilyInfo([ "wf_standard-font", "helvetica", "arial", "sans-serif" ]),
                boldSecondary: new FamilyInfo([ "wf_standard-font_bold", "helvetica", "arial", "sans-serif" ]),
                glyphs: new FamilyInfo([ "PowerVisuals" ])
            }, Font.normalizeFamily = normalizeFamily, Font.unQuoteFamily = unQuoteFamily, Font.quoteFontFamily = quoteFontFamily;
        })(Font = visuals.Font || (visuals.Font = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var Units, PixelConverter = jsCommon.PixelConverter;
        !(function(Units) {
            var FontSize = (function() {
                function FontSize(pt, px) {
                    this.pt = pt, this.px = px;
                }
                return FontSize.createFromPt = function(pt) {
                    return new FontSize(pt, PixelConverter.fromPointToPixel(pt));
                }, FontSize.createFromPx = function(px) {
                    return new FontSize(PixelConverter.toPoint(px), px);
                }, FontSize;
            })();
            Units.FontSize = FontSize;
        })(Units = visuals.Units || (visuals.Units = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function createLegend(legendParentElement, interactive, interactivityService, isScrollable, legendPosition, legendSmallViewPortProperties) {
            return void 0 === isScrollable && (isScrollable = !1), void 0 === legendPosition && (legendPosition = LegendPosition.Top), 
            interactive ? new CartesianChartInteractiveLegend(legendParentElement) : new SVGLegend(legendParentElement, legendPosition, interactivityService, isScrollable, legendSmallViewPortProperties);
        }
        var LegendIcon, createClassAndSelector = jsCommon.CssConstants.createClassAndSelector, FontSize = visuals.Units.FontSize, PixelConverter = jsCommon.PixelConverter;
        !(function(LegendIcon) {
            LegendIcon[LegendIcon.Box = 0] = "Box", LegendIcon[LegendIcon.Circle = 1] = "Circle", 
            LegendIcon[LegendIcon.Line = 2] = "Line";
        })(LegendIcon = visuals.LegendIcon || (visuals.LegendIcon = {}));
        var LegendPosition;
        !(function(LegendPosition) {
            LegendPosition[LegendPosition.Top = 0] = "Top", LegendPosition[LegendPosition.Bottom = 1] = "Bottom", 
            LegendPosition[LegendPosition.Right = 2] = "Right", LegendPosition[LegendPosition.Left = 3] = "Left", 
            LegendPosition[LegendPosition.None = 4] = "None", LegendPosition[LegendPosition.TopCenter = 5] = "TopCenter", 
            LegendPosition[LegendPosition.BottomCenter = 6] = "BottomCenter", LegendPosition[LegendPosition.RightCenter = 7] = "RightCenter", 
            LegendPosition[LegendPosition.LeftCenter = 8] = "LeftCenter";
        })(LegendPosition = visuals.LegendPosition || (visuals.LegendPosition = {})), visuals.legendProps = {
            show: "show",
            position: "position",
            titleText: "titleText",
            showTitle: "showTitle",
            labelColor: "labelColor",
            fontSize: "fontSize"
        }, visuals.legendPropIdentifiers = {
            show: {
                objectName: "legend",
                propertyName: "show"
            },
            position: {
                objectName: "legend",
                propertyName: "position"
            },
            showTitle: {
                objectName: "legend",
                propertyName: "showTitle"
            },
            titleText: {
                objectName: "legend",
                propertyName: "titleText"
            },
            labelColor: {
                objectName: "legend",
                propertyName: "labelColor"
            },
            fontSize: {
                objectName: "legend",
                propertyName: "fontSize"
            },
            fontFamily: {
                objectName: "legend",
                propertyName: "fontFamily"
            }
        }, visuals.createLegend = createLegend;
        var Legend;
        !(function(Legend) {
            function isLeft(orientation) {
                switch (orientation) {
                  case LegendPosition.Left:
                  case LegendPosition.LeftCenter:
                    return !0;

                  default:
                    return !1;
                }
            }
            function isTop(orientation) {
                switch (orientation) {
                  case LegendPosition.Top:
                  case LegendPosition.TopCenter:
                    return !0;

                  default:
                    return !1;
                }
            }
            function isBottom(orientation) {
                switch (orientation) {
                  case LegendPosition.Bottom:
                  case LegendPosition.BottomCenter:
                    return !0;

                  default:
                    return !1;
                }
            }
            function isRight(orientation) {
                switch (orientation) {
                  case LegendPosition.Right:
                  case LegendPosition.RightCenter:
                    return !0;

                  default:
                    return !1;
                }
            }
            function isCentered(orientation) {
                switch (orientation) {
                  case LegendPosition.BottomCenter:
                  case LegendPosition.LeftCenter:
                  case LegendPosition.RightCenter:
                  case LegendPosition.TopCenter:
                    return !0;

                  default:
                    return !1;
                }
            }
            function isTopOrBottom(orientation) {
                return Legend.isTop(orientation) || Legend.isBottom(orientation);
            }
            function isLeftOrRight(orientation) {
                return Legend.isLeft(orientation) || Legend.isRight(orientation);
            }
            function positionChartArea(chartArea, legend) {
                var legendMargins = legend.getMargins(), legendOrientation = legend.getOrientation();
                chartArea.style({
                    "margin-left": Legend.isLeft(legendOrientation) ? legendMargins.width + "px" : null,
                    "margin-top": Legend.isTop(legendOrientation) ? legendMargins.height + "px" : null
                });
            }
            function getDefaultFontProperties() {
                return {
                    family: Legend.DefaultFontFamily,
                    size: Legend.DefaultFontSize,
                    color: Legend.DefaultLabelColor
                };
            }
            function getDefaultLegendData() {
                return {
                    show: !0,
                    title: "",
                    dataPoints: [],
                    fontProperties: powerbi.Prototype.inherit(Legend.getDefaultFontProperties()),
                    grouped: !1,
                    showTitle: !0,
                    position: LegendPosition.Top
                };
            }
            function buildSeriesLegendData(options) {
                var reader = powerbi.data.createDataViewCategoricalReaderAdvanced(options.dataView, {
                    staticSeriesRole: options.staticSeriesRole,
                    colorOptions: {
                        valueRole: options.staticSeriesRole,
                        visualStyle: options.style,
                        ignoreDefaultColor: options.ignoreDefaultColor,
                        ignoreDefaultCategoryColor: options.ignoreDefaultCategoryColor
                    }
                });
                if (!reader.data.hasSeries()) return options.allowLegendWithNoSeries ? Legend.buildSeriesLegendDataForWithNoSeries(reader, options) : Legend.getDefaultLegendData();
                for (var staticObjects = reader.objects.getStaticObjects(), legendDataPoints = [], hasDynamicSeries = reader.columns.hasDynamicSeries(), simpleMarkerProp = options.simpleMarkerProp, staticSimpleMarkerShape = simpleMarkerProp ? powerbi.DataViewObjects.getValue(staticObjects, simpleMarkerProp, visuals.markerShape.circle) : visuals.markerShape.circle, lineAndMarkerOptions = options.lineAndMarkerOptions, legendMarkerRenderingOption = lineAndMarkerOptions && lineAndMarkerOptions.legendMarkerRendering, staticMarkerProperties = lineAndMarkerOptions && lineAndMarkerOptions.renderMarkers ? visuals.MarkerProperties.readFromStaticObjects(staticObjects) : void 0, readSeriesMarkerOptions = lineAndMarkerOptions && lineAndMarkerOptions.renderMarkers && powerbi.DataViewObjects.getValue(staticObjects, visuals.lineChartProps.lineStyles.showSeries, !1), staticLineStyle = powerbi.DataViewObjects.getValue(staticObjects, visuals.lineChartProps.lineStyles.lineStyle, visuals.lineStyle.solid), seriesIndex = 0, seriesCount = reader.data.getSeriesCount(); seriesIndex < seriesCount; seriesIndex++) {
                    var seriesKey = reader.data.getSeriesName(seriesIndex), seriesLabel = visuals.valueFormatter.format(seriesKey, reader.objects.getSeriesFormatString(seriesIndex)), seriesMarkerProperties = readSeriesMarkerOptions ? visuals.MarkerProperties.readFromSeries(reader, staticMarkerProperties, seriesIndex) : staticMarkerProperties, seriesColor = reader.colors.createBySeries(seriesIndex), identity = reader.identities.createForSeries(seriesIndex), shape = void 0;
                    shape = simpleMarkerProp ? powerbi.DataViewObjects.getValue(reader.objects.getSeriesDataObjects(seriesIndex), simpleMarkerProp, staticSimpleMarkerShape) : visuals.Markers.resolveMarkerShape(seriesMarkerProperties, legendMarkerRenderingOption, lineAndMarkerOptions && lineAndMarkerOptions.defaultMarkerShape);
                    var renderLineStyle = lineAndMarkerOptions && lineAndMarkerOptions.renderLineStyle && legendMarkerRenderingOption !== visuals.legendMarkerRendering.markerOnly;
                    legendDataPoints.push({
                        color: visuals.Markers.resolveMarkerColor(seriesMarkerProperties, seriesColor, legendMarkerRenderingOption, lineAndMarkerOptions && lineAndMarkerOptions.matchSeriesColor),
                        label: seriesLabel,
                        icon: LegendIcon.Circle,
                        identity: identity,
                        selected: !1,
                        markerShape: shape,
                        lineStyle: renderLineStyle ? powerbi.DataViewObjects.getValue(reader.objects.getSeriesDataObjects(seriesIndex), visuals.lineChartProps.lineStyles.lineStyle, staticLineStyle) : void 0,
                        lineColor: seriesColor
                    });
                }
                var legendData = LegendData.create(reader.objects.getStaticObjects(), legendDataPoints, options.showByDefault, reader.data.getSeriesDisplayName() || "", hasDynamicSeries);
                return legendData;
            }
            function buildSeriesLegendDataForWithNoSeries(reader, options) {
                var lineAndMarkerOptions = options.lineAndMarkerOptions, key = reader.data.getValueDisplayName(options.staticSeriesRole), label = visuals.valueFormatter.format(key, reader.objects.getValueFormatString(options.staticSeriesRole, 0)), color = reader.colors.createByValue(0), identity = reader.identities.createForValue(0), staticObjects = reader.objects.getStaticObjects(), staticMarkerProperties = visuals.MarkerProperties.readFromStaticObjects(staticObjects), staticLineStyle = powerbi.DataViewObjects.getValue(staticObjects, visuals.lineChartProps.lineStyles.lineStyle), markerProperties = lineAndMarkerOptions && lineAndMarkerOptions.renderMarkers ? visuals.MarkerProperties.readFromSeries(reader, staticMarkerProperties, 0) : void 0, legendDataPoints = [ {
                    color: color,
                    label: label,
                    icon: LegendIcon.Circle,
                    identity: identity,
                    selected: !1,
                    markerShape: markerProperties && markerProperties.showMarker ? markerProperties.shape : visuals.markerShape.circle,
                    lineStyle: lineAndMarkerOptions && lineAndMarkerOptions.renderLineStyle ? powerbi.DataViewObjects.getValue(reader.objects.getValueMetadataObjects(options.staticSeriesRole, 0), visuals.lineChartProps.lineStyles.lineStyle, staticLineStyle) : void 0
                } ], legendData = LegendData.create(staticObjects, legendDataPoints, options.showByDefault, "");
                return legendData;
            }
            function buildCategoryLegendData(options) {
                var legendTitle, reader = powerbi.data.createDataViewCategoricalReader(options.dataView, {
                    colorOptions: {
                        valueRole: options.valueRole,
                        visualStyle: options.style
                    }
                }), legendDataPoints = [], categoryRole = options.categoryRole, staticObjects = reader.objects.getStaticObjects();
                if (reader.data.hasCategories()) {
                    legendTitle = reader.data.getCategoryDisplayName(categoryRole);
                    for (var categoryIndex = 0, categoryCount = reader.data.getCategoryCount(); categoryIndex < categoryCount; categoryIndex++) {
                        var categoryValue = reader.data.getCategoryValue(categoryRole, categoryIndex), label = visuals.valueFormatter.format(categoryValue, reader.objects.getCategoryFormatString(categoryRole)), color = reader.colors.createByCategory(categoryIndex), identity = reader.identities.createForCategory(categoryIndex);
                        legendDataPoints.push({
                            color: color,
                            label: label,
                            icon: LegendIcon.Circle,
                            identity: identity,
                            selected: !1
                        });
                    }
                }
                var legendData = LegendData.create(staticObjects, legendDataPoints, options.showByDefault, legendTitle);
                return legendData;
            }
            function buildFromFirstMatrixRowLevel(options) {
                var dataView = options.dataView, matrix = dataView.matrix, staticObjects = dataView.metadata.objects, legendDataPoints = [];
                if (_.isEmpty(matrix.rows.levels)) return Legend.getDefaultLegendData();
                var seriesMetadata = matrix.rows.levels[0].sources[0], seriesColumnIdentifier = matrix.rows.root.childIdentityFields, series = matrix.rows.root.children;
                if (!series) return Legend.getDefaultLegendData();
                var staticShape, markerShapePropIdentifier = options.markerShapePropIdentifier;
                staticShape = markerShapePropIdentifier ? powerbi.DataViewObjects.getValue(staticObjects, options.markerShapePropIdentifier, visuals.markerShape.circle) : visuals.markerShape.circle;
                for (var seriesIndex = 0, seriesCount = series.length; seriesIndex < seriesCount; seriesIndex++) {
                    var currentSeries = series[seriesIndex];
                    if (!currentSeries.isSubtotal) {
                        var seriesKey = currentSeries.value, seriesLabel = visuals.converterHelper.formatFromMetadataColumn(seriesKey, seriesMetadata, options.formatStringProp), color = options.colorHelper.getColorForSeriesValue(currentSeries.objects, seriesColumnIdentifier, seriesKey), idBuilder = new visuals.SelectionIdBuilder(), identity = idBuilder.withColumnIdentity(currentSeries.identity, seriesMetadata.queryName).createSelectionId(), seriesShape = markerShapePropIdentifier ? powerbi.DataViewObjects.getValue(currentSeries.objects, markerShapePropIdentifier, staticShape) : visuals.markerShape.circle;
                        legendDataPoints.push({
                            color: color,
                            label: seriesLabel,
                            icon: LegendIcon.Circle,
                            identity: identity,
                            selected: !1,
                            markerShape: seriesShape
                        });
                    }
                }
                var legendData = LegendData.create(staticObjects, legendDataPoints, options.showByDefault, seriesMetadata.displayName, !!series);
                return legendData;
            }
            function mergeLegendData(layerLegendData, showByDefault) {
                for (var dataPoints = [], hasDynamicSeries = !1, firstLayerLegendData = layerLegendData[0], _loop_1 = function(layerIndex, layerCount) {
                    var legendData = layerLegendData[layerIndex];
                    _.all(legendData.dataPoints, (function(dataPoint) {
                        return dataPoint.layerNumber = layerIndex;
                    })), dataPoints.push.apply(dataPoints, legendData.dataPoints), legendData.grouped && (hasDynamicSeries = !0);
                }, layerIndex = 0, layerCount = layerLegendData.length; layerIndex < layerCount; layerIndex++) _loop_1(layerIndex, layerCount);
                return {
                    dataPoints: dataPoints,
                    show: firstLayerLegendData.show,
                    position: firstLayerLegendData.position,
                    showTitle: firstLayerLegendData.showTitle,
                    title: firstLayerLegendData.title,
                    grouped: hasDynamicSeries,
                    fontProperties: firstLayerLegendData.fontProperties
                };
            }
            function enumerate(options) {
                var legendData = options.legendData, instance = {
                    selector: null,
                    properties: {
                        show: legendData.show,
                        position: LegendPosition[legendData.position],
                        showTitle: legendData.showTitle,
                        titleText: legendData.title,
                        labelColor: legendData.fontProperties.color,
                        fontSize: legendData.fontProperties.size.pt
                    },
                    objectName: options.objectName || "legend"
                };
                return options.customFontFamily && (instance.properties.fontFamily = legendData.fontProperties.family), 
                null != options.legendMarkerRendering && (instance.properties[visuals.lineChartProps.legend.legendMarkerRendering.propertyName] = options.legendMarkerRendering), 
                null != options.matchLineColor && (instance.properties[visuals.lineChartProps.legend.matchLineColor.propertyName] = options.matchLineColor), 
                null != options.defaultToCircle && (instance.properties[visuals.lineChartProps.legend.defaultToCircle.propertyName] = options.defaultToCircle), 
                options.enumeration.pushInstance(instance), options.enumeration.complete();
            }
            function getTitleFontProperties(fontProperties) {
                var isDefaultFontFamily = fontProperties.family === Legend.DefaultFontFamily;
                return visuals.FontProperties.inherit(fontProperties, {
                    family: isDefaultFontFamily ? visuals.Font.Family.semibold.css : void 0,
                    weight: isDefaultFontFamily ? void 0 : "bold"
                });
            }
            Legend.isLeft = isLeft, Legend.isTop = isTop, Legend.isBottom = isBottom, Legend.isRight = isRight, 
            Legend.isCentered = isCentered, Legend.isTopOrBottom = isTopOrBottom, Legend.isLeftOrRight = isLeftOrRight, 
            Legend.positionChartArea = positionChartArea, Legend.DefaultFontFamily = visuals.Font.Family.regular.css, 
            Legend.DefaultFontSize = FontSize.createFromPt(8), Legend.DefaultLabelColor = "#666666", 
            Legend.DefaultPositionKey = "Top", Legend.getDefaultFontProperties = getDefaultFontProperties, 
            Legend.getDefaultLegendData = getDefaultLegendData, Legend.buildSeriesLegendData = buildSeriesLegendData, 
            Legend.buildSeriesLegendDataForWithNoSeries = buildSeriesLegendDataForWithNoSeries, 
            Legend.buildCategoryLegendData = buildCategoryLegendData, Legend.buildFromFirstMatrixRowLevel = buildFromFirstMatrixRowLevel, 
            Legend.mergeLegendData = mergeLegendData, Legend.enumerate = enumerate, Legend.getTitleFontProperties = getTitleFontProperties;
        })(Legend = visuals.Legend || (visuals.Legend = {}));
        var SVGLegend = (function() {
            function SVGLegend(element, legendPosition, interactivityService, isScrollable, legendSmallViewPortProperties) {
                this.interactivityService = interactivityService, this.isScrollable = isScrollable, 
                this.legendSmallViewPortProperties = legendSmallViewPortProperties, this.legendDataStartIndex = 0, 
                this.arrowPosWindow = 1, this.lastCalculatedWidth = 0, this.visibleLegendWidth = 0, 
                this.visibleLegendHeight = 0, this.legendFontSizeMarginDifference = 0, this.legendFontSizeMarginValue = 0, 
                this.svg = d3.select(element.get(0)).append("svg").style("position", "absolute"), 
                this.svg.style("display", "inherit"), this.svg.classed("legend", !0), interactivityService && (this.clearCatcher = visuals.appendClearCatcher(this.svg)), 
                this.group = this.svg.append("g").attr("id", "legendGroup"), this.changeOrientation(legendPosition), 
                this.parentViewport = {
                    height: 0,
                    width: 0
                }, this.calculateViewport(), this.updateLayout();
            }
            return SVGLegend.prototype.getLegendShowFlag = function() {
                return !this.data || null == this.data.show || this.data.show;
            }, SVGLegend.prototype.updateLayout = function() {
                var legendViewport = this.viewport, orientation = this.orientation, show = this.getLegendShowFlag();
                this.svg.attr({
                    height: legendViewport.height || (show ? this.parentViewport.height : 0),
                    width: legendViewport.width || (show ? this.parentViewport.width : 0)
                });
                var isRight = orientation === LegendPosition.Right || orientation === LegendPosition.RightCenter, isBottom = orientation === LegendPosition.Bottom || orientation === LegendPosition.BottomCenter;
                this.svg.style({
                    "margin-left": isRight ? this.parentViewport.width - legendViewport.width + "px" : null,
                    "margin-top": isBottom ? this.parentViewport.height - legendViewport.height + "px" : null
                });
            }, SVGLegend.prototype.calculateViewport = function() {
                var show = this.getLegendShowFlag();
                if (!show) return void (this.viewport = {
                    height: 0,
                    width: 0
                });
                switch (this.orientation) {
                  case LegendPosition.Top:
                  case LegendPosition.Bottom:
                  case LegendPosition.TopCenter:
                  case LegendPosition.BottomCenter:
                    var pixelHeight = this.data && this.data.fontProperties ? this.data.fontProperties.size.px : PixelConverter.fromPointToPixel(Legend.DefaultFontSize.pt), fontHeightSize = SVGLegend.TopLegendHeight + (pixelHeight - Legend.DefaultFontSize.pt);
                    return void (this.viewport = {
                        height: fontHeightSize,
                        width: 0
                    });

                  case LegendPosition.Right:
                  case LegendPosition.Left:
                  case LegendPosition.RightCenter:
                  case LegendPosition.LeftCenter:
                    var width = this.lastCalculatedWidth ? this.lastCalculatedWidth : this.parentViewport.width * SVGLegend.LegendMaxWidthFactor;
                    return void (this.viewport = {
                        height: 0,
                        width: width
                    });
                }
            }, SVGLegend.prototype.getMargins = function() {
                return this.viewport;
            }, SVGLegend.prototype.isVisible = function() {
                return this.getLegendShowFlag();
            }, SVGLegend.prototype.changeOrientation = function(orientation) {
                orientation ? this.orientation = orientation : this.orientation = LegendPosition.Top, 
                this.svg.attr("orientation", orientation);
            }, SVGLegend.prototype.getOrientation = function() {
                return this.orientation;
            }, SVGLegend.prototype.drawLegend = function(data, viewport) {
                var clonedData = powerbi.Prototype.inherit(data);
                _.defaults(clonedData, {
                    fontProperties: Legend.getDefaultFontProperties()
                });
                for (var newDataPoints = [], _i = 0, _a = data.dataPoints; _i < _a.length; _i++) {
                    var dp = _a[_i];
                    newDataPoints.push(powerbi.Prototype.inherit(dp));
                }
                clonedData.dataPoints = newDataPoints, this.setTooltipToLegendItems(clonedData), 
                this.drawLegendInternal(clonedData, viewport, !0);
            }, SVGLegend.prototype.drawLegendInternal = function(data, viewport, autoWidth) {
                this.parentViewport = viewport;
                var legacyLegendData = data;
                (legacyLegendData.fontSize || legacyLegendData.labelColor) && (data.fontProperties = {
                    color: legacyLegendData.labelColor || Legend.DefaultLabelColor,
                    size: legacyLegendData.fontSize ? FontSize.createFromPt(legacyLegendData.fontSize) : Legend.DefaultFontSize,
                    family: Legend.DefaultFontFamily
                }), data.fontProperties || (data.fontProperties = Legend.getDefaultFontProperties()), 
                this.data = data;
                var adjustedFontProperties = this.applyViewportSettings(data);
                this.interactivityService && this.interactivityService.applySelectionStateToData(data.dataPoints), 
                0 !== data.dataPoints.length && data.position !== LegendPosition.None || (this.data.show = !1), 
                this.data.show === !1 && (data.dataPoints = []), this.calculateViewport();
                var layout = this.calculateLayout(data, autoWidth), titleLayout = layout.title, titleData = titleLayout ? [ titleLayout ] : [], hasSelection = this.interactivityService && powerbi.visuals.dataHasSelection(data.dataPoints), group = this.group, isSmallViewport = !1;
                if (data.allowSmallViewport && this.legendSmallViewPortProperties && (isSmallViewport = this.parentViewport.height <= this.legendSmallViewPortProperties.minHeightForTransform), 
                Legend.isCentered(this.orientation) && !isSmallViewport) {
                    var centerOffset = 0;
                    Legend.isTopOrBottom(this.orientation) ? (centerOffset = Math.max(0, (this.parentViewport.width - this.visibleLegendWidth) / 2), 
                    group.attr("transform", visuals.SVGUtil.translate(centerOffset, 0))) : (centerOffset = Math.max((this.parentViewport.height - this.visibleLegendHeight) / 2), 
                    group.attr("transform", visuals.SVGUtil.translate(0, centerOffset)));
                } else group.attr("transform", null);
                var legendTitle = group.selectAll(SVGLegend.LegendTitle.selector).data(titleData);
                legendTitle.enter().append("text").classed(SVGLegend.LegendTitle.class, !0);
                var legendTitleFontProperties = Legend.getTitleFontProperties(adjustedFontProperties);
                legendTitle.style(visuals.FontProperties.toSVGStyle(legendTitleFontProperties)).text((function(d) {
                    return d.text;
                })).attr({
                    x: function(d) {
                        return d.x;
                    },
                    y: function(d) {
                        return d.y;
                    }
                }).append("title").text(data.showTitle !== !1 ? data.title : null), legendTitle.exit().remove();
                var virtualizedDataPoints = data.dataPoints.slice(this.legendDataStartIndex, this.legendDataStartIndex + layout.numberOfItems), iconRadius = powerbi.TextMeasurementService.estimateSvgTextHeight(visuals.FontProperties.toTextProperties(adjustedFontProperties)) / SVGLegend.LegendIconRadiusFactor;
                iconRadius = this.legendFontSizeMarginValue > SVGLegend.DefaultTextMargin && iconRadius > SVGLegend.LegendIconRadius ? iconRadius : SVGLegend.LegendIconRadius;
                var legendItems = group.selectAll(SVGLegend.LegendItem.selector).data(virtualizedDataPoints, (function(d) {
                    return d.identity.getKey() + (null != d.layerNumber ? d.layerNumber : "");
                })), itemsEnter = legendItems.enter().append("g").classed(SVGLegend.LegendItem.class, !0);
                if (itemsEnter.append("path").classed(SVGLegend.LegendIconLine.class, !0), itemsEnter.append("path").classed(SVGLegend.LegendIcon.class, !0), 
                itemsEnter.append("text").classed(SVGLegend.LegendText.class, !0), itemsEnter.append("title").text((function(d) {
                    return d.tooltip;
                })), legendItems.select(SVGLegend.LegendIconLine.selector).attr({
                    transform: function(d) {
                        return visuals.SVGUtil.translate(d.glyphPosition.x, d.glyphPosition.y);
                    },
                    d: function(d) {
                        return d.lineStyle ? "M -" + SVGLegend.LegendIconLineTotalWidth / 2 + " 0 L " + SVGLegend.LegendIconLineTotalWidth / 2 + " 0" : null;
                    },
                    "stroke-width": 2,
                    "stroke-dasharray": function(d) {
                        return d.lineStyle ? visuals.LineStyle.getSrokeDashArrayForLegend(d.lineStyle) : null;
                    }
                }).style({
                    stroke: function(d) {
                        return hasSelection && !d.selected ? visuals.LegendBehavior.dimmedLegendColor : d.lineColor;
                    }
                }), legendItems.select(SVGLegend.LegendIcon.selector).attr({
                    transform: function(d) {
                        return visuals.SVGUtil.translateAndScale(d.glyphPosition.x, d.glyphPosition.y, iconRadius / visuals.Markers.defaultSize);
                    },
                    d: function(d) {
                        return visuals.Markers.getPath(d.markerShape || visuals.markerShape.circle);
                    },
                    "stroke-width": function(d) {
                        return visuals.Markers.getStrokeWidth(d.markerShape || visuals.markerShape.circle);
                    }
                }).style({
                    fill: function(d) {
                        return hasSelection && !d.selected ? visuals.LegendBehavior.dimmedLegendColor : d.color;
                    },
                    stroke: function(d) {
                        return hasSelection && !d.selected ? visuals.LegendBehavior.dimmedLegendColor : d.color;
                    },
                    "stroke-linejoin": "round"
                }), legendItems.select("title").text((function(d) {
                    return d.tooltip;
                })), legendItems.select(SVGLegend.LegendText.selector).attr({
                    x: function(d) {
                        return d.textPosition.x;
                    },
                    y: function(d) {
                        return d.textPosition.y;
                    }
                }).text((function(d) {
                    return d.label;
                })).style(adjustedFontProperties && visuals.FontProperties.toSVGStyle(adjustedFontProperties)), 
                this.interactivityService) {
                    var iconsSelection = legendItems.select(SVGLegend.LegendIcon.selector), linesSelection = legendItems.select(SVGLegend.LegendIconLine.selector), behaviorOptions = {
                        legendItems: legendItems,
                        legendIcons: iconsSelection,
                        legendLines: linesSelection,
                        clearCatcher: this.clearCatcher
                    };
                    this.interactivityService.bind(data.dataPoints, new visuals.LegendBehavior(), behaviorOptions, {
                        isLegend: !0
                    });
                }
                legendItems.exit().remove(), this.drawNavigationArrows(layout.navigationArrows), 
                this.updateLayout();
            }, SVGLegend.prototype.applyViewportSettings = function(data) {
                var fontProperties = data.fontProperties;
                if (data.allowSmallViewport && this.legendSmallViewPortProperties) {
                    var sizePt = fontProperties.size.pt;
                    if (this.parentViewport.width <= this.legendSmallViewPortProperties.maxWidthForSmallFont) {
                        var minFontSize = Math.min(sizePt, SVGLegend.LegendSmallFontSmallViewportInPt), newFontProperties = visuals.FontProperties.inherit(fontProperties, {
                            size: FontSize.createFromPt(minFontSize)
                        });
                        return newFontProperties;
                    }
                    if (this.parentViewport.width <= this.legendSmallViewPortProperties.maxWidthForMediumFont) {
                        var minFontSize = Math.min(sizePt, SVGLegend.LegendMediumFontSmallViewportInPt), newFontProperties = visuals.FontProperties.inherit(fontProperties, {
                            size: FontSize.createFromPt(minFontSize)
                        });
                        return newFontProperties;
                    }
                }
                return fontProperties;
            }, SVGLegend.prototype.normalizePosition = function(points) {
                this.legendDataStartIndex >= points.length && (this.legendDataStartIndex = points.length - 1), 
                this.legendDataStartIndex < 0 && (this.legendDataStartIndex = 0);
            }, SVGLegend.prototype.calculateTitleLayout = function(title) {
                var width = 0, hasTitle = !_.isEmpty(title);
                if (hasTitle) {
                    var isHorizontal = Legend.isTopOrBottom(this.orientation), maxMeasureLength = void 0;
                    if (isHorizontal) {
                        var fontSizeMargin = this.legendFontSizeMarginValue > SVGLegend.DefaultTextMargin ? SVGLegend.TextAndIconPadding + this.legendFontSizeMarginDifference : SVGLegend.TextAndIconPadding, fixedHorizontalIconShift = SVGLegend.TextAndIconPadding + SVGLegend.LegendIconRadius, fixedHorizontalTextShift = SVGLegend.LegendIconRadius + fontSizeMargin + fixedHorizontalIconShift;
                        maxMeasureLength = this.parentViewport.width * SVGLegend.LegendMaxWidthFactor - fixedHorizontalTextShift - SVGLegend.LegendEdgeMariginWidth;
                    } else maxMeasureLength = this.legendFontSizeMarginValue < SVGLegend.DefaultTextMargin ? SVGLegend.MaxTitleLength : SVGLegend.MaxTitleLength + SVGLegend.DefaultMaxLegendFactor * this.legendFontSizeMarginDifference;
                    var textProperties = visuals.FontProperties.toTextProperties(this.data.fontProperties, title), text = title;
                    return width = powerbi.TextMeasurementService.measureSvgTextWidth(textProperties), 
                    width > maxMeasureLength && (text = powerbi.TextMeasurementService.getTailoredTextOrDefault(textProperties, maxMeasureLength), 
                    textProperties.text = text, width = powerbi.TextMeasurementService.measureSvgTextWidth(textProperties)), 
                    isHorizontal ? width += SVGLegend.TitlePadding : text = powerbi.TextMeasurementService.getTailoredTextOrDefault(textProperties, this.viewport.width), 
                    {
                        x: 0,
                        y: 0,
                        text: text,
                        width: width,
                        height: powerbi.TextMeasurementService.estimateSvgTextHeight(textProperties)
                    };
                }
                return null;
            }, SVGLegend.prototype.calculateLayout = function(data, autoWidth) {
                var dataPoints = data.dataPoints;
                if (0 === data.dataPoints.length) return {
                    numberOfItems: 0,
                    title: null,
                    navigationArrows: []
                };
                this.legendFontSizeMarginValue = this.data && void 0 !== this.data.fontProperties ? this.data.fontProperties.size.px : PixelConverter.fromPointToPixel(Legend.DefaultFontSize.pt), 
                this.legendFontSizeMarginDifference = this.legendFontSizeMarginValue - SVGLegend.DefaultTextMargin, 
                this.normalizePosition(dataPoints), this.legendDataStartIndex < dataPoints.length && (dataPoints = dataPoints.slice(this.legendDataStartIndex));
                var navArrows, numberOfItems, title = this.calculateTitleLayout(data.showTitle !== !1 ? data.title : null);
                return Legend.isTopOrBottom(this.orientation) ? (navArrows = this.isScrollable ? this.calculateHorizontalNavigationArrowsLayout(title) : [], 
                numberOfItems = this.calculateHorizontalLayout(dataPoints, title, navArrows)) : (navArrows = this.isScrollable ? this.calculateVerticalNavigationArrowsLayout(title) : [], 
                numberOfItems = this.calculateVerticalLayout(dataPoints, title, navArrows, autoWidth)), 
                {
                    numberOfItems: numberOfItems,
                    title: title,
                    navigationArrows: navArrows
                };
            }, SVGLegend.prototype.updateNavigationArrowLayout = function(navigationArrows, remainingDataLength, visibleDataLength) {
                0 === this.legendDataStartIndex && navigationArrows.shift();
                var lastWindow = this.arrowPosWindow;
                this.arrowPosWindow = visibleDataLength, navigationArrows && navigationArrows.length > 0 && this.arrowPosWindow === remainingDataLength && (this.arrowPosWindow = lastWindow, 
                navigationArrows.length = navigationArrows.length - 1);
            }, SVGLegend.prototype.calculateHorizontalNavigationArrowsLayout = function(title) {
                var height = SVGLegend.LegendArrowHeight, width = SVGLegend.LegendArrowWidth, translateY = this.viewport.height / 2 - height / 2, data = [], rightShift = title ? title.x + title.width : 0, arrowLeft = visuals.SVGUtil.createArrow(width, height, 180), arrowRight = visuals.SVGUtil.createArrow(width, height, 0);
                return data.push({
                    x: rightShift,
                    y: translateY,
                    path: arrowLeft.path,
                    rotateTransform: arrowLeft.transform,
                    type: 1
                }), data.push({
                    x: this.parentViewport.width - width,
                    y: translateY,
                    path: arrowRight.path,
                    rotateTransform: arrowRight.transform,
                    type: 0
                }), data;
            }, SVGLegend.prototype.calculateVerticalNavigationArrowsLayout = function(title) {
                var height = SVGLegend.LegendArrowHeight, width = SVGLegend.LegendArrowWidth, verticalCenter = this.viewport.height / 2, data = [], rightShift = verticalCenter + height / 2, arrowTop = visuals.SVGUtil.createArrow(width, height, 270), arrowBottom = visuals.SVGUtil.createArrow(width, height, 90), titleHeight = title ? title.height : 0;
                return data.push({
                    x: rightShift,
                    y: width + titleHeight,
                    path: arrowTop.path,
                    rotateTransform: arrowTop.transform,
                    type: 1
                }), data.push({
                    x: rightShift,
                    y: this.parentViewport.height - height,
                    path: arrowBottom.path,
                    rotateTransform: arrowBottom.transform,
                    type: 0
                }), data;
            }, SVGLegend.calculateHorizontalLegendItemsWidths = function(dataPoints, availableWidth, iconPadding, fontProperties) {
                var dataPointsLength = dataPoints.length, maxItemWidth = dataPointsLength > 0 ? availableWidth / dataPointsLength | 0 : 0, maxItemTextWidth = maxItemWidth - iconPadding;
                maxItemTextWidth < SVGLegend.MaxTextLength && (maxItemTextWidth = SVGLegend.MaxTextLength, 
                maxItemWidth = maxItemTextWidth + iconPadding), maxItemWidth > availableWidth && (maxItemWidth = availableWidth, 
                maxItemTextWidth = maxItemWidth - iconPadding);
                for (var occupiedWidth = 0, legendItems = [], _i = 0, dataPoints_1 = dataPoints; _i < dataPoints_1.length; _i++) {
                    var dataPoint = dataPoints_1[_i], textProperties = visuals.FontProperties.toTextProperties(fontProperties, dataPoint.label), itemTextWidth = powerbi.TextMeasurementService.measureSvgTextWidth(textProperties), desiredWidth = itemTextWidth + iconPadding, overMaxWidth = desiredWidth > maxItemWidth, actualWidth = overMaxWidth ? maxItemWidth : desiredWidth;
                    if (occupiedWidth += actualWidth, occupiedWidth >= availableWidth) {
                        0 === legendItems.length ? (legendItems.push({
                            dataPoint: dataPoint,
                            textProperties: textProperties,
                            desiredWidth: desiredWidth,
                            desiredOverMaxWidth: !0,
                            width: desiredWidth
                        }), occupiedWidth = availableWidth) : occupiedWidth -= actualWidth;
                        break;
                    }
                    legendItems.push({
                        dataPoint: dataPoint,
                        textProperties: textProperties,
                        desiredWidth: desiredWidth,
                        desiredOverMaxWidth: overMaxWidth,
                        width: desiredWidth
                    });
                }
                var itemsOverMax = _.filter(legendItems, (function(li) {
                    return li.desiredOverMaxWidth;
                })), numItemsOverMax = itemsOverMax.length;
                if (numItemsOverMax > 0) for (var extraWidth = availableWidth - occupiedWidth, _a = 0, itemsOverMax_1 = itemsOverMax; _a < itemsOverMax_1.length; _a++) {
                    var item = itemsOverMax_1[_a], extraWidthPerItem = extraWidth / numItemsOverMax, newMaxItemWidth = maxItemWidth + extraWidthPerItem, usedExtraWidth = void 0;
                    item.desiredWidth <= newMaxItemWidth ? (item.desiredOverMaxWidth = !1, usedExtraWidth = item.desiredWidth - maxItemWidth) : (item.width = newMaxItemWidth, 
                    usedExtraWidth = newMaxItemWidth - maxItemWidth), extraWidth -= usedExtraWidth, 
                    numItemsOverMax--;
                }
                return legendItems;
            }, SVGLegend.prototype.calculateHorizontalLayout = function(dataPoints, title, navigationArrows) {
                var HorizontalTextShift = 4 + SVGLegend.LegendIconRadius, fontSizeBiggerThanDefault = this.legendFontSizeMarginDifference > 0, fontSizeMargin = fontSizeBiggerThanDefault ? SVGLegend.TextAndIconPadding + this.legendFontSizeMarginDifference : SVGLegend.TextAndIconPadding, fixedTextShift = fontSizeMargin / (SVGLegend.LegendIconRadiusFactor / 2) + HorizontalTextShift, occupiedWidth = 0, lineOffset = _.any(dataPoints, (function(dataPoint) {
                    return dataPoint.lineStyle;
                })) ? SVGLegend.LegendIconLineOffset : 0, iconTotalItemPadding = 2 * SVGLegend.LegendIconRadius + 1.5 * fontSizeMargin + 2 * lineOffset, numberOfItems = dataPoints.length, defaultTextProperties = visuals.FontProperties.toTextProperties(this.data.fontProperties), verticalCenter = this.viewport.height / 2, textYCoordinate = verticalCenter + powerbi.TextMeasurementService.estimateSvgTextHeight(defaultTextProperties) / 2 - powerbi.TextMeasurementService.estimateSvgTextBaselineDelta(defaultTextProperties);
                title && (occupiedWidth += title.width, title.y = verticalCenter + title.height / 2 - powerbi.TextMeasurementService.estimateSvgTextBaselineDelta(visuals.FontProperties.toTextProperties(this.data.fontProperties, title.text))), 
                this.legendDataStartIndex > 0 && (occupiedWidth += SVGLegend.LegendArrowOffset);
                var dataPointsLength = dataPoints.length, availableWidth = this.parentViewport.width - occupiedWidth, legendItems = SVGLegend.calculateHorizontalLegendItemsWidths(dataPoints, availableWidth, iconTotalItemPadding, this.data.fontProperties);
                numberOfItems = legendItems.length, numberOfItems !== dataPointsLength && (availableWidth -= SVGLegend.LegendArrowOffset, 
                legendItems = SVGLegend.calculateHorizontalLegendItemsWidths(dataPoints, availableWidth, iconTotalItemPadding, this.data.fontProperties), 
                numberOfItems = legendItems.length);
                for (var _i = 0, legendItems_1 = legendItems; _i < legendItems_1.length; _i++) {
                    var legendItem = legendItems_1[_i], dataPoint = legendItem.dataPoint;
                    if (dataPoint.glyphPosition = {
                        x: occupiedWidth + SVGLegend.LegendIconRadius + this.legendFontSizeMarginDifference / SVGLegend.LegendIconRadiusFactor + lineOffset,
                        y: this.viewport.height * SVGLegend.LegendIconYRatio
                    }, dataPoint.textPosition = {
                        x: occupiedWidth + fixedTextShift + 2 * lineOffset,
                        y: textYCoordinate
                    }, legendItem.desiredOverMaxWidth) {
                        var textWidth = legendItem.width - iconTotalItemPadding, text = powerbi.TextMeasurementService.getTailoredTextOrDefault(legendItem.textProperties, textWidth);
                        dataPoint.label = text;
                    }
                    occupiedWidth += legendItem.width;
                }
                return this.visibleLegendWidth = occupiedWidth, this.updateNavigationArrowLayout(navigationArrows, dataPointsLength, numberOfItems), 
                numberOfItems;
            }, SVGLegend.prototype.calculateVerticalLayout = function(dataPoints, title, navigationArrows, autoWidth) {
                var _this = this, fontSizeBiggerThenDefault = this.legendFontSizeMarginDifference > 0, fontFactor = fontSizeBiggerThenDefault ? this.legendFontSizeMarginDifference : 0, verticalLegendHeight = 20 + fontFactor, spaceNeededByTitle = 15 + fontFactor, extraShiftForTextAlignmentToIcon = 4 + fontFactor, totalSpaceOccupiedThusFar = verticalLegendHeight, fixedHorizontalIconShift = SVGLegend.TextAndIconPadding + SVGLegend.LegendIconRadius + this.legendFontSizeMarginDifference / SVGLegend.LegendIconRadiusFactor, fixedHorizontalTextShift = 2 * fixedHorizontalIconShift, maxHorizontalSpaceAvaliable = autoWidth ? this.parentViewport.width * SVGLegend.LegendMaxWidthFactor - fixedHorizontalTextShift - SVGLegend.LegendEdgeMariginWidth : this.lastCalculatedWidth - fixedHorizontalTextShift - SVGLegend.LegendEdgeMariginWidth, numberOfItems = dataPoints.length, maxHorizontalSpaceUsed = 0, parentHeight = this.parentViewport.height;
                title && (totalSpaceOccupiedThusFar += spaceNeededByTitle, title.x = SVGLegend.TextAndIconPadding, 
                title.y = spaceNeededByTitle, maxHorizontalSpaceUsed = title.width || 0), this.legendDataStartIndex > 0 && (totalSpaceOccupiedThusFar += SVGLegend.LegendArrowOffset);
                for (var dataPointsLength = dataPoints.length, i = 0; i < dataPointsLength; i++) {
                    var dp = dataPoints[i], textProperties = visuals.FontProperties.toTextProperties(this.data.fontProperties, dp.label);
                    dp.glyphPosition = {
                        x: fixedHorizontalIconShift,
                        y: totalSpaceOccupiedThusFar + extraShiftForTextAlignmentToIcon - powerbi.TextMeasurementService.estimateSvgTextBaselineDelta(textProperties)
                    }, dp.textPosition = {
                        x: fixedHorizontalTextShift,
                        y: totalSpaceOccupiedThusFar + extraShiftForTextAlignmentToIcon
                    };
                    var width = powerbi.TextMeasurementService.measureSvgTextWidth(textProperties);
                    if (width > maxHorizontalSpaceUsed && (maxHorizontalSpaceUsed = width), width > maxHorizontalSpaceAvaliable) {
                        var text = powerbi.TextMeasurementService.getTailoredTextOrDefault(textProperties, maxHorizontalSpaceAvaliable);
                        dp.label = text;
                    }
                    if (totalSpaceOccupiedThusFar += verticalLegendHeight, totalSpaceOccupiedThusFar > parentHeight) {
                        numberOfItems = i;
                        break;
                    }
                }
                return autoWidth ? maxHorizontalSpaceUsed < maxHorizontalSpaceAvaliable ? this.lastCalculatedWidth = this.viewport.width = Math.ceil(maxHorizontalSpaceUsed + fixedHorizontalTextShift + SVGLegend.LegendEdgeMariginWidth) : this.lastCalculatedWidth = this.viewport.width = Math.ceil(this.parentViewport.width * SVGLegend.LegendMaxWidthFactor) : this.viewport.width = this.lastCalculatedWidth, 
                this.visibleLegendHeight = totalSpaceOccupiedThusFar, navigationArrows.forEach((function(d) {
                    return d.x = _this.lastCalculatedWidth / 2;
                })), this.updateNavigationArrowLayout(navigationArrows, dataPointsLength, numberOfItems), 
                numberOfItems;
            }, SVGLegend.prototype.drawNavigationArrows = function(layout) {
                var _this = this, arrows = this.group.selectAll(SVGLegend.NavigationArrow.selector).data(layout);
                arrows.enter().append("g").on("click", (function(d) {
                    var pos = _this.legendDataStartIndex;
                    _this.legendDataStartIndex = 0 === d.type ? pos + _this.arrowPosWindow : pos - _this.arrowPosWindow, 
                    _this.drawLegendInternal(_this.data, _this.parentViewport, !1);
                })).classed(SVGLegend.NavigationArrow.class, !0).append("path"), arrows.attr("transform", (function(d) {
                    return visuals.SVGUtil.translate(d.x, d.y);
                })).select("path").attr({
                    d: function(d) {
                        return d.path;
                    },
                    transform: function(d) {
                        return d.rotateTransform;
                    }
                }), arrows.exit().remove();
            }, SVGLegend.prototype.reset = function() {}, SVGLegend.prototype.setTooltipToLegendItems = function(data) {
                for (var _i = 0, _a = data.dataPoints; _i < _a.length; _i++) {
                    var dataPoint = _a[_i];
                    dataPoint.tooltip = dataPoint.label;
                }
            }, SVGLegend.DefaultFontSizeInPt = 8, SVGLegend.LegendSmallFontSmallViewportInPt = 7, 
            SVGLegend.LegendMediumFontSmallViewportInPt = 8, SVGLegend.LegendIconRadius = 5, 
            SVGLegend.LegendIconRadiusFactor = 5, SVGLegend.LegendIconLineTotalWidth = 31, SVGLegend.LegendIconLineOffset = SVGLegend.LegendIconLineTotalWidth / 2 - SVGLegend.LegendIconRadius, 
            SVGLegend.MaxTextLength = 60, SVGLegend.MaxTitleLength = 80, SVGLegend.TextAndIconPadding = 5, 
            SVGLegend.TitlePadding = 15, SVGLegend.LegendEdgeMariginWidth = 10, SVGLegend.LegendMaxWidthFactor = .3, 
            SVGLegend.TopLegendHeight = 24, SVGLegend.DefaultTextMargin = Legend.DefaultFontSize.pt, 
            SVGLegend.DefaultMaxLegendFactor = SVGLegend.MaxTitleLength / SVGLegend.DefaultTextMargin, 
            SVGLegend.LegendIconYRatio = .52, SVGLegend.LegendArrowOffset = 10, SVGLegend.LegendArrowHeight = 15, 
            SVGLegend.LegendArrowWidth = 7.5, SVGLegend.LegendItem = createClassAndSelector("legendItem"), 
            SVGLegend.LegendText = createClassAndSelector("legendText"), SVGLegend.LegendIcon = createClassAndSelector("legendIcon"), 
            SVGLegend.LegendIconLine = createClassAndSelector("legendIconLine"), SVGLegend.LegendTitle = createClassAndSelector("legendTitle"), 
            SVGLegend.NavigationArrow = createClassAndSelector("navArrow"), SVGLegend;
        })();
        visuals.SVGLegend = SVGLegend;
        var LegendData, CartesianChartInteractiveLegend = (function() {
            function CartesianChartInteractiveLegend(element) {
                this.legendContainerParent = d3.select(element.get(0));
            }
            return CartesianChartInteractiveLegend.prototype.getMargins = function() {
                return {
                    height: CartesianChartInteractiveLegend.LegendHeight,
                    width: 0
                };
            }, CartesianChartInteractiveLegend.prototype.drawLegend = function(legendData) {
                var data = legendData.dataPoints;
                if (!(data.length < 1)) {
                    var legendContainerDiv = this.legendContainerParent.select(CartesianChartInteractiveLegend.LegendContainerSelector);
                    if (legendContainerDiv.empty()) {
                        if (!data.length) return;
                        var divToPrepend = $("<div></div>").height(this.getMargins().height).addClass(CartesianChartInteractiveLegend.LegendContainerClass);
                        $(this.legendContainerParent[0]).prepend(divToPrepend), legendContainerDiv = d3.select(divToPrepend.get(0));
                    }
                    this.legendContainerDiv = legendContainerDiv, this.drawTitle(data), this.drawLegendItems(data);
                }
            }, CartesianChartInteractiveLegend.prototype.reset = function() {
                this.legendContainerDiv && (this.legendContainerDiv.remove(), this.legendContainerDiv = null);
            }, CartesianChartInteractiveLegend.prototype.isVisible = function() {
                return !0;
            }, CartesianChartInteractiveLegend.prototype.changeOrientation = function(orientation) {}, 
            CartesianChartInteractiveLegend.prototype.getOrientation = function() {
                return LegendPosition.Top;
            }, CartesianChartInteractiveLegend.prototype.drawTitle = function(data) {
                var titleDiv = this.legendContainerDiv.selectAll("div." + CartesianChartInteractiveLegend.LegendTitleClass), item = titleDiv.data([ data[0] ]), itemEnter = item.enter(), titleDivEnter = itemEnter.append("div").attr("class", CartesianChartInteractiveLegend.LegendTitleClass);
                titleDivEnter.filter((function(d) {
                    return d.iconOnlyOnLabel;
                })).append("span").attr("class", CartesianChartInteractiveLegend.legendIconClass).html(CartesianChartInteractiveLegend.legendPlaceSelector), 
                titleDivEnter.append("span"), item.filter((function(d) {
                    return d.iconOnlyOnLabel;
                })).select("span." + CartesianChartInteractiveLegend.legendIconClass).style(CartesianChartInteractiveLegend.legendColorCss, (function(d) {
                    return d.color;
                })), item.select("span:last-child").text((function(d) {
                    return d.category;
                }));
            }, CartesianChartInteractiveLegend.prototype.drawLegendItems = function(data) {
                this.ensureLegendTableCreated();
                var dataPointsMatrix = [ data ], legendItemsContainer = this.legendContainerDiv.select("tbody").selectAll("tr").data(dataPointsMatrix), legendItemsEnter = legendItemsContainer.enter(), rowEnter = legendItemsEnter.append("tr"), cellEnter = rowEnter.selectAll("td").data((function(d) {
                    return d;
                }), (function(d) {
                    return d.label;
                })).enter().append("td").attr("class", CartesianChartInteractiveLegend.LegendItem), cellSpanEnter = cellEnter.append("span");
                cellSpanEnter.filter((function(d) {
                    return !d.iconOnlyOnLabel;
                })).append("span").html(CartesianChartInteractiveLegend.legendPlaceSelector).attr("class", CartesianChartInteractiveLegend.legendIconClass).attr("white-space", "nowrap").style({
                    "font-size": "20px",
                    "margin-bottom": "7px"
                }), cellSpanEnter.append("span").attr("class", CartesianChartInteractiveLegend.legendItemNameClass), 
                cellSpanEnter.append("span").attr("class", CartesianChartInteractiveLegend.legendItemMeasureClass);
                var legendCells = legendItemsContainer.selectAll("td").data((function(d) {
                    return d;
                }), (function(d) {
                    return d.label;
                }));
                legendCells.select("span." + CartesianChartInteractiveLegend.legendItemNameClass).html((function(d) {
                    return powerbi.visuals.TextUtil.removeBreakingSpaces(d.label);
                })), legendCells.select("span." + CartesianChartInteractiveLegend.legendItemMeasureClass).html((function(d) {
                    return "&nbsp;" + d.measure;
                })), legendCells.select("span." + CartesianChartInteractiveLegend.legendIconClass).style("color", (function(d) {
                    return d.color;
                })), legendCells.exit().remove();
            }, CartesianChartInteractiveLegend.prototype.ensureLegendTableCreated = function() {
                if (this.legendContainerDiv.select("div table").empty()) {
                    var legendTable = this.legendContainerDiv.append("div").append("table");
                    legendTable.style("table-layout", "fixed").append("tbody"), this.setPanGestureOnLegend(legendTable);
                }
            }, CartesianChartInteractiveLegend.prototype.setPanGestureOnLegend = function(legendTable) {
                var viewportWidth = $(this.legendContainerParent[0]).width(), xscale = d3.scale.linear().domain([ 0, viewportWidth ]).range([ 0, viewportWidth ]), zoom = d3.behavior.zoom().scaleExtent([ 1, 1 ]).x(xscale).on("zoom", (function() {
                    if ($(legendTable[0]).width() > viewportWidth) {
                        var t = zoom.translate(), tx_1 = t[0], ty = t[1];
                        tx_1 = Math.min(tx_1, 0), tx_1 = Math.max(tx_1, viewportWidth - $(legendTable[0]).width()), 
                        zoom.translate([ tx_1, ty ]), legendTable.style("-ms-transform", (function() {
                            return visuals.SVGUtil.translateXWithPixels(tx_1);
                        })), legendTable.style("-webkit-transform", (function() {
                            return visuals.SVGUtil.translateXWithPixels(tx_1);
                        })), legendTable.style("transform", (function() {
                            return visuals.SVGUtil.translateXWithPixels(tx_1);
                        }));
                    }
                }));
                this.legendContainerDiv ? this.legendContainerDiv.call(zoom) : legendTable.call(zoom);
            }, CartesianChartInteractiveLegend.LegendHeight = 70, CartesianChartInteractiveLegend.LegendContainerClass = "interactive-legend", 
            CartesianChartInteractiveLegend.LegendContainerSelector = ".interactive-legend", 
            CartesianChartInteractiveLegend.LegendTitleClass = "title", CartesianChartInteractiveLegend.LegendItem = "item", 
            CartesianChartInteractiveLegend.legendPlaceSelector = "●", CartesianChartInteractiveLegend.legendIconClass = "icon", 
            CartesianChartInteractiveLegend.legendColorCss = "color", CartesianChartInteractiveLegend.legendItemNameClass = "itemName", 
            CartesianChartInteractiveLegend.legendItemMeasureClass = "itemMeasure", CartesianChartInteractiveLegend;
        })();
        !(function(LegendData) {
            function update(legendData, legendObject) {
                var color = Legend.DefaultLabelColor, fontSize = Legend.DefaultFontSize;
                if (null == legendObject[visuals.legendProps.show] && (legendObject[visuals.legendProps.show] = !0), 
                legendObject[visuals.legendProps.show] === !1 && (legendData.dataPoints = []), legendObject[visuals.legendProps.show] === !0 && null == legendObject[visuals.legendProps.position] && (legendObject[visuals.legendProps.position] = visuals.legendPosition.top), 
                void 0 !== legendObject[visuals.legendProps.fontSize]) {
                    var fontSize_1, fontSizePtValue = legendObject[visuals.legendProps.fontSize];
                    null != fontSizePtValue && (fontSize_1 = FontSize.createFromPt(+fontSizePtValue)), 
                    legendData.fontSize = fontSizePtValue;
                }
                if (void 0 !== legendObject[visuals.legendProps.labelColor]) {
                    var fillColor = legendObject[visuals.legendProps.labelColor];
                    null != fillColor && (color = fillColor.solid.color, legendData.labelColor = fillColor.solid.color);
                }
                legendObject[visuals.legendProps.showTitle] === !1 ? legendData.title = "" : void 0 !== legendObject[visuals.legendProps.titleText] && (legendData.title = legendObject[visuals.legendProps.titleText]), 
                legendData.fontProperties = {
                    color: color,
                    family: Legend.DefaultFontFamily,
                    size: fontSize
                };
            }
            function create(staticObjects, dataPoints, showByDefault, defaultTitleText, hasDynamicSeries) {
                void 0 === hasDynamicSeries && (hasDynamicSeries = !1);
                var fontSize, fontSizePtValue = powerbi.DataViewObjects.getValue(staticObjects, visuals.legendPropIdentifiers.fontSize);
                fontSize = null != fontSizePtValue ? FontSize.createFromPt(+fontSizePtValue) : Legend.DefaultFontSize;
                var show = powerbi.DataViewObjects.getValue(staticObjects, visuals.legendPropIdentifiers.show, showByDefault), position = LegendPosition[powerbi.DataViewObjects.getValue(staticObjects, visuals.legendPropIdentifiers.position, Legend.DefaultPositionKey)], showTitle = powerbi.DataViewObjects.getValue(staticObjects, visuals.legendPropIdentifiers.showTitle, !0);
                return {
                    show: show,
                    position: position,
                    dataPoints: dataPoints,
                    showTitle: showTitle,
                    title: powerbi.DataViewObjects.getValue(staticObjects, visuals.legendPropIdentifiers.titleText, defaultTitleText),
                    grouped: hasDynamicSeries,
                    fontProperties: {
                        family: powerbi.DataViewObjects.getValue(staticObjects, visuals.legendPropIdentifiers.fontFamily, Legend.DefaultFontFamily),
                        size: fontSize,
                        color: powerbi.DataViewObjects.getFillColor(staticObjects, visuals.legendPropIdentifiers.labelColor, Legend.DefaultLabelColor)
                    }
                };
            }
            function toIEnumerableDataPoints(legendData) {
                return _.map(legendData.dataPoints, (function(dataPoint) {
                    return {
                        color: dataPoint.color,
                        displayName: dataPoint.label,
                        identity: dataPoint.identity
                    };
                }));
            }
            LegendData.DefaultLegendLabelFillColor = "#666666", LegendData.update = update, 
            LegendData.create = create, LegendData.toIEnumerableDataPoints = toIEnumerableDataPoints;
        })(LegendData = visuals.LegendData || (visuals.LegendData = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var axisScale;
        !(function(axisScale) {
            axisScale.linear = "linear", axisScale.log = "log", axisScale.type = powerbi.createEnumType([ {
                value: axisScale.linear,
                displayName: function(resources) {
                    return resources.get("Visual_Axis_Linear");
                }
            }, {
                value: axisScale.log,
                displayName: function(resources) {
                    return resources.get("Visual_Axis_Log");
                }
            } ]);
        })(axisScale = visuals.axisScale || (visuals.axisScale = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var axisStyle;
        !(function(axisStyle) {
            axisStyle.showBoth = "showBoth", axisStyle.showTitleOnly = "showTitleOnly", axisStyle.showUnitOnly = "showUnitOnly", 
            axisStyle.type = powerbi.createEnumType([ {
                value: axisStyle.showTitleOnly,
                displayName: function(resources) {
                    return resources.get("Visual_Axis_ShowTitleOnly");
                }
            }, {
                value: axisStyle.showUnitOnly,
                displayName: function(resources) {
                    return resources.get("Visual_Axis_ShowUnitOnly");
                }
            }, {
                value: axisStyle.showBoth,
                displayName: function(resources) {
                    return resources.get("Visual_Axis_ShowBoth");
                }
            } ]);
        })(axisStyle = visuals.axisStyle || (visuals.axisStyle = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var axisType;
        !(function(axisType) {
            axisType.scalar = "Scalar", axisType.categorical = "Categorical", axisType.both = "Both", 
            axisType.type = powerbi.createEnumType([ {
                value: axisType.scalar,
                displayName: function(resources) {
                    return resources.get("Visual_Axis_Scalar");
                }
            }, {
                value: axisType.categorical,
                displayName: function(resources) {
                    return resources.get("Visual_Axis_Categorical");
                }
            } ]);
        })(axisType = visuals.axisType || (visuals.axisType = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var basicShapeType;
        !(function(basicShapeType) {
            basicShapeType.rectangle = "rectangle", basicShapeType.oval = "oval", basicShapeType.line = "line", 
            basicShapeType.arrow = "arrow", basicShapeType.triangle = "triangle", basicShapeType.arrowButton = "arrowbutton", 
            basicShapeType.type = powerbi.createEnumType([ {
                value: basicShapeType.rectangle,
                displayName: "rectangle"
            }, {
                value: basicShapeType.oval,
                displayName: "oval"
            }, {
                value: basicShapeType.line,
                displayName: "line"
            }, {
                value: basicShapeType.arrow,
                displayName: "arrow"
            }, {
                value: basicShapeType.triangle,
                displayName: "triangle"
            }, {
                value: basicShapeType.arrowButton,
                displayName: "arrowbutton"
            } ]);
        })(basicShapeType = visuals.basicShapeType || (visuals.basicShapeType = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var BingMapTheme;
        !(function(BingMapTheme) {
            BingMapTheme.aerial = "aerial", BingMapTheme.canvasDark = "canvasDark", BingMapTheme.canvasLight = "canvasLight", 
            BingMapTheme.grayscale = "grayscale", BingMapTheme.road = "road", BingMapTheme.defaultTheme = BingMapTheme.road, 
            BingMapTheme.type = powerbi.createEnumType([ {
                value: BingMapTheme.aerial,
                displayName: function(resources) {
                    return resources.get("Visual_MapThemeAerial");
                }
            }, {
                value: BingMapTheme.canvasDark,
                displayName: function(resources) {
                    return resources.get("Visual_MapThemeDark");
                }
            }, {
                value: BingMapTheme.canvasLight,
                displayName: function(resources) {
                    return resources.get("Visual_MapThemeLight");
                }
            }, {
                value: BingMapTheme.grayscale,
                displayName: function(resources) {
                    return resources.get("Visual_MapThemeGrayScale");
                }
            }, {
                value: BingMapTheme.road,
                displayName: function(resources) {
                    return resources.get("Visual_MapThemeRoad");
                }
            } ]);
        })(BingMapTheme = visuals.BingMapTheme || (visuals.BingMapTheme = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var confidenceBandStyle;
        !(function(confidenceBandStyle) {
            confidenceBandStyle.fill = "fill", confidenceBandStyle.line = "line", confidenceBandStyle.none = "none", 
            confidenceBandStyle.type = powerbi.createEnumType([ {
                value: confidenceBandStyle.fill,
                displayName: function(resources) {
                    return resources.get("Visual_Confidence_Band_Style_Fill");
                }
            }, {
                value: confidenceBandStyle.line,
                displayName: function(resources) {
                    return resources.get("Visual_Confidence_Band_Style_Line");
                }
            }, {
                value: confidenceBandStyle.none,
                displayName: function(resources) {
                    return resources.get("Visual_Confidence_Band_Style_None");
                }
            } ]);
        })(confidenceBandStyle = visuals.confidenceBandStyle || (visuals.confidenceBandStyle = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var forecastUnits;
        !(function(forecastUnits) {
            forecastUnits.year = "year", forecastUnits.quarter = "quarter", forecastUnits.month = "month", 
            forecastUnits.day = "day", forecastUnits.hour = "hour", forecastUnits.minute = "minute", 
            forecastUnits.second = "second", forecastUnits.point = "point", forecastUnits.type = powerbi.createEnumType([ {
                value: forecastUnits.year,
                displayName: function(resources) {
                    return resources.get("Visual_Forecast_Units_Year");
                }
            }, {
                value: forecastUnits.quarter,
                displayName: function(resources) {
                    return resources.get("Visual_Forecast_Units_Quarter");
                }
            }, {
                value: forecastUnits.month,
                displayName: function(resources) {
                    return resources.get("Visual_Forecast_Units_Month");
                }
            }, {
                value: forecastUnits.day,
                displayName: function(resources) {
                    return resources.get("Visual_Forecast_Units_Day");
                }
            }, {
                value: forecastUnits.hour,
                displayName: function(resources) {
                    return resources.get("Visual_Forecast_Units_Hour");
                }
            }, {
                value: forecastUnits.minute,
                displayName: function(resources) {
                    return resources.get("Visual_Forecast_Units_Minute");
                }
            }, {
                value: forecastUnits.second,
                displayName: function(resources) {
                    return resources.get("Visual_Forecast_Units_Second");
                }
            }, {
                value: forecastUnits.point,
                displayName: function(resources) {
                    return resources.get("Visual_Forecast_Units_Point");
                }
            } ]);
        })(forecastUnits = visuals.forecastUnits || (visuals.forecastUnits = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var forecastConfidenceIntervals;
        !(function(forecastConfidenceIntervals) {
            forecastConfidenceIntervals.ninetyNine = "99%", forecastConfidenceIntervals.ninetyFive = "95%", 
            forecastConfidenceIntervals.ninety = "90%", forecastConfidenceIntervals.eightyFive = "85%", 
            forecastConfidenceIntervals.eighty = "80%", forecastConfidenceIntervals.seventyfive = "75%", 
            forecastConfidenceIntervals.type = powerbi.createEnumType([ {
                value: forecastConfidenceIntervals.ninetyNine,
                displayName: function(resources) {
                    return "99%";
                }
            }, {
                value: forecastConfidenceIntervals.ninetyFive,
                displayName: function(resources) {
                    return "95%";
                }
            }, {
                value: forecastConfidenceIntervals.ninety,
                displayName: function(resources) {
                    return "90%";
                }
            }, {
                value: forecastConfidenceIntervals.eightyFive,
                displayName: function(resources) {
                    return "85%";
                }
            }, {
                value: forecastConfidenceIntervals.eighty,
                displayName: function(resources) {
                    return "80%";
                }
            }, {
                value: forecastConfidenceIntervals.seventyfive,
                displayName: function(resources) {
                    return "75%";
                }
            } ]);
        })(forecastConfidenceIntervals = visuals.forecastConfidenceIntervals || (visuals.forecastConfidenceIntervals = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var imageScalingType;
        !(function(imageScalingType) {
            imageScalingType.normal = "Normal", imageScalingType.fit = "Fit", imageScalingType.fill = "Fill", 
            imageScalingType.type = powerbi.createEnumType([ {
                value: imageScalingType.normal,
                displayName: function(resources) {
                    return resources.get("Visual_ImageScalingType_Normal");
                }
            }, {
                value: imageScalingType.fit,
                displayName: function(resources) {
                    return resources.get("Visual_ImageScalingType_Fit");
                }
            }, {
                value: imageScalingType.fill,
                displayName: function(resources) {
                    return resources.get("Visual_ImageScalingType_Fill");
                }
            } ]);
        })(imageScalingType = visuals.imageScalingType || (visuals.imageScalingType = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var labelOrientation;
        !(function(labelOrientation) {
            labelOrientation.type = powerbi.createEnumType([ {
                value: 0,
                displayName: function(resources) {
                    return resources.get("Visual_LabelOrientation_Vertical");
                }
            }, {
                value: 1,
                displayName: function(resources) {
                    return resources.get("Visual_LabelOrientation_Horizontal");
                }
            } ]);
        })(labelOrientation = visuals.labelOrientation || (visuals.labelOrientation = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var labelPosition;
        !(function(labelPosition) {
            labelPosition.auto = "Auto", labelPosition.insideEnd = "InsideEnd", labelPosition.insideCenter = "InsideCenter", 
            labelPosition.outsideEnd = "OutsideEnd", labelPosition.insideBase = "InsideBase", 
            labelPosition.type = powerbi.createEnumType([ {
                value: labelPosition.auto,
                displayName: function(resources) {
                    return resources.get("Visual_Auto");
                }
            }, {
                value: labelPosition.insideEnd,
                displayName: function(resources) {
                    return resources.get("Visual_LabelPosition_InsideEnd");
                }
            }, {
                value: labelPosition.outsideEnd,
                displayName: function(resources) {
                    return resources.get("Visual_LabelPosition_OutsideEnd");
                }
            }, {
                value: labelPosition.insideCenter,
                displayName: function(resources) {
                    return resources.get("Visual_LabelPosition_InsideCenter");
                }
            }, {
                value: labelPosition.insideBase,
                displayName: function(resources) {
                    return resources.get("Visual_LabelPosition_InsideBase");
                }
            } ]);
        })(labelPosition = visuals.labelPosition || (visuals.labelPosition = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var labelStyle;
        !(function(labelStyle) {
            labelStyle.flagLabelStyleCategory = 2, labelStyle.flagLabelStyleData = 4, labelStyle.flagLabelStylePercent = 8;
            var labelStyleFlagEnum;
            !(function(labelStyleFlagEnum) {
                labelStyleFlagEnum[labelStyleFlagEnum.category = labelStyle.flagLabelStyleCategory] = "category", 
                labelStyleFlagEnum[labelStyleFlagEnum.data = labelStyle.flagLabelStyleData] = "data", 
                labelStyleFlagEnum[labelStyleFlagEnum.percent = labelStyle.flagLabelStylePercent] = "percent", 
                labelStyleFlagEnum[labelStyleFlagEnum.categoryAndData = labelStyle.flagLabelStyleCategory | labelStyle.flagLabelStyleData] = "categoryAndData", 
                labelStyleFlagEnum[labelStyleFlagEnum.categoryAndPercent = labelStyle.flagLabelStyleCategory | labelStyle.flagLabelStylePercent] = "categoryAndPercent", 
                labelStyleFlagEnum[labelStyleFlagEnum.dataAndPercent = labelStyle.flagLabelStyleData | labelStyle.flagLabelStylePercent] = "dataAndPercent", 
                labelStyleFlagEnum[labelStyleFlagEnum.categoryAndDataAndPercent = labelStyle.flagLabelStyleCategory | labelStyle.flagLabelStyleData | labelStyle.flagLabelStylePercent] = "categoryAndDataAndPercent";
            })(labelStyleFlagEnum = labelStyle.labelStyleFlagEnum || (labelStyle.labelStyleFlagEnum = {})), 
            labelStyle.category = "Category", labelStyle.data = "Data", labelStyle.percent = "Percent of total", 
            labelStyle.categoryAndData = "Both", labelStyle.categoryAndPercent = "Category, percent of total", 
            labelStyle.dataAndPercent = "Data value, percent of total", labelStyle.categoryAndDataAndPercent = "Category, data value, percent of total", 
            labelStyle.type = powerbi.createEnumType([ {
                value: labelStyle.category,
                displayName: function(resources) {
                    return resources.get("Visual_LabelStyle_Category");
                }
            }, {
                value: labelStyle.data,
                displayName: function(resources) {
                    return resources.get("Visual_LabelStyle_DataValue");
                }
            }, {
                value: labelStyle.percent,
                displayName: function(resources) {
                    return resources.get("Visual_LabelStyle_Percent");
                }
            }, {
                value: labelStyle.categoryAndData,
                displayName: function(resources) {
                    return resources.get("Visual_LabelStyle_CategoryAndData");
                }
            }, {
                value: labelStyle.categoryAndPercent,
                displayName: function(resources) {
                    return resources.get("Visual_LabelStyle_CategoryAndPercent");
                }
            }, {
                value: labelStyle.dataAndPercent,
                displayName: function(resources) {
                    return resources.get("Visual_LabelStyle_DataAndPercent");
                }
            }, {
                value: labelStyle.categoryAndDataAndPercent,
                displayName: function(resources) {
                    return resources.get("Visual_LabelStyle_CategoryAndDataAndPercent");
                }
            } ]);
        })(labelStyle = visuals.labelStyle || (visuals.labelStyle = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var labelText;
        !(function(labelText) {
            labelText.value = "Value", labelText.name = "Name", labelText.nameAndValue = "ValueAndName", 
            labelText.type = powerbi.createEnumType([ {
                value: labelText.value,
                displayName: function(resources) {
                    return resources.get("Visual_LabelText_Value");
                }
            }, {
                value: labelText.name,
                displayName: function(resources) {
                    return resources.get("Visual_LabelText_Name");
                }
            }, {
                value: labelText.nameAndValue,
                displayName: function(resources) {
                    return resources.get("Visual_LabelText_Name_Value");
                }
            } ]);
        })(labelText = visuals.labelText || (visuals.labelText = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var legendPosition;
        !(function(legendPosition) {
            legendPosition.top = "Top", legendPosition.bottom = "Bottom", legendPosition.left = "Left", 
            legendPosition.right = "Right", legendPosition.topCenter = "TopCenter", legendPosition.bottomCenter = "BottomCenter", 
            legendPosition.leftCenter = "LeftCenter", legendPosition.rightCenter = "RightCenter", 
            legendPosition.type = powerbi.createEnumType([ {
                value: legendPosition.top,
                displayName: function(resources) {
                    return resources.get("Visual_LegendPosition_Top");
                }
            }, {
                value: legendPosition.bottom,
                displayName: function(resources) {
                    return resources.get("Visual_LegendPosition_Bottom");
                }
            }, {
                value: legendPosition.left,
                displayName: function(resources) {
                    return resources.get("Visual_LegendPosition_Left");
                }
            }, {
                value: legendPosition.right,
                displayName: function(resources) {
                    return resources.get("Visual_LegendPosition_Right");
                }
            }, {
                value: legendPosition.topCenter,
                displayName: function(resources) {
                    return resources.get("Visual_LegendPosition_TopCenter");
                }
            }, {
                value: legendPosition.bottomCenter,
                displayName: function(resources) {
                    return resources.get("Visual_LegendPosition_BottomCenter");
                }
            }, {
                value: legendPosition.leftCenter,
                displayName: function(resources) {
                    return resources.get("Visual_LegendPosition_LeftCenter");
                }
            }, {
                value: legendPosition.rightCenter,
                displayName: function(resources) {
                    return resources.get("Visual_LegendPosition_RightCenter");
                }
            } ]);
        })(legendPosition = visuals.legendPosition || (visuals.legendPosition = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var kpiDirection;
        !(function(kpiDirection) {
            kpiDirection.positive = "Positive", kpiDirection.negative = "Negative", kpiDirection.type = powerbi.createEnumType([ {
                value: kpiDirection.positive,
                displayName: function(resources) {
                    return resources.get("Visual_KPI_Direction_Positive");
                }
            }, {
                value: kpiDirection.negative,
                displayName: function(resources) {
                    return resources.get("Visual_KPI_Direction_Negative");
                }
            } ]);
        })(kpiDirection = visuals.kpiDirection || (visuals.kpiDirection = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var strokeLineJoin;
        !(function(strokeLineJoin) {
            strokeLineJoin.miter = "miter", strokeLineJoin.round = "round", strokeLineJoin.bevel = "bevel", 
            strokeLineJoin.defaultValue = strokeLineJoin.round, strokeLineJoin.type = powerbi.createEnumType([ {
                value: strokeLineJoin.miter,
                displayName: function(resources) {
                    return resources.get("Visual_StrokeLineJoin_Miter");
                }
            }, {
                value: strokeLineJoin.round,
                displayName: function(resources) {
                    return resources.get("Visual_StrokeLineJoin_Round");
                }
            }, {
                value: strokeLineJoin.bevel,
                displayName: function(resources) {
                    return resources.get("Visual_StrokeLineJoin_Bevel");
                }
            } ]);
        })(strokeLineJoin = visuals.strokeLineJoin || (visuals.strokeLineJoin = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var legendMarkerRendering;
        !(function(legendMarkerRendering) {
            legendMarkerRendering.markerOnly = "markerOnly", legendMarkerRendering.lineAndMarker = "lineAndMarker", 
            legendMarkerRendering.lineOnly = "lineOnly", legendMarkerRendering.type = powerbi.createEnumType([ {
                value: legendMarkerRendering.markerOnly,
                displayName: function(resources) {
                    return resources.get("Visual_LegendMarkerOnly");
                }
            }, {
                value: legendMarkerRendering.lineAndMarker,
                displayName: function(resources) {
                    return resources.get("Visual_LegendLineAndMarker");
                }
            }, {
                value: legendMarkerRendering.lineOnly,
                displayName: function(resources) {
                    return resources.get("Visual_LegendLineOnly");
                }
            } ]);
        })(legendMarkerRendering = visuals.legendMarkerRendering || (visuals.legendMarkerRendering = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var lineStyle;
        !(function(lineStyle) {
            lineStyle.dashed = "dashed", lineStyle.solid = "solid", lineStyle.dotted = "dotted", 
            lineStyle.type = powerbi.createEnumType([ {
                value: lineStyle.dashed,
                displayName: function(resources) {
                    return resources.get("Visual_LineStyle_Dashed");
                }
            }, {
                value: lineStyle.solid,
                displayName: function(resources) {
                    return resources.get("Visual_LineStyle_Solid");
                }
            }, {
                value: lineStyle.dotted,
                displayName: function(resources) {
                    return resources.get("Visual_LineStyle_Dotted");
                }
            } ]);
        })(lineStyle = visuals.lineStyle || (visuals.lineStyle = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var markerShape;
        !(function(markerShape) {
            markerShape.circle = "circle", markerShape.square = "square", markerShape.diamond = "diamond", 
            markerShape.triangle = "triangle", markerShape.x = "x", markerShape.shortDash = "shortDash", 
            markerShape.longDash = "longDash", markerShape.plus = "plus", markerShape.none = "none", 
            markerShape.defaultValue = markerShape.circle, markerShape.type = powerbi.createEnumType([ {
                value: markerShape.circle,
                displayName: function(resources) {
                    return resources.get("Visual_MarkerShape_Circle");
                }
            }, {
                value: markerShape.square,
                displayName: function(resources) {
                    return resources.get("Visual_MarkerShape_Square");
                }
            }, {
                value: markerShape.diamond,
                displayName: function(resources) {
                    return resources.get("Visual_MarkerShape_Diamond");
                }
            }, {
                value: markerShape.triangle,
                displayName: function(resources) {
                    return resources.get("Visual_MarkerShape_Triangle");
                }
            }, {
                value: markerShape.x,
                displayName: function(resources) {
                    return resources.get("Visual_MarkerShape_X");
                }
            }, {
                value: markerShape.shortDash,
                displayName: function(resources) {
                    return resources.get("Visual_MarkerShape_ShortDash");
                }
            }, {
                value: markerShape.longDash,
                displayName: function(resources) {
                    return resources.get("Visual_MarkerShape_LongDash");
                }
            }, {
                value: markerShape.plus,
                displayName: function(resources) {
                    return resources.get("Visual_MarkerShape_Plus");
                }
            } ]);
        })(markerShape = visuals.markerShape || (visuals.markerShape = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var outline;
        !(function(outline_1) {
            function showTop(outline) {
                return [ outline_1.topOnly, outline_1.topBottom, outline_1.frame ].some((function(o) {
                    return o === outline;
                }));
            }
            function showRight(outline) {
                return [ outline_1.rightOnly, outline_1.leftRight, outline_1.frame ].some((function(o) {
                    return o === outline;
                }));
            }
            function showBottom(outline) {
                return [ outline_1.bottomOnly, outline_1.topBottom, outline_1.frame ].some((function(o) {
                    return o === outline;
                }));
            }
            function showLeft(outline) {
                return [ outline_1.leftOnly, outline_1.leftRight, outline_1.frame ].some((function(o) {
                    return o === outline;
                }));
            }
            outline_1.none = "None", outline_1.bottomOnly = "BottomOnly", outline_1.topOnly = "TopOnly", 
            outline_1.leftOnly = "LeftOnly", outline_1.rightOnly = "RightOnly", outline_1.topBottom = "TopBottom", 
            outline_1.leftRight = "LeftRight", outline_1.frame = "Frame", outline_1.showTop = showTop, 
            outline_1.showRight = showRight, outline_1.showBottom = showBottom, outline_1.showLeft = showLeft, 
            outline_1.type = powerbi.createEnumType([ {
                value: outline_1.none,
                displayName: function(resources) {
                    return resources.get("Visual_Outline_none");
                }
            }, {
                value: outline_1.bottomOnly,
                displayName: function(resources) {
                    return resources.get("Visual_Outline_bottom_only");
                }
            }, {
                value: outline_1.topOnly,
                displayName: function(resources) {
                    return resources.get("Visual_Outline_top_only");
                }
            }, {
                value: outline_1.leftOnly,
                displayName: function(resources) {
                    return resources.get("Visual_Outline_LeftOnly");
                }
            }, {
                value: outline_1.rightOnly,
                displayName: function(resources) {
                    return resources.get("Visual_Outline_RightOnly");
                }
            }, {
                value: outline_1.topBottom,
                displayName: function(resources) {
                    return resources.get("Visual_Outline_top_Bottom");
                }
            }, {
                value: outline_1.leftRight,
                displayName: function(resources) {
                    return resources.get("Visual_Outline_leftRight");
                }
            }, {
                value: outline_1.frame,
                displayName: function(resources) {
                    return resources.get("Visual_Outline_frame");
                }
            } ]);
        })(outline = visuals.outline || (visuals.outline = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var referenceLinePosition;
        !(function(referenceLinePosition) {
            referenceLinePosition.back = "back", referenceLinePosition.front = "front", referenceLinePosition.type = powerbi.createEnumType([ {
                value: referenceLinePosition.back,
                displayName: function(resources) {
                    return resources.get("Visual_Reference_Line_Behind");
                }
            }, {
                value: referenceLinePosition.front,
                displayName: function(resources) {
                    return resources.get("Visual_Reference_Line_InFront");
                }
            } ]);
        })(referenceLinePosition = visuals.referenceLinePosition || (visuals.referenceLinePosition = {}));
        var referenceLineDataLabelHorizontalPosition;
        !(function(referenceLineDataLabelHorizontalPosition) {
            referenceLineDataLabelHorizontalPosition.left = "left", referenceLineDataLabelHorizontalPosition.right = "right", 
            referenceLineDataLabelHorizontalPosition.type = powerbi.createEnumType([ {
                value: referenceLineDataLabelHorizontalPosition.left,
                displayName: function(resources) {
                    return resources.get("Visual_Reference_Line_Data_Label_Left");
                }
            }, {
                value: referenceLineDataLabelHorizontalPosition.right,
                displayName: function(resources) {
                    return resources.get("Visual_Reference_Line_Data_Label_Right");
                }
            } ]);
        })(referenceLineDataLabelHorizontalPosition = visuals.referenceLineDataLabelHorizontalPosition || (visuals.referenceLineDataLabelHorizontalPosition = {}));
        var referenceLineDataLabelVerticalPosition;
        !(function(referenceLineDataLabelVerticalPosition) {
            referenceLineDataLabelVerticalPosition.above = "above", referenceLineDataLabelVerticalPosition.under = "under", 
            referenceLineDataLabelVerticalPosition.type = powerbi.createEnumType([ {
                value: referenceLineDataLabelVerticalPosition.above,
                displayName: function(resources) {
                    return resources.get("Visual_Reference_Line_Data_Label_Above");
                }
            }, {
                value: referenceLineDataLabelVerticalPosition.under,
                displayName: function(resources) {
                    return resources.get("Visual_Reference_Line_Data_Label_Under");
                }
            } ]);
        })(referenceLineDataLabelVerticalPosition = visuals.referenceLineDataLabelVerticalPosition || (visuals.referenceLineDataLabelVerticalPosition = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var slicerOrientation;
        !(function(slicerOrientation) {
            slicerOrientation.type = powerbi.createEnumType([ {
                value: 0,
                displayName: function(resources) {
                    return resources.get("Slicer_Orientation_Vertical");
                }
            }, {
                value: 1,
                displayName: function(resources) {
                    return resources.get("Slicer_Orientation_Horizontal");
                }
            } ]);
        })(slicerOrientation = visuals.slicerOrientation || (visuals.slicerOrientation = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var standardGeoJson;
        !(function(standardGeoJson) {
            standardGeoJson.australiaStates = "australia.states.topo", standardGeoJson.austriaStates = "austria.states.topo", 
            standardGeoJson.brazilStates = "brazil.states.topo", standardGeoJson.canadaProvinces = "canada.provinces.topo", 
            standardGeoJson.franceRegions = "france.regions.topo", standardGeoJson.germanyStates = "germany.states.topo", 
            standardGeoJson.irelandCounties = "ireland.counties.topo", standardGeoJson.italyRegions = "italy.regions.topo", 
            standardGeoJson.mexicoStates = "mexico.states.topo", standardGeoJson.netherlandsProvinces = "netherlands.provinces.topo", 
            standardGeoJson.ukCountries = "uk.countries.topo", standardGeoJson.usaStates = "usa.states.topo", 
            standardGeoJson.type = powerbi.createEnumType([ {
                value: standardGeoJson.australiaStates,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_AustraliaStates");
                }
            }, {
                value: standardGeoJson.austriaStates,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_AustriaStates");
                }
            }, {
                value: standardGeoJson.brazilStates,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_BrazilStates");
                }
            }, {
                value: standardGeoJson.canadaProvinces,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_CanadaProvinces");
                }
            }, {
                value: standardGeoJson.franceRegions,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_FranceRegions");
                }
            }, {
                value: standardGeoJson.germanyStates,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_GermanyStates");
                }
            }, {
                value: standardGeoJson.irelandCounties,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_IrelandCounties");
                }
            }, {
                value: standardGeoJson.italyRegions,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_ItalyRegions");
                }
            }, {
                value: standardGeoJson.mexicoStates,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_MexicoStates");
                }
            }, {
                value: standardGeoJson.netherlandsProvinces,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_NetherlandsProvinces");
                }
            }, {
                value: standardGeoJson.ukCountries,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_UkCountries");
                }
            }, {
                value: standardGeoJson.usaStates,
                displayName: function(resources) {
                    return resources.get("Visual_ShapeMap_StandardMaps_UsaStates");
                }
            } ]);
        })(standardGeoJson = visuals.standardGeoJson || (visuals.standardGeoJson = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var yAxisPosition;
        !(function(yAxisPosition) {
            yAxisPosition.left = "Left", yAxisPosition.right = "Right", yAxisPosition.type = powerbi.createEnumType([ {
                value: yAxisPosition.left,
                displayName: function(resources) {
                    return resources.get("Visual_yAxis_Left");
                }
            }, {
                value: yAxisPosition.right,
                displayName: function(resources) {
                    return resources.get("Visual_yAxis_Right");
                }
            } ]);
        })(yAxisPosition = visuals.yAxisPosition || (visuals.yAxisPosition = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var rowSubtotalPosition;
        !(function(rowSubtotalPosition) {
            rowSubtotalPosition.top = "Top", rowSubtotalPosition.bottom = "Bottom", rowSubtotalPosition.type = powerbi.createEnumType([ {
                value: rowSubtotalPosition.top,
                displayName: function(resources) {
                    return resources.get("Visual_SubtotalRow_Position_Top");
                }
            }, {
                value: rowSubtotalPosition.bottom,
                displayName: function(resources) {
                    return resources.get("Visual_SubtotalRow_Position_Bottom");
                }
            } ]);
        })(rowSubtotalPosition = visuals.rowSubtotalPosition || (visuals.rowSubtotalPosition = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var ShapeMapType;
        !(function(ShapeMapType) {
            var Role;
            !(function(Role) {
                Role.category = "Category", Role.series = "Series", Role.tooltips = "Tooltips", 
                Role.value = "Value";
            })(Role = ShapeMapType.Role || (ShapeMapType.Role = {}));
            var Projection;
            !(function(Projection) {
                Projection.albersUsa = "albersUsa", Projection.equirectangular = "equirectangular", 
                Projection.mercator = "mercator", Projection.orthographic = "orthographic", Projection.type = powerbi.createEnumType([ {
                    value: Projection.albersUsa,
                    displayName: function(resources) {
                        return resources.get("Visual_ShapeMap_Projection_AlbersUsa");
                    }
                }, {
                    value: Projection.equirectangular,
                    displayName: function(resources) {
                        return resources.get("Visual_ShapeMap_Projection_Equirectangular");
                    }
                }, {
                    value: Projection.mercator,
                    displayName: function(resources) {
                        return resources.get("Visual_ShapeMap_Projection_Mercator");
                    }
                }, {
                    value: Projection.orthographic,
                    displayName: function(resources) {
                        return resources.get("Visual_ShapeMap_Projection_Orthographic");
                    }
                } ]);
            })(Projection = ShapeMapType.Projection || (ShapeMapType.Projection = {}));
        })(ShapeMapType = visuals.ShapeMapType || (visuals.ShapeMapType = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var slicerMode;
        !(function(slicerMode) {
            function isRangeSlicerMode(mode) {
                return mode === slicerMode.before || mode === slicerMode.between || mode === slicerMode.after || mode === slicerMode.single;
            }
            function slicerModeSupportsMinMax(mode) {
                return mode === slicerMode.before || mode === slicerMode.between || mode === slicerMode.after;
            }
            slicerMode.before = "Before", slicerMode.after = "After", slicerMode.between = "Between", 
            slicerMode.basic = "Basic", slicerMode.dropdown = "Dropdown", slicerMode.relative = "Relative", 
            slicerMode.single = "Single", slicerMode.type = powerbi.createEnumType([ {
                value: slicerMode.between,
                displayName: function(resources) {
                    return resources.get("Visual_SliderMode_Between");
                }
            }, {
                value: slicerMode.before,
                displayName: function(resources) {
                    return resources.get("Visual_SliderMode_Before");
                }
            }, {
                value: slicerMode.after,
                displayName: function(resources) {
                    return resources.get("Visual_SliderMode_After");
                }
            }, {
                value: slicerMode.basic,
                displayName: function(resources) {
                    return resources.get("Visual_SliderMode_Basic");
                }
            }, {
                value: slicerMode.dropdown,
                displayName: function(resources) {
                    return resources.get("Visual_SliderMode_Dropdown");
                }
            }, {
                value: slicerMode.relative,
                displayName: function(resources) {
                    return resources.get("Visual_SliderMode_Relative");
                }
            }, {
                value: slicerMode.single,
                displayName: function(resources) {
                    return resources.get("Visual_SliderMode_SingleVal");
                }
            } ]), slicerMode.isRangeSlicerMode = isRangeSlicerMode, slicerMode.slicerModeSupportsMinMax = slicerModeSupportsMinMax;
        })(slicerMode = visuals.slicerMode || (visuals.slicerMode = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var relativeSlicerRelativeQualifier;
        !(function(relativeSlicerRelativeQualifier) {
            relativeSlicerRelativeQualifier.last = "Last", relativeSlicerRelativeQualifier.next = "Next", 
            relativeSlicerRelativeQualifier.current = "This", relativeSlicerRelativeQualifier.type = powerbi.createEnumType([ {
                value: relativeSlicerRelativeQualifier.last,
                displayName: function(resources) {
                    return resources.get("Visual_SlicerRange_Last");
                }
            }, {
                value: relativeSlicerRelativeQualifier.next,
                displayName: function(resources) {
                    return resources.get("Visual_SlicerRange_Next");
                }
            }, {
                value: relativeSlicerRelativeQualifier.current,
                displayName: function(resources) {
                    return resources.get("Visual_SlicerRange_This");
                }
            } ]);
        })(relativeSlicerRelativeQualifier = visuals.relativeSlicerRelativeQualifier || (visuals.relativeSlicerRelativeQualifier = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var relativeSlicerPeriod;
        !(function(relativeSlicerPeriod) {
            relativeSlicerPeriod.none = "None", relativeSlicerPeriod.days = "Days", relativeSlicerPeriod.weeks = "Weeks", 
            relativeSlicerPeriod.calendarWeeks = "Calendar Weeks", relativeSlicerPeriod.months = "Months", 
            relativeSlicerPeriod.calendarMonths = "Calendar Months", relativeSlicerPeriod.years = "Years", 
            relativeSlicerPeriod.calendarYears = "Calendar Years", relativeSlicerPeriod.type = powerbi.createEnumType([ {
                value: relativeSlicerPeriod.none,
                displayName: function(resources) {
                    return resources.get("Visual_SlicerPeriod_None");
                }
            }, {
                value: relativeSlicerPeriod.days,
                displayName: function(resources) {
                    return resources.get("TimeUnit_Days");
                }
            }, {
                value: relativeSlicerPeriod.weeks,
                displayName: function(resources) {
                    return resources.get("TimeUnit_Weeks");
                }
            }, {
                value: relativeSlicerPeriod.calendarWeeks,
                displayName: function(resources) {
                    return resources.get("Visual_SlicerPeriod_CalWeeks");
                }
            }, {
                value: relativeSlicerPeriod.months,
                displayName: function(resources) {
                    return resources.get("TimeUnit_Months");
                }
            }, {
                value: relativeSlicerPeriod.calendarMonths,
                displayName: function(resources) {
                    return resources.get("Visual_SlicerPeriod_CalMonths");
                }
            }, {
                value: relativeSlicerPeriod.years,
                displayName: function(resources) {
                    return resources.get("TimeUnit_Years");
                }
            }, {
                value: relativeSlicerPeriod.calendarYears,
                displayName: function(resources) {
                    return resources.get("Visual_SlicerPeriod_CalYears");
                }
            } ]);
        })(relativeSlicerPeriod = visuals.relativeSlicerPeriod || (visuals.relativeSlicerPeriod = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var AnimatorCommon;
        !(function(AnimatorCommon) {
            function GetAnimationDuration(animator, suppressAnimations) {
                return suppressAnimations || !animator ? 0 : animator.getDuration();
            }
            AnimatorCommon.MinervaAnimationDuration = 250, AnimatorCommon.MaxDataPointsToAnimate = 1e3, 
            AnimatorCommon.GetAnimationDuration = GetAnimationDuration;
        })(AnimatorCommon = visuals.AnimatorCommon || (visuals.AnimatorCommon = {}));
        var BaseAnimator = (function() {
            function BaseAnimator(options) {
                options && options.duration && (this.animationDuration = options.duration), this.animationDuration = this.animationDuration >= 0 ? this.animationDuration : AnimatorCommon.MinervaAnimationDuration;
            }
            return BaseAnimator.prototype.getDuration = function() {
                return this.animationDuration;
            }, BaseAnimator.prototype.animate = function(options) {
                return null;
            }, BaseAnimator.prototype.getEasing = function() {
                return "cubic-in-out";
            }, BaseAnimator;
        })();
        visuals.BaseAnimator = BaseAnimator;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter;
        visuals.StandardObjectProperties = {
            axisEnd: {
                displayName: createDisplayNameGetter("Visual_Axis_End"),
                description: createDisplayNameGetter("Visual_Axis_EndDescription"),
                placeHolderText: createDisplayNameGetter("Visual_Auto"),
                type: {
                    variant: [ {
                        numeric: !0
                    }, {
                        dateTime: !0
                    } ]
                },
                suppressFormatPainterCopy: !0
            },
            axisScale: {
                displayName: createDisplayNameGetter("Visual_Axis_Scale"),
                type: {
                    enumeration: visuals.axisScale.type
                }
            },
            axisStart: {
                displayName: createDisplayNameGetter("Visual_Axis_Start"),
                description: createDisplayNameGetter("Visual_Axis_StartDescription"),
                placeHolderText: createDisplayNameGetter("Visual_Auto"),
                type: {
                    variant: [ {
                        numeric: !0
                    }, {
                        dateTime: !0
                    } ]
                },
                suppressFormatPainterCopy: !0
            },
            axisStyle: {
                displayName: createDisplayNameGetter("Visual_Axis_Style"),
                type: {
                    enumeration: visuals.axisStyle.type
                }
            },
            axisType: {
                displayName: createDisplayNameGetter("Visual_Axis_Type"),
                type: {
                    enumeration: visuals.axisType.type
                }
            },
            backColor: {
                displayName: createDisplayNameGetter("Visual_Tablix_BackColor"),
                description: createDisplayNameGetter("Visual_Tablix_BackColor_Desc"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            dataColor: {
                displayName: createDisplayNameGetter("Visual_LabelsFill"),
                description: createDisplayNameGetter("Visual_LabelsFillDescription"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            dataLabelColor: {
                displayName: createDisplayNameGetter("Visual_Reference_Line_Data_Label_Color"),
                description: createDisplayNameGetter("Visual_Reference_Line_Data_Label_Color_Description"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            dataLabelDecimalPoints: {
                displayName: createDisplayNameGetter("Visual_Reference_Line_Data_Decimal_Points"),
                placeHolderText: createDisplayNameGetter("Visual_Auto"),
                type: {
                    numeric: !0
                }
            },
            dataLabelDisplayUnits: {
                displayName: createDisplayNameGetter("Visual_DisplayUnits"),
                description: createDisplayNameGetter("Visual_DisplayUnitsDescription"),
                type: {
                    formatting: {
                        labelDisplayUnits: !0
                    }
                },
                suppressFormatPainterCopy: !0
            },
            dataLabelHorizontalPosition: {
                displayName: createDisplayNameGetter("Visual_Reference_Line_Data_Horizontal_Position"),
                description: createDisplayNameGetter("Visual_Reference_Line_Data_Label_Horizontal_Position_Description"),
                type: {
                    enumeration: visuals.referenceLineDataLabelHorizontalPosition.type
                }
            },
            dataLabelText: {
                displayName: createDisplayNameGetter("Visual_Reference_Line_Data_Label_Text"),
                description: createDisplayNameGetter("Visual_Reference_Line_Data_Label_Text_Description"),
                type: {
                    enumeration: visuals.labelText.type
                }
            },
            dataLabelShow: {
                displayName: createDisplayNameGetter("Visual_Reference_Line_Data_Label"),
                description: createDisplayNameGetter("Visual_Reference_Line_Data_Label_Show_Description"),
                type: {
                    bool: !0
                }
            },
            dataLabelVerticalPosition: {
                displayName: createDisplayNameGetter("Visual_Reference_Line_Data_Vertical_Position"),
                description: createDisplayNameGetter("Visual_Reference_Line_Data_Label_Vertical_Position_Description"),
                type: {
                    enumeration: visuals.referenceLineDataLabelVerticalPosition.type
                }
            },
            defaultColor: {
                displayName: createDisplayNameGetter("Visual_DefaultColor"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            defaultCategoryColor: {
                displayName: createDisplayNameGetter("Visual_DefaultColor"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            fill: {
                displayName: createDisplayNameGetter("Visual_Fill"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            fontColor: {
                displayName: createDisplayNameGetter("Visual_FontColor"),
                description: createDisplayNameGetter("Visual_Tablix_FontColor_Desc"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            fontSize: {
                displayName: createDisplayNameGetter("Visual_TextSize"),
                type: {
                    formatting: {
                        fontSize: !0
                    }
                }
            },
            fontFamily: {
                displayName: createDisplayNameGetter("Visual_FontFamily"),
                type: {
                    formatting: {
                        fontFamily: !0
                    }
                }
            },
            formatString: {
                type: {
                    formatting: {
                        formatString: !0
                    }
                }
            },
            image: {
                type: {
                    image: {}
                }
            },
            labelColor: {
                displayName: createDisplayNameGetter("Visual_LegendTitleColor"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            labelDisplayUnits: {
                displayName: createDisplayNameGetter("Visual_DisplayUnits"),
                description: createDisplayNameGetter("Visual_DisplayUnitsDescription"),
                type: {
                    formatting: {
                        labelDisplayUnits: !0
                    }
                }
            },
            labelPrecision: {
                displayName: createDisplayNameGetter("Visual_Precision"),
                description: createDisplayNameGetter("Visual_PrecisionDescription"),
                placeHolderText: createDisplayNameGetter("Visual_Auto"),
                type: {
                    numeric: !0
                }
            },
            percentageLabelPrecision: {
                displayName: createDisplayNameGetter("Visual_Percentage_Precision"),
                description: createDisplayNameGetter("Visual_Percentage_PrecisionDescription"),
                placeHolderText: createDisplayNameGetter("Visual_Auto"),
                type: {
                    numeric: !0
                }
            },
            legendPosition: {
                displayName: createDisplayNameGetter("Visual_LegendPosition"),
                description: createDisplayNameGetter("Visual_LegendPositionDescription"),
                type: {
                    enumeration: visuals.legendPosition.type
                }
            },
            legendTitle: {
                displayName: createDisplayNameGetter("Visual_LegendName"),
                description: createDisplayNameGetter("Visual_LegendNameDescription"),
                type: {
                    text: !0
                },
                suppressFormatPainterCopy: !0
            },
            lineColor: {
                displayName: createDisplayNameGetter("Visual_Reference_Line_Color"),
                description: createDisplayNameGetter("Visual_Reference_Line_Color_Description"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            lineStyle: {
                displayName: createDisplayNameGetter("Visual_LineStyle"),
                type: {
                    enumeration: visuals.lineStyle.type
                }
            },
            titleColor: {
                displayName: createDisplayNameGetter("Visual_AxisTitleColor"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            titleFontSize: {
                displayName: createDisplayNameGetter("Visual_AxisTitleTextSize"),
                type: {
                    formatting: {
                        fontSize: !0
                    }
                }
            },
            titleText: {
                displayName: createDisplayNameGetter("Visual_AxisTitleText"),
                placeHolderText: createDisplayNameGetter("Visual_Auto"),
                type: {
                    text: !0
                },
                suppressFormatPainterCopy: !0
            },
            outline: {
                displayName: createDisplayNameGetter("Visual_Outline"),
                type: {
                    enumeration: visuals.outline.type
                }
            },
            outlineColor: {
                displayName: createDisplayNameGetter("Visual_OutlineColor"),
                description: createDisplayNameGetter("Visual_OutlineColor_Desc"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            outlineWeight: {
                displayName: createDisplayNameGetter("Visual_OutlineWeight"),
                description: createDisplayNameGetter("Visual_OutlineWeight_Desc"),
                type: {
                    numeric: !0
                }
            },
            referenceLinePosition: {
                displayName: createDisplayNameGetter("Visual_Reference_Line_Arrange"),
                description: createDisplayNameGetter("Visual_Reference_Line_Arrange_Description"),
                type: {
                    enumeration: visuals.referenceLinePosition.type
                }
            },
            show: {
                displayName: createDisplayNameGetter("Visual_Show"),
                type: {
                    bool: !0
                }
            },
            showAllDataPoints: {
                displayName: createDisplayNameGetter("ShowAll"),
                type: {
                    bool: !0
                }
            },
            showLegendTitle: {
                displayName: createDisplayNameGetter("Visual_LegendShowTitle"),
                description: createDisplayNameGetter("Visual_LegendShowTitleDescription"),
                type: {
                    bool: !0
                }
            },
            strokeWidth: {
                displayName: createDisplayNameGetter("Visual_StrokeWidth"),
                type: {
                    numeric: !0
                }
            },
            strokeLineJoin: {
                displayName: createDisplayNameGetter("Visual_StrokeLineJoin"),
                type: {
                    enumeration: visuals.strokeLineJoin.type
                }
            },
            lineDashType: {
                displayName: createDisplayNameGetter("Visual_LineDashType"),
                type: {
                    enumeration: visuals.lineStyle.type
                }
            },
            showMarker: {
                displayName: createDisplayNameGetter("Visual_ShowMarker"),
                type: {
                    bool: !0
                }
            },
            markerShape: {
                displayName: createDisplayNameGetter("Visual_MarkerShape"),
                type: {
                    enumeration: visuals.markerShape.type
                }
            },
            markerSize: {
                displayName: createDisplayNameGetter("Visual_MarkerSize"),
                type: {
                    numeric: !0
                }
            },
            markerColor: {
                displayName: createDisplayNameGetter("Visual_MarkerColor"),
                type: {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }
            },
            transparency: {
                displayName: createDisplayNameGetter("Visual_Background_Transparency"),
                description: createDisplayNameGetter("Visual_Background_TransparencyDescription"),
                type: {
                    numeric: !0
                }
            },
            lineTransparency: {
                displayName: createDisplayNameGetter("Visual_Background_Transparency"),
                description: createDisplayNameGetter("Visual_Background_TransparencyLineDescription"),
                type: {
                    numeric: !0
                }
            },
            yAxisPosition: {
                displayName: createDisplayNameGetter("Visual_YAxis_Position"),
                description: createDisplayNameGetter("Visual_YAxis_PositionDescription"),
                type: {
                    enumeration: visuals.yAxisPosition.type
                }
            },
            responsive: {
                displayName: createDisplayNameGetter("Visual_General_ResponsiveLabel"),
                description: createDisplayNameGetter("Visual_General_ResponsiveLabelDescription"),
                type: {
                    bool: !0
                }
            },
            responsiveLegacy: {
                type: {
                    bool: !0
                }
            }
        }, visuals.StandardObjectDescriptors = {
            legend: {
                displayName: createDisplayNameGetter("Visual_Legend"),
                description: createDisplayNameGetter("Visual_LegendDescription"),
                properties: {
                    show: {
                        displayName: createDisplayNameGetter("Visual_Show"),
                        type: {
                            bool: !0
                        }
                    },
                    position: {
                        displayName: createDisplayNameGetter("Visual_LegendPosition"),
                        description: createDisplayNameGetter("Visual_LegendPositionDescription"),
                        type: {
                            enumeration: visuals.legendPosition.type
                        }
                    },
                    showTitle: {
                        displayName: createDisplayNameGetter("Visual_LegendShowTitle"),
                        description: createDisplayNameGetter("Visual_LegendShowTitleDescription"),
                        type: {
                            bool: !0
                        }
                    },
                    titleText: {
                        displayName: createDisplayNameGetter("Visual_LegendName"),
                        description: createDisplayNameGetter("Visual_LegendNameDescription"),
                        type: {
                            text: !0
                        },
                        suppressFormatPainterCopy: !0
                    },
                    labelColor: {
                        displayName: createDisplayNameGetter("Visual_LegendTitleColor"),
                        type: {
                            fill: {
                                solid: {
                                    color: !0
                                }
                            }
                        }
                    },
                    fontFamily: {
                        displayName: createDisplayNameGetter("Visual_FontFamily"),
                        type: {
                            formatting: {
                                fontFamily: !0
                            }
                        }
                    },
                    fontSize: {
                        displayName: createDisplayNameGetter("Visual_TextSize"),
                        type: {
                            formatting: {
                                fontSize: !0
                            }
                        }
                    }
                }
            }
        }, visuals.StandardObjectPropertyIdentifiers = {
            formatString: {
                objectName: "general",
                propertyName: "formatString"
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        visuals.animatedTextObjectDescs = {
            general: {
                properties: {
                    formatString: visuals.StandardObjectProperties.formatString
                }
            }
        }, visuals.animatedNumberCapabilities = {
            objects: visuals.animatedTextObjectDescs,
            dataViewMappings: [ {
                single: {
                    role: "Values"
                }
            } ],
            supportsSelection: !1
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.basicShapeCapabilities = {
            objects: {
                line: {
                    displayName: createDisplayNameGetter("Visual_BasicShape_Line"),
                    properties: {
                        lineColor: {
                            displayName: createDisplayNameGetter("Visual_BasicShape_LineColor"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        transparency: StandardObjectProperties.transparency,
                        weight: {
                            displayName: createDisplayNameGetter("Visual_BasicShape_Weight"),
                            type: {
                                numeric: !0
                            }
                        },
                        roundEdge: {
                            displayName: createDisplayNameGetter("Visual_BasicShape_RoundEdges"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                fill: {
                    displayName: createDisplayNameGetter("Visual_Fill"),
                    properties: {
                        show: StandardObjectProperties.show,
                        fillColor: {
                            displayName: createDisplayNameGetter("Visual_BasicShape_FillColor"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        transparency: StandardObjectProperties.transparency
                    }
                },
                rotation: {
                    displayName: createDisplayNameGetter("Visual_BasicShape_Rotate"),
                    properties: {
                        angle: {
                            displayName: createDisplayNameGetter("Visual_BasicShape_Rotate"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                general: {
                    properties: {
                        shapeType: {
                            type: {
                                text: !0
                            },
                            suppressFormatPainterCopy: !0
                        }
                    }
                }
            },
            suppressDefaultTitle: !0,
            suppressDefaultPadding: !0,
            canRotate: !1,
            supportsSelection: !1,
            supportsVisualLink: !0
        }, visuals.basicShapeProps = {
            general: {
                shapeType: {
                    objectName: "general",
                    propertyName: "shapeType"
                }
            },
            line: {
                transparency: {
                    objectName: "line",
                    propertyName: "transparency"
                },
                weight: {
                    objectName: "line",
                    propertyName: "weight"
                },
                roundEdge: {
                    objectName: "line",
                    propertyName: "roundEdge"
                },
                lineColor: {
                    objectName: "line",
                    propertyName: "lineColor"
                }
            },
            fill: {
                transparency: {
                    objectName: "fill",
                    propertyName: "transparency"
                },
                fillColor: {
                    objectName: "fill",
                    propertyName: "fillColor"
                },
                show: {
                    objectName: "fill",
                    propertyName: "show"
                }
            },
            rotation: {
                angle: {
                    objectName: "rotation",
                    propertyName: "angle"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function getColumnChartCapabilities(transposeAxes, isStacked, isRibbonChart) {
            void 0 === transposeAxes && (transposeAxes = !1), void 0 === isStacked && (isStacked = !1), 
            void 0 === isRibbonChart && (isRibbonChart = !1);
            var capabilities = {
                dataRoles: getDataRoles(isRibbonChart),
                objects: {
                    general: {
                        displayName: createDisplayNameGetter("Visual_General"),
                        properties: {
                            formatString: StandardObjectProperties.formatString,
                            responsive: StandardObjectProperties.responsive,
                            responsiveLegacy: StandardObjectProperties.responsiveLegacy
                        }
                    },
                    legend: visuals.StandardObjectDescriptors.legend,
                    categoryAxis: {
                        displayName: createDisplayNameGetter(transposeAxes ? "Visual_YAxis" : "Visual_XAxis"),
                        properties: {
                            show: StandardObjectProperties.show,
                            position: StandardObjectProperties.yAxisPosition,
                            axisScale: StandardObjectProperties.axisScale,
                            start: StandardObjectProperties.axisStart,
                            end: StandardObjectProperties.axisEnd,
                            axisType: StandardObjectProperties.axisType,
                            showAxisTitle: {
                                displayName: createDisplayNameGetter("Visual_Axis_Title"),
                                description: createDisplayNameGetter(transposeAxes ? "Visual_Axis_YTitleDescription" : "Visual_Axis_XTitleDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: StandardObjectProperties.axisStyle,
                            labelColor: StandardObjectProperties.labelColor,
                            fontFamily: StandardObjectProperties.fontFamily,
                            fontSize: StandardObjectProperties.fontSize,
                            labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                            labelPrecision: StandardObjectProperties.labelPrecision,
                            concatenateLabels: {
                                displayName: createDisplayNameGetter("Visual_Axis_ConcatenateLabels"),
                                description: createDisplayNameGetter("Visual_Axis_ConcatenateLabelsDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            preferredCategoryWidth: {
                                displayName: createDisplayNameGetter("Visual_Category_Width"),
                                type: {
                                    numeric: !0
                                }
                            },
                            titleColor: StandardObjectProperties.titleColor,
                            titleFontFamily: StandardObjectProperties.fontFamily,
                            titleFontSize: StandardObjectProperties.titleFontSize,
                            titleText: StandardObjectProperties.titleText,
                            gridlineShow: __assign({}, StandardObjectProperties.show, {
                                displayName: createDisplayNameGetter("Visual_Gridline_Show")
                            }),
                            gridlineColor: StandardObjectProperties.lineColor,
                            gridlineThickness: StandardObjectProperties.strokeWidth,
                            gridlineStyle: StandardObjectProperties.lineStyle
                        }
                    },
                    valueAxis: {
                        displayName: createDisplayNameGetter(transposeAxes ? "Visual_XAxis" : "Visual_YAxis"),
                        properties: {
                            show: StandardObjectProperties.show,
                            position: StandardObjectProperties.yAxisPosition,
                            axisScale: StandardObjectProperties.axisScale,
                            start: StandardObjectProperties.axisStart,
                            end: StandardObjectProperties.axisEnd,
                            showAxisTitle: {
                                displayName: createDisplayNameGetter("Visual_Axis_Title"),
                                description: createDisplayNameGetter(transposeAxes ? "Visual_Axis_YTitleDescription" : "Visual_Axis_XTitleDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: StandardObjectProperties.axisStyle,
                            labelColor: StandardObjectProperties.labelColor,
                            fontFamily: StandardObjectProperties.fontFamily,
                            fontSize: StandardObjectProperties.fontSize,
                            labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                            labelPrecision: StandardObjectProperties.labelPrecision,
                            titleColor: StandardObjectProperties.titleColor,
                            titleFontFamily: StandardObjectProperties.fontFamily,
                            titleFontSize: StandardObjectProperties.titleFontSize,
                            titleText: StandardObjectProperties.titleText,
                            gridlineShow: __assign({}, StandardObjectProperties.show, {
                                displayName: createDisplayNameGetter("Visual_Gridline_Show")
                            }),
                            gridlineColor: StandardObjectProperties.lineColor,
                            gridlineThickness: StandardObjectProperties.strokeWidth,
                            gridlineStyle: StandardObjectProperties.lineStyle
                        }
                    },
                    dataPoint: {
                        displayName: createDisplayNameGetter("Visual_DataPoint"),
                        description: createDisplayNameGetter("Visual_DataPointDescription"),
                        properties: {
                            defaultColor: StandardObjectProperties.defaultColor,
                            defaultCategoryColor: StandardObjectProperties.defaultCategoryColor,
                            showAllDataPoints: StandardObjectProperties.showAllDataPoints,
                            fill: StandardObjectProperties.fill,
                            fillRule: {
                                displayName: createDisplayNameGetter("Visual_Gradient"),
                                type: {
                                    fillRule: {}
                                },
                                rule: {
                                    inputRole: "Gradient",
                                    output: {
                                        property: "fill",
                                        selector: [ "Category" ]
                                    }
                                }
                            }
                        }
                    },
                    labels: {
                        displayName: createDisplayNameGetter("Visual_DataPointsLabels"),
                        description: createDisplayNameGetter("Visual_DataPointsLabelsDescription"),
                        properties: {
                            show: StandardObjectProperties.show,
                            showSeries: {
                                displayName: createDisplayNameGetter("Visual_Show"),
                                type: {
                                    bool: !0
                                }
                            },
                            color: StandardObjectProperties.dataColor,
                            labelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits,
                            labelPrecision: __assign({}, StandardObjectProperties.labelPrecision, {
                                suppressFormatPainterCopy: !0
                            }),
                            labelOrientation: {
                                displayName: createDisplayNameGetter("Visual_LabelOrientation"),
                                type: {
                                    enumeration: visuals.labelOrientation.type
                                }
                            },
                            labelPosition: {
                                displayName: createDisplayNameGetter("Visual_Position"),
                                type: {
                                    enumeration: visuals.labelPosition.type
                                }
                            },
                            showAll: {
                                displayName: createDisplayNameGetter("Visual_LabelSeriesShowAll"),
                                type: {
                                    bool: !0
                                }
                            },
                            fontSize: StandardObjectProperties.fontSize,
                            fontFamily: StandardObjectProperties.fontFamily,
                            labelDensity: {
                                displayName: createDisplayNameGetter("Visual_LabelDensity"),
                                type: {
                                    formatting: {
                                        labelDensity: !0
                                    }
                                }
                            }
                        }
                    },
                    plotArea: {
                        displayName: createDisplayNameGetter("Visual_Plot"),
                        properties: {
                            transparency: StandardObjectProperties.transparency,
                            image: StandardObjectProperties.image
                        }
                    },
                    y1AxisReferenceLine: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Description"),
                        suppressFormatPainterCopy: !0,
                        properties: {
                            show: StandardObjectProperties.show,
                            displayName: {
                                displayName: createDisplayNameGetter("Visual_Reference_Line_DisplayName"),
                                description: createDisplayNameGetter("Visual_Reference_Line_DisplayName_Description"),
                                type: {
                                    text: !0
                                }
                            },
                            value: {
                                displayName: createDisplayNameGetter("Visual_Reference_Line_Value"),
                                description: createDisplayNameGetter("Visual_Reference_Line_Value_Description"),
                                type: {
                                    numeric: !0
                                }
                            },
                            lineColor: StandardObjectProperties.lineColor,
                            transparency: {
                                displayName: createDisplayNameGetter("Visual_Reference_Line_Transparency"),
                                description: createDisplayNameGetter("Visual_Reference_Line_Transparency_Description"),
                                type: {
                                    numeric: !0
                                }
                            },
                            style: StandardObjectProperties.lineStyle,
                            position: StandardObjectProperties.referenceLinePosition,
                            dataLabelShow: StandardObjectProperties.dataLabelShow,
                            dataLabelText: StandardObjectProperties.dataLabelText,
                            dataLabelColor: StandardObjectProperties.dataLabelColor,
                            dataLabelDecimalPoints: StandardObjectProperties.dataLabelDecimalPoints,
                            dataLabelHorizontalPosition: StandardObjectProperties.dataLabelHorizontalPosition,
                            dataLabelVerticalPosition: StandardObjectProperties.dataLabelVerticalPosition,
                            dataLabelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits
                        }
                    },
                    trend: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line"),
                        suppressFormatPainterCopy: !0,
                        properties: {
                            show: {
                                type: {
                                    bool: !0
                                }
                            },
                            displayName: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_DisplayName"),
                                description: createDisplayNameGetter("Visual_Trend_Line_DisplayName_Description"),
                                type: {
                                    text: !0
                                }
                            },
                            lineColor: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_Color"),
                                description: createDisplayNameGetter("Visual_Trend_Line_Color_Description"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            transparency: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_Transparency"),
                                description: createDisplayNameGetter("Visual_Trend_Line_Transparency_Description"),
                                type: {
                                    numeric: !0
                                }
                            },
                            style: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_Style"),
                                description: createDisplayNameGetter("Visual_Trend_Line_Style_Description"),
                                type: {
                                    enumeration: visuals.lineStyle.type
                                }
                            },
                            combineSeries: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_Combine_Series"),
                                description: createDisplayNameGetter("Visual_Trend_Line_Combine_Series_Description"),
                                type: {
                                    bool: !0
                                }
                            },
                            useHighlightValues: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_UseHighlightValues"),
                                description: createDisplayNameGetter("Visual_Trend_Line_UseHighlightValues_Description"),
                                type: {
                                    bool: !0
                                }
                            }
                        }
                    },
                    filters: {
                        properties: {
                            filteredToUniqueValue: {
                                type: {
                                    bool: !0
                                }
                            }
                        }
                    }
                },
                dataViewMappings: [ {
                    conditions: [ {
                        Series: {
                            max: 0
                        },
                        Gradient: {
                            max: 0
                        }
                    }, {
                        Series: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            max: 1
                        },
                        Gradient: {
                            max: 0
                        }
                    }, {
                        Series: {
                            max: 0
                        },
                        Y: {
                            min: 0,
                            max: 1
                        },
                        Gradient: {
                            max: 1
                        }
                    } ],
                    categorical: {
                        categories: {
                            for: {
                                in: "Category"
                            },
                            dataReductionAlgorithm: {
                                window: {
                                    count: 200
                                }
                            }
                        },
                        values: {
                            group: {
                                by: "Series",
                                select: [ {
                                    for: {
                                        in: "Y"
                                    }
                                }, {
                                    bind: {
                                        to: "Gradient"
                                    }
                                }, {
                                    for: {
                                        in: "Tooltips"
                                    }
                                } ],
                                dataReductionAlgorithm: {
                                    top: {
                                        count: 60
                                    }
                                }
                            }
                        },
                        rowCount: {
                            preferred: {
                                min: 2
                            },
                            supported: {
                                min: 0
                            }
                        }
                    }
                }, {
                    conditions: [ {
                        Series: {
                            max: 0
                        },
                        Gradient: {
                            max: 0
                        }
                    }, {
                        Series: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            max: 1
                        },
                        Gradient: {
                            max: 0
                        }
                    }, {
                        Series: {
                            max: 0
                        },
                        Y: {
                            min: 0,
                            max: 1
                        },
                        Gradient: {
                            max: 1
                        }
                    } ],
                    requiredProperties: [ {
                        objectName: "trend",
                        propertyName: "show"
                    } ],
                    usage: {
                        regression: {
                            combineSeries: {
                                objectName: "trend",
                                propertyName: "combineSeries"
                            }
                        }
                    },
                    categorical: {
                        categories: {
                            for: {
                                in: "regression.X"
                            }
                        },
                        values: {
                            group: {
                                by: "regression.Series",
                                select: [ {
                                    for: {
                                        in: "regression.Y"
                                    }
                                } ]
                            }
                        }
                    }
                } ],
                supportsHighlight: !0,
                sorting: {
                    default: {}
                },
                drilldown: {
                    roles: [ "Category" ]
                },
                grouping: {
                    groupingRules: [ {
                        condition: {
                            Category: {
                                min: 1,
                                max: 1
                            },
                            Y: {
                                min: 1,
                                max: 1
                            },
                            Series: {
                                max: 0
                            },
                            Gradient: {
                                max: 0
                            }
                        },
                        groupingTargetRole: "Series",
                        kind: 0
                    }, {
                        condition: {
                            Category: {
                                min: 1,
                                max: 1
                            },
                            Y: {
                                min: 1
                            },
                            Series: {
                                max: 0
                            },
                            Gradient: {
                                max: 0
                            }
                        },
                        groupingTargetRole: "Category",
                        kind: 1
                    }, {
                        condition: {
                            Category: {
                                min: 1,
                                max: 1
                            },
                            Y: {
                                min: 0,
                                max: 1
                            },
                            Series: {
                                max: 0
                            },
                            Gradient: {
                                max: 1
                            }
                        },
                        groupingTargetRole: "Category",
                        kind: 1
                    }, {
                        condition: {
                            Category: {
                                max: 0
                            },
                            Y: {
                                min: 1,
                                max: 1
                            },
                            Series: {
                                max: 1
                            },
                            Gradient: {
                                max: 0
                            }
                        },
                        groupingTargetRole: "Series",
                        kind: 0
                    } ]
                }
            };
            return isStacked || (capabilities.objects.referenceLine = {
                displayName: createDisplayNameGetter("Visual_Reference_Line"),
                description: createDisplayNameGetter("Visual_Reference_Line_Description"),
                suppressFormatPainterCopy: !0,
                properties: {
                    show: StandardObjectProperties.show,
                    displayName: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_DisplayName"),
                        description: createDisplayNameGetter("Visual_Reference_Line_DisplayName_Description"),
                        type: {
                            text: !0
                        }
                    },
                    value: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_Value"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Value_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    lineColor: StandardObjectProperties.lineColor,
                    transparency: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_Transparency"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Transparency_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    style: StandardObjectProperties.lineStyle,
                    position: StandardObjectProperties.referenceLinePosition,
                    dataLabelShow: StandardObjectProperties.dataLabelShow,
                    dataLabelText: StandardObjectProperties.dataLabelText,
                    dataLabelColor: StandardObjectProperties.dataLabelColor,
                    dataLabelDecimalPoints: StandardObjectProperties.dataLabelDecimalPoints,
                    dataLabelHorizontalPosition: StandardObjectProperties.dataLabelHorizontalPosition,
                    dataLabelVerticalPosition: StandardObjectProperties.dataLabelVerticalPosition,
                    dataLabelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits
                }
            }), isRibbonChart && (capabilities.objects.ribbonChart = {
                displayName: createDisplayNameGetter("RibbonChart"),
                description: createDisplayNameGetter("RibbonChart_Description"),
                properties: {
                    colorBands: {
                        displayName: createDisplayNameGetter("RibbonChart_Color"),
                        description: createDisplayNameGetter("RibbonChart_ColorDescription"),
                        type: {
                            bool: !0
                        }
                    },
                    showBorder: {
                        displayName: createDisplayNameGetter("Visual_Border"),
                        description: createDisplayNameGetter("RibbonChart_BorderDescription"),
                        type: {
                            bool: !0
                        }
                    },
                    seriesGapRatio: {
                        displayName: createDisplayNameGetter("RibbonChart_SeriesGapWidth"),
                        description: createDisplayNameGetter("RibbonChart_SeriesGapWidthDescription"),
                        type: {
                            integer: !0
                        }
                    },
                    bandsTransparency: {
                        displayName: createDisplayNameGetter("Visual_Background_Transparency"),
                        description: createDisplayNameGetter("RibbonChart_ColorTransparencyDescription"),
                        type: {
                            integer: !0
                        }
                    }
                }
            }), capabilities;
        }
        function getDataRoles(isRibbonChart) {
            var dataRoles = [ {
                name: "Category",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Axis"),
                description: createDisplayNameGetter("Role_DisplayName_AxisDescription"),
                cartesianKind: 0
            }, {
                name: "Series",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Legend"),
                description: createDisplayNameGetter("Role_DisplayName_LegendDescription")
            }, {
                name: "Y",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Value"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ],
                cartesianKind: 1
            }, {
                name: "Gradient",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Gradient"),
                description: createDisplayNameGetter("Role_DisplayName_GradientDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ],
                joinPredicate: 0
            }, {
                name: "Tooltips",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                joinPredicate: 0
            } ];
            return isRibbonChart && dataRoles.splice(3, 1), dataRoles;
        }
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.getColumnChartCapabilities = getColumnChartCapabilities, visuals.columnChartProps = {
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                defaultCategoryColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultCategoryColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                },
                showAllDataPoints: {
                    objectName: "dataPoint",
                    propertyName: "showAllDataPoints"
                },
                showBorder: {
                    objectName: "ribbonChart",
                    propertyName: "showBorder"
                }
            },
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            categoryAxis: {
                axisType: {
                    objectName: "categoryAxis",
                    propertyName: "axisType"
                }
            },
            legend: {
                labelColor: {
                    objectName: "legend",
                    propertyName: "labelColor"
                }
            },
            plotArea: {
                image: {
                    objectName: "plotArea",
                    propertyName: "image"
                },
                transparency: {
                    objectName: "plotArea",
                    propertyName: "transparency"
                }
            },
            ribbonChart: {
                colorBands: {
                    objectName: "ribbonChart",
                    propertyName: "colorBands"
                },
                bandsTransparency: {
                    objectName: "ribbonChart",
                    propertyName: "bandsTransparency"
                }
            },
            series: {
                seriesGapRatio: {
                    objectName: "ribbonChart",
                    propertyName: "seriesGapRatio"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function getComboChartCapabilities(isStacked) {
            var capabilities = {
                dataRoles: [ {
                    name: "Category",
                    kind: powerbi.VisualDataRoleKind.Grouping,
                    displayName: createDisplayNameGetter("Role_ComboChart_Category"),
                    description: createDisplayNameGetter("Role_ComboChart_CategoryDescription"),
                    cartesianKind: 0
                }, {
                    name: "Series",
                    kind: powerbi.VisualDataRoleKind.Grouping,
                    displayName: createDisplayNameGetter("Role_ComboChart_Series")
                }, {
                    name: "Y",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_ComboChart_Y"),
                    description: createDisplayNameGetter("Role_ComboChart_YDescription"),
                    requiredTypes: [ {
                        numeric: !0
                    }, {
                        integer: !0
                    } ],
                    cartesianKind: 1
                }, {
                    name: "Y2",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_ComboChart_Y2"),
                    description: createDisplayNameGetter("Role_ComboChart_Y2Description"),
                    requiredTypes: [ {
                        numeric: !0
                    }, {
                        integer: !0
                    } ],
                    cartesianKind: 1
                }, {
                    name: "Tooltips",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                    joinPredicate: 0
                } ],
                objects: {
                    general: {
                        displayName: createDisplayNameGetter("Visual_General"),
                        properties: {
                            formatString: StandardObjectProperties.formatString,
                            visualType1: {
                                type: {
                                    text: !0
                                }
                            },
                            visualType2: {
                                type: {
                                    text: !0
                                }
                            },
                            responsive: StandardObjectProperties.responsive,
                            responsiveLegacy: StandardObjectProperties.responsiveLegacy
                        }
                    },
                    legend: visuals.StandardObjectDescriptors.legend,
                    categoryAxis: {
                        displayName: createDisplayNameGetter("Visual_XAxis"),
                        properties: {
                            show: StandardObjectProperties.show,
                            axisScale: StandardObjectProperties.axisScale,
                            start: StandardObjectProperties.axisStart,
                            end: StandardObjectProperties.axisEnd,
                            axisType: StandardObjectProperties.axisType,
                            showAxisTitle: {
                                displayName: createDisplayNameGetter("Visual_Axis_Title"),
                                description: createDisplayNameGetter("Visual_Axis_XTitleDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: StandardObjectProperties.axisStyle,
                            labelColor: StandardObjectProperties.labelColor,
                            fontFamily: StandardObjectProperties.fontFamily,
                            fontSize: StandardObjectProperties.fontSize,
                            labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                            labelPrecision: StandardObjectProperties.labelPrecision,
                            concatenateLabels: {
                                displayName: createDisplayNameGetter("Visual_Axis_ConcatenateLabels"),
                                description: createDisplayNameGetter("Visual_Axis_ConcatenateLabelsDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            preferredCategoryWidth: {
                                displayName: createDisplayNameGetter("Visual_Category_Width"),
                                type: {
                                    numeric: !0
                                }
                            },
                            titleColor: StandardObjectProperties.titleColor,
                            titleFontFamily: StandardObjectProperties.fontFamily,
                            titleFontSize: StandardObjectProperties.titleFontSize,
                            titleText: StandardObjectProperties.titleText,
                            gridlineShow: __assign({}, StandardObjectProperties.show, {
                                displayName: createDisplayNameGetter("Visual_Gridline_Show")
                            }),
                            gridlineColor: StandardObjectProperties.lineColor,
                            gridlineThickness: StandardObjectProperties.strokeWidth,
                            gridlineStyle: StandardObjectProperties.lineStyle
                        }
                    },
                    valueAxis: {
                        displayName: createDisplayNameGetter("Visual_YAxis"),
                        properties: {
                            show: StandardObjectProperties.show,
                            axisLabel: {
                                displayName: createDisplayNameGetter("Visual_YAxis_ColumnTitle"),
                                type: {
                                    none: !0
                                }
                            },
                            position: StandardObjectProperties.yAxisPosition,
                            axisScale: StandardObjectProperties.axisScale,
                            start: StandardObjectProperties.axisStart,
                            end: StandardObjectProperties.axisEnd,
                            showAxisTitle: {
                                displayName: createDisplayNameGetter("Visual_Axis_Title"),
                                description: createDisplayNameGetter("Visual_Axis_YTitleDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: StandardObjectProperties.axisStyle,
                            labelColor: StandardObjectProperties.labelColor,
                            fontFamily: StandardObjectProperties.fontFamily,
                            fontSize: StandardObjectProperties.fontSize,
                            labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                            labelPrecision: StandardObjectProperties.labelPrecision,
                            titleColor: StandardObjectProperties.titleColor,
                            titleFontFamily: StandardObjectProperties.fontFamily,
                            titleFontSize: StandardObjectProperties.titleFontSize,
                            titleText: StandardObjectProperties.titleText,
                            gridlineShow: __assign({}, StandardObjectProperties.show, {
                                displayName: createDisplayNameGetter("Visual_Gridline_Show")
                            }),
                            gridlineColor: StandardObjectProperties.lineColor,
                            gridlineThickness: StandardObjectProperties.strokeWidth,
                            gridlineStyle: StandardObjectProperties.lineStyle,
                            secShow: {
                                displayName: createDisplayNameGetter("Visual_YAxis_ShowSecondary"),
                                type: {
                                    bool: !0
                                }
                            },
                            alignZeros: {
                                displayName: createDisplayNameGetter("Visual_YAxis_AlignZeros"),
                                description: createDisplayNameGetter("Visual_YAxis_AlignZeros_Description"),
                                type: {
                                    bool: !0
                                }
                            },
                            secAxisLabel: {
                                displayName: createDisplayNameGetter("Visual_YAxis_LineTitle"),
                                type: {
                                    none: !0
                                }
                            },
                            secPosition: StandardObjectProperties.yAxisPosition,
                            secAxisScale: StandardObjectProperties.axisScale,
                            secStart: {
                                displayName: createDisplayNameGetter("Visual_Axis_Start"),
                                description: createDisplayNameGetter("Visual_Axis_StartDescription"),
                                placeHolderText: createDisplayNameGetter("Visual_Auto"),
                                type: {
                                    numeric: !0
                                },
                                suppressFormatPainterCopy: !0
                            },
                            secEnd: {
                                displayName: createDisplayNameGetter("Visual_Axis_End"),
                                description: createDisplayNameGetter("Visual_Axis_EndDescription"),
                                placeHolderText: createDisplayNameGetter("Visual_Auto"),
                                type: {
                                    numeric: !0
                                },
                                suppressFormatPainterCopy: !0
                            },
                            secShowAxisTitle: {
                                displayName: createDisplayNameGetter("Visual_Axis_Title"),
                                description: createDisplayNameGetter("Visual_Axis_YTitleDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            secAxisStyle: StandardObjectProperties.axisStyle,
                            secLabelColor: StandardObjectProperties.labelColor,
                            secFontFamily: StandardObjectProperties.fontFamily,
                            secFontSize: StandardObjectProperties.fontSize,
                            secLabelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                            secLabelPrecision: StandardObjectProperties.labelPrecision,
                            secTitleColor: StandardObjectProperties.titleColor,
                            secTitleFontFamily: StandardObjectProperties.fontFamily,
                            secTitleFontSize: StandardObjectProperties.titleFontSize,
                            secTitleText: StandardObjectProperties.titleText
                        }
                    },
                    dataPoint: {
                        displayName: createDisplayNameGetter("Visual_DataPoint"),
                        description: createDisplayNameGetter("Visual_DataPointDescription"),
                        properties: {
                            defaultColor: __assign({}, StandardObjectProperties.defaultColor, {
                                displayName: createDisplayNameGetter("Visual_DefaultColumnColor")
                            }),
                            defaultCategoryColor: __assign({}, StandardObjectProperties.defaultCategoryColor, {
                                displayName: createDisplayNameGetter("Visual_DefaultColumnColor")
                            }),
                            showAllDataPoints: StandardObjectProperties.showAllDataPoints,
                            fill: StandardObjectProperties.fill,
                            fillRule: {
                                displayName: createDisplayNameGetter("Visual_Gradient"),
                                type: {
                                    fillRule: {}
                                },
                                rule: {
                                    inputRole: "Gradient",
                                    output: {
                                        property: "fill",
                                        selector: [ "Category" ]
                                    }
                                }
                            }
                        }
                    },
                    labels: {
                        displayName: createDisplayNameGetter("Visual_DataPointsLabels"),
                        description: createDisplayNameGetter("Visual_DataPointsLabelsDescription"),
                        properties: {
                            show: StandardObjectProperties.show,
                            color: StandardObjectProperties.dataColor,
                            labelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits,
                            labelPrecision: __assign({}, StandardObjectProperties.labelPrecision, {
                                suppressFormatPainterCopy: !0
                            }),
                            labelOrientation: {
                                displayName: createDisplayNameGetter("Visual_LabelOrientation"),
                                type: {
                                    enumeration: visuals.labelOrientation.type
                                }
                            },
                            labelPosition: {
                                displayName: createDisplayNameGetter("Visual_Position"),
                                type: {
                                    enumeration: visuals.labelPosition.type
                                }
                            },
                            fontSize: StandardObjectProperties.fontSize,
                            fontFamily: StandardObjectProperties.fontFamily,
                            labelDensity: {
                                displayName: createDisplayNameGetter("Visual_LabelDensity"),
                                type: {
                                    formatting: {
                                        labelDensity: !0
                                    }
                                }
                            }
                        }
                    },
                    lineStyles: {
                        displayName: createDisplayNameGetter("Visual_Shapes"),
                        description: createDisplayNameGetter("Visual_ShapesDescription"),
                        properties: {
                            shadeArea: {
                                displayName: createDisplayNameGetter("Visual_Shapes_ShadeArea"),
                                type: {
                                    bool: !0
                                }
                            },
                            strokeWidth: StandardObjectProperties.strokeWidth,
                            strokeLineJoin: StandardObjectProperties.strokeLineJoin,
                            showMarker: StandardObjectProperties.showMarker,
                            markerShape: StandardObjectProperties.markerShape,
                            markerSize: StandardObjectProperties.markerSize,
                            markerColor: StandardObjectProperties.markerColor,
                            showSeries: {
                                displayName: createDisplayNameGetter("Visual_LabelSeriesShowAll"),
                                type: {
                                    bool: !0
                                }
                            }
                        }
                    },
                    plotArea: {
                        displayName: createDisplayNameGetter("Visual_Plot"),
                        properties: {
                            transparency: StandardObjectProperties.transparency,
                            image: StandardObjectProperties.image
                        }
                    },
                    filters: {
                        properties: {
                            filteredToUniqueValue: {
                                type: {
                                    bool: !0
                                }
                            }
                        }
                    }
                },
                dataViewMappings: [ {
                    conditions: [ {
                        Series: {
                            max: 0
                        }
                    }, {
                        Series: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            max: 1
                        }
                    } ],
                    categorical: {
                        categories: {
                            for: {
                                in: "Category"
                            },
                            dataReductionAlgorithm: {
                                window: {
                                    count: 200
                                }
                            }
                        },
                        values: {
                            group: {
                                by: "Series",
                                select: [ {
                                    for: {
                                        in: "Y"
                                    }
                                }, {
                                    for: {
                                        in: "Tooltips"
                                    }
                                } ],
                                dataReductionAlgorithm: {
                                    top: {
                                        count: 60
                                    }
                                }
                            }
                        },
                        rowCount: {
                            preferred: {
                                min: 2
                            },
                            supported: {
                                min: 0
                            }
                        }
                    }
                }, {
                    conditions: [ {
                        Series: {
                            max: 0
                        },
                        Y2: {
                            min: 1
                        }
                    }, {
                        Series: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            max: 1
                        },
                        Y2: {
                            min: 1
                        }
                    } ],
                    categorical: {
                        categories: {
                            for: {
                                in: "Category"
                            },
                            dataReductionAlgorithm: {
                                window: {
                                    count: 200
                                }
                            }
                        },
                        values: {
                            select: [ {
                                for: {
                                    in: "Y2"
                                }
                            } ]
                        },
                        rowCount: {
                            preferred: {
                                min: 2
                            },
                            supported: {
                                min: 0
                            }
                        }
                    }
                }, {
                    conditions: [ {
                        Series: {
                            max: 0
                        }
                    }, {
                        Series: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            max: 1
                        }
                    } ],
                    requiredProperties: [ {
                        objectName: "trend",
                        propertyName: "show"
                    } ],
                    usage: {
                        regression: {
                            combineSeries: {
                                objectName: "trend",
                                propertyName: "combineSeries"
                            }
                        }
                    },
                    categorical: {
                        categories: {
                            for: {
                                in: "regression.X"
                            }
                        },
                        values: {
                            group: {
                                by: "regression.Series",
                                select: [ {
                                    for: {
                                        in: "regression.Y"
                                    }
                                } ]
                            }
                        }
                    }
                } ],
                supportsHighlight: !0,
                sorting: {
                    default: {}
                },
                drilldown: {
                    roles: [ "Category" ]
                },
                grouping: {
                    groupingRules: [ {
                        condition: {
                            Category: {
                                min: 1,
                                max: 1
                            },
                            Y: {
                                min: 1,
                                max: 1
                            },
                            Series: {
                                max: 0
                            },
                            Gradient: {
                                max: 0
                            }
                        },
                        groupingTargetRole: "Series",
                        kind: 0
                    }, {
                        condition: {
                            Category: {
                                max: 0
                            },
                            Y: {
                                min: 1,
                                max: 1
                            },
                            Series: {
                                min: 1,
                                max: 1
                            },
                            Gradient: {
                                max: 0
                            }
                        },
                        groupingTargetRole: "Series",
                        kind: 0
                    } ]
                }
            };
            return isStacked || (capabilities.objects.trend = {
                displayName: createDisplayNameGetter("Visual_Trend_Line"),
                properties: {
                    show: {
                        type: {
                            bool: !0
                        }
                    },
                    displayName: {
                        type: {
                            text: !0
                        }
                    },
                    lineColor: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line_Color"),
                        description: createDisplayNameGetter("Visual_Trend_Line_Color_Description"),
                        type: {
                            fill: {
                                solid: {
                                    color: !0
                                }
                            }
                        }
                    },
                    transparency: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line_Transparency"),
                        description: createDisplayNameGetter("Visual_Trend_Line_Transparency_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    style: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line_Style"),
                        description: createDisplayNameGetter("Visual_Trend_Line_Style_Description"),
                        type: {
                            enumeration: visuals.lineStyle.type
                        }
                    },
                    combineSeries: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line_Combine_Series"),
                        description: createDisplayNameGetter("Visual_Trend_Line_Combine_Series_Description"),
                        type: {
                            bool: !0
                        }
                    },
                    useHighlightValues: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line_UseHighlightValues"),
                        description: createDisplayNameGetter("Visual_Trend_Line_UseHighlightValues_Description"),
                        type: {
                            bool: !0
                        }
                    }
                }
            }), capabilities;
        }
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.getComboChartCapabilities = getComboChartCapabilities, visuals.comboChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            valueAxis: {
                secShow: {
                    objectName: "valueAxis",
                    propertyName: "secShow"
                }
            },
            legend: {
                labelColor: {
                    objectName: "legend",
                    propertyName: "labelColor"
                }
            },
            dataPoint: {
                showAllDataPoints: {
                    objectName: "dataPoint",
                    propertyName: "showAllDataPoints"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.donutChartCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Legend"),
                description: createDisplayNameGetter("Role_DisplayName_LegendDescription")
            }, {
                name: "Series",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Details"),
                description: createDisplayNameGetter("Role_DisplayName_DetailsDonutChartDescription")
            }, {
                name: "Y",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Values"),
                description: createDisplayNameGetter("Role_DisplayName_ValuesDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: "Tooltips",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                joinPredicate: 0
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                legend: visuals.StandardObjectDescriptors.legend,
                dataPoint: {
                    displayName: createDisplayNameGetter("Visual_DataPoint"),
                    description: createDisplayNameGetter("Visual_DataPointDescription"),
                    properties: {
                        defaultColor: StandardObjectProperties.defaultColor,
                        fill: StandardObjectProperties.fill
                    }
                },
                labels: {
                    displayName: createDisplayNameGetter("Visual_DetailLabels"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        labelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits,
                        labelPrecision: __assign({}, StandardObjectProperties.labelPrecision, {
                            suppressFormatPainterCopy: !0
                        }),
                        percentageLabelPrecision: __assign({}, StandardObjectProperties.percentageLabelPrecision, {
                            suppressFormatPainterCopy: !0
                        }),
                        fontSize: __assign({}, StandardObjectProperties.fontSize, {
                            suppressFormatPainterCopy: !0
                        }),
                        fontFamily: StandardObjectProperties.fontFamily,
                        labelStyle: {
                            displayName: createDisplayNameGetter("Visual_LabelStyle"),
                            type: {
                                enumeration: visuals.labelStyle.type
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Series: {
                        min: 1,
                        max: 1
                    },
                    Y: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        for: {
                            in: "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                bind: {
                                    to: "Y"
                                }
                            }, {
                                for: {
                                    in: "Tooltips"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        },
                        supported: {
                            min: 1
                        }
                    }
                }
            } ],
            sorting: {
                default: {}
            },
            supportsHighlight: !0,
            drilldown: {
                roles: [ "Category" ]
            },
            grouping: {
                groupingRules: [ {
                    condition: {
                        Category: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            min: 1,
                            max: 1
                        },
                        Series: {
                            max: 0
                        }
                    },
                    groupingTargetRole: "Category",
                    groupSourceTargetRole: "Series",
                    kind: 0
                }, {
                    condition: {
                        Category: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            min: 1
                        },
                        Series: {
                            max: 0
                        }
                    },
                    groupingTargetRole: "Category",
                    kind: 1
                }, {
                    condition: {
                        Category: {
                            max: 0
                        },
                        Y: {
                            min: 1,
                            max: 1
                        },
                        Series: {
                            max: 1
                        }
                    },
                    groupingTargetRole: "Series",
                    kind: 0
                } ]
            }
        }, visuals.donutChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            },
            legend: {
                show: {
                    objectName: "legend",
                    propertyName: "show"
                },
                position: {
                    objectName: "legend",
                    propertyName: "position"
                },
                showTitle: {
                    objectName: "legend",
                    propertyName: "showTitle"
                },
                titleText: {
                    objectName: "legend",
                    propertyName: "titleText"
                },
                labelColor: {
                    objectName: "legend",
                    propertyName: "labelColor"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.dataDotChartCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Axis"),
                description: createDisplayNameGetter("Role_DisplayName_AxisDescription")
            }, {
                name: "Y",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Value"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString,
                        responsive: StandardObjectProperties.responsive,
                        responsiveLegacy: StandardObjectProperties.responsiveLegacy
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        for: {
                            in: "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        select: [ {
                            for: {
                                in: "Y"
                            }
                        } ]
                    }
                }
            } ]
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.filledMapCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Location"),
                description: createDisplayNameGetter("Role_DisplayName_LocationFilledMapDescription"),
                preferredTypes: [ {
                    geography: {
                        address: !0
                    }
                }, {
                    geography: {
                        city: !0
                    }
                }, {
                    geography: {
                        continent: !0
                    }
                }, {
                    geography: {
                        country: !0
                    }
                }, {
                    geography: {
                        county: !0
                    }
                }, {
                    geography: {
                        place: !0
                    }
                }, {
                    geography: {
                        postalCode: !0
                    }
                }, {
                    geography: {
                        region: !0
                    }
                }, {
                    geography: {
                        stateOrProvince: !0
                    }
                } ]
            }, {
                name: "Series",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Legend"),
                description: createDisplayNameGetter("Role_DisplayName_LegendDescription")
            }, {
                name: "Y",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Latitude"),
                description: createDisplayNameGetter("Role_DisplayName_LatitudeFilledMapDescription"),
                preferredTypes: [ {
                    geography: {
                        latitude: !0
                    }
                } ]
            }, {
                name: "X",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Longitude"),
                description: createDisplayNameGetter("Role_DisplayName_LongitudeFilledMapDescription"),
                preferredTypes: [ {
                    geography: {
                        longitude: !0
                    }
                } ]
            }, {
                name: "Size",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Gradient"),
                description: createDisplayNameGetter("Role_DisplayName_GradientDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: "Tooltips",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                joinPredicate: 0
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                legend: visuals.StandardObjectDescriptors.legend,
                dataPoint: {
                    displayName: createDisplayNameGetter("Visual_DataPoint"),
                    description: createDisplayNameGetter("Visual_DataPointDescription"),
                    properties: {
                        defaultColor: StandardObjectProperties.defaultColor,
                        defaultCategoryColor: StandardObjectProperties.defaultCategoryColor,
                        showAllDataPoints: StandardObjectProperties.showAllDataPoints,
                        fill: StandardObjectProperties.fill,
                        fillRule: {
                            displayName: createDisplayNameGetter("Role_DisplayName_Values"),
                            description: createDisplayNameGetter("Role_DisplayName_ValuesDescription"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                conditions: [ {
                                    Series: {
                                        max: 0
                                    }
                                } ],
                                inputRole: "Size",
                                output: {
                                    property: "fill",
                                    selector: [ "Category" ]
                                }
                            }
                        }
                    }
                },
                labels: {
                    displayName: createDisplayNameGetter("Visual_DataPointsLabels"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                        labelPrecision: StandardObjectProperties.labelPrecision
                    }
                },
                categoryLabels: {
                    displayName: createDisplayNameGetter("Visual_CategoryLabels"),
                    properties: {
                        show: StandardObjectProperties.show
                    }
                },
                mapControls: {
                    displayName: createDisplayNameGetter("Visual_MapControls"),
                    description: createDisplayNameGetter("Visual_MapControlsDescription"),
                    properties: {
                        autoZoom: {
                            displayName: createDisplayNameGetter("Visual_AutoZoom"),
                            type: {
                                bool: !0
                            }
                        },
                        zoomLevel: {
                            type: {
                                numeric: !0
                            }
                        },
                        centerLatitude: {
                            type: {
                                numeric: !0
                            }
                        },
                        centerLongitude: {
                            type: {
                                numeric: !0
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {},
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    }
                }, {
                    Category: {},
                    Series: {
                        max: 0
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        for: {
                            in: "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                bind: {
                                    to: "X"
                                }
                            }, {
                                bind: {
                                    to: "Y"
                                }
                            }, {
                                bind: {
                                    to: "Size"
                                }
                            }, {
                                for: {
                                    in: "Tooltips"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        }
                    },
                    dataVolume: 4
                }
            } ],
            sorting: {
                custom: {},
                implicit: {
                    clauses: [ {
                        role: "Size",
                        direction: 2
                    } ]
                }
            },
            drilldown: {
                roles: [ "Category" ]
            }
        }, visuals.filledMapProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                },
                showAllDataPoints: {
                    objectName: "dataPoint",
                    propertyName: "showAllDataPoints"
                }
            },
            legend: {
                show: {
                    objectName: "legend",
                    propertyName: "show"
                },
                position: {
                    objectName: "legend",
                    propertyName: "position"
                },
                showTitle: {
                    objectName: "legend",
                    propertyName: "showTitle"
                },
                titleText: {
                    objectName: "legend",
                    propertyName: "titleText"
                }
            },
            labels: {
                show: {
                    objectName: "labels",
                    propertyName: "show"
                },
                color: {
                    objectName: "labels",
                    propertyName: "color"
                },
                labelDisplayUnits: {
                    objectName: "labels",
                    propertyName: "labelDisplayUnits"
                },
                labelPrecision: {
                    objectName: "labels",
                    propertyName: "labelPrecision"
                }
            },
            categoryLabels: {
                show: {
                    objectName: "categoryLabels",
                    propertyName: "show"
                }
            },
            mapControls: {
                autoZoom: {
                    objectName: "mapControls",
                    propertyName: "autoZoom"
                },
                zoomLevel: {
                    objectName: "mapControls",
                    propertyName: "zoomLevel"
                },
                centerLatitude: {
                    objectName: "mapControls",
                    propertyName: "centerLatitude"
                },
                centerLongitude: {
                    objectName: "mapControls",
                    propertyName: "centerLongitude"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.funnelChartCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Group"),
                description: createDisplayNameGetter("Role_DisplayName_GroupFunnelDescription")
            }, {
                name: "Y",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Values"),
                description: createDisplayNameGetter("Role_DisplayName_ValuesDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: "Gradient",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Gradient"),
                description: createDisplayNameGetter("Role_DisplayName_GradientDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ],
                joinPredicate: 0
            }, {
                name: "Tooltips",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                joinPredicate: 0
            } ],
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 0
                    },
                    Gradient: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Gradient: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        for: {
                            in: "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        select: [ {
                            for: {
                                in: "Y"
                            }
                        }, {
                            bind: {
                                to: "Gradient"
                            }
                        }, {
                            for: {
                                in: "Tooltips"
                            }
                        } ]
                    },
                    rowCount: {
                        preferred: {
                            min: 1
                        }
                    }
                }
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                categoryAxis: {
                    displayName: createDisplayNameGetter("Visual_CategoryLabels"),
                    description: createDisplayNameGetter("Visual_CategoryLabelOptionsDescription"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                dataPoint: {
                    displayName: createDisplayNameGetter("Visual_DataPoint"),
                    description: createDisplayNameGetter("Visual_DataPointDescription"),
                    properties: {
                        defaultColor: StandardObjectProperties.defaultColor,
                        defaultCategoryColor: StandardObjectProperties.defaultCategoryColor,
                        showAllDataPoints: StandardObjectProperties.showAllDataPoints,
                        fill: StandardObjectProperties.fill,
                        fillRule: {
                            displayName: createDisplayNameGetter("Visual_Gradient"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                inputRole: "Gradient",
                                output: {
                                    property: "fill",
                                    selector: [ "Category" ]
                                }
                            }
                        }
                    }
                },
                labels: {
                    displayName: createDisplayNameGetter("Visual_DataPointsLabels"),
                    description: createDisplayNameGetter("Visual_DataPointsLabelsDescription"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        labelPosition: {
                            displayName: createDisplayNameGetter("Visual_Position"),
                            type: {
                                enumeration: visuals.labelPosition.type
                            },
                            suppressFormatPainterCopy: !0
                        },
                        labelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits,
                        labelPrecision: __assign({}, StandardObjectProperties.labelPrecision, {
                            suppressFormatPainterCopy: !0
                        }),
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                percentBarLabel: {
                    displayName: createDisplayNameGetter("Visual_PercentBarLabel"),
                    description: createDisplayNameGetter("Visual_PercentBarLabelDescription"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                }
            },
            supportsHighlight: !0,
            sorting: {
                default: {}
            },
            drilldown: {
                roles: [ "Category" ]
            }
        }, visuals.funnelChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.gaugeRoleNames = {
            y: "Y",
            minValue: "MinValue",
            maxValue: "MaxValue",
            targetValue: "TargetValue"
        }, visuals.gaugeCapabilities = {
            dataRoles: [ {
                name: visuals.gaugeRoleNames.y,
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Value"),
                description: createDisplayNameGetter("Role_DisplayName_ValueDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: visuals.gaugeRoleNames.minValue,
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_MinValue"),
                description: createDisplayNameGetter("Role_DisplayName_MinValueDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: visuals.gaugeRoleNames.maxValue,
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_MaxValue"),
                description: createDisplayNameGetter("Role_DisplayName_MaxValueDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: visuals.gaugeRoleNames.targetValue,
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_TargetValue"),
                description: createDisplayNameGetter("Role_DisplayName_TargetValueDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: "Tooltips",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                joinPredicate: 0
            } ],
            objects: {
                general: {
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                axis: {
                    displayName: createDisplayNameGetter("Visual_Gauge_Axis"),
                    properties: {
                        min: {
                            displayName: createDisplayNameGetter("Visual_Gauge_Axis_Min"),
                            type: {
                                numeric: !0
                            }
                        },
                        max: {
                            displayName: createDisplayNameGetter("Visual_Gauge_Axis_Max"),
                            type: {
                                numeric: !0
                            }
                        },
                        target: {
                            displayName: createDisplayNameGetter("Visual_Gauge_Axis_Target"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                dataPoint: {
                    displayName: createDisplayNameGetter("Visual_DataPoint"),
                    properties: {
                        fill: StandardObjectProperties.fill,
                        target: {
                            displayName: createDisplayNameGetter("Visual_Gauge_Axis_Target"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                },
                labels: {
                    displayName: createDisplayNameGetter("Visual_DataPointsLabels"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                        labelPrecision: StandardObjectProperties.labelPrecision,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                target: {
                    displayName: createDisplayNameGetter("Visual_Gauge_Axis_Target"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                        labelPrecision: StandardObjectProperties.labelPrecision,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                calloutValue: {
                    displayName: createDisplayNameGetter("Visual_Gauge_CalloutValue"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                        labelPrecision: StandardObjectProperties.labelPrecision
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Y: {
                        max: 1
                    },
                    MinValue: {
                        max: 1
                    },
                    MaxValue: {
                        max: 1
                    },
                    TargetValue: {
                        max: 1
                    }
                } ],
                categorical: {
                    values: {
                        select: [ {
                            bind: {
                                to: "Y"
                            }
                        }, {
                            bind: {
                                to: "MinValue"
                            }
                        }, {
                            bind: {
                                to: "MaxValue"
                            }
                        }, {
                            bind: {
                                to: "TargetValue"
                            }
                        }, {
                            for: {
                                in: "Tooltips"
                            }
                        } ]
                    }
                }
            } ],
            supportsSelection: !1
        }, visuals.gaugeProps = {
            dataPoint: {
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                },
                target: {
                    objectName: "dataPoint",
                    propertyName: "target"
                }
            },
            target: {
                show: {
                    objectName: "target",
                    propertyName: "show"
                },
                labelDisplayUnits: {
                    objectName: "target",
                    propertyName: "labelDisplayUnits"
                },
                labelPrecision: {
                    objectName: "target",
                    propertyName: "labelPrecision"
                },
                fontSize: {
                    objectName: "target",
                    propertyName: "fontSize"
                },
                fontFamily: {
                    objectName: "target",
                    propertyName: "fontFamily"
                },
                color: {
                    objectName: "target",
                    propertyName: "color"
                }
            },
            labels: {
                show: {
                    objectName: "labels",
                    propertyName: "show"
                },
                labelDisplayUnits: {
                    objectName: "labels",
                    propertyName: "labelDisplayUnits"
                },
                labelPrecision: {
                    objectName: "labels",
                    propertyName: "labelPrecision"
                },
                fontSize: {
                    objectName: "labels",
                    propertyName: "fontSize"
                },
                fontFamily: {
                    objectName: "labels",
                    propertyName: "fontFamily"
                },
                color: {
                    objectName: "labels",
                    propertyName: "color"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter;
        visuals.imageVisualCapabilities = {
            objects: {
                general: {
                    properties: {
                        imageUrl: {
                            type: {
                                misc: {
                                    imageUrl: !0
                                }
                            },
                            suppressFormatPainterCopy: !0
                        }
                    }
                },
                imageScaling: {
                    displayName: createDisplayNameGetter("Visual_Image_Scaling_Type"),
                    properties: {
                        imageScalingType: {
                            displayName: createDisplayNameGetter("Visual_Image_Scaling_Type"),
                            type: {
                                enumeration: visuals.imageScalingType.type
                            }
                        }
                    }
                }
            },
            suppressDefaultTitle: !0,
            supportsSelection: !1,
            supportsVisualLink: !0
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.realTimeLineChartCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Axis"),
                description: createDisplayNameGetter("Role_DisplayName_AxisDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    dateTime: !0
                } ],
                cartesianKind: 0
            }, {
                name: "Series",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Legend"),
                description: createDisplayNameGetter("Role_DisplayName_LegendDescription")
            }, {
                name: "Y",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Values"),
                description: createDisplayNameGetter("Role_DisplayName_ValuesDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ],
                cartesianKind: 1
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString,
                        responsive: StandardObjectProperties.responsive,
                        responsiveLegacy: StandardObjectProperties.responsiveLegacy
                    }
                },
                legend: {
                    displayName: createDisplayNameGetter("Visual_Legend"),
                    description: createDisplayNameGetter("Visual_LegendDescription"),
                    properties: {
                        show: StandardObjectProperties.show,
                        position: StandardObjectProperties.legendPosition,
                        showTitle: StandardObjectProperties.showLegendTitle,
                        titleText: __assign({}, StandardObjectProperties.legendTitle, {
                            suppressFormatPainterCopy: !0
                        }),
                        labelColor: StandardObjectProperties.labelColor,
                        fontSize: StandardObjectProperties.fontSize
                    }
                },
                categoryAxis: {
                    displayName: createDisplayNameGetter("Visual_XAxis"),
                    properties: {
                        show: StandardObjectProperties.show,
                        axisType: StandardObjectProperties.axisType,
                        showAxisTitle: {
                            displayName: createDisplayNameGetter("Visual_Axis_Title"),
                            description: createDisplayNameGetter("Visual_Axis_XTitleDescription"),
                            type: {
                                bool: !0
                            }
                        },
                        axisStyle: StandardObjectProperties.axisStyle,
                        labelColor: StandardObjectProperties.labelColor,
                        labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                        labelPrecision: StandardObjectProperties.labelPrecision,
                        duration: {
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                valueAxis: {
                    displayName: createDisplayNameGetter("Visual_YAxis"),
                    properties: {
                        show: StandardObjectProperties.show,
                        position: StandardObjectProperties.yAxisPosition,
                        showAxisTitle: {
                            displayName: createDisplayNameGetter("Visual_Axis_Title"),
                            description: createDisplayNameGetter("Visual_Axis_YTitleDescription"),
                            type: {
                                bool: !0
                            }
                        },
                        axisStyle: StandardObjectProperties.axisStyle,
                        labelColor: StandardObjectProperties.labelColor,
                        labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                        labelPrecision: StandardObjectProperties.labelPrecision
                    }
                },
                dataPoint: {
                    displayName: createDisplayNameGetter("Visual_DataPoint"),
                    description: createDisplayNameGetter("Visual_DataPointDescription"),
                    properties: {
                        defaultColor: StandardObjectProperties.defaultColor,
                        fill: StandardObjectProperties.fill
                    }
                },
                plotArea: {
                    displayName: createDisplayNameGetter("Visual_Plot"),
                    properties: {
                        transparency: StandardObjectProperties.transparency,
                        image: StandardObjectProperties.image
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Series: {
                        min: 1,
                        max: 1
                    },
                    Y: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        for: {
                            in: "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                for: {
                                    in: "Y"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    }
                }
            } ],
            sorting: {
                implicit: {
                    clauses: [ {
                        role: "Category",
                        direction: 1
                    } ]
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        visuals.scriptVisualCapabilities = {
            dataRoles: [ {
                name: "Values",
                kind: powerbi.VisualDataRoleKind.GroupingOrMeasure,
                displayName: powerbi.data.createDisplayNameGetter("Role_DisplayName_Values")
            } ],
            dataViewMappings: [ {
                scriptResult: {
                    dataInput: {
                        table: {
                            rows: {
                                for: {
                                    in: "Values"
                                },
                                dataReductionAlgorithm: {
                                    top: {}
                                }
                            }
                        }
                    },
                    script: {
                        source: {
                            objectName: "script",
                            propertyName: "source"
                        },
                        provider: {
                            objectName: "script",
                            propertyName: "provider"
                        }
                    }
                }
            } ],
            objects: {
                script: {
                    properties: {
                        provider: {
                            type: {
                                text: !0
                            }
                        },
                        source: {
                            type: {
                                scripting: {
                                    source: !0
                                }
                            }
                        }
                    }
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var samples;
        !(function(samples) {
            var createDisplayNameGetter = powerbi.data.createDisplayNameGetter;
            samples.consoleWriterCapabilities = {
                dataRoles: [ {
                    name: "Category",
                    kind: powerbi.VisualDataRoleKind.Grouping,
                    displayName: createDisplayNameGetter("Role_DisplayName_Axis"),
                    description: createDisplayNameGetter("Role_DisplayName_AxisDescription")
                }, {
                    name: "Y",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_DisplayName_Y"),
                    description: createDisplayNameGetter("Role_DisplayName_YDescription")
                } ],
                dataViewMappings: [ {
                    categorical: {
                        categories: {
                            for: {
                                in: "Category"
                            }
                        }
                    }
                } ]
            };
        })(samples = visuals.samples || (visuals.samples = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var samples;
        !(function(samples) {
            var ConsoleWriter = (function() {
                function ConsoleWriter() {}
                return ConsoleWriter.converter = function(dataView) {
                    return window.console.log("converter"), window.console.log(dataView), {};
                }, ConsoleWriter.prototype.init = function(options) {
                    var div = d3.select(options.element.get(0)).append("div");
                    div.append("h1").text("ConsoleWriter"), div.append("p").text("This IVisual writes messages passed to it to the javscript console output. Check your console for the actual messages passed. For more information, click below");
                    var anchor = div.append("a");
                    anchor.attr("href", "https://microsoft.github.io/PowerBI-visuals/modules/powerbi.html").text("Online help"), 
                    window.console.log("init"), window.console.log(options);
                }, ConsoleWriter.prototype.onResizing = function(viewport) {}, ConsoleWriter.prototype.update = function(options) {
                    window.console.log("update"), window.console.log(options);
                }, ConsoleWriter;
            })();
            samples.ConsoleWriter = ConsoleWriter;
        })(samples = visuals.samples || (visuals.samples = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        visuals.cartesianRoleNames = {
            category: "Category",
            series: "Series",
            y: "Y",
            gradient: "Gradient",
            tooltips: "Tooltips"
        }, visuals.cartesianChartProps = {
            scalarKey: {
                scalarKeyMin: powerbi.data.scalarKeyMinPropertyIdentifier
            },
            filters: {
                filteredToUniqueValue: {
                    objectName: "filters",
                    propertyName: "filteredToUniqueValue"
                }
            },
            categoryAxis: {
                show: {
                    objectName: "categoryAxis",
                    propertyName: "show"
                },
                fontFamily: {
                    objectName: "categoryAxis",
                    propertyName: "fontFamily"
                },
                fontSize: {
                    objectName: "categoryAxis",
                    propertyName: "fontSize"
                },
                showAxisTitle: {
                    objectName: "categoryAxis",
                    propertyName: "showAxisTitle"
                },
                titleFontFamily: {
                    objectName: "categoryAxis",
                    propertyName: "titleFontFamily"
                },
                titleFontSize: {
                    objectName: "categoryAxis",
                    propertyName: "titleFontSize"
                },
                concatenateLabels: {
                    objectName: "categoryAxis",
                    propertyName: "concatenateLabels"
                },
                start: {
                    objectName: "categoryAxis",
                    propertyName: "start"
                },
                end: {
                    objectName: "categoryAxis",
                    propertyName: "end"
                },
                position: {
                    objectName: "categoryAxis",
                    propertyName: "position"
                },
                axisType: {
                    objectName: "categoryAxis",
                    propertyName: "axisType"
                },
                axisScale: {
                    objectName: "categoryAxis",
                    propertyName: "axisScale"
                },
                axisStyle: {
                    objectName: "categoryAxis",
                    propertyName: "axisStyle"
                },
                labelDisplayUnits: {
                    objectName: "categoryAxis",
                    propertyName: "labelDisplayUnits"
                },
                labelPrecision: {
                    objectName: "categoryAxis",
                    propertyName: "labelPrecision"
                },
                labelColor: {
                    objectName: "categoryAxis",
                    propertyName: "labelColor"
                },
                titleText: {
                    objectName: "categoryAxis",
                    propertyName: "titleText"
                },
                titleColor: {
                    objectName: "categoryAxis",
                    propertyName: "titleColor"
                },
                preferredCategoryWidth: {
                    objectName: "categoryAxis",
                    propertyName: "preferredCategoryWidth"
                },
                gridlineShow: {
                    objectName: "categoryAxis",
                    propertyName: "gridlineShow"
                },
                gridlineColor: {
                    objectName: "categoryAxis",
                    propertyName: "gridlineColor"
                },
                gridlineThickness: {
                    objectName: "categoryAxis",
                    propertyName: "gridlineThickness"
                },
                gridlineStyle: {
                    objectName: "categoryAxis",
                    propertyName: "gridlineStyle"
                }
            },
            valueAxis: {
                show: {
                    objectName: "valueAxis",
                    propertyName: "show"
                },
                fontFamily: {
                    objectName: "valueAxis",
                    propertyName: "fontFamily"
                },
                fontSize: {
                    objectName: "valueAxis",
                    propertyName: "fontSize"
                },
                showAxisTitle: {
                    objectName: "valueAxis",
                    propertyName: "showAxisTitle"
                },
                titleFontFamily: {
                    objectName: "valueAxis",
                    propertyName: "titleFontFamily"
                },
                titleFontSize: {
                    objectName: "valueAxis",
                    propertyName: "titleFontSize"
                },
                concatenateLabels: {
                    objectName: "valueAxis",
                    propertyName: "concatenateLabels"
                },
                start: {
                    objectName: "valueAxis",
                    propertyName: "start"
                },
                end: {
                    objectName: "valueAxis",
                    propertyName: "end"
                },
                position: {
                    objectName: "valueAxis",
                    propertyName: "position"
                },
                axisType: {
                    objectName: "valueAxis",
                    propertyName: "axisType"
                },
                axisScale: {
                    objectName: "valueAxis",
                    propertyName: "axisScale"
                },
                axisStyle: {
                    objectName: "valueAxis",
                    propertyName: "axisStyle"
                },
                labelDisplayUnits: {
                    objectName: "valueAxis",
                    propertyName: "labelDisplayUnits"
                },
                labelPrecision: {
                    objectName: "valueAxis",
                    propertyName: "labelPrecision"
                },
                labelColor: {
                    objectName: "valueAxis",
                    propertyName: "labelColor"
                },
                titleText: {
                    objectName: "valueAxis",
                    propertyName: "titleText"
                },
                titleColor: {
                    objectName: "valueAxis",
                    propertyName: "titleColor"
                },
                preferredCategoryWidth: {
                    objectName: "valueAxis",
                    propertyName: "preferredCategoryWidth"
                },
                axisLabel: {
                    objectName: "valueAxis",
                    propertyName: "axisLabel"
                },
                gridlineShow: {
                    objectName: "valueAxis",
                    propertyName: "gridlineShow"
                },
                gridlineColor: {
                    objectName: "valueAxis",
                    propertyName: "gridlineColor"
                },
                gridlineThickness: {
                    objectName: "valueAxis",
                    propertyName: "gridlineThickness"
                },
                gridlineStyle: {
                    objectName: "valueAxis",
                    propertyName: "gridlineStyle"
                },
                secShow: {
                    objectName: "valueAxis",
                    propertyName: "secShow"
                },
                alignZeros: {
                    objectName: "valueAxis",
                    propertyName: "alignZeros"
                },
                secShowAxisTitle: {
                    objectName: "valueAxis",
                    propertyName: "secShowAxisTitle"
                },
                secFontFamily: {
                    objectName: "valueAxis",
                    propertyName: "secFontFamily"
                },
                secFontSize: {
                    objectName: "valueAxis",
                    propertyName: "secFontSize"
                },
                secTitleFontFamily: {
                    objectName: "valueAxis",
                    propertyName: "secTitleFontFamily"
                },
                secTitleFontSize: {
                    objectName: "valueAxis",
                    propertyName: "secTitleFontSize"
                },
                secStart: {
                    objectName: "valueAxis",
                    propertyName: "secStart"
                },
                secEnd: {
                    objectName: "valueAxis",
                    propertyName: "secEnd"
                },
                secPosition: {
                    objectName: "valueAxis",
                    propertyName: "secPosition"
                },
                secAxisScale: {
                    objectName: "valueAxis",
                    propertyName: "secAxisScale"
                },
                secAxisStyle: {
                    objectName: "valueAxis",
                    propertyName: "secAxisStyle"
                },
                secLabelDisplayUnits: {
                    objectName: "valueAxis",
                    propertyName: "secLabelDisplayUnits"
                },
                secLabelPrecision: {
                    objectName: "valueAxis",
                    propertyName: "secLabelPrecision"
                },
                secLabelColor: {
                    objectName: "valueAxis",
                    propertyName: "secLabelColor"
                },
                secTitleText: {
                    objectName: "valueAxis",
                    propertyName: "secTitleText"
                },
                secTitleColor: {
                    objectName: "valueAxis",
                    propertyName: "secTitleColor"
                }
            },
            general: {
                responsive: {
                    objectName: "general",
                    propertyName: "responsive"
                },
                responsiveLegacy: {
                    objectName: "general",
                    propertyName: "responsiveLegacy"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function getLineChartCapabilities(isStacked, isArea, binnedLineSampling) {
            function getLineChartDataViewMapping() {
                var mapping = {
                    conditions: [ {
                        Series: {
                            max: 0
                        }
                    }, {
                        Series: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            max: 1
                        }
                    } ],
                    categorical: {
                        categories: {
                            for: {
                                in: "Category"
                            }
                        },
                        values: {
                            group: {
                                by: "Series",
                                select: [ {
                                    for: {
                                        in: "Y"
                                    }
                                }, {
                                    for: {
                                        in: "Tooltips"
                                    }
                                } ]
                            }
                        }
                    }
                };
                return binnedLineSampling && !isStacked ? LineChartDataReduction.applyBinnedSampling(mapping) : LineChartDataReduction.applyLegacySampling(mapping), 
                mapping;
            }
            var lineChartCapabilities = {
                dataRoles: [ {
                    name: "Category",
                    kind: powerbi.VisualDataRoleKind.Grouping,
                    displayName: createDisplayNameGetter("Role_DisplayName_Axis"),
                    description: createDisplayNameGetter("Role_DisplayName_AxisDescription"),
                    cartesianKind: 0
                }, {
                    name: "Series",
                    kind: powerbi.VisualDataRoleKind.Grouping,
                    displayName: createDisplayNameGetter("Role_DisplayName_Legend"),
                    description: createDisplayNameGetter("Role_DisplayName_LegendDescription")
                }, {
                    name: "Y",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_DisplayName_Values"),
                    description: createDisplayNameGetter("Role_DisplayName_ValuesDescription"),
                    requiredTypes: [ {
                        numeric: !0
                    }, {
                        integer: !0
                    } ],
                    cartesianKind: 1
                }, {
                    name: "Tooltips",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                    joinPredicate: 0
                } ],
                objects: {
                    general: {
                        displayName: createDisplayNameGetter("Visual_General"),
                        properties: {
                            formatString: StandardObjectProperties.formatString,
                            responsive: StandardObjectProperties.responsive,
                            responsiveLegacy: StandardObjectProperties.responsiveLegacy
                        }
                    },
                    legend: {
                        displayName: visuals.StandardObjectDescriptors.legend.displayName,
                        description: visuals.StandardObjectDescriptors.legend.description,
                        properties: __assign({}, visuals.StandardObjectDescriptors.legend.properties, {
                            legendMarkerRendering: {
                                displayName: createDisplayNameGetter("Visual_Axis_Style"),
                                description: createDisplayNameGetter("Visual_LegendStyleDescription"),
                                type: {
                                    enumeration: powerbi.visuals.legendMarkerRendering.type
                                }
                            },
                            defaultToCircle: {
                                displayName: createDisplayNameGetter("Visual_LegendDefaultToCircle"),
                                description: createDisplayNameGetter("Visual_LegendDefaultToCircleDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            matchLineColor: {
                                displayName: createDisplayNameGetter("Visual_LegendMatchLineColor"),
                                description: createDisplayNameGetter("Visual_LegendMatchLineColorDescription"),
                                type: {
                                    bool: !0
                                }
                            }
                        })
                    },
                    categoryAxis: {
                        displayName: createDisplayNameGetter("Visual_XAxis"),
                        properties: {
                            show: StandardObjectProperties.show,
                            axisScale: StandardObjectProperties.axisScale,
                            start: StandardObjectProperties.axisStart,
                            end: StandardObjectProperties.axisEnd,
                            axisType: StandardObjectProperties.axisType,
                            showAxisTitle: {
                                displayName: createDisplayNameGetter("Visual_Axis_Title"),
                                description: createDisplayNameGetter("Visual_Axis_XTitleDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: StandardObjectProperties.axisStyle,
                            labelColor: StandardObjectProperties.labelColor,
                            fontFamily: StandardObjectProperties.fontFamily,
                            fontSize: StandardObjectProperties.fontSize,
                            labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                            labelPrecision: StandardObjectProperties.labelPrecision,
                            concatenateLabels: {
                                displayName: createDisplayNameGetter("Visual_Axis_ConcatenateLabels"),
                                description: createDisplayNameGetter("Visual_Axis_ConcatenateLabelsDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            preferredCategoryWidth: {
                                displayName: createDisplayNameGetter("Visual_Category_Width"),
                                type: {
                                    numeric: !0
                                }
                            },
                            titleColor: StandardObjectProperties.titleColor,
                            titleFontFamily: StandardObjectProperties.fontFamily,
                            titleFontSize: StandardObjectProperties.titleFontSize,
                            titleText: StandardObjectProperties.titleText,
                            gridlineShow: __assign({}, StandardObjectProperties.show, {
                                displayName: createDisplayNameGetter("Visual_Gridline_Show")
                            }),
                            gridlineColor: StandardObjectProperties.lineColor,
                            gridlineThickness: StandardObjectProperties.strokeWidth,
                            gridlineStyle: StandardObjectProperties.lineStyle
                        }
                    },
                    valueAxis: {
                        displayName: createDisplayNameGetter("Visual_YAxis"),
                        properties: {
                            show: StandardObjectProperties.show,
                            position: StandardObjectProperties.yAxisPosition,
                            axisScale: StandardObjectProperties.axisScale,
                            start: StandardObjectProperties.axisStart,
                            end: StandardObjectProperties.axisEnd,
                            showAxisTitle: {
                                displayName: createDisplayNameGetter("Visual_Axis_Title"),
                                description: createDisplayNameGetter("Visual_Axis_YTitleDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: StandardObjectProperties.axisStyle,
                            labelColor: StandardObjectProperties.labelColor,
                            fontFamily: StandardObjectProperties.fontFamily,
                            fontSize: StandardObjectProperties.fontSize,
                            labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                            labelPrecision: StandardObjectProperties.labelPrecision,
                            titleColor: StandardObjectProperties.titleColor,
                            titleFontFamily: StandardObjectProperties.fontFamily,
                            titleFontSize: StandardObjectProperties.titleFontSize,
                            titleText: StandardObjectProperties.titleText,
                            gridlineShow: __assign({}, StandardObjectProperties.show, {
                                displayName: createDisplayNameGetter("Visual_Gridline_Show")
                            }),
                            gridlineColor: StandardObjectProperties.lineColor,
                            gridlineThickness: StandardObjectProperties.strokeWidth,
                            gridlineStyle: StandardObjectProperties.lineStyle
                        }
                    },
                    dataPoint: {
                        displayName: createDisplayNameGetter("Visual_DataPoint"),
                        description: createDisplayNameGetter("Visual_DataPointDescription"),
                        properties: {
                            defaultColor: StandardObjectProperties.defaultColor,
                            fill: StandardObjectProperties.fill
                        }
                    },
                    labels: {
                        displayName: createDisplayNameGetter("Visual_DataPointsLabels"),
                        description: createDisplayNameGetter("Visual_DataPointsLabelsDescription"),
                        properties: {
                            show: StandardObjectProperties.show,
                            showSeries: {
                                displayName: createDisplayNameGetter("Visual_Show"),
                                type: {
                                    bool: !0
                                }
                            },
                            color: StandardObjectProperties.dataColor,
                            labelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits,
                            labelPrecision: __assign({}, StandardObjectProperties.labelPrecision, {
                                suppressFormatPainterCopy: !0
                            }),
                            showAll: {
                                displayName: createDisplayNameGetter("Visual_LabelSeriesShowAll"),
                                type: {
                                    bool: !0
                                }
                            },
                            fontSize: StandardObjectProperties.fontSize,
                            fontFamily: StandardObjectProperties.fontFamily,
                            labelDensity: {
                                displayName: createDisplayNameGetter("Visual_LabelDensity"),
                                type: {
                                    formatting: {
                                        labelDensity: !0
                                    }
                                }
                            }
                        }
                    },
                    lineStyles: {
                        displayName: createDisplayNameGetter("Visual_Shapes"),
                        description: createDisplayNameGetter("Visual_ShapesDescription"),
                        properties: {
                            strokeWidth: StandardObjectProperties.strokeWidth,
                            strokeLineJoin: StandardObjectProperties.strokeLineJoin,
                            lineStyle: StandardObjectProperties.lineStyle,
                            showMarker: StandardObjectProperties.showMarker,
                            markerShape: StandardObjectProperties.markerShape,
                            markerSize: StandardObjectProperties.markerSize,
                            markerColor: StandardObjectProperties.markerColor,
                            showSeries: {
                                displayName: createDisplayNameGetter("Visual_LabelSeriesShowAll"),
                                type: {
                                    bool: !0
                                }
                            }
                        }
                    },
                    plotArea: {
                        displayName: createDisplayNameGetter("Visual_Plot"),
                        properties: {
                            transparency: StandardObjectProperties.transparency,
                            image: StandardObjectProperties.image
                        }
                    },
                    trend: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line"),
                        suppressFormatPainterCopy: !0,
                        properties: {
                            show: StandardObjectProperties.show,
                            displayName: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_DisplayName"),
                                description: createDisplayNameGetter("Visual_Trend_Line_DisplayName_Description"),
                                type: {
                                    text: !0
                                }
                            },
                            lineColor: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_Color"),
                                description: createDisplayNameGetter("Visual_Trend_Line_Color_Description"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            transparency: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_Transparency"),
                                description: createDisplayNameGetter("Visual_Trend_Line_Transparency_Description"),
                                type: {
                                    numeric: !0
                                }
                            },
                            style: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_Style"),
                                description: createDisplayNameGetter("Visual_Trend_Line_Style_Description"),
                                type: {
                                    enumeration: visuals.lineStyle.type
                                }
                            },
                            combineSeries: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_Combine_Series"),
                                description: createDisplayNameGetter("Visual_Trend_Line_Combine_Series_Description"),
                                type: {
                                    bool: !0
                                }
                            },
                            useHighlightValues: {
                                displayName: createDisplayNameGetter("Visual_Trend_Line_UseHighlightValues"),
                                description: createDisplayNameGetter("Visual_Trend_Line_UseHighlightValues_Description"),
                                type: {
                                    bool: !0
                                }
                            }
                        }
                    },
                    scalarKey: {
                        properties: {
                            min: {
                                type: {
                                    dateTime: !0
                                }
                            }
                        }
                    },
                    y1AxisReferenceLine: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Description"),
                        suppressFormatPainterCopy: !0,
                        properties: {
                            show: StandardObjectProperties.show,
                            displayName: {
                                displayName: createDisplayNameGetter("Visual_Reference_Line_DisplayName"),
                                description: createDisplayNameGetter("Visual_Reference_Line_DisplayName_Description"),
                                type: {
                                    text: !0
                                }
                            },
                            value: {
                                displayName: createDisplayNameGetter("Visual_Reference_Line_Value"),
                                description: createDisplayNameGetter("Visual_Reference_Line_Value_Description"),
                                type: {
                                    numeric: !0
                                }
                            },
                            lineColor: StandardObjectProperties.lineColor,
                            transparency: {
                                displayName: createDisplayNameGetter("Visual_Reference_Line_Transparency"),
                                description: createDisplayNameGetter("Visual_Reference_Line_Transparency_Description"),
                                type: {
                                    numeric: !0
                                }
                            },
                            style: StandardObjectProperties.lineStyle,
                            position: StandardObjectProperties.referenceLinePosition,
                            dataLabelShow: StandardObjectProperties.dataLabelShow,
                            dataLabelColor: StandardObjectProperties.dataLabelColor,
                            dataLabelText: StandardObjectProperties.dataLabelText,
                            dataLabelDecimalPoints: StandardObjectProperties.dataLabelDecimalPoints,
                            dataLabelHorizontalPosition: StandardObjectProperties.dataLabelHorizontalPosition,
                            dataLabelVerticalPosition: StandardObjectProperties.dataLabelVerticalPosition,
                            dataLabelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits
                        }
                    },
                    filters: {
                        properties: {
                            filteredToUniqueValue: {
                                type: {
                                    bool: !0
                                }
                            }
                        }
                    }
                },
                dataViewMappings: [ getLineChartDataViewMapping(), {
                    conditions: [ {
                        Series: {
                            max: 0
                        }
                    }, {
                        Series: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            max: 1
                        }
                    } ],
                    requiredProperties: [ {
                        objectName: "trend",
                        propertyName: "show"
                    } ],
                    usage: {
                        regression: {
                            combineSeries: {
                                objectName: "trend",
                                propertyName: "combineSeries"
                            }
                        }
                    },
                    categorical: {
                        categories: {
                            for: {
                                in: "regression.X"
                            }
                        },
                        values: {
                            group: {
                                by: "regression.Series",
                                select: [ {
                                    for: {
                                        in: "regression.Y"
                                    }
                                } ]
                            }
                        }
                    }
                }, {
                    conditions: [ {
                        Series: {
                            max: 0
                        },
                        Y: {
                            max: 1
                        }
                    } ],
                    requiredProperties: [ {
                        objectName: "forecast",
                        propertyName: "show"
                    } ],
                    usage: {
                        forecast: {}
                    },
                    categorical: {
                        categories: {
                            for: {
                                in: "Category"
                            }
                        },
                        values: {
                            group: {
                                by: "Series",
                                select: [ {
                                    for: {
                                        in: "forecast.ForecastValue"
                                    }
                                }, {
                                    for: {
                                        in: "forecast.ConfidenceHighBound"
                                    }
                                }, {
                                    for: {
                                        in: "forecast.ConfidenceLowBound"
                                    }
                                } ]
                            }
                        }
                    }
                } ],
                sorting: {
                    default: {}
                },
                drilldown: {
                    roles: [ "Category" ]
                }
            };
            return isStacked || (lineChartCapabilities.objects.referenceLine = {
                displayName: createDisplayNameGetter("Visual_Reference_Line"),
                description: createDisplayNameGetter("Visual_Reference_Line_Description"),
                suppressFormatPainterCopy: !0,
                properties: {
                    show: StandardObjectProperties.show,
                    displayName: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_DisplayName"),
                        description: createDisplayNameGetter("Visual_Reference_Line_DisplayName_Description"),
                        type: {
                            text: !0
                        }
                    },
                    value: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_Value"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Value_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    lineColor: StandardObjectProperties.lineColor,
                    transparency: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_Transparency"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Transparency_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    style: StandardObjectProperties.lineStyle,
                    position: StandardObjectProperties.referenceLinePosition,
                    dataLabelShow: StandardObjectProperties.dataLabelShow,
                    dataLabelColor: StandardObjectProperties.dataLabelColor,
                    dataLabelText: StandardObjectProperties.dataLabelText,
                    dataLabelDecimalPoints: StandardObjectProperties.dataLabelDecimalPoints,
                    dataLabelHorizontalPosition: StandardObjectProperties.dataLabelHorizontalPosition,
                    dataLabelVerticalPosition: StandardObjectProperties.dataLabelVerticalPosition,
                    dataLabelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits
                }
            }), isStacked || isArea || (lineChartCapabilities.objects.forecast = {
                displayName: createDisplayNameGetter("Visual_Forecast"),
                suppressFormatPainterCopy: !0,
                properties: {
                    show: StandardObjectProperties.show,
                    displayName: {
                        displayName: createDisplayNameGetter("Visual_Forecast_DisplayName"),
                        description: createDisplayNameGetter("Visual_Forecast_DisplayName_Description"),
                        type: {
                            text: !0
                        }
                    },
                    confidenceBandStyle: {
                        displayName: createDisplayNameGetter("Visual_Forecast_Confidence_Band_Style"),
                        description: createDisplayNameGetter("Visual_Forecast_Confidence_Band_Style_Description"),
                        type: {
                            enumeration: visuals.confidenceBandStyle.type
                        }
                    },
                    lineColor: {
                        displayName: createDisplayNameGetter("Visual_Forecast_Line_Color"),
                        description: createDisplayNameGetter("Visual_Forecast_Line_Color_Description"),
                        type: {
                            fill: {
                                solid: {
                                    color: !0
                                }
                            }
                        }
                    },
                    transparency: StandardObjectProperties.transparency,
                    style: StandardObjectProperties.lineStyle,
                    transform: {
                        type: {
                            queryTransform: {}
                        }
                    }
                }
            }), lineChartCapabilities;
        }
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.getLineChartCapabilities = getLineChartCapabilities, visuals.lineChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            },
            trend: {
                show: {
                    objectName: "trend",
                    propertyName: "show"
                }
            },
            forecast: {
                show: {
                    objectName: "forecast",
                    propertyName: "show"
                }
            },
            categoryAxis: {
                axisType: {
                    objectName: "categoryAxis",
                    propertyName: "axisType"
                }
            },
            legend: {
                labelColor: {
                    objectName: "legend",
                    propertyName: "labelColor"
                },
                legendMarkerRendering: {
                    objectName: "legend",
                    propertyName: "legendMarkerRendering"
                },
                defaultToCircle: {
                    objectName: "legend",
                    propertyName: "defaultToCircle"
                },
                matchLineColor: {
                    objectName: "legend",
                    propertyName: "matchLineColor"
                }
            },
            labels: {
                labelDensity: {
                    objectName: "labels",
                    propertyName: "labelDensity"
                }
            },
            plotArea: {
                image: {
                    objectName: "plotArea",
                    propertyName: "image"
                },
                transparency: {
                    objectName: "plotArea",
                    propertyName: "transparency"
                }
            },
            lineStyles: {
                shadeArea: {
                    objectName: "lineStyles",
                    propertyName: "shadeArea"
                },
                strokeWidth: {
                    objectName: "lineStyles",
                    propertyName: "strokeWidth"
                },
                strokeLineJoin: {
                    objectName: "lineStyles",
                    propertyName: "strokeLineJoin"
                },
                lineStyle: {
                    objectName: "lineStyles",
                    propertyName: "lineStyle"
                },
                showMarker: {
                    objectName: "lineStyles",
                    propertyName: "showMarker"
                },
                markerShape: {
                    objectName: "lineStyles",
                    propertyName: "markerShape"
                },
                markerSize: {
                    objectName: "lineStyles",
                    propertyName: "markerSize"
                },
                markerColor: {
                    objectName: "lineStyles",
                    propertyName: "markerColor"
                },
                showSeries: {
                    objectName: "lineStyles",
                    propertyName: "showSeries"
                }
            }
        };
        var LineChartDataReduction;
        !(function(LineChartDataReduction) {
            function applyLegacySampling(mapping) {
                var categorical = mapping.categorical;
                categorical && (categorical.dataReductionAlgorithm = void 0, categorical.categories.dataReductionAlgorithm = {
                    sample: {}
                }, categorical.values.group.dataReductionAlgorithm = {
                    top: {}
                });
            }
            function applyWindow(mapping) {
                var categorical = mapping.categorical;
                categorical && (categorical.dataReductionAlgorithm = void 0, categorical.categories.dataReductionAlgorithm = {
                    window: {
                        count: 200
                    }
                }, categorical.values.group.dataReductionAlgorithm = {
                    top: {
                        count: 60
                    }
                });
            }
            function applyBinnedSampling(mapping) {
                var categorical = mapping.categorical;
                categorical && (categorical.dataReductionAlgorithm = {
                    binnedLineSample: {}
                }, categorical.categories.dataReductionAlgorithm = void 0, categorical.values.group.dataReductionAlgorithm = void 0);
            }
            LineChartDataReduction.applyLegacySampling = applyLegacySampling, LineChartDataReduction.applyWindow = applyWindow, 
            LineChartDataReduction.applyBinnedSampling = applyBinnedSampling;
        })(LineChartDataReduction = visuals.LineChartDataReduction || (visuals.LineChartDataReduction = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function applyImprovedMapLegendMappings(oldPlugin, improvedMapLegend, filled) {
            if (!improvedMapLegend) return oldPlugin;
            var pluginNew = powerbi.Prototype.inherit(oldPlugin);
            return pluginNew.capabilities = powerbi.Prototype.inherit(oldPlugin.capabilities), 
            pluginNew.capabilities.dataViewMappings = _.map(oldPlugin.capabilities.dataViewMappings, (function(mapping) {
                return _.cloneDeep(mapping);
            })), filled ? (pluginNew.capabilities.dataViewMappings[0].conditions = [ {
                Category: {},
                Series: {
                    max: 1
                },
                X: {
                    max: 1
                },
                Y: {
                    max: 1
                },
                Size: {
                    min: 1,
                    max: 1
                }
            }, {
                Category: {},
                Series: {
                    max: 1
                },
                X: {
                    min: 1,
                    max: 1
                },
                Y: {
                    max: 1
                },
                Size: {
                    max: 1
                }
            }, {
                Category: {},
                Series: {
                    max: 1
                },
                X: {
                    max: 1
                },
                Y: {
                    min: 1,
                    max: 1
                },
                Size: {
                    max: 1
                }
            }, {
                Category: {},
                Series: {
                    max: 1
                },
                X: {
                    max: 1
                },
                Y: {
                    max: 1
                },
                Size: {
                    max: 1
                },
                Tooltips: {
                    min: 1
                }
            }, {
                Category: {},
                Series: {
                    max: 0
                },
                X: {
                    max: 1
                },
                Y: {
                    max: 1
                },
                Size: {
                    max: 1
                }
            } ], pluginNew.capabilities.dataViewMappings.push({
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 1,
                        min: 1
                    },
                    X: {
                        max: 0
                    },
                    Y: {
                        max: 0
                    },
                    Size: {
                        max: 0
                    },
                    Tooltips: {
                        max: 0
                    }
                } ],
                matrix: {
                    rows: {
                        select: [ {
                            bind: {
                                to: "Series"
                            }
                        }, {
                            composite: [ {
                                for: {
                                    in: "Category"
                                }
                            } ]
                        } ],
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    dataVolume: 4
                }
            })) : (pluginNew.capabilities.dataViewMappings[0].conditions = [ {
                Category: {
                    min: 1
                },
                Series: {
                    max: 1
                },
                X: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Measure
                },
                Y: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Measure
                },
                Size: {
                    max: 1,
                    min: 1
                },
                Gradient: {
                    max: 0
                }
            }, {
                Category: {
                    min: 1
                },
                Series: {
                    max: 1
                },
                X: {
                    max: 1,
                    min: 1,
                    kind: powerbi.VisualDataRoleKind.Measure
                },
                Y: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Measure
                },
                Size: {
                    max: 1
                },
                Gradient: {
                    max: 0
                }
            }, {
                Category: {
                    min: 1
                },
                Series: {
                    max: 1
                },
                X: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Measure
                },
                Y: {
                    max: 1,
                    min: 1,
                    kind: powerbi.VisualDataRoleKind.Measure
                },
                Size: {
                    max: 1
                },
                Gradient: {
                    max: 0
                }
            }, {
                Category: {
                    min: 1
                },
                Series: {
                    max: 1
                },
                X: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Measure
                },
                Y: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Measure
                },
                Size: {
                    max: 1
                },
                Gradient: {
                    max: 0
                },
                Tooltips: {
                    min: 1
                }
            }, {
                Category: {
                    min: 1
                },
                Series: {
                    max: 0
                },
                X: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Measure
                },
                Y: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Measure
                },
                Size: {
                    max: 1
                },
                Gradient: {
                    max: 1
                }
            } ], pluginNew.capabilities.dataViewMappings[1].conditions = [ {
                Category: {
                    max: 0
                },
                Series: {
                    max: 1
                },
                X: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Grouping
                },
                Y: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Grouping
                },
                Size: {
                    max: 1,
                    min: 1
                },
                Gradient: {
                    max: 0
                }
            }, {
                Category: {
                    max: 0
                },
                Series: {
                    max: 1
                },
                X: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Grouping
                },
                Y: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Grouping
                },
                Size: {
                    max: 1
                },
                Gradient: {
                    max: 0
                },
                Tooltips: {
                    min: 1
                }
            }, {
                Category: {
                    max: 0
                },
                Series: {
                    max: 0
                },
                X: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Grouping
                },
                Y: {
                    max: 1,
                    kind: powerbi.VisualDataRoleKind.Grouping
                },
                Size: {
                    max: 1
                },
                Gradient: {
                    max: 1
                }
            } ], pluginNew.capabilities.dataViewMappings.push({
                conditions: [ {
                    Category: {
                        max: 1,
                        min: 1
                    },
                    Series: {
                        max: 1,
                        min: 1
                    },
                    X: {
                        max: 0
                    },
                    Y: {
                        max: 0
                    },
                    Size: {
                        max: 0
                    },
                    Gradient: {
                        max: 0
                    },
                    Tooltips: {
                        max: 0
                    }
                } ],
                matrix: {
                    rows: {
                        select: [ {
                            bind: {
                                to: "Series"
                            }
                        }, {
                            composite: [ {
                                for: {
                                    in: "Category"
                                }
                            } ]
                        } ],
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    dataVolume: 4
                }
            }), pluginNew.capabilities.dataViewMappings.push({
                conditions: [ {
                    Category: {
                        max: 0
                    },
                    Series: {
                        max: 1,
                        min: 1
                    },
                    X: {
                        max: 1,
                        kind: powerbi.VisualDataRoleKind.Grouping
                    },
                    Y: {
                        max: 1,
                        kind: powerbi.VisualDataRoleKind.Grouping
                    },
                    Size: {
                        max: 0
                    },
                    Gradient: {
                        max: 0
                    },
                    Tooltips: {
                        max: 0
                    }
                } ],
                matrix: {
                    rows: {
                        select: [ {
                            bind: {
                                to: "Series"
                            }
                        }, {
                            composite: [ {
                                bind: {
                                    to: "X"
                                }
                            }, {
                                bind: {
                                    to: "Y"
                                }
                            } ]
                        } ],
                        dataReductionAlgorithm: {
                            sample: {}
                        }
                    },
                    dataVolume: 4
                }
            })), pluginNew;
        }
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.mapCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Location"),
                description: createDisplayNameGetter("Role_DisplayName_LocationMapDescription"),
                preferredTypes: [ {
                    geography: {
                        address: !0
                    }
                }, {
                    geography: {
                        city: !0
                    }
                }, {
                    geography: {
                        continent: !0
                    }
                }, {
                    geography: {
                        country: !0
                    }
                }, {
                    geography: {
                        county: !0
                    }
                }, {
                    geography: {
                        place: !0
                    }
                }, {
                    geography: {
                        postalCode: !0
                    }
                }, {
                    geography: {
                        region: !0
                    }
                }, {
                    geography: {
                        stateOrProvince: !0
                    }
                } ]
            }, {
                name: "Series",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Legend"),
                description: createDisplayNameGetter("Role_DisplayName_LegendDescription")
            }, {
                name: "Y",
                kind: powerbi.VisualDataRoleKind.GroupingOrMeasure,
                displayName: createDisplayNameGetter("Role_DisplayName_Latitude"),
                description: createDisplayNameGetter("Role_DisplayName_LatitudeMapDescription"),
                preferredTypes: [ {
                    geography: {
                        latitude: !0
                    }
                } ]
            }, {
                name: "X",
                kind: powerbi.VisualDataRoleKind.GroupingOrMeasure,
                displayName: createDisplayNameGetter("Role_DisplayName_Longitude"),
                description: createDisplayNameGetter("Role_DisplayName_LongitudeMapDescription"),
                preferredTypes: [ {
                    geography: {
                        longitude: !0
                    }
                } ]
            }, {
                name: "Size",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Size"),
                description: createDisplayNameGetter("Role_DisplayName_SizeDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: "Gradient",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Gradient"),
                description: createDisplayNameGetter("Role_DisplayName_GradientDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ],
                joinPredicate: 0
            }, {
                name: "Tooltips",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                joinPredicate: 0
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                legend: visuals.StandardObjectDescriptors.legend,
                dataPoint: {
                    displayName: createDisplayNameGetter("Visual_DataPoint"),
                    description: createDisplayNameGetter("Visual_DataPointDescription"),
                    properties: {
                        defaultColor: StandardObjectProperties.defaultColor,
                        defaultCategoryColor: StandardObjectProperties.defaultCategoryColor,
                        showAllDataPoints: StandardObjectProperties.showAllDataPoints,
                        fill: StandardObjectProperties.fill,
                        fillRule: {
                            displayName: createDisplayNameGetter("Visual_Gradient"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                inputRole: "Gradient",
                                output: {
                                    property: "fill",
                                    selector: [ "Category", "X", "Y" ]
                                }
                            }
                        }
                    }
                },
                categoryLabels: {
                    displayName: createDisplayNameGetter("Visual_CategoryLabels"),
                    description: createDisplayNameGetter("Visual_CategoryLabelsDescription"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                bubbles: {
                    displayName: createDisplayNameGetter("Visual_Bubbles"),
                    description: createDisplayNameGetter("Visual_BubblesDescription"),
                    properties: {
                        bubbleSize: {
                            displayName: createDisplayNameGetter("Visual_BubbleSize"),
                            type: {
                                formatting: {
                                    bubbleSize: !0
                                }
                            }
                        }
                    }
                },
                mapControls: {
                    displayName: createDisplayNameGetter("Visual_MapControls"),
                    description: createDisplayNameGetter("Visual_MapControlsDescription"),
                    properties: {
                        autoZoom: {
                            displayName: createDisplayNameGetter("Visual_AutoZoom"),
                            type: {
                                bool: !0
                            }
                        },
                        zoomLevel: {
                            type: {
                                numeric: !0
                            }
                        },
                        centerLatitude: {
                            type: {
                                numeric: !0
                            }
                        },
                        centerLongitude: {
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                mapStyles: {
                    displayName: createDisplayNameGetter("Visual_MapStyles"),
                    description: createDisplayNameGetter("Visual_MapStylesDescription"),
                    properties: {
                        mapTheme: {
                            displayName: createDisplayNameGetter("Visual_MapTheme"),
                            type: {
                                enumeration: visuals.BingMapTheme.type
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        min: 1
                    },
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1,
                        kind: powerbi.VisualDataRoleKind.Measure
                    },
                    Y: {
                        max: 1,
                        kind: powerbi.VisualDataRoleKind.Measure
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    }
                }, {
                    Category: {
                        min: 1
                    },
                    Series: {
                        max: 0
                    },
                    X: {
                        max: 1,
                        kind: powerbi.VisualDataRoleKind.Measure
                    },
                    Y: {
                        max: 1,
                        kind: powerbi.VisualDataRoleKind.Measure
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        for: {
                            in: "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                bind: {
                                    to: "X"
                                }
                            }, {
                                bind: {
                                    to: "Y"
                                }
                            }, {
                                bind: {
                                    to: "Size"
                                }
                            }, {
                                bind: {
                                    to: "Gradient"
                                }
                            }, {
                                for: {
                                    in: "Tooltips"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        }
                    },
                    dataVolume: 4
                }
            }, {
                conditions: [ {
                    Category: {
                        max: 0
                    },
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1,
                        kind: powerbi.VisualDataRoleKind.Grouping
                    },
                    Y: {
                        max: 1,
                        kind: powerbi.VisualDataRoleKind.Grouping
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 0
                    },
                    Series: {
                        max: 0
                    },
                    X: {
                        max: 1,
                        kind: powerbi.VisualDataRoleKind.Grouping
                    },
                    Y: {
                        max: 1,
                        kind: powerbi.VisualDataRoleKind.Grouping
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        select: [ {
                            bind: {
                                to: "X"
                            }
                        }, {
                            bind: {
                                to: "Y"
                            }
                        } ],
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                bind: {
                                    to: "Size"
                                }
                            }, {
                                bind: {
                                    to: "Gradient"
                                }
                            }, {
                                for: {
                                    in: "Tooltips"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        }
                    },
                    dataVolume: 4
                }
            } ],
            sorting: {
                custom: {},
                implicit: {
                    clauses: [ {
                        role: "Size",
                        direction: 2
                    } ]
                }
            },
            drilldown: {
                roles: [ "Category" ]
            },
            grouping: {
                groupingRules: [ {
                    condition: {
                        Category: {
                            min: 1,
                            max: 1
                        },
                        X: {
                            max: 1
                        },
                        Y: {
                            max: 1
                        },
                        Gradient: {
                            max: 0
                        }
                    },
                    groupingTargetRole: "Series",
                    kind: 0
                } ]
            }
        }, visuals.mapProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                defaultCategoryColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultCategoryColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                },
                showAllDataPoints: {
                    objectName: "dataPoint",
                    propertyName: "showAllDataPoints"
                }
            },
            legend: {
                show: {
                    objectName: "legend",
                    propertyName: "show"
                },
                position: {
                    objectName: "legend",
                    propertyName: "position"
                },
                showTitle: {
                    objectName: "legend",
                    propertyName: "showTitle"
                },
                titleText: {
                    objectName: "legend",
                    propertyName: "titleText"
                }
            },
            bubbles: {
                bubbleSize: {
                    objectName: "bubbles",
                    propertyName: "bubbleSize"
                }
            },
            mapControls: {
                autoZoom: {
                    objectName: "mapControls",
                    propertyName: "autoZoom"
                },
                zoomLevel: {
                    objectName: "mapControls",
                    propertyName: "zoomLevel"
                },
                centerLatitude: {
                    objectName: "mapControls",
                    propertyName: "centerLatitude"
                },
                centerLongitude: {
                    objectName: "mapControls",
                    propertyName: "centerLongitude"
                }
            },
            mapStyles: {
                mapTheme: {
                    objectName: "mapStyles",
                    propertyName: "mapTheme"
                }
            }
        }, visuals.applyImprovedMapLegendMappings = applyImprovedMapLegendMappings;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.multiRowCardCapabilities = {
            dataRoles: [ {
                name: "Values",
                kind: powerbi.VisualDataRoleKind.GroupingOrMeasure,
                displayName: createDisplayNameGetter("Role_DisplayName_Fields"),
                description: createDisplayNameGetter("Role_DisplayName_FieldsDescription")
            } ],
            objects: {
                general: {
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                dataLabels: {
                    displayName: createDisplayNameGetter("Visual_DataPointsLabels"),
                    description: createDisplayNameGetter("Visual_DataPointsLabelsDescription"),
                    properties: {
                        color: StandardObjectProperties.dataColor,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                categoryLabels: {
                    displayName: createDisplayNameGetter("Visual_CategoryLabels"),
                    description: createDisplayNameGetter("Visual_CategoryLabelsDescription"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                cardTitle: {
                    displayName: createDisplayNameGetter("Visual_CardTitle"),
                    description: createDisplayNameGetter("Visual_CardTitleDescription"),
                    properties: {
                        color: StandardObjectProperties.dataColor,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                card: {
                    displayName: createDisplayNameGetter("Card_ToolTip"),
                    properties: {
                        outline: {
                            displayName: createDisplayNameGetter("Visual_Outline"),
                            type: {
                                enumeration: visuals.outline.type
                            }
                        },
                        outlineColor: {
                            displayName: createDisplayNameGetter("Visual_OutlineColor"),
                            description: createDisplayNameGetter("Visual_OutlineColor_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        outlineWeight: {
                            displayName: createDisplayNameGetter("Visual_OutlineWeight"),
                            description: createDisplayNameGetter("Visual_OutlineWeight_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        barShow: {
                            displayName: createDisplayNameGetter("Visual_MultiRowCard_BarShow"),
                            description: createDisplayNameGetter("Visual_MultiRowCard_BarShow_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        barColor: {
                            displayName: createDisplayNameGetter("Visual_MultiRowCard_BarColor"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        barWeight: {
                            displayName: createDisplayNameGetter("Visual_MultiRowCard_BarWeight"),
                            description: createDisplayNameGetter("Visual_MultiRowCard_BarWeight_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        cardPadding: {
                            displayName: createDisplayNameGetter("Visual_MultiRowCard_CardPadding"),
                            description: createDisplayNameGetter("Visual_MultiRowCard_CardBackground"),
                            type: {
                                numeric: !0
                            }
                        },
                        cardBackground: {
                            displayName: createDisplayNameGetter("Visual_Background"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                table: {
                    rows: {
                        for: {
                            in: "Values"
                        },
                        dataReductionAlgorithm: {
                            window: {}
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 1
                        }
                    }
                }
            } ],
            sorting: {
                default: {}
            },
            suppressDefaultTitle: !0,
            supportsSelection: !1,
            disableVisualDetails: !0
        }, visuals.multiRowCardProps = {
            card: {
                outline: {
                    objectName: "card",
                    propertyName: "outline"
                },
                outlineColor: {
                    objectName: "card",
                    propertyName: "outlineColor"
                },
                outlineWeight: {
                    objectName: "card",
                    propertyName: "outlineWeight"
                },
                barShow: {
                    objectName: "card",
                    propertyName: "barShow"
                },
                barColor: {
                    objectName: "card",
                    propertyName: "barColor"
                },
                barWeight: {
                    objectName: "card",
                    propertyName: "barWeight"
                },
                cardPadding: {
                    objectName: "card",
                    propertyName: "cardPadding"
                },
                cardBackground: {
                    objectName: "card",
                    propertyName: "cardBackground"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        visuals.textboxCapabilities = {
            objects: {
                general: {
                    properties: {
                        paragraphs: {
                            type: {
                                paragraphs: {}
                            },
                            suppressFormatPainterCopy: !0
                        }
                    }
                }
            },
            suppressDefaultTitle: !0,
            supportsSelection: !1
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter;
        visuals.cheerMeterCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Axis"),
                description: createDisplayNameGetter("Role_DisplayName_AxisDescription")
            }, {
                name: "Y",
                kind: powerbi.VisualDataRoleKind.Measure,
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ],
                displayName: createDisplayNameGetter("Role_DisplayName_Y"),
                description: createDisplayNameGetter("Role_DisplayName_YDescription")
            } ],
            dataViewMappings: [ {
                categorical: {
                    categories: {
                        for: {
                            in: "Category"
                        }
                    }
                }
            } ],
            objects: {
                dataPoint: {
                    displayName: createDisplayNameGetter("Visual_DataPoint"),
                    description: createDisplayNameGetter("Visual_DataPointDescription"),
                    properties: {
                        fill: visuals.StandardObjectProperties.fill
                    }
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function getScatterChartCapabilities(useMatrixDV, overlappingPointsSampling) {
            return {
                dataRoles: [ {
                    name: "Category",
                    kind: powerbi.VisualDataRoleKind.Grouping,
                    displayName: createDisplayNameGetter("Role_DisplayName_Details"),
                    description: createDisplayNameGetter("Role_DisplayName_DetailsScatterChartDescription")
                }, {
                    name: "Series",
                    kind: powerbi.VisualDataRoleKind.Grouping,
                    displayName: createDisplayNameGetter("Role_DisplayName_Legend"),
                    description: createDisplayNameGetter("Role_DisplayName_LegendDescription")
                }, {
                    name: "X",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_DisplayName_X"),
                    description: createDisplayNameGetter("Role_DisplayName_XScatterChartDescription"),
                    requiredTypes: [ {
                        numeric: !0
                    }, {
                        integer: !0
                    } ],
                    cartesianKind: 0
                }, {
                    name: "Y",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_DisplayName_Y"),
                    description: createDisplayNameGetter("Role_DisplayName_YScatterChartDescription"),
                    requiredTypes: [ {
                        numeric: !0
                    }, {
                        integer: !0
                    } ],
                    cartesianKind: 1
                }, {
                    name: "Size",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_DisplayName_Size"),
                    description: createDisplayNameGetter("Role_DisplayName_SizeDescription"),
                    requiredTypes: [ {
                        numeric: !0
                    }, {
                        integer: !0
                    } ]
                }, {
                    name: "Gradient",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_DisplayName_Gradient"),
                    description: createDisplayNameGetter("Role_DisplayName_GradientDescription"),
                    requiredTypes: [ {
                        numeric: !0
                    }, {
                        integer: !0
                    } ],
                    joinPredicate: 0
                }, {
                    name: "Play",
                    kind: powerbi.VisualDataRoleKind.Grouping,
                    displayName: createDisplayNameGetter("Role_DisplayName_Play")
                }, {
                    name: "Tooltips",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                    joinPredicate: 0
                } ],
                objects: visuals.scatterChartObjectDescriptors,
                dataViewMappings: getDataViewMappings(useMatrixDV, overlappingPointsSampling),
                sorting: {
                    custom: {},
                    implicit: {
                        clauses: [ {
                            role: "Play",
                            direction: 1
                        } ]
                    }
                },
                drilldown: {
                    roles: [ "Category" ]
                },
                grouping: {
                    groupingRules: [ {
                        condition: {
                            Category: {
                                min: 1,
                                max: 1
                            },
                            X: {
                                min: 1,
                                max: 1
                            },
                            Y: {
                                min: 1,
                                max: 1
                            },
                            Play: {
                                max: 1
                            }
                        },
                        groupingTargetRole: "Category",
                        kind: 1
                    }, {
                        condition: {
                            Category: {
                                min: 1,
                                max: 1
                            },
                            X: {
                                max: 1
                            },
                            Y: {
                                max: 1
                            },
                            Play: {
                                max: 1
                            }
                        },
                        groupingTargetRole: "Series",
                        kind: 0
                    }, {
                        condition: {
                            Category: {
                                min: 1,
                                max: 1
                            },
                            X: {
                                min: 1,
                                max: 1
                            },
                            Y: {
                                min: 1,
                                max: 1
                            },
                            Series: {
                                max: 0
                            },
                            Gradient: {
                                max: 1
                            },
                            Play: {
                                max: 1
                            }
                        },
                        groupingTargetRole: "Category",
                        kind: 1
                    } ],
                    cluster: {
                        clusteringRole: "Series",
                        conditions: [ {
                            Category: {
                                min: 1,
                                max: 1
                            },
                            X: {
                                min: 1,
                                max: 1
                            },
                            Y: {
                                min: 1,
                                max: 1
                            },
                            Series: {
                                max: 0
                            },
                            Size: {
                                max: 1
                            },
                            Gradient: {
                                max: 0
                            },
                            Play: {
                                max: 0
                            }
                        } ]
                    }
                }
            };
        }
        function getDataViewMappings(useMatrixDV, overlappingPointsSampling) {
            return [ getScatterChartDataViewMapping(useMatrixDV, overlappingPointsSampling), getPlayChartDataViewMapping(useMatrixDV, overlappingPointsSampling), getTrendLinesDataViewMapping(useMatrixDV, overlappingPointsSampling) ];
        }
        function getScatterChartDataViewMapping(useMatrixDV, overlappingPointsSampling) {
            var mapping = {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    },
                    Play: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 0
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 1
                    },
                    Play: {
                        max: 0
                    }
                } ],
                categorical: {
                    categories: {
                        for: {
                            in: "Category"
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                bind: {
                                    to: "X"
                                }
                            }, {
                                bind: {
                                    to: "Y"
                                }
                            }, {
                                bind: {
                                    to: "Size"
                                }
                            }, {
                                bind: {
                                    to: "Gradient"
                                }
                            }, {
                                for: {
                                    in: "Tooltips"
                                }
                            } ]
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        }
                    },
                    dataReductionAlgorithm: {
                        sample: {}
                    },
                    dataVolume: 4
                }
            };
            if (useMatrixDV && (mapping = {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    },
                    Play: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 0
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 1
                    },
                    Play: {
                        max: 0
                    }
                } ],
                matrix: {
                    rows: {
                        select: [ {
                            bind: {
                                to: "Series"
                            }
                        }, {
                            composite: [ {
                                for: {
                                    in: "Category"
                                }
                            } ]
                        } ],
                        dataReductionAlgorithm: {
                            sample: {}
                        }
                    },
                    values: {
                        select: [ {
                            bind: {
                                to: "X"
                            }
                        }, {
                            bind: {
                                to: "Y"
                            }
                        }, {
                            bind: {
                                to: "Size"
                            }
                        }, {
                            bind: {
                                to: "Gradient"
                            }
                        }, {
                            for: {
                                in: "Tooltips"
                            }
                        } ]
                    },
                    dataVolume: 4
                }
            }), overlappingPointsSampling) {
                var reduction = {
                    overlappingPointsSample: {}
                };
                mapping.categorical && (mapping.categorical.dataReductionAlgorithm = reduction), 
                mapping.matrix && (mapping.matrix.rows.dataReductionAlgorithm = reduction);
            }
            return mapping;
        }
        function getPlayChartDataViewMapping(useMatrixDV, overlappingPointsSampling) {
            var mapping = {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    },
                    Play: {
                        min: 1,
                        max: 1
                    }
                } ],
                matrix: {
                    rows: {
                        select: [ {
                            bind: {
                                to: "Play"
                            }
                        }, {
                            bind: {
                                to: "Category"
                            }
                        } ],
                        dataReductionAlgorithm: {
                            bottom: {
                                count: 5e3
                            }
                        }
                    },
                    columns: {
                        for: {
                            in: "Series"
                        },
                        dataReductionAlgorithm: {
                            top: {
                                count: 60
                            }
                        }
                    },
                    values: {
                        select: [ {
                            bind: {
                                to: "X"
                            }
                        }, {
                            bind: {
                                to: "Y"
                            }
                        }, {
                            bind: {
                                to: "Size"
                            }
                        }, {
                            for: {
                                in: "Tooltips"
                            }
                        } ]
                    }
                }
            };
            return useMatrixDV && (mapping = {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    },
                    Play: {
                        min: 1,
                        max: 1
                    }
                } ],
                matrix: {
                    rows: {
                        select: [ {
                            bind: {
                                to: "Play"
                            }
                        }, {
                            bind: {
                                to: "Category"
                            }
                        } ],
                        dataReductionAlgorithm: {
                            bottom: {
                                count: 5e3
                            }
                        }
                    },
                    columns: {
                        for: {
                            in: "Series"
                        },
                        dataReductionAlgorithm: {
                            top: {
                                count: 60
                            }
                        }
                    },
                    values: {
                        select: [ {
                            bind: {
                                to: "X"
                            }
                        }, {
                            bind: {
                                to: "Y"
                            }
                        }, {
                            bind: {
                                to: "Size"
                            }
                        }, {
                            for: {
                                in: "Tooltips"
                            }
                        } ]
                    }
                }
            }), mapping;
        }
        function getTrendLinesDataViewMapping(useMatrixDV, overlappingPointsSampling) {
            var mapping = {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 0
                    },
                    Gradient: {
                        max: 0
                    },
                    Play: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 0
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 0
                    },
                    Gradient: {
                        max: 1
                    },
                    Play: {
                        max: 0
                    }
                } ],
                requiredProperties: [ {
                    objectName: "trend",
                    propertyName: "show"
                } ],
                usage: {
                    regression: {
                        combineSeries: {
                            objectName: "trend",
                            propertyName: "combineSeries"
                        }
                    }
                },
                categorical: {
                    categories: {
                        for: {
                            in: "regression.X"
                        }
                    },
                    values: {
                        group: {
                            by: "regression.Series",
                            select: [ {
                                for: {
                                    in: "regression.Y"
                                }
                            } ]
                        }
                    },
                    dataReductionAlgorithm: {
                        sample: {}
                    },
                    dataVolume: 4
                }
            };
            return useMatrixDV && (mapping = {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 0
                    },
                    Gradient: {
                        max: 0
                    },
                    Play: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 0
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 0
                    },
                    Gradient: {
                        max: 1
                    },
                    Play: {
                        max: 0
                    }
                } ],
                requiredProperties: [ {
                    objectName: "trend",
                    propertyName: "show"
                } ],
                usage: {
                    regression: {
                        combineSeries: {
                            objectName: "trend",
                            propertyName: "combineSeries"
                        }
                    }
                },
                matrix: {
                    rows: {
                        select: [ {
                            bind: {
                                to: "regression.Series"
                            }
                        }, {
                            bind: {
                                to: "regression.X"
                            }
                        } ],
                        dataReductionAlgorithm: {
                            sample: {}
                        }
                    },
                    values: {
                        select: [ {
                            for: {
                                in: "regression.Y"
                            }
                        } ]
                    },
                    dataVolume: 4
                }
            }), mapping;
        }
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.scatterRoleNames = {
            category: "Category",
            series: "Series",
            x: "X",
            y: "Y",
            size: "Size",
            gradient: "Gradient",
            play: "Play"
        }, visuals.getScatterChartCapabilities = getScatterChartCapabilities, visuals.scatterChartObjectDescriptors = {
            general: {
                displayName: createDisplayNameGetter("Visual_General"),
                properties: {
                    formatString: StandardObjectProperties.formatString,
                    responsive: StandardObjectProperties.responsive,
                    responsiveLegacy: StandardObjectProperties.responsiveLegacy,
                    dataVolume: {
                        displayName: createDisplayNameGetter("Visual_DataVolume"),
                        description: createDisplayNameGetter("Visual_DataVolumeDescription"),
                        type: {
                            integer: !0
                        }
                    }
                }
            },
            legend: visuals.StandardObjectDescriptors.legend,
            categoryAxis: {
                displayName: createDisplayNameGetter("Visual_XAxis"),
                properties: {
                    show: StandardObjectProperties.show,
                    axisScale: StandardObjectProperties.axisScale,
                    start: StandardObjectProperties.axisStart,
                    end: StandardObjectProperties.axisEnd,
                    showAxisTitle: {
                        displayName: createDisplayNameGetter("Visual_Axis_Title"),
                        description: createDisplayNameGetter("Visual_Axis_XTitleDescription"),
                        type: {
                            bool: !0
                        }
                    },
                    axisStyle: StandardObjectProperties.axisStyle,
                    labelColor: StandardObjectProperties.labelColor,
                    fontFamily: StandardObjectProperties.fontFamily,
                    fontSize: StandardObjectProperties.fontSize,
                    labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                    labelPrecision: StandardObjectProperties.labelPrecision,
                    titleColor: StandardObjectProperties.titleColor,
                    titleFontFamily: StandardObjectProperties.fontFamily,
                    titleFontSize: StandardObjectProperties.titleFontSize,
                    titleText: StandardObjectProperties.titleText,
                    gridlineShow: __assign({}, StandardObjectProperties.show, {
                        displayName: createDisplayNameGetter("Visual_Gridline_Show")
                    }),
                    gridlineColor: StandardObjectProperties.lineColor,
                    gridlineThickness: StandardObjectProperties.strokeWidth,
                    gridlineStyle: StandardObjectProperties.lineStyle
                }
            },
            valueAxis: {
                displayName: createDisplayNameGetter("Visual_YAxis"),
                properties: {
                    show: StandardObjectProperties.show,
                    position: StandardObjectProperties.yAxisPosition,
                    axisScale: StandardObjectProperties.axisScale,
                    start: StandardObjectProperties.axisStart,
                    end: StandardObjectProperties.axisEnd,
                    showAxisTitle: {
                        displayName: createDisplayNameGetter("Visual_Axis_Title"),
                        description: createDisplayNameGetter("Visual_Axis_YTitleDescription"),
                        type: {
                            bool: !0
                        }
                    },
                    axisStyle: StandardObjectProperties.axisStyle,
                    labelColor: StandardObjectProperties.labelColor,
                    fontFamily: StandardObjectProperties.fontFamily,
                    fontSize: StandardObjectProperties.fontSize,
                    labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                    labelPrecision: StandardObjectProperties.labelPrecision,
                    titleColor: StandardObjectProperties.titleColor,
                    titleFontFamily: StandardObjectProperties.fontFamily,
                    titleFontSize: StandardObjectProperties.titleFontSize,
                    titleText: StandardObjectProperties.titleText,
                    gridlineShow: __assign({}, StandardObjectProperties.show, {
                        displayName: createDisplayNameGetter("Visual_Gridline_Show")
                    }),
                    gridlineColor: StandardObjectProperties.lineColor,
                    gridlineThickness: StandardObjectProperties.strokeWidth,
                    gridlineStyle: StandardObjectProperties.lineStyle
                }
            },
            dataPoint: {
                displayName: createDisplayNameGetter("Visual_DataPoint"),
                description: createDisplayNameGetter("Visual_DataPointDescription"),
                properties: {
                    defaultColor: StandardObjectProperties.defaultColor,
                    defaultCategoryColor: StandardObjectProperties.defaultCategoryColor,
                    showAllDataPoints: StandardObjectProperties.showAllDataPoints,
                    fill: StandardObjectProperties.fill,
                    fillRule: {
                        displayName: createDisplayNameGetter("Visual_Gradient"),
                        type: {
                            fillRule: {}
                        },
                        rule: {
                            inputRole: "Gradient",
                            output: {
                                property: "fill",
                                selector: [ "Category" ]
                            }
                        }
                    }
                }
            },
            bubbles: {
                displayName: createDisplayNameGetter("Visual_Shapes"),
                description: createDisplayNameGetter("Visual_ShapesDescription"),
                properties: {
                    bubbleSize: {
                        displayName: createDisplayNameGetter("Visual_BubbleSize"),
                        type: {
                            formatting: {
                                bubbleSize: !0
                            }
                        }
                    },
                    markerShape: StandardObjectProperties.markerShape,
                    showSeries: {
                        displayName: createDisplayNameGetter("Visual_LabelSeriesShowAll"),
                        type: {
                            bool: !0
                        }
                    }
                }
            },
            plotArea: {
                displayName: createDisplayNameGetter("Visual_Plot"),
                properties: {
                    transparency: StandardObjectProperties.transparency,
                    image: StandardObjectProperties.image
                }
            },
            categoryLabels: {
                displayName: createDisplayNameGetter("Visual_CategoryLabels"),
                description: createDisplayNameGetter("Visual_CategoryLabelsDescription"),
                properties: {
                    show: StandardObjectProperties.show,
                    color: StandardObjectProperties.dataColor,
                    fontSize: StandardObjectProperties.fontSize,
                    fontFamily: StandardObjectProperties.fontFamily
                }
            },
            trend: {
                displayName: createDisplayNameGetter("Visual_Trend_Line"),
                suppressFormatPainterCopy: !0,
                properties: {
                    show: StandardObjectProperties.show,
                    displayName: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line_DisplayName"),
                        description: createDisplayNameGetter("Visual_Trend_Line_DisplayName_Description"),
                        type: {
                            text: !0
                        }
                    },
                    lineColor: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line_Color"),
                        description: createDisplayNameGetter("Visual_Trend_Line_Color_Description"),
                        type: {
                            fill: {
                                solid: {
                                    color: !0
                                }
                            }
                        }
                    },
                    transparency: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line_Transparency"),
                        description: createDisplayNameGetter("Visual_Trend_Line_Transparency_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    style: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line_Style"),
                        description: createDisplayNameGetter("Visual_Trend_Line_Style_Description"),
                        type: {
                            enumeration: visuals.lineStyle.type
                        }
                    },
                    combineSeries: {
                        displayName: createDisplayNameGetter("Visual_Trend_Line_Combine_Series"),
                        description: createDisplayNameGetter("Visual_Trend_Line_Combine_Series_Description"),
                        type: {
                            bool: !0
                        }
                    }
                }
            },
            xAxisReferenceLine: {
                displayName: createDisplayNameGetter("Visual_Reference_Line_X"),
                description: createDisplayNameGetter("Visual_Reference_Line_Description"),
                suppressFormatPainterCopy: !0,
                properties: {
                    show: StandardObjectProperties.show,
                    displayName: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_DisplayName"),
                        description: createDisplayNameGetter("Visual_Reference_Line_DisplayName_Description"),
                        type: {
                            text: !0
                        }
                    },
                    value: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_Value"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Value_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    lineColor: StandardObjectProperties.lineColor,
                    transparency: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_Transparency"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Transparency_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    style: StandardObjectProperties.lineStyle,
                    position: StandardObjectProperties.referenceLinePosition,
                    dataLabelShow: StandardObjectProperties.dataLabelShow,
                    dataLabelColor: StandardObjectProperties.dataLabelColor,
                    dataLabelText: StandardObjectProperties.dataLabelText,
                    dataLabelDecimalPoints: StandardObjectProperties.dataLabelDecimalPoints,
                    dataLabelHorizontalPosition: StandardObjectProperties.dataLabelHorizontalPosition,
                    dataLabelVerticalPosition: StandardObjectProperties.dataLabelVerticalPosition,
                    dataLabelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits
                }
            },
            y1AxisReferenceLine: {
                displayName: createDisplayNameGetter("Visual_Reference_Line_Y"),
                description: createDisplayNameGetter("Visual_Reference_Line_Description"),
                suppressFormatPainterCopy: !0,
                properties: {
                    show: StandardObjectProperties.show,
                    displayName: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_DisplayName"),
                        description: createDisplayNameGetter("Visual_Reference_Line_DisplayName_Description"),
                        type: {
                            text: !0
                        }
                    },
                    value: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_Value"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Value_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    lineColor: StandardObjectProperties.lineColor,
                    transparency: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_Transparency"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Transparency_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    style: StandardObjectProperties.lineStyle,
                    position: StandardObjectProperties.referenceLinePosition,
                    dataLabelShow: StandardObjectProperties.dataLabelShow,
                    dataLabelColor: StandardObjectProperties.dataLabelColor,
                    dataLabelText: StandardObjectProperties.dataLabelText,
                    dataLabelDecimalPoints: StandardObjectProperties.dataLabelDecimalPoints,
                    dataLabelHorizontalPosition: StandardObjectProperties.dataLabelHorizontalPosition,
                    dataLabelVerticalPosition: StandardObjectProperties.dataLabelVerticalPosition,
                    dataLabelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits
                }
            },
            referenceLine: {
                displayName: createDisplayNameGetter("Visual_Reference_Line"),
                description: createDisplayNameGetter("Visual_Reference_Line_Description"),
                suppressFormatPainterCopy: !0,
                properties: {
                    show: StandardObjectProperties.show,
                    displayName: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_DisplayName"),
                        description: createDisplayNameGetter("Visual_Reference_Line_DisplayName_Description"),
                        type: {
                            text: !0
                        }
                    },
                    value: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_Value"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Value_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    lineColor: StandardObjectProperties.lineColor,
                    transparency: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line_Transparency"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Transparency_Description"),
                        type: {
                            numeric: !0
                        }
                    },
                    style: StandardObjectProperties.lineStyle,
                    position: StandardObjectProperties.referenceLinePosition,
                    dataLabelShow: StandardObjectProperties.dataLabelShow,
                    dataLabelColor: StandardObjectProperties.dataLabelColor,
                    dataLabelText: StandardObjectProperties.dataLabelText,
                    dataLabelDecimalPoints: StandardObjectProperties.dataLabelDecimalPoints,
                    dataLabelHorizontalPosition: StandardObjectProperties.dataLabelHorizontalPosition,
                    dataLabelVerticalPosition: StandardObjectProperties.dataLabelVerticalPosition,
                    dataLabelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits
                }
            },
            colorBorder: {
                displayName: createDisplayNameGetter("Visual_ColorBorder"),
                properties: {
                    show: StandardObjectProperties.show
                }
            },
            fillPoint: {
                displayName: createDisplayNameGetter("Visual_FillPoint"),
                properties: {
                    show: StandardObjectProperties.show
                }
            },
            colorByCategory: {
                displayName: createDisplayNameGetter("Visual_ColorByCategory"),
                properties: {
                    show: StandardObjectProperties.show
                }
            },
            currentFrameIndex: {
                properties: {
                    index: {
                        type: {
                            numeric: !0
                        }
                    }
                }
            },
            clustering: {
                suppressFormatPainterCopy: !0,
                properties: {
                    transform: {
                        type: {
                            queryTransform: {}
                        }
                    }
                }
            },
            plotAreaShading: {
                displayName: createDisplayNameGetter("Visual_Scatter_SymmetryShading"),
                description: createDisplayNameGetter("Visual_Scatter_SymmetryShadingDescription"),
                properties: {
                    show: StandardObjectProperties.show,
                    upperShadingColor: {
                        displayName: createDisplayNameGetter("Visual_Scatter_SymmetryShadingUpper"),
                        description: createDisplayNameGetter("Visual_Scatter_SymmetryShadingUpperDescription"),
                        type: {
                            fill: {
                                solid: {
                                    color: !0
                                }
                            }
                        }
                    },
                    lowerShadingColor: {
                        displayName: createDisplayNameGetter("Visual_Scatter_SymmetryShadingLower"),
                        description: createDisplayNameGetter("Visual_Scatter_SymmetryShadingLowerDescription"),
                        type: {
                            fill: {
                                solid: {
                                    color: !0
                                }
                            }
                        }
                    },
                    transparency: StandardObjectProperties.transparency
                }
            },
            ratioLine: {
                displayName: createDisplayNameGetter("Visual_Scatter_RatioLine"),
                description: createDisplayNameGetter("Visual_Scatter_RatioLineDescription"),
                properties: {
                    show: StandardObjectProperties.show,
                    lineColor: StandardObjectProperties.lineColor,
                    transparency: StandardObjectProperties.lineTransparency,
                    style: StandardObjectProperties.lineStyle
                }
            }
        }, visuals.scatterChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                },
                dataVolume: {
                    objectName: "general",
                    propertyName: "dataVolume"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            },
            bubbles: {
                bubbleSize: {
                    objectName: "bubbles",
                    propertyName: "bubbleSize"
                },
                markerShape: {
                    objectName: "bubbles",
                    propertyName: "markerShape"
                },
                showSeries: {
                    objectName: "bubbles",
                    propertyName: "showSeries"
                }
            },
            trend: {
                show: {
                    objectName: "trend",
                    propertyName: "show"
                }
            },
            colorBorder: {
                show: {
                    objectName: "colorBorder",
                    propertyName: "show"
                }
            },
            fillPoint: {
                show: {
                    objectName: "fillPoint",
                    propertyName: "show"
                }
            },
            colorByCategory: {
                show: {
                    objectName: "colorByCategory",
                    propertyName: "show"
                }
            },
            currentFrameIndex: {
                index: {
                    objectName: "currentFrameIndex",
                    propertyName: "index"
                }
            },
            legend: {
                labelColor: {
                    objectName: "legend",
                    propertyName: "labelColor"
                }
            },
            plotArea: {
                image: {
                    objectName: "plotArea",
                    propertyName: "image"
                },
                transparency: {
                    objectName: "plotArea",
                    propertyName: "transparency"
                }
            },
            plotAreaShading: {
                show: {
                    objectName: "plotAreaShading",
                    propertyName: "show"
                },
                upperShadingColor: {
                    objectName: "plotAreaShading",
                    propertyName: "upperShadingColor"
                },
                lowerShadingColor: {
                    objectName: "plotAreaShading",
                    propertyName: "lowerShadingColor"
                },
                transparency: {
                    objectName: "plotAreaShading",
                    propertyName: "transparency"
                }
            },
            ratioLine: {
                show: {
                    objectName: "ratioLine",
                    propertyName: "show"
                },
                lineColor: {
                    objectName: "ratioLine",
                    propertyName: "lineColor"
                },
                transparency: {
                    objectName: "ratioLine",
                    propertyName: "transparency"
                },
                style: {
                    objectName: "ratioLine",
                    propertyName: "style"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.slicerRoles = {
            value: "Values"
        }, visuals.slicerCapabilities = {
            dataRoles: [ {
                name: visuals.slicerRoles.value,
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Field"),
                description: createDisplayNameGetter("Role_DisplayName_FieldDescription")
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        responsive: StandardObjectProperties.responsive,
                        filter: {
                            type: {
                                filter: {}
                            }
                        },
                        selfFilter: {
                            type: {
                                filter: {
                                    selfFilter: !0
                                }
                            }
                        },
                        defaultValue: {
                            type: {
                                expression: {
                                    defaultValue: !0
                                }
                            }
                        },
                        formatString: StandardObjectProperties.formatString,
                        outlineColor: StandardObjectProperties.outlineColor,
                        outlineWeight: StandardObjectProperties.outlineWeight,
                        orientation: {
                            displayName: createDisplayNameGetter("Slicer_Orientation"),
                            type: {
                                enumeration: visuals.slicerOrientation.type
                            }
                        },
                        count: {
                            type: {
                                integer: !0
                            }
                        },
                        selfFilterEnabled: {
                            type: {
                                operations: {
                                    searchEnabled: !0
                                }
                            }
                        }
                    }
                },
                data: {
                    properties: {
                        startDate: {
                            type: {
                                dateTime: !0
                            },
                            filterState: !0
                        },
                        endDate: {
                            type: {
                                dateTime: !0
                            },
                            filterState: !0
                        },
                        numericStart: {
                            type: {
                                numeric: !0
                            },
                            filterState: !0
                        },
                        numericEnd: {
                            type: {
                                numeric: !0
                            },
                            filterState: !0
                        },
                        relativeRange: {
                            type: {
                                enumeration: visuals.relativeSlicerRelativeQualifier.type
                            },
                            filterState: !0
                        },
                        relativePeriod: {
                            type: {
                                enumeration: visuals.relativeSlicerPeriod.type
                            },
                            filterState: !0
                        },
                        relativeDuration: {
                            type: {
                                numeric: !0
                            },
                            filterState: !0
                        },
                        mode: {
                            type: {
                                enumeration: visuals.slicerMode.type
                            },
                            filterState: !0
                        }
                    }
                },
                selection: {
                    displayName: createDisplayNameGetter("Visual_SelectionControls"),
                    properties: {
                        selectAllCheckboxEnabled: {
                            displayName: createDisplayNameGetter("Visual_SelectAll"),
                            description: createDisplayNameGetter("Visual_SelectAll_Description"),
                            type: {
                                bool: !0
                            }
                        },
                        singleSelect: {
                            displayName: createDisplayNameGetter("Visual_SingleSelect"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                header: {
                    displayName: createDisplayNameGetter("Visual_Header"),
                    properties: {
                        show: StandardObjectProperties.show,
                        fontColor: StandardObjectProperties.fontColor,
                        background: {
                            displayName: createDisplayNameGetter("Visual_Background"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        outline: StandardObjectProperties.outline,
                        textSize: {
                            displayName: createDisplayNameGetter("Visual_TextSize"),
                            type: {
                                numeric: !0
                            }
                        },
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                items: {
                    displayName: createDisplayNameGetter("Role_DisplayName_Items"),
                    properties: {
                        fontColor: StandardObjectProperties.fontColor,
                        background: {
                            displayName: createDisplayNameGetter("Visual_Background"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        outline: StandardObjectProperties.outline,
                        textSize: {
                            displayName: createDisplayNameGetter("Visual_TextSize"),
                            type: {
                                numeric: !0
                            }
                        },
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                date: {
                    displayName: createDisplayNameGetter("Slicer_DateInputs"),
                    properties: {
                        fontColor: StandardObjectProperties.fontColor,
                        textSize: {
                            displayName: createDisplayNameGetter("Visual_TextSize"),
                            type: {
                                numeric: !0
                            }
                        },
                        fontFamily: StandardObjectProperties.fontFamily,
                        background: {
                            displayName: createDisplayNameGetter("Visual_Background"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                },
                numericInputStyle: {
                    displayName: createDisplayNameGetter("Slicer_NumericInputs"),
                    properties: {
                        fontColor: StandardObjectProperties.fontColor,
                        textSize: {
                            displayName: createDisplayNameGetter("Visual_TextSize"),
                            type: {
                                numeric: !0
                            }
                        },
                        fontFamily: StandardObjectProperties.fontFamily,
                        background: {
                            displayName: createDisplayNameGetter("Visual_Background"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                },
                slider: {
                    displayName: createDisplayNameGetter("Slicer_Slider"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: {
                            displayName: createDisplayNameGetter("Visual_LegendTitleColor"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                },
                dateRange: {
                    displayName: createDisplayNameGetter("Slicer_DateRange"),
                    properties: {
                        includeToday: {
                            displayName: createDisplayNameGetter("Visual_IncludeToday"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ (_a = {}, _a[visuals.slicerRoles.value] = {
                    max: 1
                }, _a) ],
                categorical: {
                    categories: {
                        for: {
                            in: visuals.slicerRoles.value
                        },
                        dataReductionAlgorithm: {
                            window: {}
                        }
                    },
                    includeEmptyGroups: !0
                }
            } ],
            sorting: {
                default: {}
            },
            suppressDefaultTitle: !0
        }, visuals.slicerProps = {
            general: {
                filter: {
                    objectName: "general",
                    propertyName: "filter"
                },
                outlineColor: {
                    objectName: "general",
                    propertyName: "outlineColor"
                },
                outlineWeight: {
                    objectName: "general",
                    propertyName: "outlineWeight"
                },
                orientation: {
                    objectName: "general",
                    propertyName: "orientation"
                },
                responsive: {
                    objectName: "general",
                    propertyName: "responsive"
                },
                count: {
                    objectName: "general",
                    propertyName: "count"
                },
                selfFilterEnabled: {
                    objectName: "general",
                    propertyName: "selfFilterEnabled"
                }
            },
            data: {
                startDate: {
                    objectName: "data",
                    propertyName: "startDate"
                },
                endDate: {
                    objectName: "data",
                    propertyName: "endDate"
                },
                numericStart: {
                    objectName: "data",
                    propertyName: "numericStart"
                },
                numericEnd: {
                    objectName: "data",
                    propertyName: "numericEnd"
                },
                relativeRange: {
                    objectName: "data",
                    propertyName: "relativeRange"
                },
                relativePeriod: {
                    objectName: "data",
                    propertyName: "relativePeriod"
                },
                relativeDuration: {
                    objectName: "data",
                    propertyName: "relativeDuration"
                },
                mode: {
                    objectName: "data",
                    propertyName: "mode"
                }
            },
            selection: {
                selectAllCheckboxEnabled: {
                    objectName: "selection",
                    propertyName: "selectAllCheckboxEnabled"
                },
                singleSelect: {
                    objectName: "selection",
                    propertyName: "singleSelect"
                }
            },
            header: {
                show: {
                    objectName: "header",
                    propertyName: "show"
                },
                fontColor: {
                    objectName: "header",
                    propertyName: "fontColor"
                },
                background: {
                    objectName: "header",
                    propertyName: "background"
                },
                outline: {
                    objectName: "header",
                    propertyName: "outline"
                },
                textSize: {
                    objectName: "header",
                    propertyName: "textSize"
                },
                fontFamily: {
                    objectName: "header",
                    propertyName: "fontFamily"
                }
            },
            items: {
                fontColor: {
                    objectName: "items",
                    propertyName: "fontColor"
                },
                background: {
                    objectName: "items",
                    propertyName: "background"
                },
                outline: {
                    objectName: "items",
                    propertyName: "outline"
                },
                textSize: {
                    objectName: "items",
                    propertyName: "textSize"
                },
                fontFamily: {
                    objectName: "items",
                    propertyName: "fontFamily"
                }
            },
            date: {
                fontColor: {
                    objectName: "date",
                    propertyName: "fontColor"
                },
                textSize: {
                    objectName: "date",
                    propertyName: "textSize"
                },
                fontFamily: {
                    objectName: "date",
                    propertyName: "fontFamily"
                },
                background: {
                    objectName: "date",
                    propertyName: "background"
                }
            },
            numericInputStyle: {
                fontColor: {
                    objectName: "numericInputStyle",
                    propertyName: "fontColor"
                },
                textSize: {
                    objectName: "numericInputStyle",
                    propertyName: "textSize"
                },
                fontFamily: {
                    objectName: "numericInputStyle",
                    propertyName: "fontFamily"
                },
                background: {
                    objectName: "numericInputStyle",
                    propertyName: "background"
                }
            },
            slider: {
                show: {
                    objectName: "slider",
                    propertyName: "show"
                },
                color: {
                    objectName: "slider",
                    propertyName: "color"
                }
            },
            dateRange: {
                includeToday: {
                    objectName: "dateRange",
                    propertyName: "includeToday"
                }
            },
            filterPropertyIdentifier: {
                objectName: "general",
                propertyName: "filter"
            },
            selfFilterPropertyIdentifier: {
                objectName: "general",
                propertyName: "selfFilter"
            },
            formatString: {
                objectName: "general",
                propertyName: "formatString"
            },
            defaultValue: {
                objectName: "general",
                propertyName: "defaultValue"
            }
        };
        var _a;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.tableCapabilities = {
            dataRoles: [ {
                name: "Values",
                kind: powerbi.VisualDataRoleKind.GroupingOrMeasure,
                displayName: createDisplayNameGetter("Role_DisplayName_Values")
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString,
                        columnWidth: {
                            type: {
                                numeric: !0
                            }
                        },
                        totals: {
                            type: {
                                bool: !0
                            },
                            displayName: createDisplayNameGetter("Visual_Totals"),
                            suppressFormatPainterCopy: !0
                        },
                        autoSizeColumnWidth: {
                            type: {
                                bool: !0
                            },
                            displayName: createDisplayNameGetter("Visual_Adjust_Column_Width"),
                            suppressFormatPainterCopy: !0
                        },
                        textSize: {
                            displayName: createDisplayNameGetter("Visual_TextSize"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                grid: {
                    displayName: createDisplayNameGetter("Visual_Grid"),
                    properties: {
                        outlineColor: StandardObjectProperties.outlineColor,
                        outlineWeight: StandardObjectProperties.outlineWeight,
                        gridVertical: {
                            displayName: createDisplayNameGetter("Visual_GridVertical"),
                            description: createDisplayNameGetter("Visual_GridVertical_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        gridVerticalColor: {
                            displayName: createDisplayNameGetter("Visual_GridVertical_Color"),
                            description: createDisplayNameGetter("Visual_GridVertical_Color_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        gridVerticalWeight: {
                            displayName: createDisplayNameGetter("Visual_GridVertical_Weight"),
                            description: createDisplayNameGetter("Visual_GridVertical_Weight_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        gridHorizontal: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        gridHorizontalColor: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal_Color"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Color_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        gridHorizontalWeight: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal_Weight"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Weight_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        rowPadding: {
                            displayName: createDisplayNameGetter("Visual_RowPadding"),
                            description: createDisplayNameGetter("Visual_RowPadding_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        imageHeight: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ImageHeight"),
                            description: createDisplayNameGetter("Visual_Tablix_ImageHeight_Desc"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                columnHeaders: {
                    displayName: createDisplayNameGetter("Visual_Tablix_ColumnHeaders"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        backColor: StandardObjectProperties.backColor,
                        wordWrap: {
                            displayName: createDisplayNameGetter("Visual_Word_Wrap"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                values: {
                    displayName: createDisplayNameGetter("Visual_Tablix_Values"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        backColor: {
                            displayName: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_BackColor"),
                            description: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_BackColor_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fontColorPrimary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_FontColorPrimary"),
                            description: createDisplayNameGetter("Visual_Tablix_FontColorPrimary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        backColorPrimary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_BackColorPrimary"),
                            description: createDisplayNameGetter("Visual_Tablix_BackColorPrimary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fontColorSecondary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_FontColorSecondary"),
                            description: createDisplayNameGetter("Visual_Tablix_FontColorSecondary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        backColorSecondary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_BackColorSecondary"),
                            description: createDisplayNameGetter("Visual_Tablix_BackColorSecondary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        urlIcon: {
                            displayName: createDisplayNameGetter("Visual_Tablix_UrlIcon"),
                            description: createDisplayNameGetter("Visual_Tablix_UrlIcon_Desc"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                total: {
                    displayName: createDisplayNameGetter("Visual_Tablix_TotalGrand"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        backColor: StandardObjectProperties.backColor
                    }
                },
                columnFormatting: {
                    displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting"),
                    properties: {
                        fontColor: StandardObjectProperties.fontColor,
                        backColor: StandardObjectProperties.backColor,
                        styleHeader: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorHeader"),
                            type: {
                                bool: !0
                            }
                        },
                        styleValues: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorValues"),
                            type: {
                                bool: !0
                            }
                        },
                        styleTotal: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorTotal"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                clustering: {
                    suppressFormatPainterCopy: !0,
                    properties: {
                        transform: {
                            type: {
                                queryTransform: {}
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                table: {
                    rows: {
                        for: {
                            in: "Values"
                        },
                        dataReductionAlgorithm: {
                            window: {
                                count: 500
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 1
                        }
                    }
                }
            } ],
            sorting: {
                custom: {}
            },
            suppressDefaultTitle: !0,
            supportsSelection: !1,
            grouping: {
                cluster: {
                    clusteringRole: "Values",
                    conditions: [ {
                        Values: {
                            min: 2
                        }
                    } ]
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.matrixRoleNames = {
            rows: "Rows",
            columns: "Columns",
            values: "Values"
        }, visuals.matrixCapabilities = {
            dataRoles: [ {
                name: visuals.matrixRoleNames.rows,
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Rows"),
                description: createDisplayNameGetter("Role_DisplayName_RowsDescription")
            }, {
                name: visuals.matrixRoleNames.columns,
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Columns"),
                description: createDisplayNameGetter("Role_DisplayName_ColumnsDescription")
            }, {
                name: visuals.matrixRoleNames.values,
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Values")
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString,
                        columnWidth: {
                            type: {
                                numeric: !0
                            }
                        },
                        rowSubtotals: {
                            type: {
                                bool: !0
                            },
                            displayName: createDisplayNameGetter("Visual_TotalRow"),
                            suppressFormatPainterCopy: !0
                        },
                        columnSubtotals: {
                            type: {
                                bool: !0
                            },
                            displayName: createDisplayNameGetter("Visual_TotalColumn"),
                            suppressFormatPainterCopy: !0
                        },
                        autoSizeColumnWidth: {
                            type: {
                                bool: !0
                            },
                            displayName: createDisplayNameGetter("Visual_Adjust_Column_Width"),
                            suppressFormatPainterCopy: !0
                        },
                        textSize: {
                            displayName: createDisplayNameGetter("Visual_TextSize"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                grid: {
                    displayName: createDisplayNameGetter("Visual_Grid"),
                    properties: {
                        outlineColor: StandardObjectProperties.outlineColor,
                        outlineWeight: StandardObjectProperties.outlineWeight,
                        gridVertical: {
                            displayName: createDisplayNameGetter("Visual_GridVertical"),
                            description: createDisplayNameGetter("Visual_GridVertical_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        gridVerticalColor: {
                            displayName: createDisplayNameGetter("Visual_GridVertical_Color"),
                            description: createDisplayNameGetter("Visual_GridVertical_Color_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        gridVerticalWeight: {
                            displayName: createDisplayNameGetter("Visual_GridVertical_Weight"),
                            description: createDisplayNameGetter("Visual_GridVertical_Weight_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        gridHorizontal: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        gridHorizontalColor: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal_Color"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Color_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        gridHorizontalWeight: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal_Weight"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Weight_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        rowPadding: {
                            displayName: createDisplayNameGetter("Visual_RowPadding"),
                            description: createDisplayNameGetter("Visual_RowPadding_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        imageHeight: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ImageHeight"),
                            description: createDisplayNameGetter("Visual_Tablix_ImageHeight_Desc"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                columnHeaders: {
                    displayName: createDisplayNameGetter("Visual_Tablix_ColumnHeaders"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        backColor: StandardObjectProperties.backColor
                    }
                },
                rowHeaders: {
                    displayName: createDisplayNameGetter("Visual_Tablix_RowHeaders"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        backColor: StandardObjectProperties.backColor,
                        wordWrap: {
                            displayName: createDisplayNameGetter("Visual_Word_Wrap"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                values: {
                    displayName: createDisplayNameGetter("Visual_Tablix_Values"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        backColor: {
                            displayName: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_BackColor"),
                            description: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_BackColor_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fontColorPrimary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_FontColorPrimary"),
                            description: createDisplayNameGetter("Visual_Tablix_FontColorPrimary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        backColorPrimary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_BackColorPrimary"),
                            description: createDisplayNameGetter("Visual_Tablix_BackColorPrimary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fontColorSecondary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_FontColorSecondary"),
                            description: createDisplayNameGetter("Visual_Tablix_FontColorSecondary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        backColorSecondary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_BackColorSecondary"),
                            description: createDisplayNameGetter("Visual_Tablix_BackColorSecondary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                },
                subTotals: {
                    displayName: createDisplayNameGetter("Visual_Tablix_TotalSub"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        backColor: StandardObjectProperties.backColor
                    }
                },
                total: {
                    displayName: createDisplayNameGetter("Visual_Tablix_Matrix_TotalGrand"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        backColor: StandardObjectProperties.backColor,
                        applyToHeaders: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ApplyToHeaders"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                columnFormatting: {
                    displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting"),
                    properties: {
                        fontColor: StandardObjectProperties.fontColor,
                        backColor: StandardObjectProperties.backColor,
                        styleHeader: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorHeader"),
                            type: {
                                bool: !0
                            }
                        },
                        styleValues: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorValues"),
                            type: {
                                bool: !0
                            }
                        },
                        styleSubtotals: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorSubTotals"),
                            type: {
                                bool: !0
                            }
                        },
                        styleTotal: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorTotal"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Rows: {
                        max: 0
                    },
                    Columns: {
                        max: 0
                    },
                    Values: {
                        min: 1
                    }
                }, {
                    Rows: {
                        min: 1
                    },
                    Columns: {
                        min: 0
                    },
                    Values: {
                        min: 0
                    }
                }, {
                    Rows: {
                        min: 0
                    },
                    Columns: {
                        min: 1
                    },
                    Values: {
                        min: 0
                    }
                } ],
                matrix: {
                    rows: {
                        for: {
                            in: "Rows"
                        },
                        dataReductionAlgorithm: {
                            window: {
                                count: 500
                            }
                        }
                    },
                    columns: {
                        for: {
                            in: "Columns"
                        },
                        dataReductionAlgorithm: {
                            top: {
                                count: 100
                            }
                        }
                    },
                    values: {
                        for: {
                            in: "Values"
                        }
                    }
                }
            } ],
            filterMappings: {
                measureFilter: {
                    targetRoles: [ visuals.matrixRoleNames.rows ]
                }
            },
            sorting: {
                custom: {}
            },
            dataRoleTotals: [ {
                roles: [ visuals.matrixRoleNames.columns ],
                displayName: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfColumnTotal"),
                shortDisplayName: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfColumnTotalShort"),
                tooltip: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfColumnTotalTooltip")
            }, {
                roles: [ visuals.matrixRoleNames.rows ],
                displayName: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfRowTotal"),
                shortDisplayName: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfRowTotalShort"),
                tooltip: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfRowTotalTooltip")
            } ],
            suppressDefaultTitle: !0,
            supportsSelection: !1
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter;
        visuals.accessibleTableCapabilities = {
            dataRoles: [ {
                name: visuals.matrixRoleNames.rows,
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Rows"),
                description: createDisplayNameGetter("Role_DisplayName_RowsDescription")
            }, {
                name: visuals.matrixRoleNames.columns,
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Columns"),
                description: createDisplayNameGetter("Role_DisplayName_ColumnsDescription")
            }, {
                name: visuals.matrixRoleNames.values,
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Values")
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: visuals.StandardObjectProperties.formatString
                    }
                }
            },
            dataViewMappings: [ {
                matrix: {
                    rows: {
                        for: {
                            in: visuals.matrixRoleNames.rows
                        },
                        dataReductionAlgorithm: {
                            top: {
                                count: 3e3
                            }
                        }
                    },
                    columns: {
                        for: {
                            in: visuals.matrixRoleNames.columns
                        },
                        dataReductionAlgorithm: {
                            top: {
                                count: 100
                            }
                        }
                    },
                    values: {
                        for: {
                            in: visuals.matrixRoleNames.values
                        }
                    }
                }
            } ]
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.treemapRoles = {
            group: "Group",
            details: "Details",
            values: "Values",
            gradient: "Gradient"
        }, visuals.treemapCapabilities = {
            dataRoles: [ {
                name: "Group",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Group"),
                description: createDisplayNameGetter("Role_DisplayName_GroupTreemapDescription")
            }, {
                name: "Details",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Details")
            }, {
                name: "Values",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Values"),
                description: createDisplayNameGetter("Role_DisplayName_ValuesDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: "Gradient",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Gradient"),
                description: createDisplayNameGetter("Role_DisplayName_GradientDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ],
                joinPredicate: 0
            }, {
                name: "Tooltips",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                joinPredicate: 0
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                legend: visuals.StandardObjectDescriptors.legend,
                dataPoint: {
                    displayName: createDisplayNameGetter("Visual_DataPoint"),
                    description: createDisplayNameGetter("Visual_DataPointDescription"),
                    properties: {
                        fill: {
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fillRule: {
                            displayName: createDisplayNameGetter("Visual_Gradient"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                inputRole: "Gradient",
                                output: {
                                    property: "fill",
                                    selector: [ "Group" ]
                                }
                            }
                        }
                    }
                },
                labels: {
                    displayName: createDisplayNameGetter("Visual_DataPointsLabels"),
                    description: createDisplayNameGetter("Visual_DataPointsLabelsDescription"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                        labelPrecision: StandardObjectProperties.labelPrecision,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                categoryLabels: {
                    displayName: createDisplayNameGetter("Visual_CategoryLabels"),
                    description: createDisplayNameGetter("Visual_CategoryLabelsDescription"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Group: {
                        max: 1
                    },
                    Details: {
                        max: 0
                    },
                    Gradient: {
                        max: 1
                    }
                }, {
                    Group: {
                        max: 1
                    },
                    Details: {
                        min: 1,
                        max: 1
                    },
                    Values: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    }
                } ],
                categorical: {
                    categories: {
                        for: {
                            in: "Group"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Details",
                            select: [ {
                                bind: {
                                    to: "Values"
                                }
                            }, {
                                bind: {
                                    to: "Gradient"
                                }
                            }, {
                                for: {
                                    in: "Tooltips"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        }
                    }
                }
            } ],
            supportsHighlight: !0,
            sorting: {
                custom: {},
                implicit: {
                    clauses: [ {
                        role: "Values",
                        direction: 2
                    } ]
                }
            },
            drilldown: {
                roles: [ "Group" ]
            },
            grouping: {
                groupingRules: [ {
                    condition: {
                        Group: {
                            min: 1,
                            max: 1
                        },
                        Details: {
                            max: 1
                        },
                        Values: {
                            min: 1,
                            max: 1
                        },
                        Gradient: {
                            min: 0
                        }
                    },
                    groupingTargetRole: "Group",
                    kind: 1
                }, {
                    condition: {
                        Group: {
                            min: 1,
                            max: 1
                        },
                        Details: {
                            max: 1
                        },
                        Values: {
                            min: 1,
                            max: 1
                        },
                        Gradient: {
                            min: 0
                        }
                    },
                    groupingTargetRole: "Group",
                    groupSourceTargetRole: "Details",
                    kind: 0
                }, {
                    condition: {
                        Group: {
                            min: 1,
                            max: 1
                        },
                        Details: {
                            min: 0
                        },
                        Values: {
                            min: 1,
                            max: 1
                        },
                        Gradient: {
                            min: 1,
                            max: 1
                        }
                    },
                    groupingTargetRole: "Group",
                    kind: 1
                } ]
            }
        }, visuals.treemapProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            },
            legend: {
                show: {
                    objectName: "legend",
                    propertyName: "show"
                },
                position: {
                    objectName: "legend",
                    propertyName: "position"
                },
                showTitle: {
                    objectName: "legend",
                    propertyName: "showTitle"
                },
                titleText: {
                    objectName: "legend",
                    propertyName: "titleText"
                },
                labelColor: {
                    objectName: "legend",
                    propertyName: "labelColor"
                }
            },
            labels: {
                show: {
                    objectName: "labels",
                    propertyName: "show"
                },
                color: {
                    objectName: "labels",
                    propertyName: "color"
                },
                labelDisplayUnits: {
                    objectName: "labels",
                    propertyName: "labelDisplayUnits"
                },
                labelPrecision: {
                    objectName: "labels",
                    propertyName: "labelPrecision"
                },
                fontSize: {
                    objectName: "labels",
                    propertyName: "fontSize"
                },
                fontFamily: {
                    objectName: "labels",
                    propertyName: "fontFamily"
                }
            },
            categoryLabels: {
                show: {
                    objectName: "categoryLabels",
                    propertyName: "show"
                },
                color: {
                    objectName: "categoryLabels",
                    propertyName: "color"
                },
                fontSize: {
                    objectName: "categoryLabels",
                    propertyName: "fontSize"
                },
                fontFamily: {
                    objectName: "categoryLabels",
                    propertyName: "fontFamily"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.cardCapabilities = {
            dataRoles: [ {
                name: "Values",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Fields"),
                description: createDisplayNameGetter("Role_DisplayName_FieldsDescription")
            } ],
            objects: {
                general: {
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                labels: {
                    displayName: createDisplayNameGetter("Visual_DataPointLabel"),
                    properties: {
                        color: StandardObjectProperties.dataColor,
                        labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                        labelPrecision: StandardObjectProperties.labelPrecision,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                categoryLabels: {
                    displayName: createDisplayNameGetter("Visual_CategoryLabel"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        fontSize: StandardObjectProperties.fontSize,
                        fontFamily: StandardObjectProperties.fontFamily
                    }
                },
                wordWrap: {
                    displayName: createDisplayNameGetter("Visual_Word_Wrap"),
                    properties: {
                        show: StandardObjectProperties.show
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Values: {
                        max: 1
                    }
                } ],
                single: {
                    role: "Values"
                }
            } ],
            suppressDefaultTitle: !0,
            supportsSelection: !1
        }, visuals.cardProps = {
            categoryLabels: {
                show: {
                    objectName: "categoryLabels",
                    propertyName: "show"
                },
                color: {
                    objectName: "categoryLabels",
                    propertyName: "color"
                },
                fontSize: {
                    objectName: "categoryLabels",
                    propertyName: "fontSize"
                },
                fontFamily: {
                    objectName: "categoryLabels",
                    propertyName: "fontFamily"
                }
            },
            labels: {
                color: {
                    objectName: "labels",
                    propertyName: "color"
                },
                labelPrecision: {
                    objectName: "labels",
                    propertyName: "labelPrecision"
                },
                labelDisplayUnits: {
                    objectName: "labels",
                    propertyName: "labelDisplayUnits"
                },
                fontSize: {
                    objectName: "labels",
                    propertyName: "fontSize"
                },
                fontFamily: {
                    objectName: "labels",
                    propertyName: "fontFamily"
                }
            },
            wordWrap: {
                show: {
                    objectName: "wordWrap",
                    propertyName: "show"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function getWaterfallChartCapabilities(breakdown) {
            var capabilities = {
                dataRoles: [ {
                    name: "Category",
                    kind: powerbi.VisualDataRoleKind.Grouping,
                    displayName: createDisplayNameGetter("Role_DisplayName_Category"),
                    description: createDisplayNameGetter("Role_DisplayName_CategoryWaterfallDescription")
                }, {
                    name: "Y",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    requiredTypes: [ {
                        numeric: !0
                    }, {
                        integer: !0
                    } ],
                    displayName: createDisplayNameGetter("Role_DisplayName_Y")
                }, {
                    name: "Tooltips",
                    kind: powerbi.VisualDataRoleKind.Measure,
                    displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                    joinPredicate: 0
                } ],
                objects: {
                    general: {
                        displayName: createDisplayNameGetter("Visual_General"),
                        properties: {
                            formatString: StandardObjectProperties.formatString,
                            responsive: StandardObjectProperties.responsive,
                            responsiveLegacy: StandardObjectProperties.responsiveLegacy
                        }
                    },
                    legend: visuals.StandardObjectDescriptors.legend,
                    categoryAxis: {
                        displayName: createDisplayNameGetter("Visual_XAxis"),
                        properties: {
                            show: StandardObjectProperties.show,
                            showAxisTitle: {
                                displayName: createDisplayNameGetter("Visual_Axis_Title"),
                                description: createDisplayNameGetter("Visual_Axis_XTitleDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: StandardObjectProperties.axisStyle,
                            labelColor: StandardObjectProperties.labelColor,
                            fontFamily: StandardObjectProperties.fontFamily,
                            fontSize: StandardObjectProperties.fontSize,
                            preferredCategoryWidth: {
                                displayName: createDisplayNameGetter("Visual_Category_Width"),
                                type: {
                                    numeric: !0
                                }
                            },
                            titleColor: StandardObjectProperties.titleColor,
                            titleFontFamily: StandardObjectProperties.fontFamily,
                            titleFontSize: StandardObjectProperties.titleFontSize,
                            titleText: StandardObjectProperties.titleText
                        }
                    },
                    valueAxis: {
                        displayName: createDisplayNameGetter("Visual_YAxis"),
                        properties: {
                            show: StandardObjectProperties.show,
                            position: StandardObjectProperties.yAxisPosition,
                            start: StandardObjectProperties.axisStart,
                            end: StandardObjectProperties.axisEnd,
                            showAxisTitle: {
                                displayName: createDisplayNameGetter("Visual_Axis_Title"),
                                description: createDisplayNameGetter("Visual_Axis_YTitleDescription"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: StandardObjectProperties.axisStyle,
                            labelColor: StandardObjectProperties.labelColor,
                            fontFamily: StandardObjectProperties.fontFamily,
                            fontSize: StandardObjectProperties.fontSize,
                            labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                            labelPrecision: StandardObjectProperties.labelPrecision,
                            titleColor: StandardObjectProperties.titleColor,
                            titleFontFamily: StandardObjectProperties.fontFamily,
                            titleFontSize: StandardObjectProperties.titleFontSize,
                            titleText: StandardObjectProperties.titleText,
                            gridlineShow: __assign({}, StandardObjectProperties.show, {
                                displayName: createDisplayNameGetter("Visual_Gridline_Show")
                            }),
                            gridlineColor: StandardObjectProperties.lineColor,
                            gridlineThickness: StandardObjectProperties.strokeWidth,
                            gridlineStyle: StandardObjectProperties.lineStyle
                        }
                    },
                    labels: {
                        displayName: createDisplayNameGetter("Visual_DataPointsLabels"),
                        description: createDisplayNameGetter("Visual_DataPointsLabelsDescription"),
                        properties: {
                            show: StandardObjectProperties.show,
                            color: StandardObjectProperties.dataColor,
                            labelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits,
                            labelPrecision: __assign({}, StandardObjectProperties.labelPrecision, {
                                suppressFormatPainterCopy: !0
                            }),
                            fontSize: StandardObjectProperties.fontSize,
                            fontFamily: StandardObjectProperties.fontFamily,
                            labelOrientation: {
                                displayName: createDisplayNameGetter("Visual_LabelOrientation"),
                                type: {
                                    enumeration: visuals.labelOrientation.type
                                }
                            },
                            labelPosition: {
                                displayName: createDisplayNameGetter("Visual_Position"),
                                type: {
                                    enumeration: visuals.labelPosition.type
                                }
                            }
                        }
                    },
                    plotArea: {
                        displayName: createDisplayNameGetter("Visual_Plot"),
                        properties: {
                            transparency: StandardObjectProperties.transparency,
                            image: StandardObjectProperties.image
                        }
                    },
                    sentimentColors: {
                        displayName: createDisplayNameGetter("Waterfall_SentimentColors"),
                        properties: {
                            increaseFill: {
                                displayName: createDisplayNameGetter("Waterfall_IncreaseLabel"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            decreaseFill: {
                                displayName: createDisplayNameGetter("Waterfall_DecreaseLabel"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            totalFill: {
                                displayName: createDisplayNameGetter("Waterfall_TotalLabel"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            otherFill: {
                                displayName: createDisplayNameGetter("Waterfall_OtherLabel"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            }
                        }
                    },
                    y1AxisReferenceLine: {
                        displayName: createDisplayNameGetter("Visual_Reference_Line"),
                        description: createDisplayNameGetter("Visual_Reference_Line_Description"),
                        properties: {
                            show: StandardObjectProperties.show,
                            displayName: {
                                displayName: createDisplayNameGetter("Visual_Reference_Line_DisplayName"),
                                description: createDisplayNameGetter("Visual_Reference_Line_DisplayName_Description"),
                                type: {
                                    text: !0
                                }
                            },
                            value: {
                                displayName: createDisplayNameGetter("Visual_Reference_Line_Value"),
                                description: createDisplayNameGetter("Visual_Reference_Line_Value_Description"),
                                type: {
                                    numeric: !0
                                }
                            },
                            lineColor: StandardObjectProperties.lineColor,
                            transparency: {
                                displayName: createDisplayNameGetter("Visual_Reference_Line_Transparency"),
                                description: createDisplayNameGetter("Visual_Reference_Line_Transparency_Description"),
                                type: {
                                    numeric: !0
                                }
                            },
                            style: StandardObjectProperties.lineStyle,
                            position: StandardObjectProperties.referenceLinePosition,
                            dataLabelShow: StandardObjectProperties.dataLabelShow,
                            dataLabelColor: StandardObjectProperties.dataLabelColor,
                            dataLabelText: StandardObjectProperties.dataLabelText,
                            dataLabelDecimalPoints: StandardObjectProperties.dataLabelDecimalPoints,
                            dataLabelHorizontalPosition: StandardObjectProperties.dataLabelHorizontalPosition,
                            dataLabelVerticalPosition: StandardObjectProperties.dataLabelVerticalPosition,
                            dataLabelDisplayUnits: StandardObjectProperties.dataLabelDisplayUnits
                        }
                    },
                    breakdown: {
                        displayName: createDisplayNameGetter("Visual_Waterfall_Breakdown"),
                        properties: {
                            maxBreakdowns: {
                                displayName: createDisplayNameGetter("Visual_Waterfall_MaxBreakdown"),
                                description: createDisplayNameGetter("Visual_Waterfall_MaxBreakdown_Description"),
                                type: {
                                    integer: !0
                                }
                            }
                        }
                    }
                },
                dataViewMappings: [ {
                    conditions: [ {
                        Category: {
                            max: 1
                        },
                        Y: {
                            max: 1
                        },
                        Breakdown: {
                            max: 0
                        }
                    } ],
                    categorical: {
                        categories: {
                            for: {
                                in: "Category"
                            },
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        },
                        values: {
                            select: [ {
                                bind: {
                                    to: "Y"
                                }
                            }, {
                                for: {
                                    in: "Tooltips"
                                }
                            } ]
                        }
                    }
                }, {
                    conditions: [ {
                        Category: {
                            max: 1
                        },
                        Y: {
                            max: 1
                        },
                        Breakdown: {
                            min: 1,
                            max: 1
                        }
                    } ],
                    matrix: {
                        rows: {
                            select: [ {
                                composite: [ {
                                    for: {
                                        in: "Category"
                                    }
                                } ]
                            } ],
                            dataReductionAlgorithm: {
                                window: {
                                    count: 30
                                }
                            }
                        },
                        columns: {
                            for: {
                                in: "Breakdown"
                            },
                            dataReductionAlgorithm: {
                                top: {
                                    count: 200
                                }
                            }
                        },
                        values: {
                            select: [ {
                                bind: {
                                    to: "Y"
                                }
                            }, {
                                bind: {
                                    to: "Tooltips"
                                }
                            } ]
                        }
                    }
                } ],
                sorting: {
                    default: {}
                },
                drilldown: {
                    roles: [ "Category" ]
                },
                grouping: {
                    groupingRules: [ {
                        condition: {
                            Category: {
                                min: 1,
                                max: 1
                            },
                            Y: {
                                min: 1,
                                max: 1
                            }
                        },
                        groupingTargetRole: "Category",
                        kind: 1
                    } ]
                }
            };
            return breakdown && capabilities.dataRoles.splice(1, 0, {
                name: "Breakdown",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_BreakdownWaterfall"),
                description: createDisplayNameGetter("Role_DisplayName_BreakdownWaterfallDescription")
            }), capabilities;
        }
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.getWaterfallChartCapabilities = getWaterfallChartCapabilities, visuals.waterfallChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            sentimentColors: {
                increaseFill: {
                    objectName: "sentimentColors",
                    propertyName: "increaseFill"
                },
                decreaseFill: {
                    objectName: "sentimentColors",
                    propertyName: "decreaseFill"
                },
                totalFill: {
                    objectName: "sentimentColors",
                    propertyName: "totalFill"
                },
                otherFill: {
                    objectName: "sentimentColors",
                    propertyName: "otherFill"
                }
            },
            legend: {
                labelColor: {
                    objectName: "legend",
                    propertyName: "labelColor"
                }
            },
            breakdown: {
                maxBreakdowns: {
                    objectName: "breakdown",
                    propertyName: "maxBreakdowns"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.sunburstCapabilities = {
            dataRoles: [ {
                name: "Nodes",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Group")
            }, {
                name: "Values",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Values"),
                description: createDisplayNameGetter("Role_DisplayName_ValuesDescription")
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                legend: {
                    displayName: createDisplayNameGetter("Visual_Legend"),
                    description: createDisplayNameGetter("Visual_LegendDescription"),
                    properties: {
                        show: StandardObjectProperties.show,
                        position: StandardObjectProperties.legendPosition,
                        showTitle: StandardObjectProperties.showLegendTitle,
                        titleText: StandardObjectProperties.legendTitle,
                        labelColor: StandardObjectProperties.labelColor,
                        fontSize: StandardObjectProperties.fontSize
                    }
                },
                dataPoint: {
                    displayName: createDisplayNameGetter("Visual_DataPoint"),
                    description: createDisplayNameGetter("Visual_DataPointDescription"),
                    properties: {
                        fill: {
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fillRule: {
                            displayName: createDisplayNameGetter("Visual_Gradient"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                inputRole: "Gradient",
                                output: {
                                    property: "fill",
                                    selector: [ "Group" ]
                                }
                            }
                        }
                    }
                },
                labels: {
                    displayName: createDisplayNameGetter("Visual_DataPointsLabels"),
                    description: createDisplayNameGetter("Visual_DataPointsLabelsDescription"),
                    properties: {
                        show: StandardObjectProperties.show,
                        color: StandardObjectProperties.dataColor,
                        labelDisplayUnits: StandardObjectProperties.labelDisplayUnits,
                        labelPrecision: StandardObjectProperties.labelPrecision
                    }
                },
                categoryLabels: {
                    displayName: createDisplayNameGetter("Visual_CategoryLabels"),
                    description: createDisplayNameGetter("Visual_CategoryLabelsDescription"),
                    properties: {
                        show: StandardObjectProperties.show
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Nodes: {
                        min: 0
                    },
                    Values: {
                        max: 1
                    }
                } ],
                matrix: {
                    rows: {
                        for: {
                            in: "Nodes"
                        }
                    },
                    columns: {
                        for: {
                            in: ""
                        }
                    },
                    values: {
                        for: {
                            in: "Values"
                        }
                    }
                }
            } ],
            supportsHighlight: !0,
            sorting: {
                custom: {},
                implicit: {
                    clauses: [ {
                        role: "Values",
                        direction: 2
                    } ]
                }
            }
        }, visuals.sunburstProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            },
            legend: {
                show: {
                    objectName: "legend",
                    propertyName: "show"
                },
                position: {
                    objectName: "legend",
                    propertyName: "position"
                },
                showTitle: {
                    objectName: "legend",
                    propertyName: "showTitle"
                },
                titleText: {
                    objectName: "legend",
                    propertyName: "titleText"
                },
                labelColor: {
                    objectName: "legend",
                    propertyName: "labelColor"
                }
            },
            labels: {
                show: {
                    objectName: "labels",
                    propertyName: "show"
                },
                color: {
                    objectName: "labels",
                    propertyName: "color"
                },
                labelDisplayUnits: {
                    objectName: "labels",
                    propertyName: "labelDisplayUnits"
                },
                labelPrecision: {
                    objectName: "labels",
                    propertyName: "labelPrecision"
                }
            },
            categoryLabels: {
                show: {
                    objectName: "categoryLabels",
                    propertyName: "show"
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        visuals.bingSocialNewsCapabilities = {
            dataViewMappings: []
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        visuals.bingSocialTweetsCapabilities = {
            dataViewMappings: []
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.KPIStatusWithHistoryCapabilities = {
            dataRoles: [ {
                name: "Indicator",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_KPI_Indicator"),
                description: createDisplayNameGetter("Role_DisplayName_KPI_IndicatorDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: "TrendLine",
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_KPI_TrendLine"),
                description: createDisplayNameGetter("Role_DisplayName_KPI_Trendline_Description")
            }, {
                name: "Goal",
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_KPI_Goal"),
                description: createDisplayNameGetter("Role_DisplayName_KPI_GoalDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            } ],
            dataViewMappings: [ {
                conditions: [ {
                    Indicator: {
                        max: 1
                    },
                    TrendLine: {
                        max: 1
                    },
                    Goal: {
                        max: 2
                    }
                } ],
                categorical: {
                    categories: {
                        for: {
                            in: "TrendLine"
                        },
                        dataReductionAlgorithm: {
                            bottom: {}
                        }
                    },
                    values: {
                        select: [ {
                            bind: {
                                to: "Indicator"
                            }
                        }, {
                            bind: {
                                to: "Goal"
                            }
                        } ]
                    }
                }
            } ],
            objects: {
                general: {
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                indicator: {
                    displayName: createDisplayNameGetter("Role_DisplayName_KPI_Indicator"),
                    description: createDisplayNameGetter("Role_DisplayName_KPI_IndicatorDescription"),
                    properties: {
                        indicatorDisplayUnits: {
                            displayName: createDisplayNameGetter("Visual_DisplayUnits"),
                            description: createDisplayNameGetter("Visual_DisplayUnitsDescription"),
                            type: {
                                formatting: {
                                    labelDisplayUnits: !0
                                }
                            }
                        },
                        indicatorPrecision: {
                            displayName: createDisplayNameGetter("Visual_Precision"),
                            description: createDisplayNameGetter("Visual_PrecisionDescription"),
                            placeHolderText: createDisplayNameGetter("Visual_Auto"),
                            type: {
                                numeric: !0
                            }
                        },
                        kpiFormat: {
                            displayName: createDisplayNameGetter("TaskPane_Format"),
                            type: {
                                text: !0
                            }
                        }
                    }
                },
                trendline: {
                    displayName: createDisplayNameGetter("Role_DisplayName_KPI_TrendLine"),
                    description: createDisplayNameGetter("Role_DisplayName_KPI_Trendline_Description"),
                    properties: {
                        show: StandardObjectProperties.show
                    }
                },
                goals: {
                    displayName: createDisplayNameGetter("Role_DisplayName_KPI_Goals"),
                    description: createDisplayNameGetter("Role_DisplayName_KPI_Goals"),
                    properties: {
                        showGoal: {
                            displayName: createDisplayNameGetter("Role_DisplayName_KPI_Show_Goal"),
                            type: {
                                bool: !0
                            }
                        },
                        showDistance: {
                            displayName: createDisplayNameGetter("Role_DisplayName_KPI_Show_Distance"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                status: {
                    displayName: createDisplayNameGetter("Role_DisplayName_KPI_Color_Coding"),
                    description: createDisplayNameGetter("Role_DisplayName_KPI_Color_Coding"),
                    properties: {
                        direction: {
                            displayName: createDisplayNameGetter("Visual_KPI_Direction"),
                            type: {
                                enumeration: visuals.kpiDirection.type
                            }
                        },
                        goodColor: {
                            displayName: createDisplayNameGetter("Visual_KPI_Good_Color"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        neutralColor: {
                            displayName: createDisplayNameGetter("Visual_KPI_Neutral_Color"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        badColor: {
                            displayName: createDisplayNameGetter("Visual_KPI_Bad_Color"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties, role = visuals.ShapeMapType.Role;
        visuals.shapeMapCapabilities = {
            dataRoles: [ {
                name: role.category,
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Location"),
                description: createDisplayNameGetter("Role_DisplayName_LocationMapDescription"),
                preferredTypes: [ {
                    geography: {
                        address: !0
                    }
                }, {
                    geography: {
                        city: !0
                    }
                }, {
                    geography: {
                        continent: !0
                    }
                }, {
                    geography: {
                        country: !0
                    }
                }, {
                    geography: {
                        county: !0
                    }
                }, {
                    geography: {
                        place: !0
                    }
                }, {
                    geography: {
                        postalCode: !0
                    }
                }, {
                    geography: {
                        region: !0
                    }
                }, {
                    geography: {
                        stateOrProvince: !0
                    }
                } ]
            }, {
                name: role.series,
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Legend"),
                description: createDisplayNameGetter("Role_DisplayName_LegendDescription")
            }, {
                name: role.value,
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Gradient"),
                description: createDisplayNameGetter("Role_DisplayName_GradientDescription"),
                requiredTypes: [ {
                    numeric: !0
                }, {
                    integer: !0
                } ]
            }, {
                name: role.tooltips,
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Tooltips"),
                joinPredicate: 0
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                legend: visuals.StandardObjectDescriptors.legend,
                dataPoint: {
                    displayName: createDisplayNameGetter("Visual_DataPoint"),
                    description: createDisplayNameGetter("Visual_DataPointDescription"),
                    properties: {
                        defaultColor: StandardObjectProperties.defaultColor,
                        defaultCategoryColor: StandardObjectProperties.defaultCategoryColor,
                        showAllDataPoints: StandardObjectProperties.showAllDataPoints,
                        fill: StandardObjectProperties.fill,
                        fillRule: {
                            displayName: createDisplayNameGetter("Role_DisplayName_Values"),
                            description: createDisplayNameGetter("Role_DisplayName_ValuesDescription"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                conditions: [ {
                                    Series: {
                                        max: 0
                                    }
                                } ],
                                inputRole: role.value,
                                output: {
                                    property: "fill",
                                    selector: [ role.category ]
                                }
                            }
                        }
                    }
                },
                shape: {
                    displayName: createDisplayNameGetter("Visual_ShapeMap_Shape"),
                    description: createDisplayNameGetter("Visual_ShapeMap_Shape_Desc"),
                    properties: {
                        map: {
                            type: {
                                geoJson: {}
                            }
                        },
                        projectionEnum: {
                            displayName: createDisplayNameGetter("Visual_ShapeMap_Projection"),
                            description: createDisplayNameGetter("Visual_ShapeMap_Projection_Desc"),
                            type: {
                                enumeration: visuals.ShapeMapType.Projection.type
                            }
                        }
                    }
                },
                defaultColors: {
                    displayName: createDisplayNameGetter("Visual_ShapeMap_DefaultColor"),
                    description: createDisplayNameGetter("Visual_ShapeMap_DefaultColor_Desc"),
                    properties: {
                        defaultShow: {
                            displayName: createDisplayNameGetter("Visual_ShapeMap_DefaultShow"),
                            description: createDisplayNameGetter("Visual_ShapeMap_DefaultShow_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        defaultColor: {
                            displayName: createDisplayNameGetter("Visual_ShapeMap_DefaultColorColor"),
                            description: createDisplayNameGetter("Visual_ShapeMap_DefaultColorColor_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        borderColor: {
                            displayName: createDisplayNameGetter("Visual_ShapeMap_BorderColor"),
                            description: createDisplayNameGetter("Visual_ShapeMap_BorderColor_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        borderThickness: {
                            displayName: createDisplayNameGetter("Visual_ShapeMap_BorderThickness"),
                            description: createDisplayNameGetter("Visual_ShapeMap_BorderThickness_Desc"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                zoom: {
                    displayName: createDisplayNameGetter("Visual_ShapeMap_Zoom"),
                    description: createDisplayNameGetter("Visual_ShapeMap_Zoom_Desc"),
                    properties: {
                        autoZoom: {
                            displayName: createDisplayNameGetter("Visual_ShapeMap_AutoZoom"),
                            description: createDisplayNameGetter("Visual_ShapeMap_AutoZoom_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        selectionZoom: {
                            displayName: createDisplayNameGetter("Visual_ShapeMap_SelectionZoom"),
                            description: createDisplayNameGetter("Visual_ShapeMap_SelectionZoom_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        manualZoom: {
                            displayName: createDisplayNameGetter("Visual_ShapeMap_ManualZoom"),
                            description: createDisplayNameGetter("Visual_ShapeMap_ManualZoom_Desc"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ (_a = {}, _a[role.category] = {
                    min: 0,
                    max: 1
                }, _a[role.series] = {
                    min: 0,
                    max: 1
                }, _a[role.value] = {
                    min: 0,
                    max: 1
                }, _a) ],
                categorical: {
                    categories: {
                        for: {
                            in: role.category
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: role.series,
                            select: [ {
                                bind: {
                                    to: role.value
                                }
                            }, {
                                for: {
                                    in: role.tooltips
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        }
                    }
                }
            } ],
            sorting: {
                custom: {},
                implicit: {
                    clauses: [ {
                        role: role.value,
                        direction: 2
                    } ]
                }
            }
        }, visuals.shapeMapProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            legend: {
                show: {
                    objectName: "legend",
                    propertyName: "show"
                },
                position: {
                    objectName: "legend",
                    propertyName: "position"
                },
                showTitle: {
                    objectName: "legend",
                    propertyName: "showTitle"
                },
                titleText: {
                    objectName: "legend",
                    propertyName: "titleText"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                },
                showAllDataPoints: {
                    objectName: "dataPoint",
                    propertyName: "showAllDataPoints"
                }
            },
            shape: {
                mapId: {
                    objectName: "shape",
                    propertyName: "mapId"
                },
                projectionEnum: {
                    objectName: "shape",
                    propertyName: "projectionEnum"
                },
                map: {
                    objectName: "shape",
                    propertyName: "map"
                }
            },
            zoom: {
                autoZoom: {
                    objectName: "zoom",
                    propertyName: "autoZoom"
                },
                selectionZoom: {
                    objectName: "zoom",
                    propertyName: "selectionZoom"
                },
                manualZoom: {
                    objectName: "zoom",
                    propertyName: "manualZoom"
                }
            },
            defaultColors: {
                defaultShow: {
                    objectName: "defaultColors",
                    propertyName: "defaultShow"
                },
                defaultColor: {
                    objectName: "defaultColors",
                    propertyName: "defaultColor"
                },
                borderColor: {
                    objectName: "defaultColors",
                    propertyName: "borderColor"
                },
                borderThickness: {
                    objectName: "defaultColors",
                    propertyName: "borderThickness"
                }
            }
        };
        var _a;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.tableExCapabilities = {
            dataRoles: [ {
                name: "Values",
                kind: powerbi.VisualDataRoleKind.GroupingOrMeasure,
                displayName: createDisplayNameGetter("Role_DisplayName_Values")
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                grid: {
                    displayName: createDisplayNameGetter("Visual_Grid"),
                    properties: {
                        outlineColor: StandardObjectProperties.outlineColor,
                        outlineWeight: StandardObjectProperties.outlineWeight,
                        gridVertical: {
                            displayName: createDisplayNameGetter("Visual_GridVertical"),
                            description: createDisplayNameGetter("Visual_GridVertical_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        gridVerticalColor: {
                            displayName: createDisplayNameGetter("Visual_GridVertical_Color"),
                            description: createDisplayNameGetter("Visual_GridVertical_Color_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        gridVerticalWeight: {
                            displayName: createDisplayNameGetter("Visual_GridVertical_Weight"),
                            description: createDisplayNameGetter("Visual_GridVertical_Weight_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        gridHorizontal: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        gridHorizontalColor: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal_Color"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Color_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        gridHorizontalWeight: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal_Weight"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Weight_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        rowPadding: {
                            displayName: createDisplayNameGetter("Visual_RowPadding"),
                            description: createDisplayNameGetter("Visual_RowPadding_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        textSize: {
                            displayName: createDisplayNameGetter("Visual_TextSize"),
                            type: {
                                numeric: !0
                            }
                        },
                        imageHeight: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ImageHeight"),
                            description: createDisplayNameGetter("Visual_Tablix_ImageHeight_Desc"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                columnHeaders: {
                    displayName: createDisplayNameGetter("Visual_Tablix_ColumnHeaders"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        fontFamily: StandardObjectProperties.fontFamily,
                        fontSize: StandardObjectProperties.fontSize,
                        backColor: StandardObjectProperties.backColor,
                        autoSizeColumnWidth: {
                            type: {
                                bool: !0
                            },
                            displayName: createDisplayNameGetter("Visual_Adjust_Column_Width"),
                            suppressFormatPainterCopy: !0
                        },
                        wordWrap: {
                            displayName: createDisplayNameGetter("Visual_Word_Wrap"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                values: {
                    displayName: createDisplayNameGetter("Visual_Tablix_Values"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        backColor: {
                            displayName: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_BackColor"),
                            description: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_BackColor_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fontColor: {
                            displayName: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_FontColor"),
                            description: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_FontColor_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fontFamily: StandardObjectProperties.fontFamily,
                        fontSize: StandardObjectProperties.fontSize,
                        fontColorPrimary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_FontColorPrimary"),
                            description: createDisplayNameGetter("Visual_Tablix_FontColorPrimary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        backColorPrimary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_BackColorPrimary"),
                            description: createDisplayNameGetter("Visual_Tablix_BackColorPrimary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fontColorSecondary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_FontColorSecondary"),
                            description: createDisplayNameGetter("Visual_Tablix_FontColorSecondary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        backColorSecondary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_BackColorSecondary"),
                            description: createDisplayNameGetter("Visual_Tablix_BackColorSecondary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        urlIcon: {
                            displayName: createDisplayNameGetter("Visual_Tablix_UrlIcon"),
                            description: createDisplayNameGetter("Visual_Tablix_UrlIcon_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        wordWrap: {
                            displayName: createDisplayNameGetter("Visual_Word_Wrap"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                total: {
                    displayName: createDisplayNameGetter("Visual_Tablix_TotalGrand"),
                    properties: {
                        totals: {
                            type: {
                                bool: !0
                            },
                            displayName: createDisplayNameGetter("Visual_Totals"),
                            suppressFormatPainterCopy: !0
                        },
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        fontFamily: StandardObjectProperties.fontFamily,
                        fontSize: StandardObjectProperties.fontSize,
                        backColor: StandardObjectProperties.backColor
                    }
                },
                columnFormatting: {
                    displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting"),
                    properties: {
                        fontColor: StandardObjectProperties.fontColor,
                        backColor: StandardObjectProperties.backColor,
                        styleHeader: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorHeader"),
                            type: {
                                bool: !0
                            }
                        },
                        styleValues: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorValues"),
                            type: {
                                bool: !0
                            }
                        },
                        styleTotal: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorTotal"),
                            type: {
                                bool: !0
                            }
                        },
                        dataBars: {
                            displayName: createDisplayNameGetter("Visual_ConditionalFormatting_DataBars"),
                            description: createDisplayNameGetter("Visual_ConditionalFormatting_DataBars_Desc"),
                            type: {
                                dataBars: {}
                            },
                            suppressFormatPainterCopy: !0
                        }
                    }
                },
                columnWidth: {
                    properties: {
                        value: {
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                clustering: {
                    suppressFormatPainterCopy: !0,
                    properties: {
                        transform: {
                            type: {
                                queryTransform: {}
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                table: {
                    rows: {
                        for: {
                            in: "Values"
                        },
                        dataReductionAlgorithm: {
                            window: {
                                count: 500
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 1
                        }
                    }
                }
            } ],
            sorting: {
                default: {},
                custom: {}
            },
            suppressDefaultTitle: !0,
            grouping: {
                cluster: {
                    clusteringRole: "Values",
                    conditions: [ {
                        Values: {
                            min: 2
                        }
                    } ]
                }
            }
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, StandardObjectProperties = visuals.StandardObjectProperties;
        visuals.pivotTableCapabilities = {
            dataRoles: [ {
                name: visuals.matrixRoleNames.rows,
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Rows"),
                description: createDisplayNameGetter("Role_DisplayName_RowsDescription")
            }, {
                name: visuals.matrixRoleNames.columns,
                kind: powerbi.VisualDataRoleKind.Grouping,
                displayName: createDisplayNameGetter("Role_DisplayName_Columns"),
                description: createDisplayNameGetter("Role_DisplayName_ColumnsDescription")
            }, {
                name: visuals.matrixRoleNames.values,
                kind: powerbi.VisualDataRoleKind.Measure,
                displayName: createDisplayNameGetter("Role_DisplayName_Values")
            } ],
            objects: {
                general: {
                    displayName: createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: StandardObjectProperties.formatString
                    }
                },
                grid: {
                    displayName: createDisplayNameGetter("Visual_Grid"),
                    properties: {
                        outlineColor: StandardObjectProperties.outlineColor,
                        outlineWeight: StandardObjectProperties.outlineWeight,
                        gridVertical: {
                            displayName: createDisplayNameGetter("Visual_GridVertical"),
                            description: createDisplayNameGetter("Visual_GridVertical_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        gridVerticalColor: {
                            displayName: createDisplayNameGetter("Visual_GridVertical_Color"),
                            description: createDisplayNameGetter("Visual_GridVertical_Color_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        gridVerticalWeight: {
                            displayName: createDisplayNameGetter("Visual_GridVertical_Weight"),
                            description: createDisplayNameGetter("Visual_GridVertical_Weight_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        gridHorizontal: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        gridHorizontalColor: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal_Color"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Color_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        gridHorizontalWeight: {
                            displayName: createDisplayNameGetter("Visual_GridHorizontal_Weight"),
                            description: createDisplayNameGetter("Visual_GridHorizontal_Weight_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        rowPadding: {
                            displayName: createDisplayNameGetter("Visual_RowPadding"),
                            description: createDisplayNameGetter("Visual_RowPadding_Desc"),
                            type: {
                                numeric: !0
                            }
                        },
                        textSize: {
                            displayName: createDisplayNameGetter("Visual_TextSize"),
                            type: {
                                numeric: !0
                            }
                        },
                        imageHeight: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ImageHeight"),
                            description: createDisplayNameGetter("Visual_Tablix_ImageHeight_Desc"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                columnHeaders: {
                    displayName: createDisplayNameGetter("Visual_Tablix_ColumnHeaders"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        fontFamily: StandardObjectProperties.fontFamily,
                        fontSize: StandardObjectProperties.fontSize,
                        backColor: StandardObjectProperties.backColor,
                        autoSizeColumnWidth: {
                            type: {
                                bool: !0
                            },
                            displayName: createDisplayNameGetter("Visual_Adjust_Column_Width"),
                            suppressFormatPainterCopy: !0
                        },
                        urlIcon: {
                            displayName: createDisplayNameGetter("Visual_Tablix_UrlIcon"),
                            description: createDisplayNameGetter("Visual_Tablix_UrlIcon_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        wordWrap: {
                            displayName: createDisplayNameGetter("Visual_Word_Wrap"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                rowHeaders: {
                    displayName: createDisplayNameGetter("Visual_Tablix_RowHeaders"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        fontFamily: StandardObjectProperties.fontFamily,
                        fontSize: StandardObjectProperties.fontSize,
                        backColor: StandardObjectProperties.backColor,
                        stepped: {
                            displayName: createDisplayNameGetter("Visual_PivotTable_SteppedLayout"),
                            description: createDisplayNameGetter("Visual_PivotTable_SteppedLayout_Description"),
                            type: {
                                bool: !0
                            }
                        },
                        steppedLayoutIndentation: {
                            displayName: createDisplayNameGetter("Visual_PivotTable_SteppedLayoutIndentation"),
                            description: createDisplayNameGetter("Visual_PivotTable_SteppedLayoutIndentation_Description"),
                            type: {
                                numeric: !0
                            }
                        },
                        urlIcon: {
                            displayName: createDisplayNameGetter("Visual_Tablix_UrlIcon"),
                            description: createDisplayNameGetter("Visual_Tablix_UrlIcon_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        wordWrap: {
                            displayName: createDisplayNameGetter("Visual_Word_Wrap"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                values: {
                    displayName: createDisplayNameGetter("Visual_Tablix_Values"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        backColor: {
                            displayName: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_BackColor"),
                            description: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_BackColor_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fontColor: {
                            displayName: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_FontColor"),
                            description: createDisplayNameGetter("Visual_ConditionalFormatting_ColorScales_FontColor_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fontFamily: StandardObjectProperties.fontFamily,
                        fontSize: StandardObjectProperties.fontSize,
                        fontColorPrimary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_FontColorPrimary"),
                            description: createDisplayNameGetter("Visual_Tablix_FontColorPrimary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        backColorPrimary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_BackColorPrimary"),
                            description: createDisplayNameGetter("Visual_Tablix_BackColorPrimary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fontColorSecondary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_FontColorSecondary"),
                            description: createDisplayNameGetter("Visual_Tablix_FontColorSecondary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        backColorSecondary: {
                            displayName: createDisplayNameGetter("Visual_Tablix_BackColorSecondary"),
                            description: createDisplayNameGetter("Visual_Tablix_BackColorSecondary_Desc"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        bandedRowHeaders: {
                            displayName: createDisplayNameGetter("Visual_PivotTable_ValuesBandedRowHeaders"),
                            description: createDisplayNameGetter("Visual_PivotTable_ValuesBandedRowHeaders_Description"),
                            type: {
                                bool: !0
                            }
                        },
                        urlIcon: {
                            displayName: createDisplayNameGetter("Visual_Tablix_UrlIcon"),
                            description: createDisplayNameGetter("Visual_Tablix_UrlIcon_Desc"),
                            type: {
                                bool: !0
                            }
                        },
                        wordWrap: {
                            displayName: createDisplayNameGetter("Visual_Word_Wrap"),
                            type: {
                                bool: !0
                            }
                        },
                        valuesOnRow: {
                            displayName: createDisplayNameGetter("Visual_PivotTable_ValuesOnRow"),
                            description: createDisplayNameGetter("Visual_PivotTable_ValuesOnRow_Description"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                subTotals: {
                    displayName: createDisplayNameGetter("Visual_Tablix_TotalSub"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        fontFamily: StandardObjectProperties.fontFamily,
                        fontSize: StandardObjectProperties.fontSize,
                        backColor: StandardObjectProperties.backColor,
                        rowSubtotals: {
                            type: {
                                bool: !0
                            },
                            displayName: createDisplayNameGetter("Visual_SubtotalRow"),
                            description: createDisplayNameGetter("Visual_SubtotalRow_Desc"),
                            suppressFormatPainterCopy: !0
                        },
                        rowSubtotalsPosition: {
                            displayName: createDisplayNameGetter("Visual_SubtotalRow_Position"),
                            type: {
                                enumeration: visuals.rowSubtotalPosition.type
                            },
                            suppressFormatPainterCopy: !0
                        },
                        perRowLevel: {
                            displayName: createDisplayNameGetter("Visual_SubtotalRow_PerLevel"),
                            type: {
                                bool: !0
                            },
                            suppressFormatPainterCopy: !0
                        },
                        columnSubtotals: {
                            type: {
                                bool: !0
                            },
                            displayName: createDisplayNameGetter("Visual_SubtotalColumn"),
                            description: createDisplayNameGetter("Visual_SubtotalColumn_Desc"),
                            suppressFormatPainterCopy: !0
                        },
                        perColumnLevel: {
                            displayName: createDisplayNameGetter("Visual_SubtotalColumn_PerLevel"),
                            type: {
                                bool: !0
                            },
                            suppressFormatPainterCopy: !0
                        },
                        applyToHeaders: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ApplyToHeaders"),
                            type: {
                                bool: !0
                            }
                        },
                        levelSubtotalEnabled: {
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                total: {
                    displayName: createDisplayNameGetter("Visual_Tablix_Matrix_TotalGrand"),
                    properties: {
                        outline: StandardObjectProperties.outline,
                        fontColor: StandardObjectProperties.fontColor,
                        fontFamily: StandardObjectProperties.fontFamily,
                        fontSize: StandardObjectProperties.fontSize,
                        backColor: StandardObjectProperties.backColor,
                        applyToHeaders: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ApplyToHeaders"),
                            type: {
                                bool: !0
                            }
                        }
                    }
                },
                columnFormatting: {
                    displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting"),
                    properties: {
                        fontColor: StandardObjectProperties.fontColor,
                        backColor: StandardObjectProperties.backColor,
                        styleHeader: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorHeader"),
                            type: {
                                bool: !0
                            }
                        },
                        styleValues: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorValues"),
                            type: {
                                bool: !0
                            }
                        },
                        styleSubtotals: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorSubTotals"),
                            type: {
                                bool: !0
                            }
                        },
                        styleTotal: {
                            displayName: createDisplayNameGetter("Visual_Tablix_ColumnFormatting_ColorTotal"),
                            type: {
                                bool: !0
                            }
                        },
                        dataBars: {
                            displayName: createDisplayNameGetter("Visual_ConditionalFormatting_DataBars"),
                            description: createDisplayNameGetter("Visual_ConditionalFormatting_DataBars_Desc"),
                            type: {
                                dataBars: {}
                            },
                            suppressFormatPainterCopy: !0
                        }
                    }
                },
                columnWidth: {
                    properties: {
                        value: {
                            type: {
                                numeric: !0
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Rows: {
                        max: 0
                    },
                    Columns: {
                        max: 0
                    },
                    Values: {
                        min: 1
                    }
                }, {
                    Rows: {
                        min: 1
                    },
                    Columns: {
                        min: 0
                    },
                    Values: {
                        min: 0
                    }
                }, {
                    Rows: {
                        min: 0
                    },
                    Columns: {
                        min: 1
                    },
                    Values: {
                        min: 0
                    }
                } ],
                matrix: {
                    rows: {
                        for: {
                            in: "Rows"
                        },
                        dataReductionAlgorithm: {
                            window: {
                                count: 500
                            }
                        }
                    },
                    columns: {
                        for: {
                            in: "Columns"
                        },
                        dataReductionAlgorithm: {
                            top: {
                                count: 100
                            }
                        }
                    },
                    values: {
                        for: {
                            in: "Values"
                        }
                    }
                }
            } ],
            dataRoleTotals: [ {
                roles: [ visuals.matrixRoleNames.columns ],
                displayName: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfColumnTotal"),
                shortDisplayName: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfColumnTotalShort"),
                tooltip: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfColumnTotalTooltip")
            }, {
                roles: [ visuals.matrixRoleNames.rows ],
                displayName: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfRowTotal"),
                shortDisplayName: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfRowTotalShort"),
                tooltip: createDisplayNameGetter("DisplayName_QuickCalc_PercentOfRowTotalTooltip")
            } ],
            filterMappings: {
                measureFilter: {
                    targetRoles: [ visuals.matrixRoleNames.rows ]
                }
            },
            sorting: {
                default: {},
                custom: {}
            },
            drilldown: {
                roles: [ visuals.matrixRoleNames.rows, visuals.matrixRoleNames.columns ]
            },
            suppressDefaultTitle: !0
        };
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var capabilities;
        !(function(capabilities) {
            capabilities.animatedNumber = powerbi.visuals.animatedNumberCapabilities, capabilities.areaChart = powerbi.visuals.getLineChartCapabilities(!1, !0, !1), 
            capabilities.barChart = powerbi.visuals.getColumnChartCapabilities(!0, !0), capabilities.card = powerbi.visuals.cardCapabilities, 
            capabilities.multiRowCard = powerbi.visuals.multiRowCardCapabilities, capabilities.clusteredBarChart = powerbi.visuals.getColumnChartCapabilities(!0), 
            capabilities.clusteredColumnChart = powerbi.visuals.getColumnChartCapabilities(), 
            capabilities.columnChart = powerbi.visuals.getColumnChartCapabilities(!1, !0), capabilities.comboChart = powerbi.visuals.getComboChartCapabilities(!1), 
            capabilities.dataDotChart = powerbi.visuals.dataDotChartCapabilities, capabilities.dataDotClusteredColumnComboChart = powerbi.visuals.getComboChartCapabilities(!1), 
            capabilities.dataDotStackedColumnComboChart = powerbi.visuals.getComboChartCapabilities(!0), 
            capabilities.donutChart = powerbi.visuals.donutChartCapabilities, capabilities.funnel = powerbi.visuals.funnelChartCapabilities, 
            capabilities.gauge = powerbi.visuals.gaugeCapabilities, capabilities.hundredPercentStackedBarChart = powerbi.visuals.getColumnChartCapabilities(!0, !0), 
            capabilities.hundredPercentStackedColumnChart = powerbi.visuals.getColumnChartCapabilities(!1, !0), 
            capabilities.ribbonChart = powerbi.visuals.getColumnChartCapabilities(!1, !0, !0), 
            capabilities.image = powerbi.visuals.imageVisualCapabilities, capabilities.lineChart = powerbi.visuals.getLineChartCapabilities(!1, !1, !1), 
            capabilities.stackedAreaChart = powerbi.visuals.getLineChartCapabilities(!0, !0, !1), 
            capabilities.lineStackedColumnComboChart = powerbi.visuals.getComboChartCapabilities(!0), 
            capabilities.lineClusteredColumnComboChart = powerbi.visuals.getComboChartCapabilities(!1), 
            capabilities.map = powerbi.visuals.mapCapabilities, capabilities.filledMap = powerbi.visuals.filledMapCapabilities, 
            capabilities.shapeMap = powerbi.visuals.shapeMapCapabilities, capabilities.treemap = powerbi.visuals.treemapCapabilities, 
            capabilities.pieChart = powerbi.visuals.donutChartCapabilities, capabilities.scatterChart = powerbi.visuals.getScatterChartCapabilities(!1, !1), 
            capabilities.table = powerbi.visuals.tableCapabilities, capabilities.matrix = powerbi.visuals.matrixCapabilities, 
            capabilities.slicer = powerbi.visuals.slicerCapabilities, capabilities.textbox = powerbi.visuals.textboxCapabilities, 
            capabilities.waterfallChart = powerbi.visuals.getWaterfallChartCapabilities(!1), 
            capabilities.cheerMeter = powerbi.visuals.cheerMeterCapabilities, capabilities.heatMap = powerbi.visuals.mapCapabilities, 
            capabilities.sunburst = powerbi.visuals.sunburstCapabilities, capabilities.scriptVisual = powerbi.visuals.scriptVisualCapabilities, 
            capabilities.kpi = powerbi.visuals.KPIStatusWithHistoryCapabilities, capabilities.realTimeLineChart = powerbi.visuals.realTimeLineChartCapabilities, 
            capabilities.accessibleTable = powerbi.visuals.accessibleTableCapabilities;
        })(capabilities = visuals.capabilities || (visuals.capabilities = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var LegendBehavior = (function() {
            function LegendBehavior() {}
            return LegendBehavior.prototype.bindEvents = function(options, selectionHandler) {
                var legendItems = options.legendItems;
                this.legendIcons = options.legendIcons, this.legendLines = options.legendLines;
                var clearCatcher = options.clearCatcher;
                visuals.InteractivityUtils.registerStandardSelectionHandler(legendItems, selectionHandler), 
                clearCatcher.on("click", (function() {
                    d3.event.ctrlKey || selectionHandler.handleClearSelection();
                }));
            }, LegendBehavior.prototype.renderSelection = function(hasSelection) {
                hasSelection ? (this.legendIcons.style({
                    fill: function(d) {
                        return d.selected ? d.color : LegendBehavior.dimmedLegendColor;
                    },
                    stroke: function(d) {
                        return d.selected ? d.color : LegendBehavior.dimmedLegendColor;
                    }
                }), this.legendLines.style({
                    stroke: function(d) {
                        return d.selected ? d.lineColor : LegendBehavior.dimmedLegendColor;
                    }
                })) : (this.legendIcons.style({
                    fill: function(d) {
                        return d.color;
                    },
                    stroke: function(d) {
                        return d.color;
                    }
                }), this.legendLines.style({
                    stroke: function(d) {
                        return d.lineColor;
                    }
                }));
            }, LegendBehavior.dimmedLegendColor = "#A6A6A6", LegendBehavior;
        })();
        visuals.LegendBehavior = LegendBehavior;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var LabelsBehavior = (function() {
            function LabelsBehavior() {}
            return LabelsBehavior.prototype.bindEvents = function(options, selectionHandler) {
                this.labelItems = options.labelItems, visuals.InteractivityUtils.registerStandardSelectionHandler(this.labelItems, selectionHandler);
            }, LabelsBehavior.prototype.renderSelection = function(hasSelection) {
                hasSelection ? this.labelItems.style({
                    opacity: function(d) {
                        return d.selected ? LabelsBehavior.DefaultLabelOpacity : LabelsBehavior.DimmedLabelOpacity;
                    }
                }) : this.labelItems.style({
                    opacity: LabelsBehavior.DefaultLabelOpacity
                });
            }, LabelsBehavior.DefaultLabelOpacity = 1, LabelsBehavior.DimmedLabelOpacity = .6, 
            LabelsBehavior;
        })();
        visuals.LabelsBehavior = LabelsBehavior;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var AxisTickCollisionUtils;
        !(function(AxisTickCollisionUtils) {
            var NoCollisionDetector = (function() {
                function NoCollisionDetector() {}
                return NoCollisionDetector.prototype.willCollide = function(center) {
                    return !1;
                }, NoCollisionDetector.prototype.addItem = function(center) {}, NoCollisionDetector.prototype.skipItem = function(center) {}, 
                NoCollisionDetector;
            })();
            AxisTickCollisionUtils.NoCollisionDetector = NoCollisionDetector;
            var CollisionDetector = (function() {
                function CollisionDetector(startLeftEdge, fontOffsetLeft, fontOffsetRight) {
                    this.fontOffsetLeft = fontOffsetLeft, this.fontOffsetRight = fontOffsetRight, this.previousLabelRightEdge = startLeftEdge;
                }
                return CollisionDetector.prototype.willCollide = function(center) {
                    var leftEdge = center - this.fontOffsetLeft;
                    return leftEdge <= this.previousLabelRightEdge;
                }, CollisionDetector.prototype.addItem = function(center) {
                    this.previousLabelRightEdge = center + this.fontOffsetRight;
                }, CollisionDetector.prototype.skipItem = function(center) {}, CollisionDetector;
            })();
            AxisTickCollisionUtils.CollisionDetector = CollisionDetector;
            var HierarchicalCollisionDetector = (function() {
                function HierarchicalCollisionDetector(startLeftEdge, fontOffsetLeft, fontOffsetRight, currentNode, scale, halfCategoryThickness, rotationPadding) {
                    this.fontOffsetLeft = fontOffsetLeft, this.fontOffsetRight = fontOffsetRight, this.currentNode = currentNode, 
                    this.scale = scale, this.halfCategoryThickness = halfCategoryThickness, this.rotationPadding = rotationPadding, 
                    this.previousLabelRightEdge = startLeftEdge, this.index = 0;
                    var lastChildIndex = HierarchicalCollisionDetector.getLastChildIndex(currentNode, 0);
                    this.groupEndPosition = scale(lastChildIndex) + halfCategoryThickness - rotationPadding;
                }
                return HierarchicalCollisionDetector.prototype.willCollide = function(center) {
                    if (!HierarchicalCollisionDetector.isLastChild(this.currentNode)) {
                        var labelRightEdge = center + this.fontOffsetRight;
                        return labelRightEdge > this.groupEndPosition;
                    }
                    var leftEdge = center - this.fontOffsetLeft;
                    return leftEdge <= this.previousLabelRightEdge;
                }, HierarchicalCollisionDetector.prototype.addItem = function(center) {
                    this.moveToNextNode(center);
                }, HierarchicalCollisionDetector.prototype.skipItem = function(center) {
                    this.moveToNextNode(center);
                }, HierarchicalCollisionDetector.prototype.moveToNextNode = function(center) {
                    var previousNode = this.currentNode, currentNode = this.currentNode = this.currentNode.next;
                    if (this.index++, HierarchicalCollisionDetector.isLastChild(previousNode)) {
                        this.previousLabelRightEdge = this.groupEndPosition + 2 * this.rotationPadding;
                        var newLastChildIndex = HierarchicalCollisionDetector.getLastChildIndex(currentNode, this.index);
                        this.groupEndPosition = this.scale(newLastChildIndex) + this.halfCategoryThickness - this.rotationPadding;
                    } else this.previousLabelRightEdge = center + this.fontOffsetRight;
                }, HierarchicalCollisionDetector.isLastChild = function(node) {
                    return null == node.next || node.parent !== node.next.parent;
                }, HierarchicalCollisionDetector.getLastChildIndex = function(startNode, startIndex) {
                    for (var currentNode = startNode, currentIndex = startIndex; !HierarchicalCollisionDetector.isLastChild(currentNode); ) currentIndex++, 
                    currentNode = currentNode.next;
                    return currentIndex;
                }, HierarchicalCollisionDetector;
            })();
            AxisTickCollisionUtils.HierarchicalCollisionDetector = HierarchicalCollisionDetector;
        })(AxisTickCollisionUtils = visuals.AxisTickCollisionUtils || (visuals.AxisTickCollisionUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var AxisTickCollisionUtils = powerbi.visuals.AxisTickCollisionUtils, API = jsCommon.API, FontSize = visuals.Units.FontSize, PixelConverter = jsCommon.PixelConverter;
        visuals.emptyDomain = [ 0, 0 ];
        var AxisOrientation;
        !(function(AxisOrientation) {
            AxisOrientation[AxisOrientation.top = 0] = "top", AxisOrientation[AxisOrientation.bottom = 1] = "bottom", 
            AxisOrientation[AxisOrientation.left = 2] = "left", AxisOrientation[AxisOrientation.right = 3] = "right";
        })(AxisOrientation = visuals.AxisOrientation || (visuals.AxisOrientation = {}));
        var AxisHelper;
        !(function(AxisHelper) {
            function getRecommendedNumberOfTicksForXAxis(availableWidth) {
                return availableWidth < 300 ? 3 : availableWidth < 500 ? 5 : 8;
            }
            function getRecommendedNumberOfTicksForYAxis(availableWidth) {
                return availableWidth < 150 ? 3 : availableWidth < 300 ? 5 : 8;
            }
            function getBestNumberOfTicks(min, max, valuesMetadata, maxTickCount, isDateTime, allowSingleTick) {
                return isNaN(min) || isNaN(max) ? DefaultBestTickCount : min === max ? allowSingleTick || isDateTime ? 1 : DefaultBestTickCount : maxTickCount <= 1 || max <= 1 && min >= -1 ? maxTickCount : hasNonIntegerData(valuesMetadata) ? maxTickCount : Math.min(max - min + 1, maxTickCount);
            }
            function hasNonIntegerData(valuesMetadata) {
                for (var i = 0, len = valuesMetadata.length; i < len; i++) {
                    var currentMetadata = valuesMetadata[i];
                    if (currentMetadata && currentMetadata.type && !currentMetadata.type.integer) return !0;
                }
                return !1;
            }
            function getRecommendedTickValues(maxTicks, scale, axisType, isScalar, minTickInterval) {
                return !isScalar || isOrdinalScale(scale) ? getRecommendedTickValuesForAnOrdinalRange(maxTicks, scale.domain()) : isDateTime(axisType) ? getRecommendedTickValuesForADateTimeRange(maxTicks, scale.domain()) : getRecommendedTickValuesForAQuantitativeRange(maxTicks, scale, minTickInterval);
            }
            function getRecommendedTickValuesForAnOrdinalRange(maxTicks, labels) {
                var tickLabels = [];
                if (maxTicks <= 0) return tickLabels;
                var len = labels.length;
                if (maxTicks > len) return labels;
                for (var i = 0, step = Math.ceil(len / maxTicks); i < len; i += step) tickLabels.push(labels[i]);
                return tickLabels;
            }
            function getRecommendedTickValuesForAQuantitativeRange(maxTicks, scale, minInterval) {
                var tickLabels = [];
                if (0 === maxTicks) return tickLabels;
                var quantitiveScale = scale;
                if (quantitiveScale.ticks) {
                    if (tickLabels = quantitiveScale.ticks(maxTicks), tickLabels.length > maxTicks && maxTicks > 1 && (tickLabels = quantitiveScale.ticks(maxTicks - 1)), 
                    tickLabels.length < MinTickCount && (tickLabels = quantitiveScale.ticks(maxTicks + 1)), 
                    tickLabels = createTrueZeroTickLabel(tickLabels), minInterval && tickLabels.length > 1) {
                        var tickInterval = tickLabels[1] - tickLabels[0];
                        if (3 === tickLabels.length && Math.abs(tickLabels[2] - tickLabels[0]) < minInterval) tickLabels = [ tickLabels[1] - minInterval, tickLabels[1], tickLabels[1] + minInterval ]; else for (;tickInterval > 0 && tickInterval < minInterval; ) {
                            for (var i = 1; i < tickLabels.length - 1; i++) tickLabels.splice(i, 1);
                            tickInterval = 2 * tickInterval;
                        }
                    }
                    return tickLabels;
                }
                return tickLabels;
            }
            function createTrueZeroTickLabel(ticks, epsilon) {
                if (void 0 === epsilon && (epsilon = 1e-5), !ticks || ticks.length < 2) return ticks;
                var closeZero = epsilon * Math.abs(ticks[1] - ticks[0]);
                return ticks.map((function(tick) {
                    return Math.abs(tick) <= closeZero ? 0 : tick;
                }));
            }
            function getRecommendedTickValuesForADateTimeRange(maxTicks, dataDomain) {
                var tickLabels = [];
                if (0 === dataDomain[0] && 0 === dataDomain[1]) return [];
                var dateTimeTickLabels = powerbi.DateTimeSequence.calculate(new Date(dataDomain[0]), new Date(dataDomain[1]), maxTicks).sequence;
                return tickLabels = dateTimeTickLabels.map((function(d) {
                    return d.getTime();
                })), tickLabels = ensureValuesInRange(tickLabels, dataDomain[0], dataDomain[1]);
            }
            function normalizeLinearDomain(domain, minInterval) {
                if (isNaN(domain.min) || isNaN(domain.max)) domain.min = visuals.emptyDomain[0], 
                domain.max = visuals.emptyDomain[1]; else if (domain.min === domain.max) null == minInterval || .2 * Math.abs(domain.max) >= minInterval ? (domain.min = domain.min < 0 ? 1.2 * domain.min : .8 * domain.min, 
                domain.max = domain.max < 0 ? .8 * domain.max : 1.2 * domain.max) : 0 !== domain.max && (domain.min = domain.min - minInterval, 
                domain.max = domain.max + minInterval); else if (domain.max - domain.min < minInterval) {
                    var mid = (domain.max + domain.min) / 2;
                    domain.max = Math.round(mid / minInterval + 1) * minInterval, domain.min = Math.round(mid / minInterval - 1) * minInterval;
                } else Math.abs(domain.min) < 1e-4 && domain.min / (domain.max - domain.min) < 1e-4 && (domain.min = 0);
                return domain;
            }
            function getMargin(availableWidth, availableHeight, xMargin, yMargin) {
                return 0 === getRecommendedNumberOfTicksForXAxis(availableWidth - xMargin) || 0 === getRecommendedNumberOfTicksForYAxis(availableHeight - yMargin) ? {
                    top: 0,
                    right: xMargin,
                    bottom: yMargin,
                    left: 0
                } : {
                    top: 20,
                    right: 30,
                    bottom: 40,
                    left: 30
                };
            }
            function getTickLabelMargins(arg1, yMarginLimit, textWidthMeasurer, textHeightMeasurer, axes, bottomMarginLimit, properties, scrollbarVisible, showOnRight, renderXAxis, renderY1Axis, renderY2Axis) {
                var plotArea, axesFontProperties, options = arg1, isHierarchical = !1;
                if (options.plotArea) plotArea = options.plotArea, yMarginLimit = options.yMarginLimit, 
                textWidthMeasurer = options.textWidthMeasurer, textHeightMeasurer = options.textHeightMeasurer, 
                axes = options.axes, bottomMarginLimit = options.bottomMarginLimit, axesFontProperties = options.axesFontProperties, 
                scrollbarVisible = options.scrollbarVisible, showOnRight = options.showOnRight, 
                renderXAxis = options.renderXAxis, renderY1Axis = options.renderY1Axis, renderY2Axis = options.renderY2Axis, 
                isHierarchical = null != options.numHierarchyLevels && options.numHierarchyLevels > 0; else {
                    API.deprecated("Calling getTickLabelMargins without a property bag is deprecated"), 
                    plotArea = arg1;
                    var axisFont = properties.fontFamily, fontSizeInPx = parseInt(properties.fontSize, 10);
                    axesFontProperties = {
                        x: {
                            tickLabels: {
                                family: axisFont,
                                size: FontSize.createFromPx(fontSizeInPx)
                            },
                            title: {
                                family: axisFont,
                                size: FontSize.createFromPx(fontSizeInPx)
                            }
                        },
                        y: {
                            tickLabels: {
                                family: axisFont,
                                size: FontSize.createFromPx(fontSizeInPx)
                            },
                            title: {
                                family: axisFont,
                                size: FontSize.createFromPx(fontSizeInPx)
                            }
                        },
                        y2: {
                            tickLabels: {
                                family: axisFont,
                                size: FontSize.createFromPx(fontSizeInPx)
                            },
                            title: {
                                family: axisFont,
                                size: FontSize.createFromPx(fontSizeInPx)
                            }
                        }
                    }, (properties.fontWeight || properties.fontStyle || properties.fontVariant || properties.whiteSpace) && API.deprecated('getTickLabelMargins now ignores the following properties in the "properties" object: fontWeight, fontStyle, fontVariant, whiteSpace');
                }
                var xAxisProperties = axes.x, y1AxisProperties = axes.y1, y2AxisProperties = axes.y2, xLabels = xAxisProperties.values, leftOverflow = 0, rightOverflow = 0, topOverflow = 0, bottomOverflow = 0, maxWidthY1 = 0, maxWidthY2 = 0, xMax = 0, ordinalLabelOffset = xAxisProperties.categoryThickness ? xAxisProperties.categoryThickness / 2 : 0, scaleIsOrdinal = isOrdinalScale(xAxisProperties.scale), NonRotatedPaddingOffset = -5, xLabelOuterPadding = 0;
                void 0 !== xAxisProperties.outerPadding ? xLabelOuterPadding = xAxisProperties.outerPadding : void 0 !== xAxisProperties.xLabelMaxWidth && (xLabelOuterPadding = Math.max(0, (plotArea.width - xAxisProperties.xLabelMaxWidth * xLabels.length) / 2));
                var textHeight, canRenderXAxis = renderXAxis && !_.isEmpty(xLabels);
                if (0 !== getRecommendedNumberOfTicksForXAxis(plotArea.width) || 0 !== getRecommendedNumberOfTicksForYAxis(plotArea.height)) {
                    var rotation = void 0;
                    if (rotation = scrollbarVisible || isHierarchical ? LabelLayoutStrategy.DefaultRotationWithScrollbar : LabelLayoutStrategy.DefaultRotation, 
                    renderY1Axis) {
                        var margins = visuals.AxesLayoutUtils.getAxisTickLabelMargins(y1AxisProperties, axesFontProperties.y.tickLabels, textWidthMeasurer, textHeightMeasurer);
                        maxWidthY1 = margins.maxWidth, topOverflow = Math.max(topOverflow, margins.overflow.top), 
                        bottomOverflow = Math.max(bottomOverflow, margins.overflow.bottom);
                    }
                    if (y2AxisProperties && renderY2Axis) {
                        var margins = visuals.AxesLayoutUtils.getAxisTickLabelMargins(y2AxisProperties, axesFontProperties.y2.tickLabels, textWidthMeasurer, textHeightMeasurer);
                        maxWidthY2 = margins.maxWidth, topOverflow = Math.max(topOverflow, margins.overflow.top), 
                        bottomOverflow = Math.max(bottomOverflow, margins.overflow.bottom);
                    }
                    var xAxisLabelFontProperties = axesFontProperties.x.tickLabels, xTextProperties = visuals.FontProperties.toTextProperties(xAxisLabelFontProperties), xScale = xAxisProperties.scale, xDomain = xScale.domain();
                    if (textHeight = textHeightMeasurer(xTextProperties), canRenderXAxis) {
                        for (var maxNumLines = Math.floor(bottomMarginLimit / textHeight), i = 0, len = xLabels.length; i < len; i++) {
                            var height = void 0;
                            xTextProperties.text = xLabels[i];
                            var width = textWidthMeasurer(xTextProperties);
                            if (xAxisProperties.willLabelsWordBreak) {
                                var maxWidth = _.isEmpty(xAxisProperties.xLabelMaxWidths) ? xAxisProperties.xLabelMaxWidth : xAxisProperties.xLabelMaxWidths[i], wordBreaks = jsCommon.WordBreaker.splitByWidth(xTextProperties.text, xTextProperties, textWidthMeasurer, maxWidth, maxNumLines);
                                height = wordBreaks.length * textHeight, width = maxWidth;
                            } else if (!xAxisProperties.willLabelsFit && scaleIsOrdinal) {
                                var defaultOrSmaller = xAxisLabelFontProperties.size.px <= visuals.CartesianHelper.DefaultAxisFontSizeInPx, projectedFontWidth = defaultOrSmaller ? 0 : textHeight * rotation.sine, projectedFontHeight = defaultOrSmaller ? 0 : textHeight * rotation.cosine;
                                height = width * rotation.sine + projectedFontHeight, width = width * rotation.cosine + projectedFontWidth;
                            } else height = textHeight + NonRotatedPaddingOffset;
                            if (0 === i) {
                                if (scaleIsOrdinal) leftOverflow = xAxisProperties.willLabelsFit ? width / 2 - ordinalLabelOffset - xLabelOuterPadding : width - ordinalLabelOffset - xLabelOuterPadding, 
                                leftOverflow = Math.max(leftOverflow, 0); else if (xDomain.length > 1) {
                                    var xPos = xScale(xDomain[0]);
                                    leftOverflow = width / 2 - xPos, leftOverflow = Math.max(leftOverflow, 0);
                                }
                            } else if (i === len - 1) if (scaleIsOrdinal) (xAxisProperties.willLabelsFit || xAxisProperties.willLabelsWordBreak) && (rightOverflow = width / 2 - ordinalLabelOffset - xLabelOuterPadding, 
                            rightOverflow = Math.max(rightOverflow, 0)); else if (xDomain.length > 1) {
                                var xPos = xScale(xDomain[1]);
                                rightOverflow = width / 2 - (plotArea.width - xPos), rightOverflow = Math.max(rightOverflow, 0);
                            }
                            xMax = Math.max(xMax, height);
                        }
                        leftOverflow = Math.min(leftOverflow, XLabelMaxAllowedOverflow), rightOverflow = Math.min(rightOverflow, XLabelMaxAllowedOverflow);
                    }
                }
                var rightMargin = 0, leftMargin = 0, bottomMargin = Math.min(Math.max(bottomOverflow, Math.ceil(xMax)), bottomMarginLimit);
                return showOnRight ? (leftMargin = Math.min(Math.max(leftOverflow, maxWidthY2), yMarginLimit), 
                rightMargin = Math.min(Math.max(rightOverflow, maxWidthY1), yMarginLimit)) : (leftMargin = Math.min(Math.max(leftOverflow, maxWidthY1), yMarginLimit), 
                rightMargin = Math.min(Math.max(rightOverflow, maxWidthY2), yMarginLimit)), isHierarchical && canRenderXAxis && (bottomMargin += (textHeight + AxisHelper.stackedAxisPadding) * (options.numHierarchyLevels - 1)), 
                {
                    yTop: Math.ceil(topOverflow),
                    yLeft: Math.ceil(leftMargin),
                    yBottom: Math.ceil(bottomOverflow),
                    yRight: Math.ceil(rightMargin),
                    xMax: Math.ceil(bottomMargin),
                    stackHeight: isHierarchical ? textHeight + AxisHelper.stackedAxisPadding : void 0
                };
            }
            function getTickLabelMarginsForAxis(axisProperties, font, fontSize, textWidthMeasurer, textHeightMeasurer) {
                var scale = axisProperties.scale, tickValues = axisProperties.axis.tickValues();
                if (_.isEmpty(tickValues)) return {
                    maxWidth: 0,
                    overflow: {
                        top: 0,
                        bottom: 0
                    }
                };
                var axisStartValue, axisEndValue;
                if (AxisHelper.isOrdinalScale(scale)) _a = scale.rangeExtent(), axisStartValue = _a[0], 
                axisEndValue = _a[1]; else {
                    var range = scale.range();
                    axisStartValue = _.first(range), axisEndValue = _.last(range);
                }
                var axisTopPosition, axisTopLabelPosition, axisBottomPosition, axisBottomLabelPosition, labels = axisProperties.values;
                axisStartValue < axisEndValue ? (axisTopPosition = axisStartValue, axisTopLabelPosition = scale(_.first(tickValues)), 
                axisBottomPosition = axisEndValue, axisBottomLabelPosition = scale(_.last(tickValues))) : (axisTopPosition = axisEndValue, 
                axisTopLabelPosition = scale(_.last(tickValues)), axisBottomPosition = axisStartValue, 
                axisBottomLabelPosition = scale(_.first(tickValues)));
                for (var textProperties = {
                    text: "" + _.first(labels),
                    fontFamily: font,
                    fontSize: PixelConverter.toString(fontSize)
                }, textHeight = textHeightMeasurer(textProperties), topOverflow = Math.max(0, -(axisTopLabelPosition - textHeight / 2 - axisTopPosition)), bottomOverflow = Math.max(0, axisBottomLabelPosition + textHeight / 2 - axisBottomPosition), maxWidth = 0, i = 0, len = labels.length; i < len; i++) {
                    var textProperties_1 = {
                        text: "" + labels[i],
                        fontFamily: font,
                        fontSize: PixelConverter.toString(fontSize)
                    };
                    maxWidth = Math.max(maxWidth, textWidthMeasurer(textProperties_1));
                }
                return {
                    maxWidth: maxWidth,
                    overflow: {
                        top: topOverflow,
                        bottom: bottomOverflow
                    }
                };
                var _a;
            }
            function columnDataTypeHasValue(dataType) {
                return dataType && (dataType.bool || dataType.numeric || dataType.text || dataType.dateTime);
            }
            function createOrdinalType() {
                return powerbi.ValueType.fromDescriptor({
                    text: !0
                });
            }
            function isOrdinal(type) {
                return !(!type || !(type.text || type.bool || type.misc && type.misc.barcode || type.geography && type.geography.postalCode));
            }
            function isOrdinalScale(scale) {
                return "function" == typeof scale.rangePoints;
            }
            function isDateTime(type) {
                return !(!type || !type.dateTime);
            }
            function invertScale(scale, x) {
                return isOrdinalScale(scale) ? invertOrdinalScale(scale, x) : scale.invert(x);
            }
            function extent(scale) {
                return isOrdinalScale(scale) ? scale.rangeExtent() : scale.range();
            }
            function getCategoryThickness(scale) {
                var leftEdges = scale.range();
                if (leftEdges.length < 2 && AxisHelper.isOrdinalScale(scale)) {
                    var rangeExtent = scale.rangeExtent();
                    return rangeExtent[1] - rangeExtent[0];
                }
                return leftEdges[1] - leftEdges[0];
            }
            function invertOrdinalScale(scale, x) {
                var width = scale.rangeBand(), range = scale.range(), domain = scale.domain();
                if (range.length < 2 || range[0] > x) return domain[0] || 0;
                var halfInnerPadding = (range[1] - range[0] - width) / 2;
                return domain[d3.bisect(range, x + halfInnerPadding) - 1];
            }
            function findClosestXAxisIndex(categoryValue, categoryAxisValues) {
                var closestValueIndex = -1, minDistance = Number.MAX_VALUE;
                for (var i in categoryAxisValues) {
                    var distance = Math.abs(categoryValue - categoryAxisValues[i].categoryValue);
                    distance < minDistance && (minDistance = distance, closestValueIndex = parseInt(i, 10));
                }
                return closestValueIndex;
            }
            function lookupOrdinalIndex(scale, pixelValue) {
                var closestValueIndex = -1, minDistance = Number.MAX_VALUE, domain = scale.domain();
                if (domain.length < 2) return 0;
                var halfWidth = (scale(1) - scale(0)) / 2;
                for (var idx in domain) {
                    var leftEdgeInPixels = scale(idx), midPoint = leftEdgeInPixels + halfWidth, distance = Math.abs(pixelValue - midPoint);
                    distance < minDistance && (minDistance = distance, closestValueIndex = parseInt(idx, 10));
                }
                return closestValueIndex;
            }
            function diffScaled(scale, value1, value2) {
                var value = scale(value1) - scale(value2);
                return 0 === value ? 0 : value < 0 ? Math.min(value, -1) : Math.max(value, 1);
            }
            function createDomain(data, axisType, isScalar, forcedScalarDomain, ensureDomain) {
                if (isScalar && !isOrdinal(axisType)) {
                    var userMin = void 0, userMax = void 0;
                    return forcedScalarDomain && 2 === forcedScalarDomain.length && (userMin = forcedScalarDomain[0], 
                    userMax = forcedScalarDomain[1]), createScalarDomain(data, userMin, userMax, axisType, ensureDomain);
                }
                return createOrdinalDomain(data);
            }
            function ensureValuesInRange(values, min, max) {
                var filteredValues = values.filter((function(v) {
                    return v >= min && v <= max;
                }));
                return filteredValues.length < 2 && (filteredValues = [ min, max ]), filteredValues;
            }
            function getCategoryValueType(metadataColumn, isScalar) {
                return metadataColumn && columnDataTypeHasValue(metadataColumn.type) ? metadataColumn.type : isScalar ? powerbi.ValueType.fromDescriptor({
                    numeric: !0
                }) : powerbi.ValueType.fromDescriptor({
                    text: !0
                });
            }
            function createAxis(options) {
                var pixelSpan = options.pixelSpan, dataDomain = options.dataDomain, metaDataColumn = options.metaDataColumn, formatString = options.formatString, outerPadding = options.outerPadding || 0, outerPaddingRatio = options.outerPaddingRatio || 0, innerPaddingRatio = options.innerPaddingRatio || visuals.DefaultInnerPaddingRatio, isCategoryAxis = !!options.isCategoryAxis, isScalar = !!options.isScalar, isVertical = !!options.isVertical, useTickIntervalForDisplayUnits = !!options.useTickIntervalForDisplayUnits, getValueFn = options.getValueFn, categoryThickness = options.categoryThickness, axisDisplayUnits = options.axisDisplayUnits, axisPrecision = options.axisPrecision, is100Pct = !!options.is100Pct, margin = options.margin, firstMetadataColumn = metaDataColumn instanceof Array ? metaDataColumn[0] : metaDataColumn, dataType = AxisHelper.getCategoryValueType(firstMetadataColumn, isScalar), minTickInterval = isScalar ? getMinTickValueInterval(formatString, dataType, is100Pct) : void 0;
                isCategoryAxis && shouldSuppressCommasAndAutoDisplayUnits(dataType, formatString, axisDisplayUnits, dataDomain) && (formatString = "0", 
                useTickIntervalForDisplayUnits = !1);
                var scaleResult = AxisHelper.createScale(options, minTickInterval), scale = scaleResult.scale, bestTickCount = scaleResult.bestTickCount, scaleDomain = scale.domain(), isLogScaleAllowed = AxisHelper.isLogScalePossible(dataDomain, dataType);
                if (categoryThickness && isScalar && dataDomain && 2 === dataDomain.length) {
                    var oldSpan = dataDomain[1] - dataDomain[0], newSpan = scaleDomain[1] - scaleDomain[0];
                    oldSpan > 0 && newSpan > 0 && (categoryThickness = categoryThickness * oldSpan / newSpan);
                }
                var tickValues;
                tickValues = isScalar && !_.isEmpty(dataDomain) && 1 === bestTickCount ? [ dataDomain[0] ] : getRecommendedTickValues(bestTickCount, scale, dataType, isScalar, minTickInterval), 
                options.scaleType && options.scaleType === visuals.axisScale.log && isLogScaleAllowed && (tickValues = tickValues.filter((function(d) {
                    return AxisHelper.powerOfTen(d);
                })));
                var formatter = AxisHelper.createFormatter({
                    scaleDomain: scaleDomain,
                    dataDomain: dataDomain,
                    dataType: dataType,
                    isScalar: isScalar,
                    formatString: formatString,
                    bestTickCount: bestTickCount,
                    tickValues: tickValues,
                    useTickIntervalForDisplayUnits: useTickIntervalForDisplayUnits,
                    axisDisplayUnits: axisDisplayUnits,
                    axisPrecision: axisPrecision
                }), axis = d3.svg.axis().scale(scale).tickSize(6, 0).orient(isVertical ? "left" : "bottom").ticks(bestTickCount).tickValues(tickValues), formattedTickValues = [];
                _.isEmpty(metaDataColumn) || (formattedTickValues = formatAxisTickValues(axis, tickValues, formatter, dataType, getValueFn));
                var xLabelMaxWidth, xLabelMaxWidths;
                return !isScalar && categoryThickness ? xLabelMaxWidth = Math.max(1, categoryThickness - 2 * visuals.CartesianHelper.TickLabelPadding) : tickValues.length > 1 ? (xLabelMaxWidth = getScalarLabelMaxWidth(scale, tickValues), 
                xLabelMaxWidth -= 2 * ScalarTickLabelPadding, margin && (xLabelMaxWidths = getScalarLabelMaxWidths(scale, tickValues, margin, outerPadding, xLabelMaxWidth), 
                xLabelMaxWidth = void 0)) : xLabelMaxWidth = pixelSpan - 2 * ScalarTickLabelPadding, 
                {
                    scale: scale,
                    axis: axis,
                    formatter: formatter,
                    values: formattedTickValues,
                    axisType: dataType,
                    axisLabel: visuals.converterHelper.createAxisLabel(metaDataColumn),
                    isCategoryAxis: isCategoryAxis,
                    xLabelMaxWidth: xLabelMaxWidth,
                    xLabelMaxWidths: xLabelMaxWidths,
                    categoryThickness: categoryThickness,
                    outerPadding: outerPadding,
                    outerPaddingRatio: outerPaddingRatio,
                    innerPaddingRatio: innerPaddingRatio,
                    usingDefaultDomain: scaleResult.usingDefaultDomain,
                    isLogScaleAllowed: isLogScaleAllowed,
                    dataDomain: dataDomain
                };
            }
            function shouldSuppressCommasAndAutoDisplayUnits(dataType, formatString, axisDisplayUnits, dataDomain) {
                return !!dataType && ((!formatString || "0" === formatString || "g" === formatString || "G" === formatString) && ((!axisDisplayUnits || 1 === axisDisplayUnits) && (!(!dataType.temporal || !dataType.temporal.year) || !!(dataType.integer && dataDomain && 2 === dataDomain.length && isFourOrFewerDigitInteger(dataDomain[0]) && isFourOrFewerDigitInteger(dataDomain[1])))));
            }
            function isFourOrFewerDigitInteger(n) {
                return _.isNumber(n) && n === Math.floor(n) && n > -1e4 && n < 1e4;
            }
            function createStackedAxis(options) {
                var axis = options.axis, orientation = null != options.orient ? AxisOrientation[options.orient] : AxisOrientation[AxisOrientation.bottom];
                return d3.svg.axis().scale(options.scale).tickSize(options.innerTickSize || 0, options.outerTickSize || 0).orient(orientation).ticks(axis.ticks()).tickValues(axis.tickValues()).tickFormat(options.tickFormat);
            }
            function getScalarLabelMaxWidth(scale, tickValues) {
                return scale && !_.isEmpty(tickValues) ? Math.abs(scale(tickValues[1]) - scale(tickValues[0])) : 1;
            }
            function getScalarLabelMaxWidths(scale, tickValues, margin, outerPadding, maxLabelWidth) {
                var xLabelMaxWidths = _.times(tickValues.length, _.constant(maxLabelWidth)), marginLeft = margin.left, marginRight = margin.right, firstTickPosition = scale(_.first(tickValues)), lastTickPosition = scale(_.last(tickValues)), range = scale.range(), axisBeginPosition = range[0], axisEndPosition = range[1], firstLabelMaxAllowedSpace = 2 * (Math.abs(firstTickPosition - axisBeginPosition) + marginLeft + outerPadding), lastLabelMaxAllowedSpace = 2 * (Math.abs(lastTickPosition - axisEndPosition) + marginRight + outerPadding);
                return xLabelMaxWidths[0] = Math.min(firstLabelMaxAllowedSpace, maxLabelWidth), 
                xLabelMaxWidths[tickValues.length - 1] = Math.min(lastLabelMaxAllowedSpace, maxLabelWidth), 
                xLabelMaxWidths;
            }
            function createScale(options, minTickInterval) {
                var pixelSpan = options.pixelSpan, dataDomain = options.dataDomain, metaDataColumn = options.metaDataColumn, outerPadding = options.outerPadding || 0, innerPadding = void 0 !== options.innerPaddingRatio ? options.innerPaddingRatio : visuals.DefaultInnerPaddingRatio, isScalar = !!options.isScalar, isVertical = !!options.isVertical, forcedTickCount = options.forcedTickCount, categoryThickness = options.categoryThickness, shouldClamp = !!options.shouldClamp, maxTickCount = options.maxTickCount, allowSingleTick = options.allowSingleScalarTick, preventNice = options.preventNice, metadataColumnArray = metaDataColumn instanceof Array ? metaDataColumn : [ metaDataColumn ], firstMetadataColumn = metadataColumnArray[0], dataType = AxisHelper.getCategoryValueType(firstMetadataColumn, isScalar), maxTicks = isVertical ? getRecommendedNumberOfTicksForYAxis(pixelSpan) : getRecommendedNumberOfTicksForXAxis(pixelSpan);
                maxTickCount && maxTicks > maxTickCount && (maxTicks = maxTickCount);
                var scale, scalarDomain = dataDomain ? dataDomain.slice() : null, bestTickCount = maxTicks, usingDefaultDomain = !1;
                if (null == dataDomain || 2 === dataDomain.length && null == dataDomain[0] && null == dataDomain[1] || 2 !== dataDomain.length && isScalar) usingDefaultDomain = !0, 
                dataDomain = dataType.dateTime || !isOrdinal(dataType) ? visuals.emptyDomain : [], 
                scale = isOrdinal(dataType) ? createOrdinalScale(pixelSpan, dataDomain, categoryThickness ? outerPadding / categoryThickness : 0, innerPadding) : createNumericalScale(options.scaleType, pixelSpan, dataDomain, dataType, outerPadding, bestTickCount); else {
                    if (isScalar && dataDomain.length > 0) {
                        bestTickCount = void 0 !== forcedTickCount ? 0 !== maxTicks ? forcedTickCount : 0 : AxisHelper.getBestNumberOfTicks(dataDomain[0], dataDomain[dataDomain.length - 1], metadataColumnArray, maxTicks, dataType.dateTime, allowSingleTick);
                        var normalizedRange = normalizeLinearDomain({
                            min: dataDomain[0],
                            max: dataDomain[dataDomain.length - 1]
                        }, minTickInterval);
                        scalarDomain = [ normalizedRange.min, normalizedRange.max ];
                    }
                    if (isScalar && dataType.numeric && !dataType.dateTime) {
                        scalarDomain && 2 === scalarDomain.length && 0 === scalarDomain[0] && 0 === scalarDomain[1] && options.zeroScalarDomain && (scalarDomain[0] = options.zeroScalarDomain[0], 
                        scalarDomain[1] = options.zeroScalarDomain[1], void 0 === forcedTickCount && (bestTickCount = AxisHelper.getBestNumberOfTicks(scalarDomain[0], scalarDomain[1], metadataColumnArray, maxTicks, dataType.dateTime, allowSingleTick)));
                        var niceCount = bestTickCount;
                        (preventNice || allowSingleTick && 2 === scalarDomain.length && scalarDomain[0] === scalarDomain[1]) && (niceCount = 0), 
                        scale = createNumericalScale(options.scaleType, pixelSpan, scalarDomain, dataType, outerPadding, niceCount, shouldClamp);
                    } else isScalar && dataType.dateTime ? scale = createLinearScale(pixelSpan, scalarDomain, outerPadding, null, shouldClamp) : (dataType.text || dataType.dateTime || dataType.numeric || dataType.bool) && (scale = createOrdinalScale(pixelSpan, scalarDomain, categoryThickness ? outerPadding / categoryThickness : 0, options.innerPaddingRatio ? options.innerPaddingRatio : visuals.DefaultInnerPaddingRatio), 
                    bestTickCount = 0 === maxTicks ? 0 : Math.min(scalarDomain.length, (pixelSpan - 2 * outerPadding) / visuals.CartesianHelper.MinOrdinalRectThickness));
                }
                return isVertical && isScalar && scale.range(scale.range().reverse()), visuals.ColumnUtil.normalizeInfinityInScale(scale), 
                {
                    scale: scale,
                    bestTickCount: bestTickCount,
                    usingDefaultDomain: usingDefaultDomain
                };
            }
            function createFormatter(arg1, dataDomain, dataType, isScalar, formatString, bestTickCount, tickValues, getValueFn, useTickIntervalForDisplayUnits, axisDisplayUnits, axisPrecision) {
                var scaleDomain, options = arg1;
                options.scaleDomain ? (scaleDomain = options.scaleDomain, dataDomain = options.dataDomain, 
                dataType = options.dataType, isScalar = options.isScalar, formatString = options.formatString, 
                bestTickCount = options.bestTickCount, tickValues = options.tickValues, useTickIntervalForDisplayUnits = options.useTickIntervalForDisplayUnits || !1, 
                axisDisplayUnits = options.axisDisplayUnits, axisPrecision = options.axisPrecision) : (API.deprecated("Calling createFormatter without a property bag is deprecated."), 
                scaleDomain = arg1, useTickIntervalForDisplayUnits = useTickIntervalForDisplayUnits || !1);
                var formatter;
                if (dataType.dateTime) if (isScalar) {
                    var value = new Date(scaleDomain[0]), value2 = new Date(scaleDomain[1]);
                    1 === bestTickCount && (value = value2 = new Date(dataDomain[0])), formatter = visuals.valueFormatter.create({
                        format: formatString,
                        value: value,
                        value2: value2,
                        tickCount: bestTickCount,
                        columnType: dataType
                    });
                } else formatter = visuals.valueFormatter.createDefaultFormatter(formatString, !0); else if (useTickIntervalForDisplayUnits && isScalar && tickValues.length > 1) {
                    var value1 = axisDisplayUnits ? axisDisplayUnits : tickValues[1] - tickValues[0], options_1 = {
                        format: formatString,
                        value: value1,
                        value2: 0,
                        allowFormatBeautification: !0,
                        columnType: dataType
                    };
                    axisPrecision ? options_1.precision = axisPrecision : options_1.precision = calculateAxisPrecision(tickValues[0], tickValues[1], axisDisplayUnits, formatString), 
                    formatter = visuals.valueFormatter.create(options_1);
                } else isScalar && 1 === tickValues.length ? (axisDisplayUnits || (axisDisplayUnits = useTickIntervalForDisplayUnits ? _.first(tickValues) : 0), 
                formatter = visuals.valueFormatter.create({
                    format: formatString,
                    value: axisDisplayUnits,
                    allowFormatBeautification: !0,
                    precision: axisPrecision
                })) : formatter = visuals.valueFormatter.createDefaultFormatter(formatString, !0);
                return formatter;
            }
            function calculateAxisPrecision(tickValue0, tickValue1, axisDisplayUnits, formatString) {
                if (!axisDisplayUnits) {
                    var displayUnitSystem = visuals.valueFormatter.createDisplayUnitSystem();
                    displayUnitSystem.update(tickValue1 - tickValue0), axisDisplayUnits = displayUnitSystem.displayUnit && displayUnitSystem.displayUnit.value || 1;
                }
                var value0 = (tickValue0 || 0) / axisDisplayUnits, value1 = (tickValue1 || 0) / axisDisplayUnits;
                if (formatString) {
                    var partsPerScale = powerbi.NumberFormat.getCustomFormatMetadata(formatString, !1, !1, !0).partsPerScale;
                    value0 *= partsPerScale, value1 *= partsPerScale;
                }
                return Math.max(calculateAxisPrecisionForValue(value0), calculateAxisPrecisionForValue(value1));
            }
            function calculateAxisPrecisionForValue(value) {
                if (0 === value) return 0;
                value < 0 && (value = -value);
                var mostSignificantDigit = Math.floor(powerbi.Double.log10(value)), MaxDigits = 5;
                if (mostSignificantDigit >= 0) {
                    var integerSignificantDigits = mostSignificantDigit + 1, maxFractionDigits = MaxDigits - integerSignificantDigits;
                    return maxFractionDigits <= 0 ? 0 : numberOfDecimalPlaces(value, maxFractionDigits);
                }
                var rescaledValue = value / powerbi.Double.pow10(mostSignificantDigit + 1), fractionSignificantDigits = numberOfDecimalPlaces(rescaledValue, MaxDigits), fractionScaleDigits = -mostSignificantDigit - 1;
                return fractionScaleDigits + fractionSignificantDigits;
            }
            function numberOfDecimalPlaces(value, maxDecimalPlaces) {
                var formattedValue = value.toFixed(maxDecimalPlaces), decimalPoint = formattedValue.indexOf(".");
                if (decimalPoint !== -1) for (var i = formattedValue.length; i-- > decimalPoint; ) if ("0" !== formattedValue[i]) return i - decimalPoint;
                return 0;
            }
            function formatAxisTickValues(axis, tickValues, formatter, dataType, getValueFn) {
                var formattedTickValues = [];
                return getValueFn || (getValueFn = function(data) {
                    return data;
                }), formatter ? (axis.tickFormat((function(d) {
                    return formatter.format(getValueFn(d, dataType));
                })), formattedTickValues = tickValues.map((function(d) {
                    return formatter.format(getValueFn(d, dataType));
                }))) : formattedTickValues = tickValues.map((function(d) {
                    return getValueFn(d, dataType);
                })), formattedTickValues;
            }
            function getMinTickValueInterval(formatString, columnType, is100Pct) {
                var isCustomFormat = formatString && !powerbi.NumberFormat.isStandardFormat(formatString);
                if (isCustomFormat) {
                    var precision = powerbi.NumberFormat.getCustomFormatMetadata(formatString, !0).precision;
                    return formatString.indexOf("%") > -1 && (precision += 2), Math.pow(10, -precision);
                }
                return is100Pct ? .01 : columnType.integer ? 1 : 0;
            }
            function createScalarDomain(data, userMin, userMax, axisType, ensureDomain) {
                if (0 === data.length) return null;
                var defaultMinX = d3.min(data, (function(kv) {
                    return d3.min(kv.data, (function(d) {
                        return d && d.categoryValue;
                    }));
                })), defaultMaxX = d3.max(data, (function(kv) {
                    return d3.max(kv.data, (function(d) {
                        return d && d.categoryValue;
                    }));
                }));
                return combineDomain([ userMin, userMax ], [ defaultMinX, defaultMaxX ], ensureDomain);
            }
            function createValueDomain(data, includeZero) {
                if (0 === data.length) return null;
                var minY = d3.min(data, (function(kv) {
                    return d3.min(kv.data, (function(d) {
                        return d && d.value;
                    }));
                })), maxY = d3.max(data, (function(kv) {
                    return d3.max(kv.data, (function(d) {
                        return d && d.value;
                    }));
                }));
                return includeZero ? [ Math.min(minY, 0), Math.max(maxY, 0) ] : [ minY, maxY ];
            }
            function createOrdinalDomain(data) {
                if (_.isEmpty(data)) return [];
                for (var domain = [], firstSeries = data[0], _i = 0, _a = firstSeries.data; _i < _a.length; _i++) {
                    var dp = _a[_i];
                    dp.highlight || domain.push(dp.categoryIndex);
                }
                return domain;
            }
            function createOrdinalScale(pixelSpan, dataDomain, outerPaddingRatio, innerPaddingRatio) {
                void 0 === outerPaddingRatio && (outerPaddingRatio = 0), void 0 === innerPaddingRatio && (innerPaddingRatio = visuals.DefaultInnerPaddingRatio);
                var scale = d3.scale.ordinal().rangeBands([ 0, pixelSpan ], innerPaddingRatio, outerPaddingRatio).domain(dataDomain);
                return scale;
            }
            function isLogScalePossible(domain, axisType) {
                return null != domain && (!isDateTime(axisType) && (domain[0] > 0 && domain[1] > 0 || domain[0] < 0 && domain[1] < 0));
            }
            function createNumericalScale(axisScaleType, pixelSpan, dataDomain, dataType, outerPadding, niceCount, shouldClamp) {
                return void 0 === outerPadding && (outerPadding = 0), axisScaleType === visuals.axisScale.log && isLogScalePossible(dataDomain, dataType) ? createLogScale(pixelSpan, dataDomain, outerPadding, niceCount) : createLinearScale(pixelSpan, dataDomain, outerPadding, niceCount, shouldClamp);
            }
            function createLogScale(pixelSpan, dataDomain, outerPadding, niceCount) {
                void 0 === outerPadding && (outerPadding = 0);
                var scale = d3.scale.log().range([ outerPadding, pixelSpan - outerPadding ]).domain([ dataDomain[0], dataDomain[1] ]).clamp(!0);
                return niceCount && scale.nice(niceCount), scale;
            }
            function createLinearScale(pixelSpan, dataDomain, outerPadding, niceCount, shouldClamp) {
                void 0 === outerPadding && (outerPadding = 0);
                var scale = d3.scale.linear().range([ outerPadding, pixelSpan - outerPadding ]).domain([ dataDomain[0], dataDomain[1] ]).clamp(shouldClamp);
                return niceCount && scale.nice(niceCount), scale;
            }
            function getRangeForColumn(sizeColumn) {
                var result = {};
                return sizeColumn && (result.min = null == sizeColumn.min ? null == sizeColumn.minLocal ? d3.min(sizeColumn.values) : sizeColumn.minLocal : sizeColumn.min, 
                result.max = null == sizeColumn.max ? null == sizeColumn.maxLocal ? d3.max(sizeColumn.values) : sizeColumn.maxLocal : sizeColumn.max), 
                result;
            }
            function applyCustomizedDomain(customizedDomain, originalDomain) {
                var domain = [ void 0, void 0 ];
                return originalDomain && 2 === originalDomain.length && (domain = [ originalDomain[0], originalDomain[1] ]), 
                customizedDomain && 2 === customizedDomain.length && (null != customizedDomain[0] && (domain[0] = customizedDomain[0]), 
                null != customizedDomain[1] && (domain[1] = customizedDomain[1])), null == domain[0] && null == domain[1] ? originalDomain : null != domain[0] && null != domain[1] && domain[0] > domain[1] ? originalDomain : domain;
            }
            function combineDomain(forcedDomain, domain, ensureDomain) {
                var combinedDomain = domain ? [ domain[0], domain[1] ] : [];
                ensureDomain && ((null == combinedDomain[0] || ensureDomain.min < combinedDomain[0]) && (combinedDomain[0] = ensureDomain.min), 
                (null == combinedDomain[1] || ensureDomain.max > combinedDomain[1]) && (combinedDomain[1] = ensureDomain.max));
                var domainBeforeForced = [ combinedDomain[0], combinedDomain[1] ];
                return forcedDomain && 2 === forcedDomain.length && (null != forcedDomain[0] && (combinedDomain[0] = forcedDomain[0]), 
                null != forcedDomain[1] && (combinedDomain[1] = forcedDomain[1]), combinedDomain[0] > combinedDomain[1] && (combinedDomain = domainBeforeForced)), 
                combinedDomain;
            }
            function createAxisLabel(properties, label, unitType, y2) {
                void 0 === y2 && (y2 = !1);
                var propertyName = y2 ? "secAxisStyle" : "axisStyle";
                if (!properties || !properties[propertyName]) return label;
                var styleString = properties[propertyName];
                return visuals.AxisViewModel.createAxisLabel(styleString, label, unitType);
            }
            function scaleShouldClamp(combinedDomain, domain) {
                return !(!combinedDomain || !domain || combinedDomain.length < 2 || domain.length < 2) && (combinedDomain[0] !== domain[0] || combinedDomain[1] !== domain[1]);
            }
            function normalizeNonFiniteNumber(value) {
                return isNaN(value) ? null : value === Number.POSITIVE_INFINITY ? Number.MAX_VALUE : value === Number.NEGATIVE_INFINITY ? -Number.MAX_VALUE : value;
            }
            function powerOfTen(d) {
                var value = Math.abs(d), log10 = Math.log(value) / Math.LN10;
                return log10 = Math.ceil(log10 - 1e-12), value / Math.pow(10, log10) === 1;
            }
            function isHierarchical(axisProperties) {
                var hierarchicalAxisProperties = axisProperties;
                return hierarchicalAxisProperties.isHierarchical;
            }
            function isStackedAxisProperties(properties) {
                var stackedProperties = properties;
                return stackedProperties.isStacked === !0;
            }
            function getMaxWidth(axisProperties, datum) {
                if (_.isEmpty(axisProperties.xLabelMaxWidths)) return axisProperties.xLabelMaxWidth;
                if (isStackedAxisProperties(axisProperties)) return axisProperties.xLabelMaxWidths[datum];
                var tickValues = axisProperties.axis.tickValues(), tickIndex = tickValues.indexOf(datum);
                return axisProperties.xLabelMaxWidths[tickIndex];
            }
            var XLabelMaxAllowedOverflow = 35, MinTickCount = 2, DefaultBestTickCount = 3, LeftPadding = 10, ScalarTickLabelPadding = 3;
            AxisHelper.stackedAxisPadding = 5, AxisHelper.getRecommendedNumberOfTicksForXAxis = getRecommendedNumberOfTicksForXAxis, 
            AxisHelper.getRecommendedNumberOfTicksForYAxis = getRecommendedNumberOfTicksForYAxis, 
            AxisHelper.getBestNumberOfTicks = getBestNumberOfTicks, AxisHelper.hasNonIntegerData = hasNonIntegerData, 
            AxisHelper.getRecommendedTickValues = getRecommendedTickValues, AxisHelper.getRecommendedTickValuesForAnOrdinalRange = getRecommendedTickValuesForAnOrdinalRange, 
            AxisHelper.getRecommendedTickValuesForAQuantitativeRange = getRecommendedTickValuesForAQuantitativeRange, 
            AxisHelper.getMargin = getMargin, AxisHelper.getTickLabelMargins = getTickLabelMargins, 
            AxisHelper.getTickLabelMarginsForAxis = getTickLabelMarginsForAxis, AxisHelper.columnDataTypeHasValue = columnDataTypeHasValue, 
            AxisHelper.createOrdinalType = createOrdinalType, AxisHelper.isOrdinal = isOrdinal, 
            AxisHelper.isOrdinalScale = isOrdinalScale, AxisHelper.isDateTime = isDateTime, 
            AxisHelper.invertScale = invertScale, AxisHelper.extent = extent, AxisHelper.getCategoryThickness = getCategoryThickness, 
            AxisHelper.invertOrdinalScale = invertOrdinalScale, AxisHelper.findClosestXAxisIndex = findClosestXAxisIndex, 
            AxisHelper.lookupOrdinalIndex = lookupOrdinalIndex, AxisHelper.diffScaled = diffScaled, 
            AxisHelper.createDomain = createDomain, AxisHelper.ensureValuesInRange = ensureValuesInRange, 
            AxisHelper.getCategoryValueType = getCategoryValueType, AxisHelper.createAxis = createAxis, 
            AxisHelper.createStackedAxis = createStackedAxis, AxisHelper.createScale = createScale, 
            AxisHelper.createFormatter = createFormatter, AxisHelper.calculateAxisPrecision = calculateAxisPrecision, 
            AxisHelper.getMinTickValueInterval = getMinTickValueInterval, AxisHelper.createValueDomain = createValueDomain;
            var LabelLayoutStrategy;
            !(function(LabelLayoutStrategy) {
                function willLabelsFit(axisProperties, availableWidth, textMeasurer, properties) {
                    var labels = axisProperties.values;
                    if (0 === labels.length) return !1;
                    var labelMaxWidth = void 0 !== axisProperties.xLabelMaxWidth ? axisProperties.xLabelMaxWidth : availableWidth / labels.length;
                    return !labels.some((function(d) {
                        return properties.text = d, textMeasurer(properties) > labelMaxWidth;
                    }));
                }
                function willLabelsWordBreak(axisProperties, margin, availableWidth, textWidthMeasurer, textHeightMeasurer, textTruncator, properties) {
                    var labels = axisProperties.values, labelMaxWidth = void 0 !== axisProperties.xLabelMaxWidth ? axisProperties.xLabelMaxWidth : availableWidth / labels.length, maxRotatedLength = margin.bottom / LabelLayoutStrategy.DefaultRotation.sine, height = textHeightMeasurer(properties), maxNumLines = Math.max(1, Math.floor(margin.bottom / height));
                    if (0 === labels.length) return !1;
                    var mustRotate = labels.some((function(label) {
                        return properties.text = label, !jsCommon.WordBreaker.hasBreakers(label) && textWidthMeasurer(properties) > labelMaxWidth;
                    }));
                    if (mustRotate) return !1;
                    var moreWordBreakChars = labels.filter((function(label, index) {
                        var allowedLengthProjectedOnXAxis = margin.left + axisProperties.outerPadding + axisProperties.categoryThickness * (index + .5) - LeftPadding, allowedLength = allowedLengthProjectedOnXAxis / LabelLayoutStrategy.DefaultRotation.cosine, rotatedLength = Math.min(allowedLength, maxRotatedLength), wordBreakChars = jsCommon.WordBreaker.splitByWidth(label, properties, textWidthMeasurer, labelMaxWidth, maxNumLines, textTruncator).join(" ");
                        properties.text = label;
                        var rotateChars = textTruncator(properties, rotatedLength);
                        return visuals.TextUtil.removeEllipses(wordBreakChars).length >= visuals.TextUtil.removeEllipses(rotateChars).length;
                    }));
                    return moreWordBreakChars.length >= labels.length >> 1;
                }
                function rotate(labelSelection, arg1, textTruncator, textProperties, needRotate, needEllipsis, axisProperties, margin, scrollbarVisible) {
                    var currentNode, dropLabelsOnOverlap, height, rotationPadding = 0;
                    if ("object" == typeof arg1) {
                        var options = arg1;
                        textTruncator = options.textTruncator, textProperties = options.textProperties, 
                        needRotate = options.needRotate, needEllipsis = options.needEllipsis, axisProperties = options.axisProperties, 
                        margin = options.margin, scrollbarVisible = options.scrollbarVisible, currentNode = options.firstVisibleNode, 
                        rotationPadding = options.rotationPadding || 0, dropLabelsOnOverlap = options.dropLabelsOnOverlap, 
                        height = options.height;
                    } else height = arg1, API.deprecated("Calling rotate without using the property bag is deprecated.");
                    var rotation;
                    if (!needRotate) return void labelSelection.each((function(datum) {
                        var axisLabel = d3.select(this), labelText = axisLabel.text();
                        textProperties.text = labelText;
                        var maxLabelWidth = getMaxWidth(axisProperties, datum), newLabelText = textTruncator(textProperties, maxLabelWidth);
                        newLabelText !== labelText && axisLabel.text(newLabelText), axisLabel.style("text-anchor", "middle").attr({
                            dx: "0em",
                            dy: "1em",
                            transform: "rotate(0)"
                        });
                    }));
                    rotation = scrollbarVisible ? LabelLayoutStrategy.DefaultRotationWithScrollbar : LabelLayoutStrategy.DefaultRotation;
                    var maxLabelLength, rotatedXAxisPaddingString, isVertical = powerbi.Double.equalWithPrecision(Math.abs(rotation.cosine), 0, 1e-10), leftMarginWithPadding = margin.left - (isVertical ? LeftPadding : 0), defaultFontHeightInPx = visuals.CartesianHelper.DefaultAxisFontSizeInPx, fontSizeString = textProperties.fontSize, fontSizeInPx = parseInt(fontSizeString, 10), defaultOrSmaller = fontSizeInPx <= defaultFontHeightInPx, fontHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(textProperties), scale = axisProperties.scale, range = scale.range(), categoryThickness = AxisHelper.getCategoryThickness(scale), projectedFontWidth = fontHeight * rotation.sine, projectedFontHeight = isVertical ? 0 : fontHeight * rotation.cosine, xOffset = isVertical ? 0 : projectedFontHeight / rotation.tangent, halfProjectedFontWidth = projectedFontWidth / 2, fontOffsetLeft = xOffset + halfProjectedFontWidth, fontOffsetRight = halfProjectedFontWidth;
                    if (defaultOrSmaller) maxLabelLength = height / rotation.sine, rotatedXAxisPaddingString = "-5.5px"; else {
                        var yAxisPadding = defaultFontHeightInPx / 2, rotatedXAxisPadding = (yAxisPadding + projectedFontHeight) * rotation.sine;
                        rotatedXAxisPaddingString = "-" + rotatedXAxisPadding + "px";
                        var availableYAxisSpace = height - yAxisPadding - projectedFontHeight - (scrollbarVisible ? yAxisPadding : 0);
                        maxLabelLength = needRotate ? availableYAxisSpace / rotation.sine : void 0;
                    }
                    var collisionDetector, halfRangeBand = scale.rangeBand() / 2, halfCategoryThickness = categoryThickness / 2, isHierarchical = !!currentNode;
                    if (dropLabelsOnOverlap) if (isHierarchical) {
                        var leftEdge = rotationPadding + range[0] + halfRangeBand - halfCategoryThickness;
                        collisionDetector = new AxisTickCollisionUtils.HierarchicalCollisionDetector(leftEdge, fontOffsetLeft, fontOffsetRight, currentNode, scale, halfCategoryThickness, rotationPadding);
                    } else {
                        var leftEdge = rotationPadding - (scrollbarVisible ? 0 : leftMarginWithPadding);
                        collisionDetector = new AxisTickCollisionUtils.CollisionDetector(leftEdge, fontOffsetLeft, fontOffsetRight);
                    } else collisionDetector = new AxisTickCollisionUtils.NoCollisionDetector();
                    labelSelection.each((function(datum, index) {
                        var axisLabel = d3.select(this), categoryCenter = range[index] + halfRangeBand;
                        if (dropLabelsOnOverlap && collisionDetector.willCollide(categoryCenter)) return collisionDetector.skipItem(categoryCenter), 
                        void axisLabel.text(null);
                        collisionDetector.addItem(categoryCenter);
                        var labelText = axisLabel.text();
                        textProperties.text = labelText;
                        var allowedLength;
                        if (isVertical) allowedLength = maxLabelLength; else {
                            var center = defaultOrSmaller ? axisProperties.outerPadding + axisProperties.categoryThickness * (index + .5) : categoryCenter, availableXAxisWidth = center + leftMarginWithPadding - projectedFontWidth;
                            allowedLength = availableXAxisWidth / rotation.cosine;
                        }
                        (scrollbarVisible || needEllipsis || allowedLength < maxLabelLength) && (labelText = textTruncator(textProperties, Math.min(allowedLength, maxLabelLength)), 
                        axisLabel.text(labelText)), axisLabel.style("text-anchor", "end").attr({
                            y: textProperties.fontSize,
                            dx: rotatedXAxisPaddingString,
                            dy: rotation.dy,
                            transform: rotation.transform
                        });
                    }));
                }
                function wordBreak(text, axisProperties, maxHeight) {
                    var topPadding = 10, y = null;
                    text.each((function(datum) {
                        var allowedLength = getMaxWidth(axisProperties, datum);
                        if (null == y) {
                            var properties = powerbi.TextMeasurementService.getSvgMeasurementProperties(this), fontHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(properties), baselineDelta = powerbi.TextMeasurementService.estimateSvgTextBaselineDelta(properties);
                            y = topPadding + fontHeight - baselineDelta;
                        }
                        var node = d3.select(this);
                        node.style("text-anchor", "middle").attr({
                            dx: null,
                            dy: null,
                            y: y + "px",
                            transform: "rotate(0)"
                        }), visuals.TextUtil.wordBreak(this, allowedLength, maxHeight);
                    }));
                }
                function clip(text, availableWidth, svgEllipsis) {
                    0 !== text.size() && text.each((function() {
                        var text = d3.select(this);
                        svgEllipsis(text[0][0], availableWidth);
                    }));
                }
                LabelLayoutStrategy.willLabelsFit = willLabelsFit, LabelLayoutStrategy.willLabelsWordBreak = willLabelsWordBreak, 
                LabelLayoutStrategy.DefaultRotation = {
                    sine: Math.sin(Math.PI * (35 / 180)),
                    cosine: Math.cos(Math.PI * (35 / 180)),
                    tangent: Math.tan(Math.PI * (35 / 180)),
                    transform: "rotate(-35)",
                    dy: "-0.5em"
                }, LabelLayoutStrategy.DefaultRotationWithScrollbar = {
                    sine: Math.sin(.5 * Math.PI),
                    cosine: Math.cos(.5 * Math.PI),
                    tangent: Math.tan(.5 * Math.PI),
                    transform: "rotate(-90)",
                    dy: "-0.8em"
                }, LabelLayoutStrategy.rotate = rotate, LabelLayoutStrategy.wordBreak = wordBreak, 
                LabelLayoutStrategy.clip = clip;
            })(LabelLayoutStrategy = AxisHelper.LabelLayoutStrategy || (AxisHelper.LabelLayoutStrategy = {})), 
            AxisHelper.createOrdinalScale = createOrdinalScale, AxisHelper.isLogScalePossible = isLogScalePossible, 
            AxisHelper.createNumericalScale = createNumericalScale, AxisHelper.createLinearScale = createLinearScale, 
            AxisHelper.getRangeForColumn = getRangeForColumn, AxisHelper.applyCustomizedDomain = applyCustomizedDomain, 
            AxisHelper.combineDomain = combineDomain, AxisHelper.createAxisLabel = createAxisLabel, 
            AxisHelper.scaleShouldClamp = scaleShouldClamp, AxisHelper.normalizeNonFiniteNumber = normalizeNonFiniteNumber, 
            AxisHelper.powerOfTen = powerOfTen, AxisHelper.isHierarchical = isHierarchical, 
            AxisHelper.isStackedAxisProperties = isStackedAxisProperties, AxisHelper.getMaxWidth = getMaxWidth;
        })(AxisHelper = visuals.AxisHelper || (visuals.AxisHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {})), powerbi.define("PowerBIVisuals/Visuals/common/colorEnumerationHelper", (function(imports) {
    function enumerateCategoryDataColors(options) {
        if (options.dataView) {
            var enumeration = options.enumeration, dataPoints = options.dataPoints, staticObjects = options.dataView.metadata && options.dataView.metadata.objects, showAllDataPoints = DataViewObjects.getValue(staticObjects, showAllDataPointsProp, !1), defaultCategoryColor = DataViewObjects.getFillColor(staticObjects, visuals.columnChartProps.dataPoint.defaultCategoryColor);
            if (!defaultCategoryColor) {
                var defaultColor = DataViewObjects.getFillColor(staticObjects, visuals.columnChartProps.dataPoint.defaultColor);
                defaultCategoryColor = defaultColor ? defaultColor : options.style.colorPalette.dataColors.getColorByIndex(0).value;
            }
            if (enumeration.pushInstance({
                objectName: "dataPoint",
                selector: null,
                properties: {
                    defaultCategoryColor: {
                        solid: {
                            color: defaultCategoryColor
                        }
                    },
                    showAllDataPoints: showAllDataPoints
                }
            }), showAllDataPoints) for (var i = 0, ilen = dataPoints.length; i < ilen; i++) {
                var dataPoint = dataPoints[i];
                enumeration.pushInstance({
                    objectName: "dataPoint",
                    displayName: dataPoint.displayName,
                    selector: powerbi.data.Selector.normalizeSelector(dataPoint.identity.getSelector()),
                    properties: {
                        fill: {
                            solid: {
                                color: dataPoint.color
                            }
                        }
                    }
                });
            }
        }
    }
    function enumerateSeriesDataColors(options) {
        for (var enumeration = options.enumeration, dataPoints = options.dataPoints, i = 0, ilen = dataPoints.length; i < ilen; i++) {
            var dataPoint = dataPoints[i];
            enumeration.pushInstance({
                objectName: "dataPoint",
                displayName: dataPoint.displayName,
                selector: powerbi.data.Selector.normalizeSelector(dataPoint.identity.getSelector()),
                properties: {
                    fill: {
                        solid: {
                            color: dataPoint.color
                        }
                    }
                }
            });
        }
    }
    var DataViewObjects = powerbi.DataViewObjects, visuals = powerbi.visuals, showAllDataPointsProp = {
        objectName: "dataPoint",
        propertyName: "showAllDataPoints"
    };
    return {
        enumerateCategoryDataColors: enumerateCategoryDataColors,
        enumerateSeriesDataColors: enumerateSeriesDataColors
    };
}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var ColumnUtil, rectName = "rect";
        !(function(ColumnUtil) {
            function getCategoryAxis(data, size, layout, isVertical, forcedXMin, forcedXMax, axisScaleType, axisDisplayUnits, axisPrecision, ensureXDomain, margin, preventNice, innerPaddingRatio) {
                var categoryThickness = layout.categoryThickness, isScalar = layout.isScalar, outerPaddingRatio = layout.outerPaddingRatio, domain = visuals.AxisHelper.createDomain(data.series, data.categoryMetadata ? data.categoryMetadata.type : powerbi.ValueType.fromDescriptor({
                    text: !0
                }), isScalar, [ forcedXMin, forcedXMax ], ensureXDomain), axisProperties = visuals.AxisHelper.createAxis({
                    pixelSpan: size,
                    dataDomain: domain,
                    metaDataColumn: data.categoryMetadata,
                    formatString: visuals.valueFormatter.getFormatString(data.categoryMetadata, visuals.columnChartProps.general.formatString),
                    outerPadding: categoryThickness * outerPaddingRatio,
                    outerPaddingRatio: outerPaddingRatio,
                    isCategoryAxis: !0,
                    isScalar: isScalar,
                    isVertical: isVertical,
                    categoryThickness: categoryThickness,
                    useTickIntervalForDisplayUnits: !0,
                    getValueFn: function(index, type) {
                        return visuals.CartesianHelper.lookupXValue(data, index, type, isScalar);
                    },
                    scaleType: axisScaleType,
                    axisDisplayUnits: axisDisplayUnits,
                    axisPrecision: axisPrecision,
                    margin: margin,
                    allowSingleScalarTick: isScalar,
                    preventNice: preventNice,
                    innerPaddingRatio: innerPaddingRatio
                });
                return layout.categoryThickness = axisProperties.categoryThickness, axisProperties;
            }
            function applyInteractivity(columns, onDragStart) {
                onDragStart && columns.attr("draggable", "true").on("dragstart", onDragStart);
            }
            function getFillOpacity(selected, highlight, hasSelection, hasPartialHighlights, baseOpacity) {
                return void 0 === baseOpacity && (baseOpacity = ColumnUtil.DefaultOpacity), hasPartialHighlights && !highlight || hasSelection && !selected ? ColumnUtil.DimmedOpacity * baseOpacity : baseOpacity;
            }
            function getClosestColumnIndex(coordinate, columnsCenters) {
                for (var currentIndex = 0, distance = Number.MAX_VALUE, i = 0, ilen = columnsCenters.length; i < ilen; i++) {
                    var currentDistance = Math.abs(coordinate - columnsCenters[i]);
                    currentDistance < distance && (distance = currentDistance, currentIndex = i);
                }
                return currentIndex;
            }
            function setSelectedColumnOpacity(mainGraphicsContext, columnGroupSelector, selectedColumnIndex, lastSelectedColumnIndex, forceDimAll) {
                var useAnimation = !forceDimAll, allColumnDataPoints = mainGraphicsContext.selectAll(ColumnUtil.SeriesClasses.selector).selectAll(rectName + columnGroupSelector), dataPointsToHighlight = allColumnDataPoints.filter((function(d) {
                    return d.categoryIndex === selectedColumnIndex;
                }));
                dataPointsToHighlight.transition().duration(0).style("fill-opacity", ColumnUtil.DefaultOpacity);
                var dataPointsToDim = allColumnDataPoints.filter((function(d) {
                    var isFirstColumnBeingSelected = void 0 === lastSelectedColumnIndex;
                    if (isFirstColumnBeingSelected || forceDimAll) return d.categoryIndex !== selectedColumnIndex;
                    var isLastSelectedColumnIndex = d.categoryIndex === lastSelectedColumnIndex, isNotSelectedColumnIndex = d.categoryIndex !== selectedColumnIndex;
                    return isLastSelectedColumnIndex && isNotSelectedColumnIndex;
                })), dimSelectionConfiguredWithTransition = useAnimation ? dataPointsToDim.transition() : dataPointsToDim;
                dimSelectionConfiguredWithTransition.style("fill-opacity", ColumnUtil.DimmedOpacity);
            }
            function drawSeries(data, graphicsContext, axisOptions) {
                var colGroupSelection = graphicsContext.selectAll(ColumnUtil.SeriesClasses.selector), series = colGroupSelection.data(data.series, (function(d) {
                    return d.key;
                }));
                return series.enter().append("g").classed(ColumnUtil.SeriesClasses.class, !0), series.style({
                    fill: function(d) {
                        return d.color;
                    }
                }), series.exit().remove(), series;
            }
            function drawDefaultShapes(data, series, layout, itemCS, filterZeros, hasSelection) {
                var dataSelector;
                dataSelector = filterZeros ? function(d) {
                    var filteredData = _.filter(d.data, (function(datapoint) {
                        return !!datapoint.value;
                    }));
                    return filteredData;
                } : function(d) {
                    return d.data;
                };
                var shapeSelection = series.selectAll(itemCS.selector), shapes = shapeSelection.data(dataSelector, (function(d) {
                    return d.key;
                }));
                return shapes.enter().append(rectName).attr("class", (function(d) {
                    return itemCS.class.concat(d.highlight ? " highlight" : "");
                })), shapes.style("fill-opacity", (function(d) {
                    return ColumnUtil.getFillOpacity(d.selected, d.highlight, hasSelection, data.hasHighlights);
                })).style("fill", (function(d) {
                    return d.color !== data.series[d.seriesIndex].color ? d.color : null;
                })).attr(layout.shapeLayout), shapes.exit().remove(), shapes;
            }
            function drawDefaultLabels(series, context, layout, viewPort, isAnimator, animationDuration) {
                if (void 0 === isAnimator && (isAnimator = !1), series) {
                    for (var seriesData = series.data(), dataPoints = [], i = 0, len = seriesData.length; i < len; i++) Array.prototype.push.apply(dataPoints, seriesData[i].data);
                    return visuals.dataLabelUtils.drawDefaultLabelsForDataPointChart(dataPoints, context, layout, viewPort, isAnimator, animationDuration);
                }
                visuals.dataLabelUtils.cleanDataLabels(context);
            }
            function normalizeInfinityInScale(scale) {
                for (var scaledDomain = scale.domain(), i = 0, len = scaledDomain.length; i < len; ++i) scaledDomain[i] === Number.POSITIVE_INFINITY ? scaledDomain[i] = Number.MAX_VALUE : scaledDomain[i] === Number.NEGATIVE_INFINITY && (scaledDomain[i] = -Number.MAX_VALUE);
                scale.domain(scaledDomain);
            }
            function calculatePosition(d, axisOptions) {
                var xScale = axisOptions.xScale, yScale = axisOptions.yScale, scaledY0 = yScale(0), scaledX0 = xScale(0);
                switch (d.chartType) {
                  case 18:
                  case 50:
                    return scaledX0 + Math.abs(visuals.AxisHelper.diffScaled(xScale, 0, d.valueAbsolute)) + visuals.AxisHelper.diffScaled(xScale, d.position - d.valueAbsolute, 0) + visuals.dataLabelUtils.defaultColumnLabelMargin;

                  case 10:
                    return scaledX0 + visuals.AxisHelper.diffScaled(xScale, Math.max(0, d.value), 0) + visuals.dataLabelUtils.defaultColumnLabelMargin;

                  case 20:
                  case 52:
                  case 68:
                    return scaledY0 + visuals.AxisHelper.diffScaled(yScale, d.position, 0) - visuals.dataLabelUtils.defaultColumnLabelMargin;

                  case 12:
                    return scaledY0 + visuals.AxisHelper.diffScaled(yScale, Math.max(0, d.value), 0) - visuals.dataLabelUtils.defaultColumnLabelMargin;
                }
            }
            function createLabelDataPoints(data, layout, graphicsContext, yProps, isBar, isClustered) {
                for (var labelDataPointGroups = [], series = data.series, formattersCache = visuals.LabelUtils.createColumnFormatterCacheManager(), shapeLayout = layout.shapeLayout, isScalar = data.scalarCategoryAxis, _loop_2 = function(seriesIndex, seriesCount) {
                    var currentSeries = series[seriesIndex], labelSettings = currentSeries.labelSettings ? currentSeries.labelSettings : data.dataLabelsSettings;
                    if (!labelSettings.show) return labelDataPointGroups[seriesIndex] = {
                        labelDataPoints: [],
                        maxNumberOfLabels: 0
                    }, "continue";
                    var densityAtMax = "100" === labelSettings.labelDensity, maxNumberOfLabels = void 0;
                    if (!densityAtMax && isScalar) {
                        var numberOfLabelsToRender = visuals.LabelUtils.getNumberOfLabelsToRender(graphicsContext.viewportWidth, _.parseInt(labelSettings.labelDensity), minimumLabelsToRender, visuals.MinMaxLabelDataPointSorter.estimatedLabelWidth);
                        maxNumberOfLabels = numberOfLabelsToRender;
                    } else maxNumberOfLabels = currentSeries.data.length;
                    for (var labelUnitsAndPrecision = visuals.LabelUtils.getLabelUnitAndPrecisionForAxis(yProps, labelSettings), seriesLabelDataPoints = [], createLabelDataPoint = function(dataPoint) {
                        var formatString;
                        formatString = graphicsContext.is100Pct ? visuals.LabelUtils.hundredPercentFormat : dataPoint.labelFormatString;
                        var validPositions, formatter = formattersCache.getOrCreate(formatString, labelSettings, labelUnitsAndPrecision.units, labelUnitsAndPrecision.getPrecision(!!formatString, currentSeries.type)), text = visuals.LabelUtils.getLabelFormattedText(formatter.format(dataPoint.value)), fontProperties = labelSettings ? labelSettings.fontProperties : visuals.LabelUtils.defaultFontProperties, properties = visuals.FontProperties.toTextProperties(fontProperties, text), textWidth = powerbi.TextMeasurementService.measureSvgTextWidth(properties), textHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(properties, !0), parentRect = {
                            left: shapeLayout.x(dataPoint),
                            top: shapeLayout.y(dataPoint),
                            width: shapeLayout.width(dataPoint),
                            height: shapeLayout.height(dataPoint)
                        };
                        validPositions = isClustered ? getValidClusteredPositions(labelSettings.position) : getValidStackedPositions(labelSettings.position);
                        var orientation;
                        orientation = isBar ? dataPoint.value >= 0 ? 3 : 4 : dataPoint.value >= 0 ? 1 : 2;
                        var labelDataPoint = {
                            isPreferred: !1,
                            text: text,
                            textSize: {
                                width: textWidth,
                                height: textHeight
                            },
                            outsideFill: getLabelFill(labelSettings.fontProperties.color, !1, graphicsContext.isComboChart),
                            insideFill: getLabelFill(labelSettings.fontProperties.color, !0, graphicsContext.isComboChart),
                            parentType: 1,
                            parentShape: {
                                rect: parentRect,
                                orientation: orientation,
                                validPositions: validPositions
                            },
                            identity: dataPoint.identity,
                            fontProperties: fontProperties
                        };
                        return labelDataPoint;
                    }, _i = 0, _a = currentSeries.data; _i < _a.length; _i++) {
                        var dataPoint = _a[_i];
                        if (null != dataPoint && null != dataPoint.value && (!data.hasHighlights || dataPoint.highlight)) {
                            var labelDataPoint = createLabelDataPoint(dataPoint);
                            seriesLabelDataPoints.push(labelDataPoint);
                        }
                    }
                    labelDataPointGroups[seriesIndex] = {
                        labelDataPoints: seriesLabelDataPoints,
                        maxNumberOfLabels: maxNumberOfLabels
                    };
                }, seriesIndex = 0, seriesCount = series.length; seriesIndex < seriesCount; seriesIndex++) _loop_2(seriesIndex, seriesCount);
                if (data && data.scalarCategoryAxis) {
                    var sorter = new visuals.MinMaxLabelDataPointSorter({
                        unsortedLabelDataPointGroups: labelDataPointGroups,
                        series: series,
                        viewport: {
                            width: graphicsContext.viewportWidth,
                            height: graphicsContext.viewportHeight
                        },
                        yAxisProperties: yProps
                    });
                    return sorter.getSortedDataLabels();
                }
                return labelDataPointGroups;
            }
            function getLabelFill(labelColor, isInside, isCombo) {
                return labelColor ? labelColor : isInside && !isCombo ? visuals.LabelUtils.defaultInsideLabelColor : visuals.LabelUtils.defaultLabelColor;
            }
            function getValidClusteredPositions(position) {
                switch (position) {
                  case visuals.labelPosition.insideEnd:
                    return [ 4 ];

                  case visuals.labelPosition.insideCenter:
                    return [ 1 ];

                  case visuals.labelPosition.insideBase:
                    return [ 2 ];

                  case visuals.labelPosition.outsideEnd:
                    return [ 16 ];

                  default:
                    return ColumnUtil.validLabelPositionsAutoClustered;
                }
            }
            function getValidStackedPositions(position) {
                switch (position) {
                  case visuals.labelPosition.insideEnd:
                    return [ 4 ];

                  case visuals.labelPosition.insideBase:
                    return [ 2 ];

                  case visuals.labelPosition.insideCenter:
                    return [ 1 ];

                  default:
                    return ColumnUtil.validLabelPositionsAutoStacked;
                }
            }
            ColumnUtil.DimmedOpacity = .4, ColumnUtil.DefaultOpacity = 1, ColumnUtil.SeriesClasses = jsCommon.CssConstants.createClassAndSelector("series"), 
            ColumnUtil.validLabelPositionsAutoClustered = [ 16, 4, 1, 2 ], ColumnUtil.validLabelPositionsAutoStacked = [ 1, 4, 2 ];
            var minimumLabelsToRender = 4;
            ColumnUtil.getCategoryAxis = getCategoryAxis, ColumnUtil.applyInteractivity = applyInteractivity, 
            ColumnUtil.getFillOpacity = getFillOpacity, ColumnUtil.getClosestColumnIndex = getClosestColumnIndex, 
            ColumnUtil.setSelectedColumnOpacity = setSelectedColumnOpacity, ColumnUtil.drawSeries = drawSeries, 
            ColumnUtil.drawDefaultShapes = drawDefaultShapes, ColumnUtil.drawDefaultLabels = drawDefaultLabels, 
            ColumnUtil.normalizeInfinityInScale = normalizeInfinityInScale, ColumnUtil.calculatePosition = calculatePosition, 
            ColumnUtil.createLabelDataPoints = createLabelDataPoints;
        })(ColumnUtil = visuals.ColumnUtil || (visuals.ColumnUtil = {}));
        var ClusteredUtil;
        !(function(ClusteredUtil) {
            function clearColumns(mainGraphicsContext, itemCS) {
                var cols = mainGraphicsContext.selectAll(itemCS.selector).data([]);
                cols.exit().remove();
            }
            ClusteredUtil.clearColumns = clearColumns;
        })(ClusteredUtil = visuals.ClusteredUtil || (visuals.ClusteredUtil = {}));
        var StackedUtil;
        !(function(StackedUtil) {
            function getSize(scale, size, zeroVal) {
                return void 0 === zeroVal && (zeroVal = 0), visuals.AxisHelper.diffScaled(scale, zeroVal, size);
            }
            function calcValueDomain(data, is100pct) {
                var defaultNumberRange = {
                    min: 0,
                    max: 10
                };
                if (0 === data.length) return defaultNumberRange;
                var min = d3.min(data, (function(d) {
                    return d3.min(d.data, (function(e) {
                        return e.position - e.valueAbsolute;
                    }));
                })), max = d3.max(data, (function(d) {
                    return d3.max(d.data, (function(e) {
                        return e.position;
                    }));
                }));
                return is100pct && (min = powerbi.Double.roundToPrecision(min, PctRoundingError), 
                max = powerbi.Double.roundToPrecision(max, PctRoundingError)), {
                    min: min,
                    max: max
                };
            }
            function getStackedMultiplier(rawValues, categoryIndex) {
                for (var pos = 0, neg = 0, seriesIndex = 0, seriesCount = rawValues.length; seriesIndex < seriesCount; seriesIndex++) {
                    var value = rawValues[seriesIndex][categoryIndex];
                    value = visuals.AxisHelper.normalizeNonFiniteNumber(value), value > 0 ? pos += value : value < 0 && (neg -= value);
                }
                var absTotal = pos + neg;
                return {
                    pos: pos ? pos / absTotal / pos : 1,
                    neg: neg ? neg / absTotal / neg : 1
                };
            }
            function clearColumns(mainGraphicsContext, itemCS) {
                var bars = mainGraphicsContext.selectAll(itemCS.selector).data([]);
                bars.exit().remove();
            }
            var PctRoundingError = 1e-4;
            StackedUtil.getSize = getSize, StackedUtil.calcValueDomain = calcValueDomain, StackedUtil.getStackedMultiplier = getStackedMultiplier, 
            StackedUtil.clearColumns = clearColumns;
        })(StackedUtil = visuals.StackedUtil || (visuals.StackedUtil = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var DataViewConcatenateUtil, HierarchyVisitor = powerbi.data.HierarchyVisitor;
        !(function(DataViewConcatenateUtil) {
            function concatenateCategories(dataView, formatStringProp, roleName) {
                if (!dataView || !dataView.categorical || _.isEmpty(dataView.categorical.categories)) return dataView;
                var categories = dataView.categorical.categories, concatenatedValues = buildConcatenatedValues(categories, formatStringProp), concatenatedMetadataColumn = buildConcatenatedMetadataColumn(categories, roleName), newDataView = powerbi.Prototype.inheritSingle(dataView), newColumns = powerbi.Prototype.inheritSingle(newDataView.metadata.columns);
                newColumns.push(concatenatedMetadataColumn);
                var newMetadata = powerbi.Prototype.inheritSingle(newDataView.metadata);
                newMetadata.columns = newColumns, newDataView.metadata = newMetadata;
                var dataViewCategorical = dataView.categorical, dataViewObjects = powerbi.data.DataViewCategoricalUtils.getCategoriesDataViewObjects(dataViewCategorical.categories), newCategoryColumn = {
                    source: concatenatedMetadataColumn,
                    values: concatenatedValues
                }, firstColumn = dataView.categorical.categories[0];
                firstColumn.identity && (newCategoryColumn.identity = firstColumn.identity), firstColumn.identityFields && (newCategoryColumn.identityFields = firstColumn.identityFields), 
                dataViewObjects && (newCategoryColumn.objects = dataViewObjects);
                var newCategories = [ newCategoryColumn ], newCategorical = powerbi.Prototype.inheritSingle(dataViewCategorical);
                return newCategorical.categories = newCategories, newDataView.categorical = newCategorical, 
                newDataView;
            }
            function buildConcatenatedValues(categoryColumns, formatStringProp) {
                for (var valuesParts = [], _i = 0, categoryColumns_1 = categoryColumns; _i < categoryColumns_1.length; _i++) for (var categoryColumn = categoryColumns_1[_i], values = categoryColumn.values, formatString = visuals.valueFormatter.getFormatString(categoryColumn.source, formatStringProp), formatter = visuals.valueFormatter.create({
                    format: formatString,
                    value: values[0],
                    value2: values[values.length - 1],
                    displayUnitSystemType: powerbi.DisplayUnitSystemType.Verbose,
                    columnType: categoryColumn.source.type
                }), i = 0, len = categoryColumn.values.length; i < len; i++) {
                    var value = categoryColumn.values[i], formattedValue = formatter.format(value), valueParts = valuesParts[i];
                    valueParts || (valueParts = [], valuesParts.splice(i, 0, valueParts)), valueParts.push(formattedValue);
                }
                return _.map(valuesParts, (function(concatenatedValueParts) {
                    return concatenatedValueParts.join(" ");
                }));
            }
            function buildConcatenatedMetadataColumn(categoryColumns, roleName) {
                var categoryLevels = CategoryLevelUtils.getCategoryLevels(categoryColumns), concatenatedCategoryLevels = CategoryLevelUtils.concatenateCategoryLevels(categoryLevels), newRoles = {};
                newRoles[roleName] = !0;
                var newColumnMetadata = {
                    displayName: concatenatedCategoryLevels.displayName,
                    roles: newRoles,
                    type: powerbi.ValueType.fromPrimitiveTypeAndCategory(1)
                }, columnSourceForCurrentDrillLevel = _.last(categoryColumns).source;
                return void 0 !== columnSourceForCurrentDrillLevel.isMeasure && (newColumnMetadata.isMeasure = columnSourceForCurrentDrillLevel.isMeasure), 
                newColumnMetadata.queryName = columnSourceForCurrentDrillLevel.queryName, newColumnMetadata;
            }
            function concatenateValues(formattedValues) {
                return formattedValues.join(" ");
            }
            DataViewConcatenateUtil.concatenateCategories = concatenateCategories, DataViewConcatenateUtil.buildConcatenatedValues = buildConcatenatedValues, 
            DataViewConcatenateUtil.buildConcatenatedMetadataColumn = buildConcatenatedMetadataColumn, 
            DataViewConcatenateUtil.concatenateValues = concatenateValues;
        })(DataViewConcatenateUtil = visuals.DataViewConcatenateUtil || (visuals.DataViewConcatenateUtil = {}));
        var CategoryLevelUtils;
        !(function(CategoryLevelUtils) {
            function concatenateCategoryLevels(categoryLevels) {
                return {
                    displayName: _.map(categoryLevels, (function(categoryLevel) {
                        return categoryLevel.displayName;
                    })).join(" "),
                    value: _.map(categoryLevels, (function(categoryLevel) {
                        return categoryLevel.value;
                    })).join(" ")
                };
            }
            function getCategoryLevels(categories, categoryIndex, formatStringProp) {
                for (var includeValue = null != categoryIndex, currentHierarchyName = null, deepestHierarchyLevel = null, currentValueParts = null, categoryLevels = [], _i = 0, categories_2 = categories; _i < categories_2.length; _i++) {
                    var categoryColumn = categories_2[_i], metadataColumn = categoryColumn.source;
                    if (metadataColumn) {
                        var hierarchyName = metadataColumn.expr ? HierarchyVisitor.getProperty(metadataColumn.expr) : null;
                        null != hierarchyName ? (hierarchyName === currentHierarchyName ? deepestHierarchyLevel = metadataColumn.displayName : (null !== currentHierarchyName && categoryLevels.push({
                            displayName: currentHierarchyName + " " + deepestHierarchyLevel,
                            value: currentValueParts.join(" ")
                        }), currentHierarchyName = hierarchyName, deepestHierarchyLevel = metadataColumn.displayName, 
                        currentValueParts = null, includeValue && (currentValueParts = [])), includeValue && currentValueParts.push(visuals.converterHelper.formatFromMetadataColumn(categoryColumn.values[categoryIndex], metadataColumn, formatStringProp, !1))) : null != currentHierarchyName ? (categoryLevels.push({
                            displayName: currentHierarchyName + " " + deepestHierarchyLevel,
                            value: currentValueParts ? currentValueParts.join(" ") : null
                        }), currentHierarchyName = null, deepestHierarchyLevel = null, currentValueParts = null, 
                        categoryLevels.push({
                            displayName: metadataColumn.displayName,
                            value: includeValue ? visuals.converterHelper.formatFromMetadataColumn(categoryColumn.values[categoryIndex], metadataColumn, formatStringProp, !1) : null
                        })) : categoryLevels.push({
                            displayName: metadataColumn.displayName,
                            value: includeValue ? visuals.converterHelper.formatFromMetadataColumn(categoryColumn.values[categoryIndex], metadataColumn, formatStringProp, !1) : null
                        });
                    }
                }
                return null != currentHierarchyName && categoryLevels.push({
                    displayName: currentHierarchyName + " " + deepestHierarchyLevel,
                    value: includeValue ? currentValueParts.join(" ") : null
                }), categoryLevels;
            }
            CategoryLevelUtils.concatenateCategoryLevels = concatenateCategoryLevels, CategoryLevelUtils.getCategoryLevels = getCategoryLevels;
        })(CategoryLevelUtils = visuals.CategoryLevelUtils || (visuals.CategoryLevelUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var converterHelper, DataRoleHelper = powerbi.data.DataRoleHelper;
        !(function(converterHelper) {
            function categoryIsAlsoSeriesRole(dataView, seriesRoleName, categoryRoleName) {
                if (dataView.categories && dataView.categories.length > 0) {
                    var category = dataView.categories[0];
                    return category.source && DataRoleHelper.hasRole(category.source, seriesRoleName) && DataRoleHelper.hasRole(category.source, categoryRoleName);
                }
                return !1;
            }
            function getPivotedCategories(dataView, formatStringProp) {
                if (dataView.categories && dataView.categories.length > 0) {
                    var category = _.last(dataView.categories), categoryValues = category.values;
                    return category.values.length > 0 ? {
                        categories: categoryValues,
                        categoryFormatter: visuals.valueFormatter.create({
                            format: visuals.valueFormatter.getFormatString(category.source, formatStringProp),
                            value: categoryValues[0],
                            value2: categoryValues[categoryValues.length - 1],
                            displayUnitSystemType: powerbi.DisplayUnitSystemType.Verbose,
                            columnType: category.source.type
                        }),
                        categoryIdentities: category.identity,
                        categoryObjects: category.objects
                    } : {
                        categories: [],
                        categoryFormatter: {
                            format: visuals.valueFormatter.format
                        }
                    };
                }
                return defaultCategories();
            }
            function getSeriesName(source) {
                return void 0 !== source.groupName ? source.groupName : source.queryName;
            }
            function getFormattedLegendLabel(source, values, formatStringProp) {
                var sourceForFormat = source, nameForFormat = source.displayName;
                return void 0 !== source.groupName && (sourceForFormat = values.source, nameForFormat = source.groupName), 
                visuals.valueFormatter.format(nameForFormat, visuals.valueFormatter.getFormatString(sourceForFormat, formatStringProp));
            }
            function defaultCategories() {
                return {
                    categories: [ null ],
                    categoryFormatter: {
                        format: visuals.valueFormatter.format
                    }
                };
            }
            function createAxisLabel(metadataColumns) {
                var label;
                if (metadataColumns instanceof Array) {
                    var displayNames = [];
                    displayNames = metadataColumns.map((function(m) {
                        return m ? m.displayName : "";
                    })).filter((function(value, index, self) {
                        return "" !== value && self.indexOf(value) === index;
                    })), label = visuals.valueFormatter.formatListAnd(displayNames);
                } else metadataColumns && (label = metadataColumns.displayName);
                return label;
            }
            function createAxesLabels(categoryAxisProperties, valueAxisProperties, category, values) {
                var xAxisLabel = null, yAxisLabel = null;
                if (categoryAxisProperties && category && category.displayName && (xAxisLabel = category.displayName), 
                valueAxisProperties) {
                    var valuesNames = [];
                    values && (valuesNames = values.map((function(v) {
                        return v ? v.displayName : "";
                    })).filter((function(value, index, self) {
                        return "" !== value && self.indexOf(value) === index;
                    })), yAxisLabel = visuals.valueFormatter.formatListAnd(valuesNames));
                }
                return {
                    xAxisLabel: xAxisLabel,
                    yAxisLabel: yAxisLabel
                };
            }
            function isImageUrlColumn(column) {
                var misc = getMiscellaneousTypeDescriptor(column);
                return null != misc && misc.imageUrl === !0;
            }
            function isWebUrlColumn(column) {
                var misc = getMiscellaneousTypeDescriptor(column);
                return null != misc && misc.webUrl === !0;
            }
            function getMiscellaneousTypeDescriptor(column) {
                return column && column.type && column.type.misc;
            }
            function hasImageUrlColumn(dataView) {
                return !(!dataView || !dataView.metadata || _.isEmpty(dataView.metadata.columns)) && _.any(dataView.metadata.columns, (function(column) {
                    return isImageUrlColumn(column) === !0;
                }));
            }
            function formatFromMetadataColumn(value, column, formatStringProp, suppressTypeFallback) {
                void 0 === suppressTypeFallback && (suppressTypeFallback = !0), !suppressTypeFallback && column && column.format && (suppressTypeFallback = !0);
                var formatString = visuals.valueFormatter.getFormatString(column, formatStringProp, suppressTypeFallback);
                return !formatString && column && (formatString = column.format), visuals.valueFormatter.format(value, formatString);
            }
            converterHelper.categoryIsAlsoSeriesRole = categoryIsAlsoSeriesRole, converterHelper.getPivotedCategories = getPivotedCategories, 
            converterHelper.getSeriesName = getSeriesName, converterHelper.getFormattedLegendLabel = getFormattedLegendLabel, 
            converterHelper.createAxisLabel = createAxisLabel, converterHelper.createAxesLabels = createAxesLabels, 
            converterHelper.isImageUrlColumn = isImageUrlColumn, converterHelper.isWebUrlColumn = isWebUrlColumn, 
            converterHelper.hasImageUrlColumn = hasImageUrlColumn, converterHelper.formatFromMetadataColumn = formatFromMetadataColumn;
        })(converterHelper = visuals.converterHelper || (visuals.converterHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var dataLabelUtils, createClassAndSelector = jsCommon.CssConstants.createClassAndSelector, EnumExtensions = jsCommon.EnumExtensions, LabelStyle = visuals.labelStyle, PixelConverter = jsCommon.PixelConverter;
        !(function(dataLabelUtils) {
            function updateLabelSettingsFromLabelsObject(labelsObj, labelSettings, supportsLabelOrientation) {
                labelsObj && (void 0 !== labelsObj.show && (labelSettings.show = labelsObj.show), 
                void 0 !== labelsObj.showSeries && (labelSettings.show = labelsObj.showSeries), 
                void 0 !== labelsObj.color && (labelSettings.labelColor = labelsObj.color.solid.color), 
                void 0 !== labelsObj.labelDisplayUnits && (labelSettings.displayUnits = labelsObj.labelDisplayUnits), 
                void 0 !== labelsObj.labelPrecision && (labelSettings.precision = labelsObj.labelPrecision >= 0 ? labelsObj.labelPrecision : dataLabelUtils.defaultLabelPrecision), 
                void 0 !== labelsObj.fontSize && (labelSettings.fontSize = labelsObj.fontSize), 
                void 0 !== labelsObj.showAll && (labelSettings.showLabelPerSeries = labelsObj.showAll), 
                void 0 !== labelsObj.labelStyle && (labelSettings.labelStyle = labelsObj.labelStyle), 
                void 0 !== labelsObj.labelOrientation && (labelSettings.labelOrientation = supportsLabelOrientation ? labelsObj.labelOrientation : labelSettings.labelOrientation), 
                labelsObj.labelPosition && (labelSettings.position = labelsObj.labelPosition));
            }
            function getDefaultLabelSettings(show, labelColor, fontSize) {
                return void 0 === show && (show = !1), {
                    show: show,
                    position: 0,
                    displayUnits: 0,
                    precision: dataLabelUtils.defaultLabelPrecision,
                    labelColor: labelColor || dataLabelUtils.defaultLabelColor,
                    fontSize: fontSize || dataLabelUtils.DefaultFontSizeInPt
                };
            }
            function getDefaultCardLabelSettings(labelColor, categoryLabelColor, fontSize) {
                var labelSettings = getDefaultLabelSettings(!0, labelColor, fontSize);
                return labelSettings.showCategory = !0, labelSettings.categoryLabelColor = categoryLabelColor, 
                labelSettings;
            }
            function getDefaultTreemapLabelSettings() {
                return {
                    show: !1,
                    displayUnits: 0,
                    precision: dataLabelUtils.defaultLabelPrecision,
                    labelColor: dataLabelUtils.defaultInsideLabelColor,
                    showCategory: !0
                };
            }
            function getDefaultSunburstLabelSettings() {
                return {
                    show: !1,
                    labelColor: dataLabelUtils.defaultInsideLabelColor,
                    fontSize: dataLabelUtils.DefaultFontSizeInPt,
                    displayUnits: 0,
                    precision: dataLabelUtils.defaultLabelPrecision,
                    showCategory: !0
                };
            }
            function getDefaultWaterfallLabelSettings(show, labelColor, fontSize) {
                return void 0 === show && (show = !1), {
                    show: show,
                    labelOrientation: 1,
                    position: visuals.labelPosition.auto,
                    displayUnits: 0,
                    precision: dataLabelUtils.defaultLabelPrecision,
                    labelColor: labelColor || dataLabelUtils.defaultLabelColor,
                    fontSize: fontSize || dataLabelUtils.DefaultFontSizeInPt
                };
            }
            function getDefaultColumnLabelSettings(isLabelPositionInside) {
                var labelSettings = getDefaultLabelSettings(!1, void 0);
                return labelSettings.position = null, labelSettings.labelColor = void 0, labelSettings.labelDensity = dataLabelUtils.defaultLabelDensity, 
                labelSettings.labelOrientation = 1, labelSettings;
            }
            function getDefaultPointLabelSettings() {
                return {
                    show: !1,
                    position: 0,
                    displayUnits: 0,
                    precision: dataLabelUtils.defaultLabelPrecision,
                    labelColor: dataLabelUtils.defaultLabelColor,
                    fontSize: dataLabelUtils.DefaultFontSizeInPt
                };
            }
            function getDefaultLineChartLabelSettings(isComboChart) {
                return {
                    show: !1,
                    position: 0,
                    displayUnits: 0,
                    precision: dataLabelUtils.defaultLabelPrecision,
                    labelColor: dataLabelUtils.defaultLabelColor,
                    fontSize: dataLabelUtils.DefaultFontSizeInPt,
                    labelDensity: dataLabelUtils.defaultLabelDensity
                };
            }
            function getDefaultMapLabelSettings() {
                return {
                    show: !1,
                    showCategory: !1,
                    position: 0,
                    displayUnits: 0,
                    precision: dataLabelUtils.defaultLabelPrecision,
                    labelColor: dataLabelUtils.defaultInsideLabelColor,
                    fontSize: dataLabelUtils.DefaultFontSizeInPt
                };
            }
            function getDefaultDonutLabelSettings() {
                var labelSettings = dataLabelUtils.getDefaultLabelSettings(!0, dataLabelUtils.defaultLabelColor, dataLabelUtils.DefaultFontSizeInPt);
                return labelSettings.labelStyle = LabelStyle.category, labelSettings;
            }
            function getDefaultGaugeLabelSettings() {
                return {
                    show: !0,
                    displayUnits: 0,
                    precision: dataLabelUtils.defaultLabelPrecision,
                    labelColor: null,
                    position: null,
                    fontSize: dataLabelUtils.minLabelFontSize
                };
            }
            function getDefaultKpiLabelSettings() {
                return {
                    show: !1,
                    displayUnits: 0,
                    precision: dataLabelUtils.defaultLabelPrecision,
                    labelColor: dataLabelUtils.defaultLabelColor,
                    position: null,
                    showCategory: !0
                };
            }
            function getLabelPrecision(precision, format) {
                if (precision !== dataLabelUtils.defaultLabelPrecision) return precision;
                if ("g" !== format && "G" !== format) {
                    if (format) {
                        var positiveFormat = powerbi.NumberFormat.getComponents(format).positive, formatMetadata = powerbi.NumberFormat.getCustomFormatMetadata(positiveFormat, !0);
                        if (formatMetadata.hasDots) {
                            if (formatMetadata.optionalPrecision) return;
                            return formatMetadata.precision;
                        }
                    }
                    return defaultCountLabelPrecision;
                }
            }
            function drawDefaultLabelsForDataPointChart(data, context, layout, viewport, isAnimator, animationDuration, hasSelection) {
                void 0 === isAnimator && (isAnimator = !1);
                var dataLabelManager = new powerbi.DataLabelManager(), filteredData = dataLabelManager.hideCollidedLabels(viewport, data, layout), hasAnimation = isAnimator && !!animationDuration, labels = selectLabels(filteredData, context, !1, hasAnimation);
                if (labels) return hasAnimation ? (labels.text((function(d) {
                    return d.labeltext;
                })).transition().duration(animationDuration).style(layout.style).style("opacity", hasSelection ? function(d) {
                    return visuals.ColumnUtil.getFillOpacity(d.selected, !1, hasSelection, !1);
                } : 1).attr({
                    x: function(d) {
                        return d.labelX;
                    },
                    y: function(d) {
                        return d.labelY;
                    }
                }), labels.exit().transition().duration(animationDuration).style("opacity", 0).remove()) : (labels.attr({
                    x: function(d) {
                        return d.labelX;
                    },
                    y: function(d) {
                        return d.labelY;
                    }
                }).text((function(d) {
                    return d.labeltext;
                })).style(layout.style), labels.exit().remove()), labels;
            }
            function selectLabels(filteredData, context, isDonut, forAnimation) {
                if (void 0 === isDonut && (isDonut = !1), void 0 === forAnimation && (forAnimation = !1), 
                0 === filteredData.length) return cleanDataLabels(context, !0), null;
                context.select(labelGraphicsContextClass.selector).empty() && context.append("g").classed(labelGraphicsContextClass.class, !0);
                var hasKey = null != filteredData[0].key, hasDataPointIdentity = null != filteredData[0].identity, getIdentifier = hasKey ? function(d) {
                    return d.key;
                } : hasDataPointIdentity ? function(d) {
                    return d.identity.getKey();
                } : void 0, labels = isDonut ? context.select(labelGraphicsContextClass.selector).selectAll(labelsClass.selector).data(filteredData, (function(d) {
                    return d.data.identity.getKey();
                })) : null != getIdentifier ? context.select(labelGraphicsContextClass.selector).selectAll(labelsClass.selector).data(filteredData, getIdentifier) : context.select(labelGraphicsContextClass.selector).selectAll(labelsClass.selector).data(filteredData), newLabels = labels.enter().append("text").classed(labelsClass.class, !0);
                return forAnimation && newLabels.style("opacity", 0), labels;
            }
            function cleanDataLabels(context, removeLines) {
                void 0 === removeLines && (removeLines = !1);
                var empty = [], labels = context.selectAll(labelsClass.selector).data(empty);
                if (labels.exit().remove(), context.selectAll(labelGraphicsContextClass.selector).remove(), 
                removeLines) {
                    var lines = context.selectAll(lineClass.selector).data(empty);
                    lines.exit().remove(), context.selectAll(linesGraphicsContextClass.selector).remove();
                }
            }
            function setHighlightedLabelsOpacity(context, hasSelection, hasHighlights) {
                context.selectAll(labelsClass.selector).style("fill-opacity", (function(d) {
                    var labelOpacity = visuals.ColumnUtil.getFillOpacity(d.selected, d.highlight, !d.highlight && hasSelection, !d.selected && hasHighlights) < 1 ? 0 : 1;
                    return labelOpacity;
                }));
            }
            function getLabelFormattedText(options) {
                var properties = {
                    text: options.formatter ? options.formatter.format(options.label) : powerbi.formattingService.formatValue(options.label, options.format),
                    fontFamily: options.fontFamily ? options.fontFamily : dataLabelUtils.LabelTextProperties.fontFamily,
                    fontSize: PixelConverter.fromPoint(options.fontSize),
                    fontWeight: dataLabelUtils.LabelTextProperties.fontWeight
                };
                return powerbi.TextMeasurementService.getTailoredTextOrDefault(properties, options.maxWidth ? options.maxWidth : dataLabelUtils.maxLabelWidth);
            }
            function getLabelLayoutXYForWaterfall(xAxisProperties, categoryWidth, yAxisProperties, dataDomain) {
                return visuals.CartesianHelper.getLabelLayoutXYForWaterfall(xAxisProperties, categoryWidth, yAxisProperties, dataDomain);
            }
            function doesDataLabelFitInShape(d, yAxisProperties, layout) {
                if (null == d || null === d.value) return !1;
                var properties = {
                    text: layout.labelText(d),
                    fontFamily: dataLabelUtils.LabelTextProperties.fontFamily,
                    fontSize: dataLabelUtils.LabelTextProperties.fontSize,
                    fontWeight: dataLabelUtils.LabelTextProperties.fontWeight
                }, outsidePosition = visuals.CartesianHelper.getRectTop(yAxisProperties.scale, d.position, d.value) - dataLabelUtils.labelMargin;
                if (outsidePosition > 0) return !0;
                var textWidth = powerbi.TextMeasurementService.measureSvgTextWidth(properties), textHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(properties), shapeWidth = layout.categoryWidth, shapeHeight = Math.abs(visuals.AxisHelper.diffScaled(yAxisProperties.scale, Math.max(0, Math.abs(d.value)), 0));
                return !(textWidth > shapeWidth || textHeight > shapeHeight);
            }
            function getMapLabelLayout(labelSettings) {
                return {
                    labelText: function(d) {
                        return getLabelFormattedText({
                            label: d.labeltext,
                            fontSize: labelSettings.fontSize,
                            fontFamily: labelSettings.fontFamily
                        });
                    },
                    labelLayout: {
                        x: function(d) {
                            return d.x;
                        },
                        y: function(d) {
                            var margin = d.radius + dataLabelUtils.labelMargin;
                            return 0 === labelSettings.position ? d.y - margin : d.y + margin;
                        }
                    },
                    filter: function(d) {
                        return null != d && null != d.labeltext;
                    },
                    style: {
                        fill: function(d) {
                            return d.labelFill;
                        },
                        "font-size": PixelConverter.fromPoint(labelSettings.fontSize),
                        "font-family": labelSettings.fontFamily
                    }
                };
            }
            function getColumnChartLabelLayout(data, labelLayoutXY, isColumn, isHundredPercent, axisFormatter, axisOptions, interactivityService, visualWidth) {
                var formatOverride = isHundredPercent ? dataLabelUtils.hundredPercentFormat : null, formattersCache = createColumnFormatterCacheManager(), hasSelection = !!interactivityService && interactivityService.hasSelection();
                return {
                    labelText: function(d) {
                        var formatString = null != formatOverride ? formatOverride : d.labelFormatString, value2 = getDisplayUnitValueFromAxisFormatter(axisFormatter, d.labelSettings), formatter = formattersCache.getOrCreate(formatString, d.labelSettings, value2);
                        return getLabelFormattedText({
                            label: formatter.format(d.value),
                            maxWidth: dataLabelUtils.maxLabelWidth
                        });
                    },
                    labelLayout: labelLayoutXY,
                    filter: function(d) {
                        return dataLabelUtils.getColumnChartLabelFilter(d, hasSelection, data.hasHighlights, axisOptions, visualWidth);
                    },
                    style: {
                        fill: function(d) {
                            return d.labelFill;
                        },
                        "text-anchor": isColumn ? "middle" : "start"
                    }
                };
            }
            function validateLabelsSize(d, axisOptions, visualWidth) {
                var shapeWidth, shapeHeight, xScale = axisOptions.xScale, yScale = axisOptions.yScale, columnWidth = axisOptions.columnWidth, properties = {
                    text: d.labeltext,
                    fontFamily: dataLabelUtils.LabelTextProperties.fontFamily,
                    fontSize: dataLabelUtils.LabelTextProperties.fontSize,
                    fontWeight: dataLabelUtils.LabelTextProperties.fontWeight
                }, textWidth = powerbi.TextMeasurementService.measureSvgTextWidth(properties), textHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(properties), inside = !1, outsidePosition = visuals.ColumnUtil.calculatePosition(d, axisOptions);
                switch (d.chartType) {
                  case 18:
                  case 50:
                    (!d.lastSeries || outsidePosition + textWidth > visualWidth || 50 === d.chartType) && (shapeWidth = -visuals.StackedUtil.getSize(xScale, d.valueAbsolute), 
                    shapeHeight = columnWidth, inside = !0);
                    break;

                  case 10:
                    outsidePosition + textWidth > visualWidth && (shapeWidth = Math.abs(visuals.AxisHelper.diffScaled(xScale, 0, d.value)), 
                    shapeHeight = columnWidth, inside = !0);
                    break;

                  case 20:
                  case 52:
                  case 68:
                    (!d.lastSeries || outsidePosition <= 0 || 52 === d.chartType) && (shapeWidth = columnWidth, 
                    shapeHeight = visuals.StackedUtil.getSize(yScale, d.valueAbsolute), inside = !0);
                    break;

                  case 12:
                    outsidePosition <= 0 && (shapeWidth = columnWidth, shapeHeight = Math.abs(visuals.AxisHelper.diffScaled(yScale, 0, d.value)), 
                    inside = !0);
                    break;

                  default:
                    return !0;
                }
                return !inside || !(textWidth > shapeWidth || textHeight > shapeHeight);
            }
            function getColumnChartLabelFilter(d, hasSelection, hasHighlights, axisOptions, visualWidth) {
                var shapesOpacity = hasSelection ? visuals.ColumnUtil.getFillOpacity(d.selected, d.highlight, !d.highlight && hasSelection, !d.selected && hasHighlights) : visuals.ColumnUtil.getFillOpacity(d.selected, d.highlight, hasSelection, hasHighlights);
                return null != d && null != d.value && validateLabelsSize(d, axisOptions, visualWidth) && 1 === shapesOpacity;
            }
            function getScatterChartLabelLayout(xScale, yScale, labelSettings, viewport, sizeRange) {
                return {
                    labelText: function(d) {
                        return getLabelFormattedText({
                            label: d.formattedCategory.getValue(),
                            maxWidth: 2 * dataLabelUtils.maxLabelWidth
                        });
                    },
                    labelLayout: {
                        x: function(d) {
                            return xScale(d.x);
                        },
                        y: function(d) {
                            var margin = visuals.CartesianHelper.getBubbleRadius(d.radius, sizeRange, viewport, visuals.shapeUtil.MinBubbleMultiplier) + dataLabelUtils.labelMargin;
                            return 0 === labelSettings.position ? yScale(d.y) - margin : yScale(d.y) + margin;
                        }
                    },
                    filter: function(d) {
                        return null != d && null != d.formattedCategory.getValue();
                    },
                    style: {
                        fill: function(d) {
                            return d.labelFill;
                        }
                    }
                };
            }
            function getLineChartLabelLayout(xScale, yScale, labelSettings, isScalar, axisFormatter) {
                var formattersCache = createColumnFormatterCacheManager();
                return {
                    labelText: function(d) {
                        var value2 = getDisplayUnitValueFromAxisFormatter(axisFormatter, d.labelSettings), formatter = formattersCache.getOrCreate(d.labelFormatString, d.labelSettings, value2);
                        return getLabelFormattedText({
                            label: formatter.format(d.value)
                        });
                    },
                    labelLayout: {
                        x: function(d) {
                            return xScale(isScalar ? d.categoryValue : d.categoryIndex);
                        },
                        y: function(d) {
                            return 0 === labelSettings.position ? yScale(d.value) - dataLabelUtils.labelMargin : yScale(d.value) + dataLabelUtils.labelMargin;
                        }
                    },
                    filter: function(d) {
                        return null != d && null != d.value;
                    },
                    style: {
                        fill: function(d) {
                            return d.labelFill;
                        },
                        "font-size": function(d) {
                            return PixelConverter.fromPoint(d.labelSettings.fontSize);
                        },
                        "font-family": function(d) {
                            return d.labelSettings.fontFamily;
                        }
                    }
                };
            }
            function enumerateDataLabels(options) {
                if (options.dataLabelsSettings) {
                    var instance = {
                        objectName: "labels",
                        selector: options.selector,
                        properties: {}
                    };
                    options.show && options.selector ? instance.properties.showSeries = options.dataLabelsSettings.show : options.show && (instance.properties.show = options.dataLabelsSettings.show);
                    var labelSettingsStyle;
                    if (options.labelStyle && (instance.properties.labelStyle = options.dataLabelsSettings.labelStyle, 
                    labelSettingsStyle = visuals.LabelUtils.getLabelStyleFlagType(options.dataLabelsSettings.labelStyle)), 
                    instance.properties.color = options.dataLabelsSettings.labelColor || dataLabelUtils.defaultLabelColor, 
                    options.displayUnits && (instance.properties.labelDisplayUnits = options.dataLabelsSettings.displayUnits), 
                    options.precision && labelSettingsStyle && EnumExtensions.hasFlag(labelSettingsStyle, LabelStyle.flagLabelStyleData) || options.precision && !labelSettingsStyle) {
                        var precision = options.dataLabelsSettings.precision;
                        instance.properties.labelPrecision = precision === dataLabelUtils.defaultLabelPrecision ? null : precision;
                    }
                    if (options.percentagePrecision && labelSettingsStyle && EnumExtensions.hasFlag(labelSettingsStyle, LabelStyle.flagLabelStylePercent) || options.percentagePrecision && !labelSettingsStyle) {
                        var percentagePrecision = options.dataLabelsSettings.percentagePrecision;
                        instance.properties.percentageLabelPrecision = percentagePrecision === dataLabelUtils.defaultPercentageLabelPrecision ? null : percentagePrecision;
                    }
                    if (options.labelOrientation && (instance.properties.labelOrientation = options.dataLabelsSettings.labelOrientation), 
                    options.position && (instance.properties.labelPosition = options.dataLabelsSettings.position, 
                    options.positionObject && (instance.validValues ? instance.validValues.labelPosition = options.positionObject : instance.validValues = {
                        labelPosition: options.positionObject
                    })), options.fontSize && (instance.properties.fontSize = options.dataLabelsSettings.fontSize), 
                    options.fontFamily && (instance.properties.fontFamily = options.dataLabelsSettings.fontFamily || visuals.DEFAULT_FONT_FAMILY), 
                    options.labelDensity) {
                        var lineChartSettings = options.dataLabelsSettings;
                        lineChartSettings && (instance.properties.labelDensity = lineChartSettings.labelDensity);
                    }
                    return options.showAll && (instance.properties.showAll = !!options.dataLabelsSettings.showLabelPerSeries), 
                    options.enumeration.pushInstance(instance);
                }
            }
            function enumerateCategoryLabels(enumeration, dataLabelsSettings, withFill, isShowCategory, fontSize) {
                void 0 === isShowCategory && (isShowCategory = !1);
                var labelSettings = dataLabelsSettings ? dataLabelsSettings : getDefaultPointLabelSettings(), instance = {
                    objectName: "categoryLabels",
                    selector: null,
                    properties: {
                        show: isShowCategory ? labelSettings.showCategory : labelSettings.show,
                        fontSize: dataLabelsSettings ? dataLabelsSettings.fontSize : dataLabelUtils.DefaultFontSizeInPt,
                        fontFamily: dataLabelsSettings ? dataLabelsSettings.fontFamily : dataLabelUtils.DefaultLabelFontFamily
                    }
                };
                withFill && (instance.properties.color = labelSettings.categoryLabelColor ? labelSettings.categoryLabelColor : labelSettings.labelColor), 
                fontSize && (instance.properties.fontSize = fontSize), enumeration.pushInstance(instance);
            }
            function getDisplayUnitValueFromAxisFormatter(axisFormatter, labelSettings) {
                return axisFormatter && axisFormatter.displayUnit && 0 === labelSettings.displayUnits ? axisFormatter.displayUnit.value : null;
            }
            function createColumnFormatterCacheManager() {
                return new ColumnFormatterCacheManager();
            }
            function getOptionsForLabelFormatter(labelSetting, formatString, value2, precision) {
                return {
                    displayUnitSystemType: powerbi.DisplayUnitSystemType.DataLabels,
                    format: formatString,
                    precision: precision,
                    value: labelSetting.displayUnits,
                    value2: value2,
                    allowFormatBeautification: !0
                };
            }
            function isTextWidthOverflows(textWidth, maxTextWidth) {
                return textWidth > maxTextWidth;
            }
            function isTextHeightOverflows(textHeight, innerChordLength) {
                return textHeight > innerChordLength;
            }
            dataLabelUtils.minLabelFontSize = 8, dataLabelUtils.labelMargin = 8, dataLabelUtils.maxLabelWidth = 50, 
            dataLabelUtils.defaultColumnLabelMargin = 5, dataLabelUtils.defaultColumnHalfLabelHeight = 4, 
            dataLabelUtils.defaultLabelDensity = "50", dataLabelUtils.DefaultDy = "-0.15em", 
            dataLabelUtils.DefaultFontSizeInPt = 9, dataLabelUtils.DefaultLabelFontFamily = visuals.Font.Family.regularSecondary.css, 
            dataLabelUtils.StandardFontFamily = visuals.Font.Family.regular.css, dataLabelUtils.LabelTextProperties = {
                fontFamily: visuals.Font.Family.regularSecondary.css,
                fontSize: PixelConverter.fromPoint(dataLabelUtils.DefaultFontSizeInPt),
                fontWeight: "normal"
            }, dataLabelUtils.defaultLabelColor = "#777777", dataLabelUtils.defaultInsideLabelColor = "#ffffff", 
            dataLabelUtils.hundredPercentFormat = "0.00 %;-0.00 %;0.00 %", dataLabelUtils.defaultLabelPrecision = void 0, 
            dataLabelUtils.defaultPercentageLabelPrecision = void 0;
            var defaultCountLabelPrecision = 0, labelGraphicsContextClass = createClassAndSelector("labels"), linesGraphicsContextClass = createClassAndSelector("lines"), labelsClass = createClassAndSelector("data-labels"), lineClass = createClassAndSelector("line-label");
            dataLabelUtils.updateLabelSettingsFromLabelsObject = updateLabelSettingsFromLabelsObject, 
            dataLabelUtils.getDefaultLabelSettings = getDefaultLabelSettings, dataLabelUtils.getDefaultCardLabelSettings = getDefaultCardLabelSettings, 
            dataLabelUtils.getDefaultTreemapLabelSettings = getDefaultTreemapLabelSettings, 
            dataLabelUtils.getDefaultSunburstLabelSettings = getDefaultSunburstLabelSettings, 
            dataLabelUtils.getDefaultWaterfallLabelSettings = getDefaultWaterfallLabelSettings, 
            dataLabelUtils.getDefaultColumnLabelSettings = getDefaultColumnLabelSettings, dataLabelUtils.getDefaultPointLabelSettings = getDefaultPointLabelSettings, 
            dataLabelUtils.getDefaultLineChartLabelSettings = getDefaultLineChartLabelSettings, 
            dataLabelUtils.getDefaultMapLabelSettings = getDefaultMapLabelSettings, dataLabelUtils.getDefaultDonutLabelSettings = getDefaultDonutLabelSettings, 
            dataLabelUtils.getDefaultGaugeLabelSettings = getDefaultGaugeLabelSettings, dataLabelUtils.getDefaultKpiLabelSettings = getDefaultKpiLabelSettings, 
            dataLabelUtils.getLabelPrecision = getLabelPrecision, dataLabelUtils.drawDefaultLabelsForDataPointChart = drawDefaultLabelsForDataPointChart, 
            dataLabelUtils.cleanDataLabels = cleanDataLabels, dataLabelUtils.setHighlightedLabelsOpacity = setHighlightedLabelsOpacity, 
            dataLabelUtils.getLabelFormattedText = getLabelFormattedText, dataLabelUtils.getLabelLayoutXYForWaterfall = getLabelLayoutXYForWaterfall, 
            dataLabelUtils.doesDataLabelFitInShape = doesDataLabelFitInShape, dataLabelUtils.getMapLabelLayout = getMapLabelLayout, 
            dataLabelUtils.getColumnChartLabelLayout = getColumnChartLabelLayout, dataLabelUtils.getColumnChartLabelFilter = getColumnChartLabelFilter, 
            dataLabelUtils.getScatterChartLabelLayout = getScatterChartLabelLayout, dataLabelUtils.getLineChartLabelLayout = getLineChartLabelLayout, 
            dataLabelUtils.enumerateDataLabels = enumerateDataLabels, dataLabelUtils.enumerateCategoryLabels = enumerateCategoryLabels, 
            dataLabelUtils.getDisplayUnitValueFromAxisFormatter = getDisplayUnitValueFromAxisFormatter, 
            dataLabelUtils.createColumnFormatterCacheManager = createColumnFormatterCacheManager, 
            dataLabelUtils.getOptionsForLabelFormatter = getOptionsForLabelFormatter, dataLabelUtils.isTextWidthOverflows = isTextWidthOverflows, 
            dataLabelUtils.isTextHeightOverflows = isTextHeightOverflows;
            var ColumnFormatterCacheManager = (function() {
                function ColumnFormatterCacheManager() {
                    this.cache = {};
                }
                return ColumnFormatterCacheManager.prototype.getOrCreate = function(formatString, labelSetting, value2) {
                    var cacheKeyObject = {
                        formatString: formatString,
                        displayUnits: labelSetting.displayUnits,
                        precision: formatString ? getLabelPrecision(labelSetting.precision, formatString) : labelSetting.precision,
                        value2: value2
                    }, cacheKey = JSON.stringify(cacheKeyObject);
                    return this.cache[cacheKey] || (this.cache[cacheKey] = visuals.valueFormatter.create(getOptionsForLabelFormatter(labelSetting, formatString, value2, cacheKeyObject.precision))), 
                    this.cache[cacheKey];
                }, ColumnFormatterCacheManager;
            })();
        })(dataLabelUtils = visuals.dataLabelUtils || (visuals.dataLabelUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var EventBubblingUtil;
        !(function(EventBubblingUtil) {
            function handled(e) {
                if (e) {
                    var source = e, handled = source.handled;
                    return !!handled;
                }
            }
            function markAsHandled(e) {
                if (e) {
                    var source = e;
                    source.handled = !0;
                }
            }
            EventBubblingUtil.handled = handled, EventBubblingUtil.markAsHandled = markAsHandled;
        })(EventBubblingUtil = visuals.EventBubblingUtil || (visuals.EventBubblingUtil = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var FontProperties, PixelConverter = jsCommon.PixelConverter, pbi = powerbi, DataViewObject = pbi.DataViewObject;
        !(function(FontProperties) {
            function createFromDataViewObject(properties, propertyNames, parent) {
                var size;
                if (propertyNames.size) {
                    var value = DataViewObject.getValue(properties, propertyNames.size);
                    null != value && (size = propertyNames.sizeInPixels ? visuals.Units.FontSize.createFromPx(+value) : visuals.Units.FontSize.createFromPt(+value));
                }
                var fontProperties = {
                    color: propertyNames.color && DataViewObject.getFillColorByPropertyName(properties, propertyNames.color),
                    family: propertyNames.family && DataViewObject.getValue(properties, propertyNames.family),
                    lineHeight: propertyNames.lineHeight && DataViewObject.getValue(properties, propertyNames.lineHeight),
                    size: size,
                    style: propertyNames.style && DataViewObject.getValue(properties, propertyNames.style),
                    variant: propertyNames.variant && DataViewObject.getValue(properties, propertyNames.variant),
                    weight: propertyNames.weight && DataViewObject.getValue(properties, propertyNames.weight),
                    whiteSpace: propertyNames.whiteSpace && DataViewObject.getValue(properties, propertyNames.whiteSpace)
                };
                return parent ? FontProperties.inherit(parent, fontProperties) : fontProperties;
            }
            function inherit(fontProperties, newFontProperties) {
                var inheritedFontProperties = powerbi.Prototype.inherit(fontProperties);
                return newFontProperties ? (newFontProperties.color && (inheritedFontProperties.color = newFontProperties.color), 
                newFontProperties.family && (inheritedFontProperties.family = newFontProperties.family), 
                newFontProperties.lineHeight && (inheritedFontProperties.lineHeight = newFontProperties.lineHeight), 
                newFontProperties.size && (inheritedFontProperties.size = newFontProperties.size), 
                newFontProperties.style && (inheritedFontProperties.style = newFontProperties.style), 
                newFontProperties.variant && (inheritedFontProperties.variant = newFontProperties.variant), 
                newFontProperties.weight && (inheritedFontProperties.weight = newFontProperties.weight), 
                newFontProperties.whiteSpace && (inheritedFontProperties.whiteSpace = newFontProperties.whiteSpace), 
                inheritedFontProperties) : inheritedFontProperties;
            }
            function toTextProperties(fontProperties, text, excludeInherited) {
                return excludeInherited && (fontProperties = excludeInheritedProperties(fontProperties)), 
                {
                    text: text,
                    fontFamily: fontProperties.family,
                    fontSize: fontProperties.size ? PixelConverter.toString(fontProperties.size.px) : void 0,
                    fontWeight: fontProperties.weight,
                    fontStyle: fontProperties.style,
                    fontVariant: fontProperties.variant,
                    whiteSpace: fontProperties.whiteSpace
                };
            }
            function toHTMLStyle(fontProperties) {
                var style = {};
                return fontProperties.color && (style.color = fontProperties.color), fontProperties.family && (style["font-family"] = fontProperties.family), 
                fontProperties.lineHeight && (style["line-height"] = fontProperties.lineHeight), 
                fontProperties.size && (style["font-size"] = fontProperties.size ? PixelConverter.toString(fontProperties.size.px) : void 0), 
                fontProperties.style && (style["font-style"] = fontProperties.style), fontProperties.variant && (style["font-variant"] = fontProperties.variant), 
                fontProperties.weight && (style["font-weight"] = fontProperties.weight), fontProperties.whiteSpace && (style["white-space"] = fontProperties.whiteSpace), 
                style;
            }
            function applyStyleToElement(fontProperties, element) {
                return applyStyle(fontProperties, element.style), element;
            }
            function applyStyle(fontProperties, style) {
                fontProperties.color && (style.fill = fontProperties.color), fontProperties.family && (style.fontFamily = fontProperties.family), 
                fontProperties.lineHeight && (style.lineHeight = fontProperties.lineHeight), fontProperties.size && (style.fontSize = fontProperties.size ? PixelConverter.toString(fontProperties.size.px) : void 0), 
                fontProperties.style && (style.fontStyle = fontProperties.style), fontProperties.variant && (style.fontVariant = fontProperties.variant), 
                fontProperties.weight && (style.fontWeight = fontProperties.weight), fontProperties.whiteSpace && (style.whiteSpace = fontProperties.whiteSpace);
            }
            function toSVGStyle(fontProperties) {
                var style = {};
                return fontProperties.color && (style.fill = fontProperties.color), fontProperties.family && (style["font-family"] = fontProperties.family), 
                fontProperties.lineHeight && (style["line-height"] = fontProperties.lineHeight), 
                fontProperties.size && (style["font-size"] = fontProperties.size ? PixelConverter.toString(fontProperties.size.px) : void 0), 
                fontProperties.style && (style["font-style"] = fontProperties.style), fontProperties.variant && (style["font-variant"] = fontProperties.variant), 
                fontProperties.weight && (style["font-weight"] = fontProperties.weight), fontProperties.whiteSpace && (style["white-space"] = fontProperties.whiteSpace), 
                style;
            }
            function excludeInheritedProperties(fontProperties, includeLevels) {
                void 0 === includeLevels && (includeLevels = 0);
                for (var newFontProperties = {}, i = 0; i <= includeLevels; i++) _.forOwn(fontProperties, (function(value, key) {
                    void 0 === newFontProperties[key] && (newFontProperties[key] = value);
                })), fontProperties = Object.getPrototypeOf(fontProperties);
                return newFontProperties;
            }
            function toD3Style(fontPropertiesGetter) {
                return {
                    fill: function(d) {
                        return fontPropertiesGetter(d).color;
                    },
                    "font-family": function(d) {
                        return fontPropertiesGetter(d).family;
                    },
                    "font-size": function(d) {
                        return fontPropertiesGetter(d).size ? PixelConverter.toString(fontPropertiesGetter(d).size.px) : void 0;
                    },
                    "font-style": function(d) {
                        return fontPropertiesGetter(d).style;
                    },
                    "font-variant": function(d) {
                        return fontPropertiesGetter(d).variant;
                    },
                    "font-weight": function(d) {
                        return fontPropertiesGetter(d).weight;
                    },
                    "white-space": function(d) {
                        return fontPropertiesGetter(d).whiteSpace;
                    }
                };
            }
            FontProperties.createFromDataViewObject = createFromDataViewObject, FontProperties.inherit = inherit, 
            FontProperties.toTextProperties = toTextProperties, FontProperties.toHTMLStyle = toHTMLStyle, 
            FontProperties.applyStyleToElement = applyStyleToElement, FontProperties.applyStyle = applyStyle, 
            FontProperties.toSVGStyle = toSVGStyle, FontProperties.excludeInheritedProperties = excludeInheritedProperties, 
            FontProperties.toD3Style = toD3Style;
        })(FontProperties = visuals.FontProperties || (visuals.FontProperties = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var ForecastHelper, createClassAndSelector = jsCommon.CssConstants.createClassAndSelector, DataRoleHelper = powerbi.data.DataRoleHelper;
        !(function(ForecastHelper) {
            function enumerateObjectInstances(enumeration, forecasts) {
                var forecast;
                if (_.isEmpty(forecasts) || (forecast = forecasts[0]), !forecast) return void enumeration.pushInstance({
                    selector: {
                        id: "0"
                    },
                    properties: {
                        show: !1,
                        lineColor: ForecastHelper.defaults.lineColor,
                        style: ForecastHelper.defaults.style,
                        confidenceBandStyle: ForecastHelper.defaults.confidenceBandStyle,
                        transparency: ForecastHelper.defaults.transparency
                    },
                    objectName: ForecastHelper.forecastObjectName
                });
                var properties = (_a = {}, _a[ForecastPropertyNames.show] = forecast.show, _a[ForecastPropertyNames.displayName] = forecast.displayName, 
                _a[ForecastPropertyNames.lineColor] = forecast.lineColor, _a[ForecastPropertyNames.style] = forecast.style, 
                _a[ForecastPropertyNames.confidenceBandStyle] = forecast.confidenceBandStyle, _a[ForecastPropertyNames.transparency] = forecast.transparency, 
                _a);
                enumeration.pushInstance({
                    selector: forecast.selector,
                    properties: properties,
                    objectName: ForecastHelper.forecastObjectName
                });
                var _a;
            }
            function isDataViewForForecast(dataView) {
                if (!dataView || !dataView.categorical || !dataView.categorical.values) return !1;
                for (var grouped = dataView.categorical.values.grouped(), _i = 0, grouped_1 = grouped; _i < grouped_1.length; _i++) {
                    var group = grouped_1[_i], hasRole = _.any(group.values, (function(value) {
                        return DataRoleHelper.hasRoleInValueColumn(value, "forecast.ForecastValue");
                    }));
                    if (hasRole) return !0;
                }
                return !1;
            }
            function readDataView(dataView, sourceDataView, colors) {
                if (!(dataView && dataView.categorical && sourceDataView && sourceDataView.categorical)) return [];
                var categorical = dataView.categorical;
                if (_.isEmpty(categorical.categories) || _.isEmpty(categorical.values)) return [];
                var scalarKeys = visuals.ScalarUtils.getScalarKeys(categorical.categories[0]), categories = scalarKeys ? _.map(scalarKeys.values, (function(value) {
                    return value.min;
                })) : categorical.categories[0].values, groups = categorical.values.grouped();
                if (_.isEmpty(categories) || _.isEmpty(groups)) return [];
                var valueColumnIndex = DataRoleHelper.getMeasureIndexOfRole(groups, ForecastHelper.forecastValueRole), upperBoundColumnIndex = DataRoleHelper.getMeasureIndexOfRole(groups, ForecastHelper.forecastConfidenceHighBoundRole), lowerBoundColumnIndex = DataRoleHelper.getMeasureIndexOfRole(groups, ForecastHelper.forecastConfidenceLowBoundRole), forecastLines = [], forecastsByColumn = getForecastLineObjects(sourceDataView), groupIndex = 0;
                for (var columnName in forecastsByColumn) {
                    var forecastObjects = forecastsByColumn[columnName];
                    for (var id in forecastObjects) {
                        for (var forecastObject = forecastObjects[id], show = powerbi.DataViewObject.getValue(forecastObject, ForecastPropertyNames.show, !1), displayName = powerbi.DataViewObject.getValue(forecastObject, ForecastPropertyNames.displayName), lineColor = powerbi.DataViewObject.getValue(forecastObject, ForecastPropertyNames.lineColor, ForecastHelper.defaults.lineColor), confidenceBandStyle_1 = powerbi.DataViewObject.getValue(forecastObject, ForecastPropertyNames.confidenceBandStyle, ForecastHelper.defaults.confidenceBandStyle), transparency = powerbi.DataViewObject.getValue(forecastObject, ForecastPropertyNames.transparency, ForecastHelper.defaults.transparency), style = powerbi.DataViewObject.getValue(forecastObject, ForecastPropertyNames.style, ForecastHelper.defaults.style), colorHelper = new visuals.ColorHelper(colors, {
                            objectName: "dataPoint",
                            propertyName: "fill"
                        }, ForecastHelper.defaults.lineColor.solid.color), group = groups[groupIndex], points = [], values = group.values[valueColumnIndex].highlights ? group.values[valueColumnIndex].highlights : group.values[valueColumnIndex].values, upperBoundValues = group.values[upperBoundColumnIndex].highlights ? group.values[upperBoundColumnIndex].highlights : group.values[upperBoundColumnIndex].values, lowerBoundValues = group.values[lowerBoundColumnIndex].highlights ? group.values[lowerBoundColumnIndex].highlights : group.values[lowerBoundColumnIndex].values, i = 0; i < categories.length; i++) {
                            var x = visuals.AxisHelper.normalizeNonFiniteNumber(categories[i]), y = visuals.AxisHelper.normalizeNonFiniteNumber(values[i]);
                            if (null != x && null != y) {
                                var upperBoundY = visuals.AxisHelper.normalizeNonFiniteNumber(upperBoundValues[i]), lowerBoundY = visuals.AxisHelper.normalizeNonFiniteNumber(lowerBoundValues[i]);
                                points.push({
                                    point: {
                                        x: x,
                                        y: y
                                    },
                                    upperBound: {
                                        x: x,
                                        y: upperBoundY
                                    },
                                    lowerBound: {
                                        x: x,
                                        y: lowerBoundY
                                    }
                                });
                            }
                        }
                        var seriesLineColor = void 0;
                        if (lineColor) seriesLineColor = lineColor; else if (sourceDataView.categorical.values.source) {
                            var sourceGroups = sourceDataView.categorical.values.grouped(), color = colorHelper.getColorForSeriesValue(sourceGroups[groupIndex].objects, sourceDataView.categorical.values.identityFields, group.name);
                            seriesLineColor = {
                                solid: {
                                    color: color
                                }
                            };
                        } else {
                            var matchingMeasure = sourceDataView.categorical.values[groupIndex], color = colorHelper.getColorForMeasure(matchingMeasure.source.objects, group.name);
                            seriesLineColor = {
                                solid: {
                                    color: color
                                }
                            };
                        }
                        forecastLines.push({
                            selector: {
                                id: id,
                                metadata: columnName
                            },
                            points: points,
                            show: show,
                            displayName: displayName,
                            lineColor: seriesLineColor,
                            confidenceBandStyle: confidenceBandStyle_1,
                            transparency: transparency,
                            style: style
                        }), groupIndex++;
                    }
                }
                return forecastLines;
            }
            function getForecastLineObjects(forecastDataView) {
                var forecastObjects = [];
                if (forecastDataView && forecastDataView.categorical && forecastDataView.categorical.values) {
                    var columnGroup = _.first(forecastDataView.categorical.values.grouped());
                    if (columnGroup) for (var _i = 0, _a = columnGroup.values; _i < _a.length; _i++) {
                        var valueColumn = _a[_i], column = valueColumn.source.queryName, objects = powerbi.DataViewObjects.getUserDefinedObjects(valueColumn.source.objects, ForecastHelper.forecastObjectName);
                        forecastObjects[column] = objects;
                    }
                }
                return forecastObjects;
            }
            function render(forecastLines, graphicsContext, xScale, yScale, viewport, animationDuration) {
                var layer = graphicsContext.select(ForecastLayerClassSelector.selector);
                layer.empty() && (layer = graphicsContext.insert("g", ":first-child").classed(ForecastLayerClassSelector.class, !0));
                var errorRange = layer.selectAll(ForecastErrorRangeClassSelector.selector).data(forecastLines || []);
                errorRange.enter().insert("path", ":first-child").classed(ForecastErrorRangeClassSelector.class, !0), 
                errorRange.transition().ease("linear").duration(animationDuration).attr("d", (function(d) {
                    for (var pathGen = d3.svg.line().x((function(point) {
                        return xScale(point.x);
                    })).y((function(point) {
                        return yScale(point.y);
                    })), points = [], _i = 0, _a = d.points.slice().reverse(); _i < _a.length; _i++) {
                        var point = _a[_i];
                        points.push({
                            x: point.lowerBound.x,
                            y: point.lowerBound.y
                        });
                    }
                    for (var _b = 0, _c = d.points; _b < _c.length; _b++) {
                        var point = _c[_b];
                        points.push({
                            x: point.upperBound.x,
                            y: point.upperBound.y
                        });
                    }
                    return pathGen(points);
                })), errorRange.each((function(d) {
                    var errorRangeArea = d3.select(this), style = {}, opacity = (100 - d.transparency) / 100;
                    style["fill-opacity"] = opacity, style["stroke-opacity"] = opacity, d.confidenceBandStyle === visuals.confidenceBandStyle.fill ? (style.stroke = "transparent", 
                    style.fill = d.lineColor.solid.color) : d.confidenceBandStyle === visuals.confidenceBandStyle.line ? (style.stroke = d.lineColor.solid.color, 
                    style.fill = "transparent") : d.confidenceBandStyle === visuals.confidenceBandStyle.none && (style.stroke = "transparent", 
                    style.fill = "transparent"), errorRangeArea.style(style);
                })), errorRange.exit().remove();
                var lines = layer.selectAll(ForecastClassSelector.selector).data(forecastLines || []);
                lines.enter().append("path").classed(ForecastClassSelector.class, !0), lines.transition().ease("linear").duration(animationDuration).attr("d", (function(d) {
                    var pathGen = d3.svg.line().x((function(point) {
                        return xScale(point.point.x);
                    })).y((function(point) {
                        return yScale(point.point.y);
                    }));
                    return pathGen(d.points);
                })), lines.each((function(d) {
                    var line = d3.select(this), style = {};
                    style.stroke = d.lineColor.solid.color, style.fill = "transparent", d.style === visuals.lineStyle.dashed ? style["stroke-dasharray"] = "5, 5" : d.style === visuals.lineStyle.dotted ? (style["stroke-dasharray"] = "1, 5", 
                    style["stroke-linecap"] = "round") : d.style === visuals.lineStyle.solid && (style["stroke-dasharray"] = null, 
                    style["stroke-linecap"] = null), line.style(style);
                })), lines.exit().remove();
            }
            var ForecastPropertyNames;
            !(function(ForecastPropertyNames) {
                ForecastPropertyNames.show = "show", ForecastPropertyNames.displayName = "displayName", 
                ForecastPropertyNames.lineColor = "lineColor", ForecastPropertyNames.confidenceBandStyle = "confidenceBandStyle", 
                ForecastPropertyNames.transparency = "transparency", ForecastPropertyNames.style = "style";
            })(ForecastPropertyNames || (ForecastPropertyNames = {})), ForecastHelper.forecastObjectName = "forecast", 
            ForecastHelper.forecastValueRole = "forecast.ForecastValue", ForecastHelper.forecastConfidenceHighBoundRole = "forecast.ConfidenceHighBound", 
            ForecastHelper.forecastConfidenceLowBoundRole = "forecast.ConfidenceLowBound", ForecastHelper.defaults = {
                lineColor: {
                    solid: {
                        color: "#000"
                    }
                },
                displayName: "",
                confidenceBandStyle: visuals.confidenceBandStyle.fill,
                transparency: 80,
                style: visuals.lineStyle.solid
            }, ForecastHelper.quarterHierarchyLevelPrefixResorceKey = "Visual_Quarter_Abbreviated";
            var ForecastClassSelector = createClassAndSelector("forecast-line"), ForecastErrorRangeClassSelector = createClassAndSelector("forecast-error-range"), ForecastLayerClassSelector = createClassAndSelector("forecast-line-layer");
            ForecastHelper.enumerateObjectInstances = enumerateObjectInstances, ForecastHelper.isDataViewForForecast = isDataViewForForecast, 
            ForecastHelper.readDataView = readDataView, ForecastHelper.render = render;
        })(ForecastHelper = visuals.ForecastHelper || (visuals.ForecastHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var GeoJsonHelper;
        !(function(GeoJsonHelper) {
            function getTopoJsonShapeKeys(topojson) {
                try {
                    for (var shapes_1 = topojson.objects[Object.keys(topojson.objects)[0]].geometries, idPresent = !1, propertyNamesSet = {}, _i = 0, shapes_2 = shapes_1; _i < shapes_2.length; _i++) {
                        var shape = shapes_2[_i];
                        if (idPresent = idPresent || null != shape.id, shape.properties) for (var shapeProperties = Object.keys(shape.properties), _a = 0, shapeProperties_1 = shapeProperties; _a < shapeProperties_1.length; _a++) {
                            var shapeProperty = shapeProperties_1[_a];
                            propertyNamesSet[shapeProperty] = !0;
                        }
                    }
                    var propertyNamesArray = Object.keys(propertyNamesSet).sort();
                    _.pull(propertyNamesArray, "id");
                    for (var allShapesPropertyValues = [], _b = 0, shapes_3 = shapes_1; _b < shapes_3.length; _b++) {
                        var shape = shapes_3[_b], thisShapePropertyValues = [];
                        if (idPresent && thisShapePropertyValues.push(shape.id), shape.properties) for (var _c = 0, propertyNamesArray_1 = propertyNamesArray; _c < propertyNamesArray_1.length; _c++) {
                            var propertyName = propertyNamesArray_1[_c];
                            thisShapePropertyValues.push(shape.properties[propertyName]);
                        }
                        allShapesPropertyValues.push(thisShapePropertyValues);
                    }
                    if (propertyNamesArray = (idPresent ? [ "id" ] : []).concat(propertyNamesArray), 
                    !_.isEmpty(propertyNamesArray) && !_.isEmpty(allShapesPropertyValues)) return {
                        names: propertyNamesArray,
                        values: allShapesPropertyValues
                    };
                } catch (e) {}
            }
            GeoJsonHelper.getTopoJsonShapeKeys = getTopoJsonShapeKeys;
        })(GeoJsonHelper = visuals.GeoJsonHelper || (visuals.GeoJsonHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var LabelUtils, createClassAndSelector = jsCommon.CssConstants.createClassAndSelector, FontSize = visuals.Units.FontSize, PixelConverter = jsCommon.PixelConverter;
        !(function(LabelUtils) {
            function downgradeToVisualDataLabelsSettingsOld(labelSettings) {
                if (labelSettings) {
                    var inheritedLabelSettings = powerbi.Prototype.inherit(labelSettings);
                    inheritedLabelSettings.fontProperties = null;
                    var labelSettingOld = inheritedLabelSettings;
                    return labelSettingOld.labelColor = labelSettings.fontProperties ? labelSettings.fontProperties.color : void 0, 
                    labelSettingOld.fontSize = labelSettings.fontProperties && labelSettings.fontProperties.size ? labelSettings.fontProperties.size.pt : void 0, 
                    labelSettingOld.fontFamily = labelSettings.fontProperties ? labelSettings.fontProperties.family : void 0, 
                    labelSettingOld;
                }
            }
            function downgradeToColumnOrLineDataLabelsSettingsOld(labelSettings) {
                if (labelSettings) {
                    var inheritedLabelSettings = powerbi.Prototype.inherit(labelSettings);
                    inheritedLabelSettings.fontProperties = null;
                    var labelSettingOld = inheritedLabelSettings;
                    return labelSettingOld.labelColor = labelSettings.fontProperties ? labelSettings.fontProperties.color : void 0, 
                    labelSettingOld.fontSize = labelSettings.fontProperties && labelSettings.fontProperties.size ? labelSettings.fontProperties.size.pt : void 0, 
                    labelSettingOld.fontFamily = labelSettings.fontProperties ? labelSettings.fontProperties.family : void 0, 
                    labelSettingOld;
                }
            }
            function downgradeToColumnChartDataPointOld(dataPoint) {
                if (dataPoint) {
                    var inheritedDataPoint = powerbi.Prototype.inherit(dataPoint), dataPointOld = inheritedDataPoint;
                    return dataPointOld.labelSettings = downgradeToColumnOrLineDataLabelsSettingsOld(dataPoint.labelSettings), 
                    dataPointOld;
                }
            }
            function downgradeToVisualDataLabelsSettingsOptionsOld(options) {
                if (options) {
                    var inheritedOptions = powerbi.Prototype.inherit(options), optionsOld = inheritedOptions;
                    return optionsOld.dataLabelsSettings = downgradeToVisualDataLabelsSettingsOld(options.dataLabelsSettings), 
                    optionsOld;
                }
            }
            function downgradeToOldLabels(labels) {
                if (labels) return _.map(labels, (function(label) {
                    var inheritedLabel = powerbi.Prototype.inherit(label);
                    inheritedLabel.fontProperties = null;
                    var oldLabel = inheritedLabel;
                    return oldLabel.fill = label.fontProperties ? label.fontProperties.color : void 0, 
                    oldLabel.fontSize = label.fontProperties && label.fontProperties.size ? label.fontProperties.size.pt : void 0, 
                    oldLabel.fontFamily = label.fontProperties ? label.fontProperties.family : void 0, 
                    oldLabel;
                }));
            }
            function drawDefaultLabels(context, dataLabels, numeric, twoRows, hasTooltip) {
                return void 0 === numeric && (numeric = !1), void 0 === twoRows && (twoRows = !1), 
                void 0 === hasTooltip && (hasTooltip = !1), visuals.NewDataLabelUtils.drawDefaultLabels(context, downgradeToOldLabels(dataLabels), numeric, twoRows, hasTooltip);
            }
            function animateDefaultLabels(context, dataLabels, duration, numeric, easeType) {
                return void 0 === numeric && (numeric = !1), void 0 === easeType && (easeType = "cubic-in-out"), 
                visuals.NewDataLabelUtils.animateDefaultLabels(context, downgradeToOldLabels(dataLabels), duration, numeric, easeType);
            }
            function drawLabelBackground(context, dataLabels, fill, fillOpacity) {
                return visuals.NewDataLabelUtils.drawLabelBackground(context, downgradeToOldLabels(dataLabels), fill, fillOpacity);
            }
            function drawLabelLeaderLines(context, filteredDataLabels, key, leaderLineColor) {
                return visuals.NewDataLabelUtils.drawLabelLeaderLines(context, downgradeToOldLabels(filteredDataLabels), key, leaderLineColor);
            }
            function drawDefaultLabelsForDataPointChart(data, context, layout, viewport, isAnimator, animationDuration, hasSelection) {
                return void 0 === isAnimator && (isAnimator = !1), visuals.dataLabelUtils.drawDefaultLabelsForDataPointChart(data, context, layout, viewport, isAnimator, animationDuration, hasSelection);
            }
            function cleanDataLabels(context, removeLines) {
                return void 0 === removeLines && (removeLines = !1), visuals.dataLabelUtils.cleanDataLabels(context, removeLines);
            }
            function setHighlightedLabelsOpacity(context, hasSelection, hasHighlights) {
                return visuals.dataLabelUtils.setHighlightedLabelsOpacity(context, hasSelection, hasHighlights);
            }
            function getLabelFormattedText(label, format, formatter) {
                return visuals.NewDataLabelUtils.getLabelFormattedText(label, format, formatter);
            }
            function getLabelTailoredText(options) {
                var optionsOld = {
                    label: options.label,
                    maxWidth: options.maxWidth,
                    format: options.format,
                    formatter: options.formatter,
                    fontSize: options.fontProperties && options.fontProperties.size ? options.fontProperties.size.pt : void 0,
                    fontFamily: options.fontProperties ? options.fontProperties.family : void 0
                };
                return visuals.dataLabelUtils.getLabelFormattedText(optionsOld);
            }
            function getMapLabelLayout(labelSettings) {
                return visuals.dataLabelUtils.getMapLabelLayout(downgradeToVisualDataLabelsSettingsOld(labelSettings));
            }
            function getColumnChartLabelLayout(data, labelLayoutXY, isColumn, isHundredPercent, axisFormatter, axisOptions, interactivityService, visualWidth) {
                return visuals.dataLabelUtils.getColumnChartLabelLayout(data, labelLayoutXY, isColumn, isHundredPercent, axisFormatter, axisOptions, interactivityService, visualWidth);
            }
            function getColumnChartLabelFilter(d, hasSelection, hasHighlights, axisOptions, visualWidth) {
                var dOld = downgradeToColumnChartDataPointOld(d);
                return visuals.dataLabelUtils.getColumnChartLabelFilter(dOld, hasSelection, hasHighlights, axisOptions, visualWidth);
            }
            function getScatterChartLabelLayout(xScale, yScale, labelSettings, viewport, sizeRange) {
                return visuals.dataLabelUtils.getScatterChartLabelLayout(xScale, yScale, downgradeToVisualDataLabelsSettingsOld(labelSettings), viewport, sizeRange);
            }
            function getLineChartLabelLayout(xScale, yScale, labelSettings, isScalar, axisFormatter) {
                return visuals.dataLabelUtils.getLineChartLabelLayout(xScale, yScale, downgradeToVisualDataLabelsSettingsOld(labelSettings), isScalar, axisFormatter);
            }
            function getLabelUnitAndPrecisionForAxis(axisProperties, labelSettings) {
                return new visuals.NewDataLabelUtils.UnitsAndPrecision(axisProperties, downgradeToVisualDataLabelsSettingsOld(labelSettings));
            }
            function getDisplayUnitValueFromAxisFormatter(axisFormatter, labelSettings) {
                return visuals.NewDataLabelUtils.getDisplayUnitValueFromAxisFormatter(axisFormatter, downgradeToVisualDataLabelsSettingsOld(labelSettings));
            }
            function createColumnFormatterCacheManager() {
                return new ColumnFormatterCacheManager();
            }
            function getOptionsForLabelFormatter(labelSetting, formatString, value2, precision) {
                return {
                    displayUnitSystemType: powerbi.DisplayUnitSystemType.DataLabels,
                    format: formatString,
                    precision: precision,
                    value: labelSetting.displayUnits,
                    value2: value2,
                    allowFormatBeautification: !0
                };
            }
            function removeDuplicates(labelDataPoints) {
                return visuals.NewDataLabelUtils.removeDuplicates(labelDataPoints);
            }
            function getDataLabelLayoutOptions(type) {
                return visuals.NewDataLabelUtils.getDataLabelLayoutOptions(type);
            }
            function getTextSize(text, fontProperties) {
                return visuals.NewDataLabelUtils.getTextSize(text, fontProperties && fontProperties.size ? fontProperties.size.pt : void 0, fontProperties ? fontProperties.family : void 0);
            }
            function getNumberOfLabelsToRender(viewportWidth, labelDensity, minimumLabelsToRender, estimatedLabelWidth) {
                return visuals.NewDataLabelUtils.getNumberOfLabelsToRender(viewportWidth, labelDensity, minimumLabelsToRender, estimatedLabelWidth);
            }
            function updateLabelSettingsFromLabelsObject(labelsObj, labelSettings, supportsLabelOrientation) {
                labelsObj && (void 0 !== labelsObj.show && (labelSettings.show = labelsObj.show), 
                void 0 !== labelsObj.showSeries && (labelSettings.show = labelsObj.showSeries), 
                void 0 !== labelsObj.labelDisplayUnits && (labelSettings.displayUnits = labelsObj.labelDisplayUnits), 
                void 0 !== labelsObj.labelPrecision && (labelSettings.precision = labelsObj.labelPrecision >= 0 ? labelsObj.labelPrecision : visuals.dataLabelUtils.defaultLabelPrecision), 
                void 0 !== labelsObj.percentageLabelPrecision && (labelSettings.percentagePrecision = labelsObj.percentageLabelPrecision >= 0 ? labelsObj.percentageLabelPrecision : visuals.dataLabelUtils.defaultPercentageLabelPrecision), 
                labelSettings.fontProperties = {
                    color: void 0 !== labelsObj.color ? labelsObj.color.solid.color : labelSettings.fontProperties.color,
                    size: void 0 !== labelsObj.fontSize ? FontSize.createFromPt(+labelsObj.fontSize) : labelSettings.fontProperties.size,
                    family: void 0 !== labelsObj.fontFamily ? labelsObj.fontFamily : labelSettings.fontProperties.family
                }, void 0 !== labelsObj.showAll && (labelSettings.showLabelPerSeries = labelsObj.showAll), 
                void 0 !== labelsObj.labelStyle && (labelSettings.labelStyle = labelsObj.labelStyle), 
                void 0 !== labelsObj.labelOrientation && (labelSettings.labelOrientation = supportsLabelOrientation ? labelsObj.labelOrientation : labelSettings.labelOrientation), 
                labelsObj.labelPosition && (labelSettings.position = labelsObj.labelPosition));
            }
            function updateLabelSettingsFromLabelsObjectWithLabelDensity(labelsObj, labelSettings, supportsLabelOrientation) {
                LabelUtils.updateLabelSettingsFromLabelsObject(labelsObj, labelSettings, supportsLabelOrientation), 
                labelsObj && void 0 !== labelsObj.labelDensity && (labelSettings.labelDensity = labelsObj.labelDensity);
            }
            function getDefaultLabelSettings(show, labelColor, fontSize, fontFamily) {
                return void 0 === show && (show = !1), {
                    show: show,
                    position: 0,
                    displayUnits: 0,
                    precision: visuals.dataLabelUtils.defaultLabelPrecision,
                    fontProperties: visuals.FontProperties.inherit(LabelUtils.defaultFontProperties, {
                        size: fontSize ? FontSize.createFromPt(fontSize) : void 0,
                        family: fontFamily,
                        color: labelColor || LabelUtils.defaultLabelColor
                    })
                };
            }
            function getDefaultPointLabelSettings() {
                return {
                    show: !1,
                    position: 0,
                    displayUnits: 0,
                    precision: visuals.dataLabelUtils.defaultLabelPrecision,
                    fontProperties: visuals.FontProperties.inherit(LabelUtils.defaultFontProperties, {
                        color: LabelUtils.defaultLabelColor
                    })
                };
            }
            function enumerateDataLabels(options) {
                return visuals.dataLabelUtils.enumerateDataLabels(downgradeToVisualDataLabelsSettingsOptionsOld(options));
            }
            function enumerateCategoryLabels(enumeration, dataLabelsSettings, withFill, isShowCategory, fontSize) {
                return void 0 === isShowCategory && (isShowCategory = !1), visuals.dataLabelUtils.enumerateCategoryLabels(enumeration, downgradeToVisualDataLabelsSettingsOld(dataLabelsSettings), withFill, isShowCategory, fontSize);
            }
            function isTextWidthOverflows(textWidth, maxTextWidth) {
                return visuals.dataLabelUtils.isTextWidthOverflows(textWidth, maxTextWidth);
            }
            function isTextHeightOverflows(textHeight, innerChordLength) {
                return visuals.dataLabelUtils.isTextHeightOverflows(textHeight, innerChordLength);
            }
            function getLabelStyleFlagType(labelStyleName) {
                switch (labelStyleName) {
                  case visuals.labelStyle.data:
                    return visuals.labelStyle.labelStyleFlagEnum.data;

                  case visuals.labelStyle.percent:
                    return visuals.labelStyle.labelStyleFlagEnum.percent;

                  case visuals.labelStyle.categoryAndData:
                    return visuals.labelStyle.labelStyleFlagEnum.categoryAndData;

                  case visuals.labelStyle.categoryAndPercent:
                    return visuals.labelStyle.labelStyleFlagEnum.categoryAndPercent;

                  case visuals.labelStyle.dataAndPercent:
                    return visuals.labelStyle.labelStyleFlagEnum.dataAndPercent;

                  case visuals.labelStyle.categoryAndDataAndPercent:
                    return visuals.labelStyle.labelStyleFlagEnum.categoryAndDataAndPercent;

                  case visuals.labelStyle.category:
                    return visuals.labelStyle.labelStyleFlagEnum.category;

                  default:
                    return visuals.labelStyle.labelStyleFlagEnum.category;
                }
            }
            LabelUtils.DefaultLabelFontSizeInPt = 9, LabelUtils.minLabelFontSize = 8, LabelUtils.labelMargin = 8, 
            LabelUtils.defaultLabelDensity = "50", LabelUtils.MapPolylineOpacity = .5, LabelUtils.LabelDensityBufferFactor = 3, 
            LabelUtils.LabelDensityPadding = 6, LabelUtils.startingLabelOffset = 8, LabelUtils.maxLabelOffset = 8, 
            LabelUtils.maxLabelWidth = 50, LabelUtils.hundredPercentFormat = "0.00 %;-0.00 %;0.00 %", 
            LabelUtils.DefaultFontSizeInPt = 9, LabelUtils.DefaultLabelFontFamily = visuals.Font.Family.regularSecondary.css, 
            LabelUtils.StandardFontFamily = visuals.Font.Family.regular.css, LabelUtils.defaultFontProperties = {
                family: LabelUtils.DefaultLabelFontFamily,
                size: FontSize.createFromPt(LabelUtils.DefaultFontSizeInPt),
                weight: "normal"
            }, LabelUtils.LabelTextProperties = {
                fontFamily: visuals.Font.Family.regularSecondary.css,
                fontSize: PixelConverter.fromPoint(LabelUtils.DefaultFontSizeInPt),
                fontWeight: "normal"
            }, LabelUtils.defaultLabelColor = "#777777", LabelUtils.defaultInsideLabelColor = "#ffffff", 
            LabelUtils.horizontalLabelBackgroundPadding = 4, LabelUtils.verticalLabelBackgroundPadding = 2, 
            LabelUtils.defaultTreeMapMinorLabelTextSize = 10, LabelUtils.defaultTreeMapMajorLabelTextSize = 12, 
            LabelUtils.labelGraphicsContextClass = createClassAndSelector("labelGraphicsContext"), 
            LabelUtils.labelBackgroundGraphicsContextClass = createClassAndSelector("labelBackgroundGraphicsContext"), 
            LabelUtils.downgradeToOldLabels = downgradeToOldLabels, LabelUtils.drawDefaultLabels = drawDefaultLabels, 
            LabelUtils.animateDefaultLabels = animateDefaultLabels, LabelUtils.drawLabelBackground = drawLabelBackground, 
            LabelUtils.drawLabelLeaderLines = drawLabelLeaderLines, LabelUtils.drawDefaultLabelsForDataPointChart = drawDefaultLabelsForDataPointChart, 
            LabelUtils.cleanDataLabels = cleanDataLabels, LabelUtils.setHighlightedLabelsOpacity = setHighlightedLabelsOpacity, 
            LabelUtils.getLabelFormattedText = getLabelFormattedText, LabelUtils.getLabelTailoredText = getLabelTailoredText, 
            LabelUtils.getMapLabelLayout = getMapLabelLayout, LabelUtils.getColumnChartLabelLayout = getColumnChartLabelLayout, 
            LabelUtils.getColumnChartLabelFilter = getColumnChartLabelFilter, LabelUtils.getScatterChartLabelLayout = getScatterChartLabelLayout, 
            LabelUtils.getLineChartLabelLayout = getLineChartLabelLayout, LabelUtils.getLabelUnitAndPrecisionForAxis = getLabelUnitAndPrecisionForAxis, 
            LabelUtils.getDisplayUnitValueFromAxisFormatter = getDisplayUnitValueFromAxisFormatter, 
            LabelUtils.createColumnFormatterCacheManager = createColumnFormatterCacheManager, 
            LabelUtils.getOptionsForLabelFormatter = getOptionsForLabelFormatter, LabelUtils.removeDuplicates = removeDuplicates, 
            LabelUtils.getDataLabelLayoutOptions = getDataLabelLayoutOptions, LabelUtils.getTextSize = getTextSize, 
            LabelUtils.getNumberOfLabelsToRender = getNumberOfLabelsToRender, LabelUtils.updateLabelSettingsFromLabelsObject = updateLabelSettingsFromLabelsObject, 
            LabelUtils.updateLabelSettingsFromLabelsObjectWithLabelDensity = updateLabelSettingsFromLabelsObjectWithLabelDensity, 
            LabelUtils.getDefaultLabelSettings = getDefaultLabelSettings, LabelUtils.getDefaultPointLabelSettings = getDefaultPointLabelSettings, 
            LabelUtils.enumerateDataLabels = enumerateDataLabels, LabelUtils.enumerateCategoryLabels = enumerateCategoryLabels, 
            LabelUtils.isTextWidthOverflows = isTextWidthOverflows, LabelUtils.isTextHeightOverflows = isTextHeightOverflows, 
            LabelUtils.getLabelStyleFlagType = getLabelStyleFlagType;
            var ColumnFormatterCacheManager = (function() {
                function ColumnFormatterCacheManager() {
                    this.cache = {};
                }
                return ColumnFormatterCacheManager.prototype.getOrCreate = function(formatString, labelSetting, value2, precision) {
                    null == precision && (precision = labelSetting.precision);
                    var cacheKeyObject = {
                        formatString: formatString,
                        displayUnits: labelSetting.displayUnits,
                        precision: formatString ? visuals.dataLabelUtils.getLabelPrecision(precision, formatString) : precision,
                        value2: value2
                    }, cacheKey = JSON.stringify(cacheKeyObject);
                    return this.cache[cacheKey] || (this.cache[cacheKey] = visuals.valueFormatter.create(getOptionsForLabelFormatter(labelSetting, formatString, value2, cacheKeyObject.precision))), 
                    this.cache[cacheKey];
                }, ColumnFormatterCacheManager;
            })();
        })(LabelUtils = visuals.LabelUtils || (visuals.LabelUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var NewDataLabelUtils, createClassAndSelector = jsCommon.CssConstants.createClassAndSelector, PixelConverter = jsCommon.PixelConverter;
        !(function(NewDataLabelUtils) {
            function getLabelX(label) {
                return 0 === label.labelOrientation ? label.boundingBox.left + label.boundingBox.width : label.boundingBox.left + label.boundingBox.width / 2;
            }
            function getLabelY(label) {
                return label.hasBackground ? 0 === label.labelOrientation ? label.boundingBox.top + label.boundingBox.height / 2 - NewDataLabelUtils.horizontalLabelBackgroundPadding : label.boundingBox.top + label.boundingBox.height - NewDataLabelUtils.verticalLabelBackgroundPadding : 0 === label.labelOrientation ? label.boundingBox.top + label.boundingBox.height / 2 : label.boundingBox.top + label.boundingBox.height;
            }
            function getLabelX2ndLine(label) {
                return label.boundingBox.left + label.boundingBox.width / 2;
            }
            function getLabelY2ndLine(label) {
                var boundingBoxHeight = void 0 !== label.text ? label.boundingBox.height / 2 : label.boundingBox.height;
                return label.hasBackground ? label.boundingBox.top + boundingBoxHeight - NewDataLabelUtils.verticalLabelBackgroundPadding : label.boundingBox.top + boundingBoxHeight;
            }
            function drawDefaultLabels(context, dataLabels, numeric, twoRows, hasTooltip) {
                void 0 === numeric && (numeric = !1), void 0 === twoRows && (twoRows = !1), void 0 === hasTooltip && (hasTooltip = !1);
                var labels = context.selectAll(labelsClass.selector).data(dataLabels, labelKeyFunction);
                labels.enter().append("text").classed(labelsClass.class, !0);
                var labelAttr = {
                    transform: function(d) {
                        var translate = "translate(" + getLabelX(d) + "," + getLabelY(d) + ")";
                        return 0 === d.labelOrientation ? translate + "rotate(-90)" : translate;
                    },
                    dy: "-0.15em"
                };
                numeric && (labelAttr.dy = void 0), labels.interrupt().text((function(d) {
                    return d.text;
                })).attr(labelAttr).style({
                    fill: function(d) {
                        return d.fill;
                    },
                    "font-size": function(d) {
                        return PixelConverter.fromPoint(d.fontSize || NewDataLabelUtils.DefaultLabelFontSizeInPt);
                    },
                    "font-family": function(d) {
                        return d.fontFamily ? d.fontFamily : void 0;
                    },
                    "text-anchor": function(d) {
                        return d.textAnchor;
                    }
                }), labels.exit().remove();
                var filteredCategoryLabels = _.filter(twoRows ? dataLabels : [], (function(d) {
                    return !_.isEmpty(d.secondRowText);
                })), secondLineLabels = context.selectAll(secondLineLabelClass.selector).data(filteredCategoryLabels, (function(d, index) {
                    return d.identity ? d.identity.getKeyWithoutHighlight() : index;
                }));
                return secondLineLabels.enter().append("text").classed(secondLineLabelClass.class, !0), 
                labelAttr = {
                    transform: function(d) {
                        return "translate(" + getLabelX2ndLine(d) + "," + getLabelY2ndLine(d) + ")";
                    },
                    dy: "-0.15em"
                }, numeric && (labelAttr.dy = void 0), secondLineLabels.interrupt().text((function(d) {
                    return d.secondRowText;
                })).attr(labelAttr).style({
                    fill: function(d) {
                        return d.fill;
                    },
                    "font-size": function(d) {
                        return PixelConverter.fromPoint(d.fontSize || NewDataLabelUtils.DefaultLabelFontSizeInPt);
                    },
                    "font-family": function(d) {
                        return d.fontFamily ? d.fontFamily : void 0;
                    },
                    "text-anchor": function(d) {
                        return d.textAnchor;
                    }
                }), secondLineLabels.exit().remove(), hasTooltip && (labels.append("title").text((function(d) {
                    return d.tooltip;
                })), secondLineLabels.append("title").text((function(d) {
                    return d.tooltip;
                })), labels.style("pointer-events", "all"), secondLineLabels.style("pointer-events", "all")), 
                labels;
            }
            function animateDefaultLabels(context, dataLabels, duration, numeric, easeType) {
                void 0 === numeric && (numeric = !1), void 0 === easeType && (easeType = "cubic-in-out");
                var labels = context.selectAll(labelsClass.selector).data(dataLabels, labelKeyFunction), labelAttr = {
                    transform: function(d) {
                        var translate = "translate(" + getLabelX(d) + "," + getLabelY(d) + ")";
                        return 0 === d.labelOrientation ? translate + "rotate(-90)" : translate;
                    },
                    dy: "-0.15em"
                };
                return numeric && (labelAttr.dy = void 0), labels.enter().append("text").classed(labelsClass.class, !0).style("opacity", 0).attr(labelAttr), 
                labels.text((function(d) {
                    return d.text;
                })).style({
                    fill: function(d) {
                        return d.fill;
                    },
                    "font-size": function(d) {
                        return PixelConverter.fromPoint(d.fontSize || NewDataLabelUtils.DefaultLabelFontSizeInPt);
                    },
                    "font-family": function(d) {
                        return d.fontFamily ? d.fontFamily : void 0;
                    }
                }).transition().ease(easeType).duration(duration).attr(labelAttr).style("opacity", 1), 
                labels.exit().transition().duration(duration).style("opacity", 0).remove(), labels;
            }
            function drawLabelBackground(context, dataLabels, fill, fillOpacity) {
                var labelRects = context.selectAll("rect").data(dataLabels, labelKeyFunction);
                return labelRects.enter().append("rect"), labelRects.attr({
                    x: function(d) {
                        return d.boundingBox.left - NewDataLabelUtils.horizontalLabelBackgroundPadding;
                    },
                    y: function(d) {
                        return d.boundingBox.top - NewDataLabelUtils.verticalLabelBackgroundPadding;
                    },
                    rx: labelBackgroundRounding,
                    ry: labelBackgroundRounding,
                    width: function(d) {
                        return d.boundingBox.width + 2 * NewDataLabelUtils.horizontalLabelBackgroundPadding;
                    },
                    height: function(d) {
                        return void 0 === d.text && void 0 === d.secondRowText ? 0 : d.boundingBox.height + 2 * NewDataLabelUtils.verticalLabelBackgroundPadding;
                    }
                }).style("fill", fill ? fill : "#000000").style("fill-opacity", null != fillOpacity ? fillOpacity : 1), 
                labelRects.exit().remove(), labelRects;
            }
            function drawLabelLeaderLines(context, filteredDataLabels, key, leaderLineColor) {
                context.select(linesGraphicsContextClass.selector).empty() && context.append("g").classed(linesGraphicsContextClass.class, !0);
                var lines = context.select(linesGraphicsContextClass.selector).selectAll("polyline").data(filteredDataLabels, key);
                lines.enter().append("polyline").classed(lineClass.class, !0), lines.attr("points", (function(d) {
                    return d.leaderLinePoints;
                })).style({
                    stroke: function(d) {
                        return leaderLineColor ? leaderLineColor : d.fill;
                    },
                    "stroke-width": NewDataLabelUtils.LineStrokeWidth
                }), lines.exit().remove();
            }
            function getLabelFormattedText(label, format, formatter) {
                return formatter ? formatter.format(label) : powerbi.formattingService.formatValue(label, format);
            }
            function getLabelUnitAndPrecisionForAxis(axisProperties, labelSettings) {
                return new UnitsAndPrecision(axisProperties, labelSettings);
            }
            function createColumnFormatterCacheManager() {
                return new ColumnFormatterCacheManager();
            }
            function getDisplayUnitValueFromAxisFormatter(axisFormatter, labelSettings) {
                return axisFormatter && axisFormatter.displayUnit && 0 === labelSettings.displayUnits ? axisFormatter.displayUnit.value : null;
            }
            function getLabelPrecision(precision, format) {
                if (precision !== defaultLabelPrecision) return precision;
                if ("g" !== format && "G" !== format) {
                    if (format) {
                        var positiveFormat = format.split(";")[0], formatMetadata = powerbi.NumberFormat.getCustomFormatMetadata(positiveFormat, !0);
                        if (formatMetadata.hasDots) {
                            if (formatMetadata.optionalPrecision) return;
                            return formatMetadata.precision;
                        }
                    }
                    return defaultCountLabelPrecision;
                }
            }
            function getOptionsForLabelFormatter(labelSetting, formatString, value2, precision) {
                return {
                    displayUnitSystemType: powerbi.DisplayUnitSystemType.DataLabels,
                    format: formatString,
                    precision: precision,
                    value: labelSetting.displayUnits,
                    value2: value2,
                    allowFormatBeautification: !0
                };
            }
            function removeDuplicates(labelDataPoints) {
                for (var uniqueLabelDataPoints = [], labelDataPointMap = {}, sameParentIsInArray = function(newValue, array, parentIsRect) {
                    return array.some((function(arrayValue) {
                        return parentIsRect ? visuals.shapes.Rect.equals(newValue.parentShape.rect, arrayValue.rect) : visuals.shapes.Point.equals(newValue.parentShape.point, arrayValue.point);
                    }));
                }, _i = 0, labelDataPoints_1 = labelDataPoints; _i < labelDataPoints_1.length; _i++) {
                    var dataPoint = labelDataPoints_1[_i];
                    if (null != dataPoint) {
                        var parentIsRect = 1 === dataPoint.parentType, resultsFromMap = labelDataPointMap[dataPoint.text];
                        resultsFromMap ? sameParentIsInArray(dataPoint, resultsFromMap, parentIsRect) || (uniqueLabelDataPoints.push(dataPoint), 
                        resultsFromMap.push(dataPoint.parentShape)) : (uniqueLabelDataPoints.push(dataPoint), 
                        labelDataPointMap[dataPoint.text] = [ dataPoint.parentShape ]);
                    }
                }
                return uniqueLabelDataPoints;
            }
            function getDataLabelLayoutOptions(type) {
                switch (type) {
                  case 10:
                    return {
                        maximumOffset: visuals.CartesianHelper.dataLabelLayoutMaximumOffset,
                        startingOffset: visuals.CartesianHelper.dataLabelLayoutStartingOffset,
                        offsetIterationDelta: visuals.CartesianHelper.dataLabelLayoutOffsetIterationDelta,
                        allowLeaderLines: !0,
                        attemptToMoveLabelsIntoViewport: !0
                    };

                  default:
                    return {
                        maximumOffset: NewDataLabelUtils.maxLabelOffset,
                        startingOffset: NewDataLabelUtils.startingLabelOffset,
                        attemptToMoveLabelsIntoViewport: !0
                    };
                }
            }
            function getTextSize(text, fontSize, fontFamily) {
                var labelTextProperties = NewDataLabelUtils.LabelTextProperties, properties = {
                    text: text,
                    fontFamily: fontFamily ? fontFamily : labelTextProperties.fontFamily,
                    fontSize: jsCommon.PixelConverter.fromPoint(fontSize),
                    fontWeight: labelTextProperties.fontWeight
                };
                return {
                    width: powerbi.TextMeasurementService.measureSvgTextWidth(properties),
                    height: powerbi.TextMeasurementService.estimateSvgTextHeight(properties)
                };
            }
            function labelKeyFunction(label, index) {
                return label.key ? label.key : label.identity ? label.identity.getKeyWithoutHighlight() : index;
            }
            function getNumberOfLabelsToRender(viewportWidth, labelDensity, minimumLabelsToRender, estimatedLabelWidth) {
                if (null == labelDensity || 0 === labelDensity) return minimumLabelsToRender;
                var parsedAndNormalizedDensity = labelDensity / 100, maxNumberForViewport = Math.ceil(viewportWidth / estimatedLabelWidth);
                return 1 === parsedAndNormalizedDensity ? maxNumberForViewport : minimumLabelsToRender + Math.floor(parsedAndNormalizedDensity * (maxNumberForViewport - minimumLabelsToRender));
            }
            function updateLabelSettingsFromLabelsObjectWithLabelDensity(labelsObj, labelSettings, supportsLabelOrientation) {
                visuals.dataLabelUtils.updateLabelSettingsFromLabelsObject(labelsObj, labelSettings, supportsLabelOrientation), 
                labelsObj && void 0 !== labelsObj.labelDensity && (labelSettings.labelDensity = labelsObj.labelDensity);
            }
            NewDataLabelUtils.DefaultLabelFontSizeInPt = 9, NewDataLabelUtils.MapPolylineOpacity = .5, 
            NewDataLabelUtils.LabelDensityBufferFactor = 3, NewDataLabelUtils.LabelDensityPadding = 6, 
            NewDataLabelUtils.LineStrokeWidth = 1, NewDataLabelUtils.startingLabelOffset = 8, 
            NewDataLabelUtils.maxLabelOffset = 8, NewDataLabelUtils.maxLabelWidth = 50, NewDataLabelUtils.hundredPercentFormat = "0.00 %;-0.00 %;0.00 %", 
            NewDataLabelUtils.DefaultFontSizeInPt = 9, NewDataLabelUtils.DefaultLabelFontFamily = visuals.Font.Family.regularSecondary.css, 
            NewDataLabelUtils.defaultFontProperties = {
                family: NewDataLabelUtils.DefaultLabelFontFamily,
                size: visuals.Units.FontSize.createFromPt(NewDataLabelUtils.DefaultFontSizeInPt),
                weight: "normal"
            }, NewDataLabelUtils.LabelTextProperties = {
                fontFamily: visuals.Font.Family.regularSecondary.css,
                fontSize: PixelConverter.fromPoint(NewDataLabelUtils.DefaultLabelFontSizeInPt),
                fontWeight: "normal"
            }, NewDataLabelUtils.defaultLabelColor = "#777777", NewDataLabelUtils.defaultInsideLabelColor = "#ffffff", 
            NewDataLabelUtils.horizontalLabelBackgroundPadding = 4, NewDataLabelUtils.verticalLabelBackgroundPadding = 2;
            var defaultLabelPrecision, labelBackgroundRounding = 4, defaultCountLabelPrecision = 0;
            NewDataLabelUtils.labelGraphicsContextClass = createClassAndSelector("labelGraphicsContext"), 
            NewDataLabelUtils.labelBackgroundGraphicsContextClass = createClassAndSelector("labelBackgroundGraphicsContext");
            var labelsClass = createClassAndSelector("label"), secondLineLabelClass = createClassAndSelector("label-second-line"), linesGraphicsContextClass = createClassAndSelector("leader-lines"), lineClass = createClassAndSelector("line-label");
            NewDataLabelUtils.drawDefaultLabels = drawDefaultLabels, NewDataLabelUtils.animateDefaultLabels = animateDefaultLabels, 
            NewDataLabelUtils.drawLabelBackground = drawLabelBackground, NewDataLabelUtils.drawLabelLeaderLines = drawLabelLeaderLines, 
            NewDataLabelUtils.getLabelFormattedText = getLabelFormattedText;
            var UnitsAndPrecision = (function() {
                function UnitsAndPrecision(axisProperties, labelSettings) {
                    if (this.noPrecision = !0, 0 === labelSettings.displayUnits) {
                        var axisFormatter = axisProperties.formatter;
                        if (this.units = axisFormatter && axisFormatter.displayUnit && axisFormatter.displayUnit.value, 
                        null == labelSettings.precision) {
                            this.noPrecision = !1;
                            var axisFormatterOptions = axisFormatter && axisFormatter.options;
                            if (axisFormatterOptions && axisFormatterOptions.precision) this.precisionForAxis = axisProperties.formatter.options.precision + 1; else {
                                var ticks = axisProperties.axis.tickValues();
                                if (ticks && ticks.length) {
                                    var tick0 = ticks[0], tick1 = ticks.length > 1 ? ticks[1] : void 0, axisScale_1 = this.units || 1;
                                    this.precisionForAxis = visuals.AxisHelper.calculateAxisPrecision(tick0, tick1, 10 * axisScale_1, axisFormatterOptions && axisFormatterOptions.format);
                                }
                            }
                        }
                    }
                }
                return UnitsAndPrecision.prototype.getPrecision = function(hasFormatString, valueType) {
                    if (!this.noPrecision) {
                        if (this.units) return this.precisionForAxis;
                        if (!hasFormatString) return valueType && valueType.integer ? 0 : this.precisionForAxis;
                    }
                }, UnitsAndPrecision;
            })();
            NewDataLabelUtils.UnitsAndPrecision = UnitsAndPrecision, NewDataLabelUtils.getLabelUnitAndPrecisionForAxis = getLabelUnitAndPrecisionForAxis, 
            NewDataLabelUtils.createColumnFormatterCacheManager = createColumnFormatterCacheManager, 
            NewDataLabelUtils.getDisplayUnitValueFromAxisFormatter = getDisplayUnitValueFromAxisFormatter, 
            NewDataLabelUtils.removeDuplicates = removeDuplicates, NewDataLabelUtils.getDataLabelLayoutOptions = getDataLabelLayoutOptions, 
            NewDataLabelUtils.getTextSize = getTextSize, NewDataLabelUtils.getNumberOfLabelsToRender = getNumberOfLabelsToRender, 
            NewDataLabelUtils.updateLabelSettingsFromLabelsObjectWithLabelDensity = updateLabelSettingsFromLabelsObjectWithLabelDensity;
            var ColumnFormatterCacheManager = (function() {
                function ColumnFormatterCacheManager() {
                    this.cache = {};
                }
                return ColumnFormatterCacheManager.prototype.getOrCreate = function(formatString, labelSetting, value2, precision) {
                    null == precision && (precision = labelSetting.precision);
                    var cacheKeyObject = {
                        formatString: formatString,
                        displayUnits: labelSetting.displayUnits,
                        precision: formatString ? getLabelPrecision(precision, formatString) : precision,
                        value2: value2
                    }, cacheKey = JSON.stringify(cacheKeyObject);
                    return this.cache[cacheKey] || (this.cache[cacheKey] = visuals.valueFormatter.create(getOptionsForLabelFormatter(labelSetting, formatString, value2, cacheKeyObject.precision))), 
                    this.cache[cacheKey];
                }, ColumnFormatterCacheManager;
            })();
        })(NewDataLabelUtils = visuals.NewDataLabelUtils || (visuals.NewDataLabelUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var KpiUtil;
        !(function(KpiUtil) {
            function getKpiIcon(kpi, value) {
                var numValue = parseFloat(value);
                if (kpi) {
                    var statusGraphicFormat = statusGraphicFormatStrings[kpi.graphic.toUpperCase()];
                    if (statusGraphicFormat && !isNaN(numValue)) {
                        var statusValues = statusGraphicFormat.statusValues;
                        kpi.normalizedFiveStateKpiRange && 5 === statusValues.length && (numValue = 2 * numValue);
                        var num = numValue + (statusValues.length >> 1);
                        return [ statusGraphicFormat.kpiIconClass, statusValues[num] ].join(" ").trim();
                    }
                }
            }
            function getKpiIconClassName(kpiIcon, kpiImageSize) {
                if (kpiIcon) return 1 === kpiImageSize ? [ KPIImageClassName, BigImageClassName, kpiIcon ].join(" ") : [ KPIImageClassName, kpiIcon ].join(" ");
            }
            function getClassForKpi(kpi, value, kpiImageSize) {
                var kpiIcon = getKpiIcon(kpi, value);
                return getKpiIconClassName(kpiIcon, kpiImageSize);
            }
            function getKpiImageMetadata(metaDataColumn, value, kpiImageSize) {
                var kpi = metaDataColumn && metaDataColumn.kpi;
                if (kpi) {
                    var kpiIcon = getKpiIcon(kpi, value);
                    if (kpiIcon) return {
                        caption: kpiIcon,
                        statusGraphic: kpi.graphic,
                        class: getKpiIconClassName(kpiIcon, kpiImageSize)
                    };
                }
            }
            var KPIImageClassName = "powervisuals-glyph", BigImageClassName = "big-kpi", RYGStatusIconClassNames = [ "kpi-red", "kpi-yellow", "kpi-green" ], threeLights = {
                kpiIconClass: "circle",
                statusValues: RYGStatusIconClassNames
            }, roadSigns = {
                kpiIconClass: "",
                statusValues: [ "circle-x kpi-red", "circle-exclamation kpi-yellow", "circle-checkmark kpi-green" ]
            }, trafficLight = {
                kpiIconClass: "traffic-light",
                statusValues: RYGStatusIconClassNames
            }, shapes = {
                kpiIconClass: "",
                statusValues: [ "rhombus kpi-red", "triangle kpi-yellow", "circle kpi-green" ]
            }, gauge = {
                kpiIconClass: "",
                statusValues: [ "circle-empty", "circle-one-quarter", "circle-half", "circle-three-quarters", "circle-full" ]
            }, statusGraphicFormatStrings = {
                "THREE CIRCLES COLORED": threeLights,
                "TRAFFIC LIGHT - SINGLE": threeLights,
                "THREE FLAGS COLORED": {
                    kpiIconClass: "flag",
                    statusValues: RYGStatusIconClassNames
                },
                "ROAD SIGNS": roadSigns,
                "THREE SYMBOLS CIRCLED COLORED": roadSigns,
                "TRAFFIC LIGHT": trafficLight,
                "THREE TRAFFIC LIGHTS RIMMED COLORED": trafficLight,
                "THREE SYMBOLS UNCIRCLED COLORED": {
                    kpiIconClass: "",
                    statusValues: [ "x kpi-red", "exclamation kpi-yellow", "checkmark kpi-green" ]
                },
                SHAPES: shapes,
                "SMILEY FACE": shapes,
                THERMOMETER: shapes,
                CYLINDER: shapes,
                "THREE SIGNS COLORED": shapes,
                "THREE STARS COLORED": {
                    kpiIconClass: "star-stacked",
                    statusValues: [ "star-empty", "star-half-full", "star-full" ]
                },
                "FIVE BARS COLORED": {
                    kpiIconClass: "bars-stacked",
                    statusValues: [ "bars-zero", "bars-one", "bars-two", "bars-three", "bars-four" ]
                },
                "FIVE BOXES COLORED": {
                    kpiIconClass: "boxes-stacked",
                    statusValues: [ "boxes-zero", "boxes-one", "boxes-two", "boxes-three", "boxes-four" ]
                },
                "FIVE QUARTERS COLORED": gauge,
                "GAUGE - ASCENDING": gauge,
                "GAUGE - DESCENDING": {
                    kpiIconClass: "",
                    statusValues: [ "circle-full", "circle-three-quarters", "circle-half", "circle-one-quarter", "circle-empty" ]
                },
                "STANDARD ARROW": {
                    kpiIconClass: "",
                    statusValues: [ "arrow-down", "arrow-right-down", "arrow-right", "arrow-right-up", "arrow-up" ]
                },
                "VARIANCE ARROW": {
                    kpiIconClass: "",
                    statusValues: [ "arrow-down kpi-red", "arrow-right kpi-yellow", "arrow-up kpi-green" ]
                },
                "STATUS ARROW - ASCENDING": {
                    kpiIconClass: "",
                    statusValues: [ "arrow-down kpi-red", "arrow-right-down kpi-yellow", "arrow-right kpi-yellow", "arrow-right-up kpi-yellow", "arrow-up kpi-green" ]
                },
                "STATUS ARROW - DESCENDING": {
                    kpiIconClass: "",
                    statusValues: [ "arrow-up kpi-green", "arrow-right-up kpi-yellow", "arrow-right kpi-yellow", "arrow-right-down kpi-yellow", "arrow-down kpi-red" ]
                }
            };
            KpiUtil.getClassForKpi = getClassForKpi, KpiUtil.getKpiImageMetadata = getKpiImageMetadata;
        })(KpiUtil = visuals.KpiUtil || (visuals.KpiUtil = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var DateUtil;
        !(function(DateUtil) {
            function isEqual(date1, date2) {
                return null == date1 && null == date2 || null != date1 && null != date2 && date1.getTime() === date2.getTime();
            }
            DateUtil.isEqual = isEqual;
        })(DateUtil = visuals.DateUtil || (visuals.DateUtil = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var MinMaxType;
        !(function(MinMaxType) {
            MinMaxType[MinMaxType.Minimum = 0] = "Minimum", MinMaxType[MinMaxType.Maximum = 1] = "Maximum", 
            MinMaxType[MinMaxType.Neither = 2] = "Neither";
        })(MinMaxType || (MinMaxType = {}));
        var MinMaxLabelDataPointSorter = (function() {
            function MinMaxLabelDataPointSorter(options) {
                this.unsortedLabelDataPointGroups = options.unsortedLabelDataPointGroups, this.series = options.series, 
                this.yScale = options.yAxisProperties.scale, this.viewport = options.viewport;
            }
            return MinMaxLabelDataPointSorter.prototype.getSortedDataLabels = function() {
                for (var unsortedLabelDataPointGroups = this.unsortedLabelDataPointGroups, sortedLabelDataPointGroups = [], seriesIndex = 0, seriesCount = unsortedLabelDataPointGroups.length; seriesIndex < seriesCount; seriesIndex++) {
                    var unsortedLabelDataPointGroup = unsortedLabelDataPointGroups[seriesIndex], numberOfLabelsToSort = MinMaxLabelDataPointSorter.maxNumberToSortFactor * unsortedLabelDataPointGroup.maxNumberOfLabels;
                    if (!_.isEmpty(unsortedLabelDataPointGroup.labelDataPoints)) {
                        var unsortedLabelDataPoints = unsortedLabelDataPointGroup.labelDataPoints, sortedLabelDataPoints = [], data_1 = _.filter(this.series[seriesIndex].data, (function(dataPoint) {
                            return dataPoint && null != dataPoint.value;
                        })), globalMinMaxInRange = MinMaxLabelDataPointSorter.getMinMaxInRange(0, data_1.length - 1, data_1), numberOfLabelsAdded = this.addFirstLastMaxMin(unsortedLabelDataPoints, sortedLabelDataPoints, globalMinMaxInRange.maxIndex, globalMinMaxInRange.minIndex), unsortedWeightedLabelDataPoints = void 0;
                        if (!(numberOfLabelsAdded >= numberOfLabelsToSort)) {
                            unsortedWeightedLabelDataPoints = this.calculateWeights(unsortedLabelDataPoints, data_1, numberOfLabelsToSort, globalMinMaxInRange);
                            var maximumnMinMaxesToAdd = Math.max(numberOfLabelsToSort - numberOfLabelsAdded, 0);
                            numberOfLabelsAdded += this.addLocalMinMaxes(unsortedWeightedLabelDataPoints, sortedLabelDataPoints, globalMinMaxInRange.maxIndex, globalMinMaxInRange.minIndex, maximumnMinMaxesToAdd);
                        }
                        if (!(numberOfLabelsAdded >= numberOfLabelsToSort)) {
                            var maximumNonMinMaxesToAdd = Math.max(numberOfLabelsToSort - numberOfLabelsAdded, 0);
                            this.addNonMinMaxes(unsortedWeightedLabelDataPoints, sortedLabelDataPoints, maximumNonMinMaxesToAdd);
                        }
                        sortedLabelDataPointGroups.push({
                            labelDataPoints: sortedLabelDataPoints,
                            maxNumberOfLabels: unsortedLabelDataPointGroup.maxNumberOfLabels
                        });
                    }
                }
                return sortedLabelDataPointGroups;
            }, MinMaxLabelDataPointSorter.prototype.calculateWeights = function(labelDataPoints, data, numberOfLabelsToSort, globalMinMax) {
                for (var previousMinMaxPoint, currentMinMaxPoint, categoryCount = data.length, yScale = this.yScale, minMaxPoints = this.findMinMaxesBasedOnSmoothedValues(labelDataPoints, data), totalValueDifference = Math.abs(yScale(globalMinMax.maxValue) - yScale(globalMinMax.minValue)), minMaxIndex = 0, minMaxCount = minMaxPoints.length; minMaxIndex < minMaxCount; minMaxIndex++) {
                    currentMinMaxPoint = minMaxPoints[minMaxIndex];
                    var weight = void 0;
                    if (previousMinMaxPoint) {
                        var valueWeight = Math.abs((yScale(previousMinMaxPoint.value) - yScale(currentMinMaxPoint.value)) / totalValueDifference), indexWeight = Math.abs(previousMinMaxPoint.index - currentMinMaxPoint.index) / (categoryCount - 1);
                        weight = (valueWeight + indexWeight) / 2;
                    }
                    if (null != weight && previousMinMaxPoint) {
                        var previousLabelDataPoint = labelDataPoints[previousMinMaxPoint.index];
                        null != previousLabelDataPoint.weight ? previousLabelDataPoint.weight = (previousLabelDataPoint.weight + weight) / 2 : previousLabelDataPoint.weight = weight, 
                        labelDataPoints[currentMinMaxPoint.index].weight = weight;
                    }
                    previousMinMaxPoint = currentMinMaxPoint;
                }
                for (var _i = 0, labelDataPoints_2 = labelDataPoints; _i < labelDataPoints_2.length; _i++) {
                    var labelDataPoint = labelDataPoints_2[_i];
                    labelDataPoint.weight < MinMaxLabelDataPointSorter.minimumWeightToConsiderMinMax && (labelDataPoint.weight = void 0);
                }
                return labelDataPoints;
            }, MinMaxLabelDataPointSorter.prototype.findMinMaxesBasedOnSmoothedValues = function(labelDataPoints, data) {
                for (var minMaxPoints = [], windowSize = this.getWindowSize(data), halfWindowSize = windowSize >> 1, scaledSmoothedValues = this.calculateSmoothedValues(data, windowSize), categoryIndex = 0, categoryCount = labelDataPoints.length; categoryIndex < categoryCount; categoryIndex++) {
                    var minMaxType = this.getMinMaxType(categoryIndex, scaledSmoothedValues);
                    if (minMaxType !== MinMaxType.Neither) {
                        var currentMinMaxPoint = {
                            index: categoryIndex,
                            type: minMaxType,
                            value: data[categoryIndex].value
                        };
                        minMaxPoints.push(currentMinMaxPoint);
                    }
                }
                for (var previousMinMax, currentMinMax, nextMinMax, minMaxIndex = 0, minMaxCount = minMaxPoints.length; minMaxIndex < minMaxCount; minMaxIndex++) if (previousMinMax = minMaxPoints[minMaxIndex - 1], 
                currentMinMax = minMaxPoints[minMaxIndex], nextMinMax = minMaxPoints[minMaxIndex + 1], 
                previousMinMax && nextMinMax) {
                    var actualMinMaxInRange = MinMaxLabelDataPointSorter.getMinMaxInRange(Math.max(previousMinMax.index, currentMinMax.index - halfWindowSize), Math.min(nextMinMax.index, currentMinMax.index + halfWindowSize), data);
                    if (currentMinMax.type === MinMaxType.Maximum) {
                        var actualIndex = actualMinMaxInRange.maxIndex;
                        currentMinMax.index = actualIndex, currentMinMax.value = data[actualIndex].value;
                    } else {
                        var actualIndex = actualMinMaxInRange.minIndex;
                        currentMinMax.index = actualIndex, currentMinMax.value = data[actualIndex].value;
                    }
                }
                return minMaxPoints;
            }, MinMaxLabelDataPointSorter.getMinMaxInRange = function(startIndex, endIndex, data) {
                for (var minValue, maxValue, minIndex, maxIndex, categoryIndex = startIndex, dataLength = data.length; categoryIndex <= endIndex && categoryIndex < dataLength; categoryIndex++) {
                    var value = data[categoryIndex].value;
                    null != value && ((void 0 === minValue || value < minValue) && (minValue = value, 
                    minIndex = categoryIndex), (void 0 === maxValue || value > maxValue) && (maxValue = value, 
                    maxIndex = categoryIndex));
                }
                return {
                    minIndex: minIndex,
                    minValue: minValue,
                    maxIndex: maxIndex,
                    maxValue: maxValue
                };
            }, MinMaxLabelDataPointSorter.prototype.getWindowSize = function(data) {
                var idealSize = data.length / this.viewport.width * MinMaxLabelDataPointSorter.estimatedLabelWidth, actualsize = 1 | idealSize;
                return actualsize;
            }, MinMaxLabelDataPointSorter.prototype.calculateSmoothedValues = function(data, windowSize) {
                for (var gaussianValues = MinMaxLabelDataPointSorter.getGaussianDistribution(windowSize), scaledAndSmoothedValues = [], categoryIndex = 0, categoryCount = data.length; categoryIndex < categoryCount; categoryIndex++) if (1 === windowSize) scaledAndSmoothedValues.push(data[categoryIndex].value); else {
                    var scaledValue = this.getSmoothedValue(data, categoryIndex, windowSize, gaussianValues);
                    scaledAndSmoothedValues.push(scaledValue);
                }
                return scaledAndSmoothedValues;
            }, MinMaxLabelDataPointSorter.getGaussianDistribution = function(windowSize) {
                for (var gaussianDistribution = [], halfWayIndex = windowSize >> 1, height = 1, maxPosition = halfWayIndex, standardDeviation = halfWayIndex / 2, i = 0; i < halfWayIndex; i++) {
                    var gaussianValue = height * Math.pow(Math.E, -1 * ((i - maxPosition) * (i - maxPosition)) / (2 * standardDeviation * standardDeviation));
                    gaussianDistribution.push(gaussianValue);
                }
                gaussianDistribution.push(1);
                for (var i = halfWayIndex - 1; i >= 0; i--) gaussianDistribution.push(gaussianDistribution[i]);
                return gaussianDistribution;
            }, MinMaxLabelDataPointSorter.prototype.getSmoothedValue = function(data, categoryIndex, windowSize, gaussianValues) {
                if (null == data[categoryIndex].value) return data[categoryIndex].value;
                for (var halfWindowSize = windowSize >> 1, startingIndex = categoryIndex - halfWindowSize, endingIndex = categoryIndex + halfWindowSize, totalValue = 0, totalValueCount = 0, lastDataIndex = data.length - 1, currentIndex = startingIndex, gaussianIndex = 0; currentIndex <= endingIndex; currentIndex++, 
                gaussianIndex++) {
                    var valueIndex = Math.max(0, Math.min(currentIndex, lastDataIndex)), value = data[valueIndex].value;
                    null != value && (totalValue += value * gaussianValues[gaussianIndex], totalValueCount++);
                }
                return totalValue / totalValueCount;
            }, MinMaxLabelDataPointSorter.prototype.addFirstLastMaxMin = function(unsorted, sorted, maxIndex, minIndex) {
                var labelsAdded = 0;
                if (_.isEmpty(unsorted)) return labelsAdded;
                sorted.push(unsorted[0]), labelsAdded++;
                var lastIndex = unsorted.length - 1;
                return 0 !== lastIndex && (sorted.push(unsorted[lastIndex]), labelsAdded++), 0 !== maxIndex && maxIndex !== lastIndex && (sorted.push(unsorted[maxIndex]), 
                labelsAdded++), 0 !== minIndex && minIndex !== lastIndex && (sorted.push(unsorted[minIndex]), 
                labelsAdded++), labelsAdded;
            }, MinMaxLabelDataPointSorter.prototype.addLocalMinMaxes = function(unsorted, sorted, maxIndex, minIndex, maxNumberOfLabels) {
                for (var lastIndex = unsorted.length - 1, localMinMaxes = _.filter(unsorted, (function(labelDataPoint, index) {
                    return 0 !== index && index !== lastIndex && index !== maxIndex && index !== minIndex && null != labelDataPoint.weight;
                })), sortedMinMaxes = _.sortBy(localMinMaxes, (function(weighedLabelDataPoint) {
                    return -weighedLabelDataPoint.weight;
                })), labelsAdded = 0, i = 0, ilen = Math.min(sortedMinMaxes.length, maxNumberOfLabels); i < ilen; i++) sorted.push(sortedMinMaxes[i]), 
                labelsAdded++;
                return labelsAdded;
            }, MinMaxLabelDataPointSorter.prototype.addNonMinMaxes = function(unsorted, sorted, maxNumberOfLabels) {
                for (var currentNonMinMaxSet, nonMinMaxSets = [], categoryIndex = 0, categoryCount = unsorted.length; categoryIndex < categoryCount; categoryIndex++) null == unsorted[categoryIndex].weight ? currentNonMinMaxSet ? currentNonMinMaxSet.count++ : currentNonMinMaxSet = {
                    startingIndex: categoryIndex,
                    count: 1
                } : currentNonMinMaxSet && currentNonMinMaxSet.count > 0 && (nonMinMaxSets.push(currentNonMinMaxSet), 
                currentNonMinMaxSet = null);
                for (var numberOfLabelsAdded = 0; nonMinMaxSets.length > 0 && numberOfLabelsAdded < maxNumberOfLabels; ) {
                    for (var currentMaxCount = 0, maxIndex = 0, i = 0, ilen = nonMinMaxSets.length; i < ilen; i++) {
                        var currentCount = nonMinMaxSets[i].count;
                        currentCount > currentMaxCount && (currentMaxCount = currentCount, maxIndex = i);
                    }
                    var setToSplit = nonMinMaxSets.splice(maxIndex, 1)[0];
                    if (1 === setToSplit.count) sorted.push(unsorted[setToSplit.startingIndex]); else {
                        var splitIndex = (setToSplit.count >> 1) + setToSplit.startingIndex;
                        sorted.push(unsorted[splitIndex]);
                        var leftCount = splitIndex - setToSplit.startingIndex;
                        leftCount > 0 && nonMinMaxSets.push({
                            startingIndex: setToSplit.startingIndex,
                            count: leftCount
                        });
                        var rightCount = setToSplit.startingIndex + setToSplit.count - splitIndex - 1;
                        rightCount > 0 && nonMinMaxSets.push({
                            startingIndex: splitIndex + 1,
                            count: rightCount
                        });
                    }
                    numberOfLabelsAdded++;
                }
            }, MinMaxLabelDataPointSorter.prototype.getMinMaxType = function(index, scaledDataPoints) {
                var currentValue = scaledDataPoints[index];
                if (null == scaledDataPoints[index]) return MinMaxType.Neither;
                if (scaledDataPoints.length < 2) return MinMaxType.Neither;
                if (null == scaledDataPoints[index - 1]) return scaledDataPoints[index + 1] > currentValue ? MinMaxType.Minimum : MinMaxType.Maximum;
                if (null == scaledDataPoints[index + 1]) return scaledDataPoints[index - 1] > currentValue ? MinMaxType.Minimum : MinMaxType.Maximum;
                var prevValue = scaledDataPoints[index - 1], nextValue = scaledDataPoints[index + 1];
                return null == prevValue && null == nextValue ? MinMaxType.Neither : null == prevValue ? nextValue > currentValue ? MinMaxType.Minimum : MinMaxType.Maximum : null == nextValue ? prevValue > currentValue ? MinMaxType.Minimum : MinMaxType.Maximum : prevValue > currentValue && currentValue < nextValue ? MinMaxType.Minimum : prevValue < currentValue && currentValue > nextValue ? MinMaxType.Maximum : MinMaxType.Neither;
            }, MinMaxLabelDataPointSorter.estimatedLabelWidth = 40, MinMaxLabelDataPointSorter.minimumWeightToConsiderMinMax = .015, 
            MinMaxLabelDataPointSorter.maxNumberToSortFactor = 2, MinMaxLabelDataPointSorter;
        })();
        visuals.MinMaxLabelDataPointSorter = MinMaxLabelDataPointSorter;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var Inertia = (function() {
            function Inertia(callback, enabled, distanceFactor, timeFactor, sampleTime) {
                void 0 === enabled && (enabled = !0), void 0 === distanceFactor && (distanceFactor = 250), 
                void 0 === timeFactor && (timeFactor = 1700), void 0 === sampleTime && (sampleTime = 100), 
                this.callback = callback, this.enabled = enabled, this.distanceFactor = distanceFactor, 
                this.timeFactor = timeFactor, this.sampleTime = sampleTime, this.points = [];
            }
            return Inertia.prototype.addPoint = function(x, y) {
                for (var points = this.points, now = Date.now(); !(_.isEmpty(points) || now - points[0].timestamp < this.sampleTime); ) points.shift();
                points.push({
                    x: x,
                    y: y,
                    timestamp: now
                });
            }, Inertia.prototype.hasStarted = function() {
                return this.started;
            }, Inertia.prototype.start = function() {
                var _this = this;
                if (this.enabled && !(this.points.length <= 1)) {
                    this.started && this.stop();
                    var easingFunction = d3.ease("cubic-out"), lastPoint = _.last(this.points), firstPoint = _.first(this.points), deltaX = lastPoint.x - firstPoint.x, deltaY = lastPoint.y - firstPoint.y, deltaT = lastPoint.timestamp - firstPoint.timestamp, velocityX = deltaX / deltaT, velocityY = deltaY / deltaT, distanceFactor = window.distanceFactor || this.distanceFactor, distanceX = velocityX * distanceFactor, distanceY = velocityY * distanceFactor, decayTime = Math.sqrt(Math.pow(velocityX, 2) + Math.pow(velocityY, 2)) * window.timeFactor || this.timeFactor, totalDistanceX = 0, totalDistanceY = 0;
                    this.started = !0, d3.timer((function(elapsed) {
                        if (_this.stopRequested) return _this.clearState(), !0;
                        var portion = easingFunction(1 * elapsed / decayTime), newDeltaX = portion * distanceX - totalDistanceX, newDeltaY = portion * distanceY - totalDistanceY;
                        totalDistanceX += newDeltaX, totalDistanceY += newDeltaY, _this.callback && _this.callback(newDeltaX, newDeltaY);
                        var done = elapsed > decayTime;
                        return done && _this.clearState(), done;
                    }));
                }
            }, Inertia.prototype.stop = function() {
                this.started && (this.stopRequested = !0);
            }, Inertia.prototype.clearState = function() {
                this.started = !1, this.stopRequested = !1;
            }, Inertia;
        })();
        visuals.Inertia = Inertia;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var InteractivityUtils;
        !(function(InteractivityUtils) {
            function getPositionOfLastInputEvent() {
                return {
                    x: d3.event.clientX,
                    y: d3.event.clientY
                };
            }
            function registerStandardInteractivityHandlers(selection, selectionHandler) {
                registerStandardSelectionHandler(selection, selectionHandler), registerStandardContextMenuHandler(selection, selectionHandler);
            }
            function registerStandardSelectionHandler(selection, selectionHandler) {
                selection.on("click", (function(d) {
                    return handleSelection(d, selectionHandler);
                }));
            }
            function registerStandardContextMenuHandler(selection, selectionHandler) {
                selection.on("contextmenu", (function(d) {
                    return handleContextMenu(d, selectionHandler);
                }));
            }
            function registerGroupInteractivityHandlers(group, selectionHandler) {
                registerGroupSelectionHandler(group, selectionHandler), registerGroupContextMenuHandler(group, selectionHandler);
            }
            function registerGroupSelectionHandler(group, selectionHandler) {
                group.on("click", (function() {
                    tryToSelectD3Target((function(d) {
                        return handleSelection(d, selectionHandler);
                    }));
                }));
            }
            function registerGroupContextMenuHandler(group, selectionHandler) {
                group.on("contextmenu", (function() {
                    tryToSelectD3Target((function(d) {
                        return handleContextMenu(d, selectionHandler);
                    }));
                }));
            }
            function tryToSelectD3Target(selectionEvent) {
                var target = d3.event.target, d = d3.select(target).datum();
                d && selectionEvent(d);
            }
            function handleContextMenu(d, selectionHandler) {
                if (!d3.event.ctrlKey) {
                    d3.event.preventDefault();
                    var position = InteractivityUtils.getPositionOfLastInputEvent();
                    selectionHandler.handleContextMenu(d, position);
                }
            }
            function handleSelection(d, selectionHandler) {
                var position = InteractivityUtils.getPositionOfLastInputEvent();
                selectionHandler.handleSelection(d, d3.event.ctrlKey, position);
            }
            InteractivityUtils.getPositionOfLastInputEvent = getPositionOfLastInputEvent, InteractivityUtils.registerStandardInteractivityHandlers = registerStandardInteractivityHandlers, 
            InteractivityUtils.registerStandardSelectionHandler = registerStandardSelectionHandler, 
            InteractivityUtils.registerStandardContextMenuHandler = registerStandardContextMenuHandler, 
            InteractivityUtils.registerGroupInteractivityHandlers = registerGroupInteractivityHandlers, 
            InteractivityUtils.registerGroupSelectionHandler = registerGroupSelectionHandler, 
            InteractivityUtils.registerGroupContextMenuHandler = registerGroupContextMenuHandler, 
            InteractivityUtils.tryToSelectD3Target = tryToSelectD3Target;
        })(InteractivityUtils = visuals.InteractivityUtils || (visuals.InteractivityUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function getInvalidValueWarnings(dataViews, supportsNaN, supportsNegativeInfinity, supportsPositiveInfinity, ignoreRoles, readMatrixDV) {
            var checker = new InvalidDataValuesChecker(supportsNaN, supportsNegativeInfinity, supportsPositiveInfinity, readMatrixDV, ignoreRoles);
            return checker.getWarningMessages(dataViews);
        }
        var DataViewMatrixUtils = powerbi.data.DataViewMatrixUtils;
        visuals.getInvalidValueWarnings = getInvalidValueWarnings;
        var InvalidDataValuesChecker = (function() {
            function InvalidDataValuesChecker(supportsNaN, supportsNegativeInfinity, supportsPositiveInfinity, readMatrixDV, ignoreRoles) {
                this.supportsNaN = supportsNaN, this.supportsNegativeInfinity = supportsNegativeInfinity, 
                this.supportsPositiveInfinity = supportsPositiveInfinity, this.ignoreRoles = ignoreRoles, 
                this.readMatrixDV = readMatrixDV;
            }
            return InvalidDataValuesChecker.prototype.getWarningMessages = function(dataViews) {
                this.loadWarningStatus(dataViews);
                var warnings = [];
                return this.hasNaN && !this.supportsNaN && warnings.push(new visuals.NaNNotSupportedWarning()), 
                (this.hasNegativeInfinity && !this.supportsNegativeInfinity || this.hasPositiveInfinity && !this.supportsPositiveInfinity) && warnings.push(new visuals.InfinityValuesNotSupportedWarning()), 
                this.hasOutOfRange && warnings.push(new visuals.ValuesOutOfRangeWarning()), warnings;
            }, InvalidDataValuesChecker.prototype.loadWarningStatus = function(dataViews) {
                this.hasNaN = !1, this.hasNegativeInfinity = !1, this.hasOutOfRange = !1, this.hasPositiveInfinity = !1;
                for (var _i = 0, dataViews_1 = dataViews; _i < dataViews_1.length; _i++) {
                    var dataView = dataViews_1[_i];
                    this.readMatrixDV ? this.readMatrix(dataView) : this.readCategorical(dataView);
                }
            }, InvalidDataValuesChecker.prototype.readCategorical = function(dataView) {
                var values = dataView && dataView.categorical && dataView.categorical.values ? dataView.categorical.values : null;
                if (values) for (var valuesIndicesToIgnore = this.valueIndicesToIgnore(_.map(values, (function(value) {
                    return value.source;
                }))), index = 0, len = values.length; index < len; index++) if (!_.contains(valuesIndicesToIgnore, index)) {
                    var valueColumn = values[index];
                    if (valueColumn.values) for (var _i = 0, _a = valueColumn.values; _i < _a.length; _i++) {
                        var v = _a[_i];
                        this.checkValue(v);
                    }
                }
            }, InvalidDataValuesChecker.prototype.valueIndicesToIgnore = function(valueMetadataColumns) {
                var _this = this, valueColumnIndicesToIgnore = [];
                if (!_.isEmpty(this.ignoreRoles)) for (var i = 0; i < valueMetadataColumns.length; i++) {
                    var col = valueMetadataColumns[i], columnRoles = col && col.roles && Object.keys(col.roles);
                    !_.isEmpty(columnRoles) && _.all(columnRoles, (function(role) {
                        return _.contains(_this.ignoreRoles, role);
                    })) && valueColumnIndicesToIgnore.push(i);
                }
                return valueColumnIndicesToIgnore;
            }, InvalidDataValuesChecker.prototype.readMatrix = function(dataView) {
                var _this = this;
                if (dataView && dataView.matrix) {
                    var valueSourceIndicesToIgnore = this.valueIndicesToIgnore(dataView.matrix.valueSources);
                    powerbi.data.DataViewMatrixUtils.forEachNodeDepthFirst(dataView.matrix.rows.root, (function(node, path) {
                        if (DataViewMatrixUtils.isLeafNode(node)) {
                            if (!node.values) return 1;
                            for (var ids = Object.keys(node.values), _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
                                var id = ids_1[_i], value = node.values[id];
                                _.contains(valueSourceIndicesToIgnore, value.valueSourceIndex) || _this.checkValue(value && value.value);
                            }
                            return 1;
                        }
                        return _this.hasNaN && _this.hasPositiveInfinity && _this.hasNegativeInfinity && _this.hasOutOfRange ? 0 : 1;
                    }));
                }
            }, InvalidDataValuesChecker.prototype.checkValue = function(v) {
                isNaN(v) ? this.hasNaN = !0 : v === Number.POSITIVE_INFINITY ? this.hasPositiveInfinity = !0 : v === Number.NEGATIVE_INFINITY ? this.hasNegativeInfinity = !0 : (v < -1e300 || v > 1e300) && (this.hasOutOfRange = !0);
            }, InvalidDataValuesChecker;
        })();
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function getCoordinates(rootNode, isPointerEvent) {
            var coordinates;
            if (isPointerEvent) {
                for (var e = d3.event, s = void 0; s = e.sourceEvent; ) e = s;
                var rect = rootNode.getBoundingClientRect();
                coordinates = [ e.clientX - rect.left - rootNode.clientLeft, e.clientY - rect.top - rootNode.clientTop ];
            } else {
                var touchCoordinates = d3.touches(rootNode);
                touchCoordinates && touchCoordinates.length > 0 && (coordinates = touchCoordinates[0]);
            }
            return coordinates;
        }
        visuals.getCoordinates = getCoordinates;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var LassoManager = (function() {
            function LassoManager() {}
            return LassoManager.prototype.init = function(surface) {
                this.surface = surface, this.initDragEvents(surface), this.enabled = !0, this.behaviors = [];
            }, LassoManager.prototype.enable = function(enabled) {
                this.enabled = enabled;
            }, LassoManager.prototype.initDragEvents = function(svg) {
                var _this = this;
                svg.on("mousedown.lasso", (function() {
                    _this.enabled && _this.startDrag(d3.event);
                }), !0), svg.on("mousemove.lasso", (function() {
                    _this.enabled && _this.dragging && _this.drag(d3.event);
                }), !0), svg.on("mouseup.lasso", (function() {
                    _this.enabled && _this.dragging && _this.endDrag(d3.event);
                }), !0);
            }, LassoManager.prototype.startDrag = function(e) {
                var _this = this;
                if (this.onRectStart(e)) {
                    this.dragging = !0;
                    var point = visuals.getCoordinates(this.surface.node(), !0);
                    this.dragStart = {
                        x: point[0],
                        y: point[1]
                    }, this.dragRect = this.surface.append("rect").classed("lasso-select", !0), this.updateDragRect(e, point), 
                    e.stopPropagation(), d3.select("body").on("mousemove.lasso", (function() {
                        _this.drag(d3.event);
                    })).on("mouseup.lasso", (function() {
                        _this.endDrag(d3.event);
                    }));
                }
            }, LassoManager.prototype.endDrag = function(e) {
                var point = visuals.getCoordinates(this.surface.node(), !0), rect = {
                    left: Math.min(point[0], this.dragStart.x),
                    top: Math.min(point[1], this.dragStart.y),
                    right: Math.max(point[0], this.dragStart.x),
                    bottom: Math.max(point[1], this.dragStart.y)
                };
                this.onRectEnd(e, rect), this.dragging = !1, this.dragRect && (this.dragRect.remove(), 
                this.dragRect = null), d3.select("body").on(".lasso", null);
            }, LassoManager.prototype.drag = function(e) {
                var point = visuals.getCoordinates(this.surface.node(), !0);
                this.updateDragRect(e, point);
            }, LassoManager.prototype.updateDragRect = function(e, point) {
                var rect = this.getDragRect(point);
                this.dragRect.attr({
                    x: rect.left,
                    y: rect.top,
                    width: rect.width,
                    height: rect.height
                }), this.onRectHover(e, {
                    left: rect.left,
                    top: rect.top,
                    right: rect.left + rect.width,
                    bottom: rect.top + rect.height
                });
            }, LassoManager.prototype.onRectHover = function(e, rect) {
                for (var _i = 0, _a = this.behaviors; _i < _a.length; _i++) {
                    var behavior = _a[_i];
                    behavior.onRectHover && behavior.onRectHover(e, rect);
                }
            }, LassoManager.prototype.onRectEnd = function(e, rect) {
                for (var _i = 0, _a = this.behaviors; _i < _a.length; _i++) {
                    var behavior = _a[_i];
                    behavior.onRectEnd && behavior.onRectEnd(e, rect);
                }
            }, LassoManager.prototype.onRectStart = function(e) {
                for (var valid = !0, _i = 0, _a = this.behaviors; _i < _a.length; _i++) {
                    var behavior = _a[_i];
                    behavior.onDragStart && (valid = valid && behavior.onDragStart(e));
                }
                return valid;
            }, LassoManager.prototype.getDragRect = function(point) {
                var xDiff = point[0] - this.dragStart.x, yDiff = point[1] - this.dragStart.y;
                return {
                    left: Math.min(this.dragStart.x, point[0]),
                    top: Math.min(this.dragStart.y, point[1]),
                    width: Math.abs(xDiff),
                    height: Math.abs(yDiff)
                };
            }, LassoManager;
        })();
        visuals.LassoManager = LassoManager;
        var CartesianPlotHelper;
        !(function(CartesianPlotHelper) {
            function getScaledRegion(rect, axesLayout) {
                var left = rect.left - axesLayout.margin.left, top = rect.top - axesLayout.margin.top, right = rect.right - axesLayout.margin.left, bottom = rect.bottom - axesLayout.margin.top;
                return {
                    left: visuals.AxisHelper.invertScale(axesLayout.axes.x.scale, left),
                    top: visuals.AxisHelper.invertScale(axesLayout.axes.y1.scale, top),
                    right: visuals.AxisHelper.invertScale(axesLayout.axes.x.scale, right),
                    bottom: visuals.AxisHelper.invertScale(axesLayout.axes.y1.scale, bottom)
                };
            }
            CartesianPlotHelper.getScaledRegion = getScaledRegion;
        })(CartesianPlotHelper = visuals.CartesianPlotHelper || (visuals.CartesianPlotHelper = {}));
        var LassoSelectionBehavior = (function() {
            function LassoSelectionBehavior(behavior) {
                this.behavior = behavior;
            }
            return LassoSelectionBehavior.prototype.update = function(axesLayout) {
                this.axesLayout = axesLayout;
            }, LassoSelectionBehavior.prototype.onRectEnd = function(e, rect) {
                var scaledRegion = CartesianPlotHelper.getScaledRegion(rect, this.axesLayout);
                this.selectRegion(e, scaledRegion);
            }, LassoSelectionBehavior.prototype.onRectHover = function(e, rect) {
                if (this.behavior.hoverLassoRegion) {
                    var scaledRegion = CartesianPlotHelper.getScaledRegion(rect, this.axesLayout);
                    this.behavior.hoverLassoRegion(e, scaledRegion);
                }
            }, LassoSelectionBehavior.prototype.onDragStart = function(e) {
                return 0 === e.button;
            }, LassoSelectionBehavior.prototype.selectRegion = function(e, rect) {
                this.behavior.lassoSelect && this.behavior.lassoSelect(e, rect);
            }, LassoSelectionBehavior;
        })();
        visuals.LassoSelectionBehavior = LassoSelectionBehavior;
        var LassoZoomBehavior = (function() {
            function LassoZoomBehavior(hostServices) {
                this.hostServices = hostServices;
            }
            return LassoZoomBehavior.prototype.update = function(axesLayout) {
                this.axesLayout = axesLayout;
            }, LassoZoomBehavior.prototype.onRectEnd = function(e, rect) {
                if (2 === e.button) this.unzoomRegion(); else {
                    var scaledRegion = CartesianPlotHelper.getScaledRegion(rect, this.axesLayout);
                    this.zoomRegion(scaledRegion);
                }
            }, LassoZoomBehavior.prototype.zoomRegion = function(rect) {
                this.hostServices.persistProperties({
                    replace: [ {
                        objectName: "categoryAxis",
                        properties: {
                            start: rect.left,
                            end: rect.right
                        },
                        selector: null
                    }, {
                        objectName: "valueAxis",
                        properties: {
                            start: rect.bottom,
                            end: rect.top
                        },
                        selector: null
                    } ]
                });
            }, LassoZoomBehavior.prototype.unzoomRegion = function() {
                this.hostServices.persistProperties({
                    remove: [ {
                        objectName: "categoryAxis",
                        properties: {
                            start: null,
                            end: null
                        },
                        selector: null
                    }, {
                        objectName: "valueAxis",
                        properties: {
                            start: null,
                            end: null
                        },
                        selector: null
                    } ]
                });
            }, LassoZoomBehavior;
        })();
        visuals.LassoZoomBehavior = LassoZoomBehavior;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var LineStyle, normalizeSelector = powerbi.data.Selector.normalizeSelector;
        !(function(LineStyle) {
            function readFromStaticObjects(staticObjects, readMarkers) {
                return {
                    shadeArea: powerbi.DataViewObjects.getValue(staticObjects, visuals.lineChartProps.lineStyles.shadeArea, !1),
                    strokeWidth: powerbi.DataViewObjects.getValue(staticObjects, visuals.lineChartProps.lineStyles.strokeWidth, visuals.CartesianHelper.defaultLineStrokeWidth),
                    lineJoin: powerbi.DataViewObjects.getValue(staticObjects, visuals.lineChartProps.lineStyles.strokeLineJoin, visuals.strokeLineJoin.defaultValue),
                    style: powerbi.DataViewObjects.getValue(staticObjects, visuals.lineChartProps.lineStyles.lineStyle, visuals.lineStyle.solid),
                    markerProperties: readMarkers ? visuals.MarkerProperties.readFromStaticObjects(staticObjects) : visuals.MarkerProperties.getDefault()
                };
            }
            function readFromSeriesObjects(reader, staticStyle, seriesIndex, readSeriesMarkers, showAllSeries) {
                var style = powerbi.Prototype.inherit(staticStyle), markerProperties = visuals.MarkerProperties.readFromSeries(reader, staticStyle.markerProperties, seriesIndex, !readSeriesMarkers);
                if (style.markerProperties = markerProperties, !reader.data.hasSeries() || !showAllSeries) return style;
                var objects = reader.objects.getSeriesDataObjects(seriesIndex), strokeWidthFromObjects = powerbi.DataViewObjects.getValue(objects, visuals.lineChartProps.lineStyles.strokeWidth);
                null != strokeWidthFromObjects && (style.strokeWidth = strokeWidthFromObjects);
                var lineJoinFromObjects = powerbi.DataViewObjects.getValue(objects, visuals.lineChartProps.lineStyles.strokeLineJoin);
                null != lineJoinFromObjects && (style.lineJoin = lineJoinFromObjects);
                var styleFromObjects = powerbi.DataViewObjects.getValue(objects, visuals.lineChartProps.lineStyles.lineStyle);
                null != styleFromObjects && (style.style = styleFromObjects);
                var shadeFromObjects = powerbi.DataViewObjects.getValue(objects, visuals.lineChartProps.lineStyles.shadeArea);
                return null != shadeFromObjects && (style.shadeArea = shadeFromObjects), style;
            }
            function getDefault() {
                return {
                    strokeWidth: visuals.CartesianHelper.defaultLineStrokeWidth,
                    lineJoin: visuals.strokeLineJoin.defaultValue,
                    style: visuals.lineStyle.solid,
                    markerProperties: visuals.MarkerProperties.getDefault(),
                    shadeArea: !1
                };
            }
            function enumerate(options) {
                var style = options.style, instance = {
                    selector: normalizeSelector(options.selector),
                    properties: {
                        shadeArea: style.shadeArea,
                        strokeWidth: style.strokeWidth,
                        strokeLineJoin: style.lineJoin
                    },
                    objectName: visuals.lineChartProps.lineStyles.lineStyle.objectName
                };
                options.enumerateStyle && (instance.properties[visuals.lineChartProps.lineStyles.lineStyle.propertyName] = style.style), 
                options.enumerateMarkers && visuals.MarkerProperties.populateInstance(instance, style.markerProperties);
                var showSeries = options.showSeries;
                null != showSeries && (instance.properties.showSeries = showSeries), options.enumeration.pushInstance(instance);
            }
            function getStrokeDashArrayFromLineStyle(style) {
                switch (style) {
                  case visuals.lineStyle.dashed:
                    return dashedStroke;

                  case visuals.lineStyle.dotted:
                    return dottedStroke;

                  case visuals.lineStyle.solid:
                    return solidStroke;

                  default:
                    return solidStroke;
                }
            }
            function getSrokeDashArrayForLegend(style) {
                switch (style) {
                  case visuals.lineStyle.dashed:
                    return "7,5";

                  case visuals.lineStyle.dotted:
                    return "2.5,3.1";

                  case visuals.lineStyle.solid:
                    return solidStroke;

                  default:
                    return solidStroke;
                }
            }
            function getStrokeLineCapFromLineStyle(style) {
                switch (style) {
                  case visuals.lineStyle.dashed:
                  case visuals.lineStyle.solid:
                    return otherLineCap;

                  case visuals.lineStyle.dotted:
                    return dottedLineCap;

                  default:
                    return otherLineCap;
                }
            }
            var dashedStroke = "5, 5", dottedStroke = "1, 5", solidStroke = null, dottedLineCap = "round", otherLineCap = null;
            LineStyle.readFromStaticObjects = readFromStaticObjects, LineStyle.readFromSeriesObjects = readFromSeriesObjects, 
            LineStyle.getDefault = getDefault, LineStyle.enumerate = enumerate, LineStyle.getStrokeDashArrayFromLineStyle = getStrokeDashArrayFromLineStyle, 
            LineStyle.getSrokeDashArrayForLegend = getSrokeDashArrayForLegend, LineStyle.getStrokeLineCapFromLineStyle = getStrokeLineCapFromLineStyle;
        })(LineStyle = visuals.LineStyle || (visuals.LineStyle = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var ListViewFactory;
        !(function(ListViewFactory) {
            function createListView(options) {
                return new ListView(options);
            }
            ListViewFactory.createListView = createListView;
        })(ListViewFactory = visuals.ListViewFactory || (visuals.ListViewFactory = {}));
        var ListView = (function() {
            function ListView(options) {
                var _this = this;
                this.options = $.extend(!0, {}, options), this.scrollbarInner = options.baseContainer.append("div").classed("scrollbar-inner", !0).on("scroll", (function() {
                    return _this.renderImpl(_this.options.rowHeight);
                })), this.scrollContainer = this.scrollbarInner.append("div").classed("scrollRegion", !0).on("touchstart", (function() {
                    return _this.stopTouchPropagation();
                })).on("touchmove", (function() {
                    return _this.stopTouchPropagation();
                })), this.visibleGroupContainer = this.scrollContainer.append("div").classed("visibleGroup", !0);
                var scrollInner = $(this.scrollbarInner.node());
                scrollInner.scrollbar({
                    ignoreOverlay: !1,
                    ignoreMobile: !1,
                    onDestroy: function() {
                        return scrollInner.off("scroll");
                    }
                }), $(options.baseContainer.node()).find(".scroll-element").attr("drag-resize-disabled", "true"), 
                this.scrollToFrame = this.options.scrollToFrame || this.defaultScrollToFrame, ListView.SetDefaultOptions(options);
            }
            return ListView.prototype.getContainerHeight = function() {
                return $(this.options.baseContainer.node()).outerHeight();
            }, ListView.SetDefaultOptions = function(options) {
                options.rowHeight = options.rowHeight || ListView.defaultRowHeight;
            }, ListView.prototype.rowHeight = function(rowHeight) {
                return this.options.rowHeight = Math.ceil(rowHeight), this;
            }, ListView.prototype.data = function(data, getDatumIndex, dataReset) {
                return void 0 === dataReset && (dataReset = !1), this._data = data, this.getDatumIndex = getDatumIndex, 
                this.setTotalRows(), dataReset && $(this.scrollbarInner.node()).scrollTop(0), this.render(), 
                this;
            }, ListView.prototype.viewport = function(viewport) {
                return this.render(), this;
            }, ListView.prototype.empty = function() {
                this._data = [], this.render();
            }, ListView.prototype.render = function() {
                var _this = this;
                this.renderTimeoutId && window.clearTimeout(this.renderTimeoutId), this.renderTimeoutId = window.setTimeout((function() {
                    _this.getRowHeight().then((function(rowHeight) {
                        _this.renderImpl(rowHeight);
                    })), _this.renderTimeoutId = void 0;
                }), 0);
            }, ListView.prototype.renderImpl = function(rowHeight) {
                var totalHeight = this.options.scrollEnabled ? Math.max(0, this._totalRows * rowHeight) : this.getContainerHeight();
                this.scrollContainer.style("height", totalHeight + "px").attr("height", totalHeight), 
                this.scrollToFrame(this, !0, this.options.rowHeight || ListView.defaultRowHeight, this.scrollbarInner.node().scrollTop, this._totalRows, this.visibleGroupContainer, this.options.baseContainer);
            }, ListView.prototype.stopTouchPropagation = function() {
                if (this.options.isReadMode()) {
                    if ("touchstart" === d3.event.type) {
                        var event_1 = d3.event;
                        event_1.touches && 1 === event_1.touches.length && d3.event.stopPropagation();
                    }
                    "touchmove" === d3.event.type && d3.event.stopPropagation();
                }
            }, ListView.prototype.defaultScrollToFrame = function(listView, loadMoreData, rowHeight, scrollTop, totalElements, visibleGroupContainer, baseContainer) {
                var visibleRows = this.getVisibleRows(), scrollPosition = 0 === scrollTop ? 0 : Math.floor(scrollTop / rowHeight), transformAttr = visuals.SVGUtil.translateWithPixels(0, scrollPosition * rowHeight);
                visibleGroupContainer.style({
                    transform: function(d) {
                        return transformAttr;
                    },
                    "-webkit-transform": transformAttr
                });
                var position0 = Math.max(0, Math.min(scrollPosition, totalElements - visibleRows + 1)), position1 = position0 + visibleRows;
                this.performScrollToFrame(position0, position1, totalElements, visibleRows, loadMoreData);
            }, ListView.prototype.performScrollToFrame = function(position0, position1, totalRows, visibleRows, loadMoreData) {
                var options = this.options, visibleGroupContainer = this.visibleGroupContainer, rowSelection = visibleGroupContainer.selectAll(".row").data(this._data.slice(position0, Math.min(position1, totalRows)), this.getDatumIndex);
                rowSelection.enter().append("div").classed("row", !0).call((function(d) {
                    return options.enter(d);
                })), rowSelection.order();
                var rowUpdateSelection = visibleGroupContainer.selectAll(".row:not(.transitioning)");
                rowUpdateSelection.call((function(d) {
                    return options.update(d);
                })), rowSelection.exit().call((function(d) {
                    return options.exit(d);
                })).remove(), loadMoreData && visibleRows !== totalRows && position1 >= totalRows * ListView.loadMoreDataThreshold && options.loadMoreData();
            }, ListView.prototype.setTotalRows = function() {
                var data = this._data;
                this._totalRows = data ? data.length : 0;
            }, ListView.prototype.getVisibleRows = function() {
                var minimumVisibleRows = 1, options = this.options, rowHeight = options.rowHeight, containerHeight = this.getContainerHeight();
                if (!rowHeight || rowHeight < 1) return minimumVisibleRows;
                var viewportRowCount = containerHeight / rowHeight;
                return this.options.scrollEnabled ? Math.min(Math.ceil(viewportRowCount) + 1, this._totalRows) || minimumVisibleRows : Math.min(Math.floor(viewportRowCount), this._totalRows) || minimumVisibleRows;
            }, ListView.prototype.getRowHeight = function() {
                var deferred = $.Deferred(), listView = this, options = listView.options;
                if (this.cancelMeasurePass && this.cancelMeasurePass(), !(this._data && this._data.length && options)) return listView.rowHeight(ListView.defaultRowHeight), 
                deferred.resolve(options.rowHeight).promise();
                this.scrollToFrame(this, !1, this.options.rowHeight || ListView.defaultRowHeight, this.scrollbarInner.node().scrollTop, this._totalRows, this.visibleGroupContainer, this.options.baseContainer);
                var requestAnimationFrameId = window.requestAnimationFrame((function() {
                    var rows = listView.visibleGroupContainer.selectAll(".row").filter((function() {
                        return "" !== this.textContent;
                    }));
                    if (rows.empty() && (rows = listView.visibleGroupContainer.select(".row")), !rows.empty()) {
                        var firstRow = rows.node(), rowHeight = Math.max($(firstRow).outerHeight(!0), $(firstRow).children().first().outerHeight(!0));
                        listView.rowHeight(rowHeight), deferred.resolve(rowHeight);
                    }
                    listView.cancelMeasurePass = void 0, window.cancelAnimationFrame(requestAnimationFrameId);
                }));
                return this.cancelMeasurePass = function() {
                    window.cancelAnimationFrame(requestAnimationFrameId), deferred.reject();
                }, deferred.promise();
            }, ListView.loadMoreDataThreshold = .8, ListView.defaultRowHeight = 1, ListView;
        })();
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var MapUtil, defaultLevelOfDetail = 11;
        !(function(MapUtil) {
            function getBingMapsVersion() {
                var version;
                try {
                    if (Microsoft && Microsoft.Maps && Microsoft.Maps.Map && _.isFunction(Microsoft.Maps.Map.getVersion)) {
                        var v = Microsoft.Maps.Map.getVersion();
                        version = /^7\./.test(v) ? 7 : 8;
                    }
                } catch (err) {
                    jsCommon.Trace.error("Error getting Bing maps version: " + (err & (err.message || err.toString())));
                }
                return version;
            }
            function removeHillShading() {
                Microsoft.Maps.Globals && "string" == typeof Microsoft.Maps.Globals.roadUriFormat && (Microsoft.Maps.Globals.roadUriFormat = Microsoft.Maps.Globals.roadUriFormat.replace("&shading=hill", ""));
            }
            function createPushPin(location, svgTemplate, width, height) {
                var options = {
                    draggable: !1
                };
                return 7 === MapUtil.getBingMapsVersion() ? (options.htmlContent = svgTemplate, 
                options.height = height, options.width = width) : options.icon = svgTemplate, new Microsoft.Maps.Pushpin(location, options);
            }
            function renderAfterResize(mapControl) {
                if (8 === MapUtil.getBingMapsVersion() && mapControl) {
                    var _sizeHelper = mapControl._v8Map && mapControl._v8Map._sizeHelper;
                    _sizeHelper && _.isFunction(_sizeHelper.pollSize) && _sizeHelper.pollSize();
                }
            }
            function mapTypeIdFromTheme(theme) {
                if (7 === MapUtil.getBingMapsVersion()) switch (theme) {
                  case visuals.BingMapTheme.aerial:
                    return Microsoft.Maps.MapTypeId.aerial;

                  default:
                    return Microsoft.Maps.MapTypeId.road;
                }
                var typeId = Microsoft.Maps.MapTypeId[theme];
                return typeId;
            }
            function mapControlFactory(promiseFactory, loader) {
                return {
                    ensureMap: function(locale) {
                        return powerbi.ensureMap(promiseFactory, loader, DefaultBingMapControlUrl, locale);
                    }
                };
            }
            function clip(n, minValue, maxValue) {
                return Math.min(Math.max(n, minValue), maxValue);
            }
            function getMapSize(levelOfDetail) {
                return 23 === levelOfDetail ? 2147483648 : Math.floor(levelOfDetail) === levelOfDetail ? 256 << levelOfDetail : 256 * Math.pow(2, levelOfDetail);
            }
            function latLongToPixelXYArray(latLongArray, levelOfDetail, buildString) {
                void 0 === buildString && (buildString = !1);
                for (var helperArray = [], result = {
                    array: new Float64Array(latLongArray.length),
                    arrayString: ""
                }, i = 0; i < latLongArray.length; i += 2) {
                    var latitude = clip(latLongArray[i], MapUtil.MinAllowedLatitude, MapUtil.MaxAllowedLatitude), longitude = clip(latLongArray[i + 1], MapUtil.MinAllowedLongitude, MapUtil.MaxAllowedLongitude), x = (longitude + 180) / 360, sinLatitude = Math.sin(latitude * Math.PI / 180), y = .5 - Math.log((1 + sinLatitude) / (1 - sinLatitude)) / (4 * Math.PI), mapSize = getMapSize(levelOfDetail);
                    result.array[i] = clip(x * mapSize + .5, 0, mapSize - 1), result.array[i + 1] = clip(y * mapSize + .5, 0, mapSize - 1), 
                    buildString && (helperArray.push(result.array[i], result.array[i + 1]), helperArray.length >= pointArrayChunkLength && (result.arrayString += helperArray.join(" ") + " ", 
                    helperArray = []));
                }
                return buildString && (result.arrayString += helperArray.join(" ") + " "), result;
            }
            function getLocationBoundaries(latLongArray) {
                for (var northWest = {
                    latitude: -90,
                    longitude: 180
                }, southEast = {
                    latitude: 90,
                    longitude: -180
                }, i = 0; i < latLongArray.length; i += 2) northWest.latitude = Math.max(latLongArray[i], northWest.latitude), 
                northWest.longitude = Math.min(latLongArray[i + 1], northWest.longitude), southEast.latitude = Math.min(latLongArray[i], southEast.latitude), 
                southEast.longitude = Math.max(latLongArray[i + 1], southEast.longitude);
                return northWest.longitude = clip(northWest.longitude, -180, 180), southEast.longitude = clip(southEast.longitude, -180, 180), 
                Microsoft.Maps.LocationRect.fromCorners(new Microsoft.Maps.Location(northWest.latitude, northWest.longitude), new Microsoft.Maps.Location(southEast.latitude, southEast.longitude));
            }
            function parseEncodedSpatialValueArray(value) {
                for (var list = [], index = 0, xsum = 0, ysum = 0, max = 4294967296; index < value.length; ) {
                    for (var n = 0, k = 0; ;) {
                        if (index >= value.length) return null;
                        var b = safeCharacters.indexOf(value.charAt(index++));
                        if (b === -1) return null;
                        var tmp = (31 & b) * Math.pow(2, k), ht = tmp / max, lt = tmp % max, hn = n / max, ln = n % max, nl = (lt | ln) >>> 0;
                        if (n = (ht | hn) * max + nl, k += 5, b < 32) break;
                    }
                    var diagonal = Math.floor((Math.sqrt(8 * n + 5) - 1) / 2);
                    n -= diagonal * (diagonal + 1) / 2;
                    var ny = Math.floor(n), nx = diagonal - ny;
                    nx = nx >> 1 ^ -(1 & nx), ny = ny >> 1 ^ -(1 & ny), xsum += nx, ysum += ny;
                    var lat = 1e-5 * ysum, lon = 1e-5 * xsum;
                    list.push(lat), list.push(lon);
                }
                return new Float64Array(list);
            }
            function calcGeoData(data) {
                for (var locations = data.locations, _i = 0, locations_1 = locations; _i < locations_1.length; _i++) {
                    var location_1 = locations_1[_i];
                    location_1.geographic || (location_1.geographic = MapUtil.parseEncodedSpatialValueArray(location_1.nativeBing));
                    var polygon = location_1.geographic;
                    if (polygon && !location_1.absolute) {
                        var result = MapUtil.latLongToPixelXYArray(polygon, MapUtil.DefaultLevelOfDetail, !0);
                        location_1.absolute = result.array, location_1.absoluteString = result.arrayString;
                        var geographicBounds = MapUtil.getLocationBoundaries(polygon);
                        location_1.absoluteBounds = MapUtil.locationRectToRectXY(geographicBounds, MapUtil.DefaultLevelOfDetail);
                    }
                }
            }
            function locationToPixelXY(location, levelOfDetail) {
                return latLongToPixelXY(location.latitude, location.longitude, levelOfDetail);
            }
            function locationRectToRectXY(locationRect, levelOfDetail) {
                var topleft = locationToPixelXY(locationRect.getNorthwest(), levelOfDetail), bottomRight = locationToPixelXY(locationRect.getSoutheast(), levelOfDetail);
                return new powerbi.visuals.Rect(topleft.x, topleft.y, bottomRight.x - topleft.x, bottomRight.y - topleft.y);
            }
            function latLongToPixelXY(latitude, longitude, levelOfDetail) {
                var array = latLongToPixelXYArray(new Float64Array([ latitude, longitude ]), levelOfDetail).array;
                return new powerbi.visuals.Point(array[0], array[1]);
            }
            function pixelXYToLocation(pixelX, pixelY, levelOfDetail) {
                var mapSize = getMapSize(levelOfDetail), x = clip(pixelX, 0, mapSize - 1) / mapSize - .5, y = .5 - clip(pixelY, 0, mapSize - 1) / mapSize, latitude = 90 - 360 * Math.atan(Math.exp(2 * -y * Math.PI)) / Math.PI, longitude = 360 * x;
                return new Microsoft.Maps.Location(latitude, longitude);
            }
            function moveMap(mapControl, x, y) {
                var point = new Microsoft.Maps.Point(x, y), location = mapControl.tryPixelToLocation(point, Microsoft.Maps.PixelReference.page);
                mapControl.setView({
                    center: location
                });
            }
            function moveMapDelta(mapControl, deltaX, deltaY) {
                var centerPixel = mapControl.tryLocationToPixel(mapControl.getCenter(), Microsoft.Maps.PixelReference.page), newX = centerPixel.x - deltaX, newY = centerPixel.y - deltaY;
                moveMap(mapControl, newX, newY);
            }
            MapUtil.getBingMapsVersion = getBingMapsVersion, MapUtil.removeHillShading = removeHillShading, 
            MapUtil.createPushPin = createPushPin, MapUtil.renderAfterResize = renderAfterResize, 
            MapUtil.mapTypeIdFromTheme = mapTypeIdFromTheme, MapUtil.Settings = {
                MaxBingRequest: 6,
                MaxCacheSize: 3e3,
                MaxCacheSizeOverflow: 100,
                BingKey: "AoW85FdF-eTJavFmWhZjaQ970kwG1FuainbyVSlP5HglkbhVVIFOyNwlaQxAIj-S"
            };
            var DefaultBingMapControlUrl = "https://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0&s=1";
            MapUtil.mapControlFactory = mapControlFactory, MapUtil.MinAllowedLatitude = -85.05112878, 
            MapUtil.MaxAllowedLatitude = 85.05112878, MapUtil.MinAllowedLongitude = -180, MapUtil.MaxAllowedLongitude = 180, 
            MapUtil.TileSize = 256, MapUtil.MaxLevelOfDetail = 23, MapUtil.MinLevelOfDetail = 1, 
            MapUtil.MaxAutoZoomLevel = 5, MapUtil.DefaultLevelOfDetail = 11, MapUtil.WorkerErrorName = "___error___", 
            MapUtil.DefaultFillOpacity = .5, MapUtil.DefaultBackgroundColor = "#000000", MapUtil.LeaderLineColor = "#000000", 
            MapUtil.CategoryTypes = {
                Address: "Address",
                City: "City",
                Continent: "Continent",
                CountryRegion: "Country",
                County: "County",
                Longitude: "Longitude",
                Latitude: "Latitude",
                Place: "Place",
                PostalCode: "PostalCode",
                StateOrProvince: "StateOrProvince"
            };
            var safeCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";
            MapUtil.clip = clip, MapUtil.getMapSize = getMapSize;
            var pointArrayChunkLength = 15e3;
            MapUtil.latLongToPixelXYArray = latLongToPixelXYArray, MapUtil.getLocationBoundaries = getLocationBoundaries, 
            MapUtil.parseEncodedSpatialValueArray = parseEncodedSpatialValueArray, MapUtil.calcGeoData = calcGeoData, 
            MapUtil.locationToPixelXY = locationToPixelXY, MapUtil.locationRectToRectXY = locationRectToRectXY, 
            MapUtil.latLongToPixelXY = latLongToPixelXY, MapUtil.pixelXYToLocation = pixelXYToLocation;
            var CurrentLocation;
            !(function(CurrentLocation) {
                function createPushpin(location) {
                    var template = '<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle fill="#FF5F00" cx="12" cy="12" r="6"/><circle fill="none" stroke="#FF5F00" stroke-width="2" cx="12" cy="12" r="10"/></svg>';
                    return MapUtil.createPushPin(location, template, 24, 24);
                }
                CurrentLocation.createPushpin = createPushpin;
            })(CurrentLocation = MapUtil.CurrentLocation || (MapUtil.CurrentLocation = {})), 
            MapUtil.moveMap = moveMap, MapUtil.moveMapDelta = moveMapDelta;
        })(MapUtil = visuals.MapUtil || (visuals.MapUtil = {}));
        var MapPolygonInfo = (function() {
            function MapPolygonInfo() {
                this._locationRect = new Microsoft.Maps.LocationRect(new Microsoft.Maps.Location(30, (-30)), 60, 60);
            }
            return MapPolygonInfo.prototype.reCalc = function(mapControl, width, height) {
                var baseLocations = [ this._locationRect.getNorthwest(), this._locationRect.getSoutheast() ];
                if (width /= 2, height /= 2, !this._baseRect) {
                    var l0 = MapUtil.locationToPixelXY(this._locationRect.getNorthwest(), defaultLevelOfDetail), l1 = MapUtil.locationToPixelXY(this._locationRect.getSoutheast(), defaultLevelOfDetail);
                    this._baseRect = new visuals.Rect(l0.x, l0.y, l1.x - l0.x, l1.y - l0.y);
                }
                var l = mapControl.tryLocationToPixel(baseLocations);
                this._currentRect = new visuals.Rect(l[0].x + width, l[0].y + height, l[1].x - l[0].x, l[1].y - l[0].y);
            }, Object.defineProperty(MapPolygonInfo.prototype, "scale", {
                get: function() {
                    return this._baseRect ? this._currentRect.width / this._baseRect.width : 1;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(MapPolygonInfo.prototype, "transform", {
                get: function() {
                    var base = this._baseRect, current = this._currentRect, transform = new visuals.Transform();
                    return transform.translate(current.left, current.top), transform.scale(current.width / base.width, current.height / base.height), 
                    transform.translate(-base.left, -base.top), transform;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(MapPolygonInfo.prototype, "outherTransform", {
                get: function() {
                    var base = this._baseRect, current = this._currentRect, transform = new visuals.Transform();
                    transform.translate(current.left, current.top);
                    var scale = Math.sqrt(current.width / base.width);
                    return transform.scale(scale, scale), transform;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(MapPolygonInfo.prototype, "innerTransform", {
                get: function() {
                    var base = this._baseRect, current = this._currentRect, transform = new visuals.Transform(), scale = current.width / base.width;
                    return transform.scale(scale, scale), transform.translate(-base.left, -base.top), 
                    transform;
                },
                enumerable: !0,
                configurable: !0
            }), MapPolygonInfo.prototype.transformToString = function(transform) {
                var m = transform.matrix;
                return "matrix(" + m.m00 + " " + m.m10 + " " + m.m01 + " " + m.m11 + " " + m.m02 + " " + m.m12 + ")";
            }, MapPolygonInfo;
        })();
        visuals.MapPolygonInfo = MapPolygonInfo;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var MarkerProperties;
        !(function(MarkerProperties) {
            function readFromStaticObjects(objects) {
                if (!objects) return getDefault();
                var markerProperties = {
                    lineDashType: visuals.lineStyle.solid,
                    showMarker: powerbi.DataViewObjects.getValue(objects, visuals.lineChartProps.lineStyles.showMarker, !1),
                    shape: powerbi.DataViewObjects.getValue(objects, visuals.lineChartProps.lineStyles.markerShape, visuals.markerShape.defaultValue),
                    size: powerbi.DataViewObjects.getValue(objects, visuals.lineChartProps.lineStyles.markerSize, Markers.defaultSize),
                    color: powerbi.DataViewObjects.getFillColor(objects, visuals.lineChartProps.lineStyles.markerColor)
                };
                return markerProperties;
            }
            function readFromSeries(reader, staticProps, seriesIndex, colorOnly) {
                var markerProps = powerbi.Prototype.inherit(staticProps);
                if (markerProps.key = markerKeyBase + seriesIndex, !reader.data.hasSeries() || colorOnly) return markerProps.color = staticProps.color ? staticProps.color : reader.colors.createBySeries(seriesIndex), 
                markerProps;
                var objects = reader.objects.getSeriesDataObjects(seriesIndex), showMarkerFromObjects = powerbi.DataViewObjects.getValue(objects, visuals.lineChartProps.lineStyles.showMarker);
                null != showMarkerFromObjects && (markerProps.showMarker = showMarkerFromObjects);
                var shapeFromObjects = powerbi.DataViewObjects.getValue(objects, visuals.lineChartProps.lineStyles.markerShape);
                null != shapeFromObjects && (markerProps.shape = shapeFromObjects);
                var sizeFromObjects = powerbi.DataViewObjects.getValue(objects, visuals.lineChartProps.lineStyles.markerSize);
                null != sizeFromObjects && (markerProps.size = +sizeFromObjects);
                var colorFromObjects = powerbi.DataViewObjects.getFillColor(objects, visuals.lineChartProps.lineStyles.markerColor);
                return null != colorFromObjects ? markerProps.color = colorFromObjects : staticProps.color || (markerProps.color = reader.colors.createBySeries(seriesIndex)), 
                markerProps;
            }
            function getDefault() {
                return {
                    lineDashType: visuals.lineStyle.solid,
                    showMarker: !1,
                    shape: visuals.markerShape.defaultValue,
                    size: Markers.defaultSize,
                    color: void 0
                };
            }
            function populateInstance(instance, markerProperties) {
                instance.properties[visuals.lineChartProps.lineStyles.showMarker.propertyName] = markerProperties.showMarker, 
                markerProperties.showMarker && (instance.properties[visuals.lineChartProps.lineStyles.markerShape.propertyName] = markerProperties.shape, 
                instance.properties[visuals.lineChartProps.lineStyles.markerSize.propertyName] = markerProperties.size, 
                instance.properties[visuals.lineChartProps.lineStyles.markerColor.propertyName] = markerProperties.color);
            }
            var markerKeyBase = "seriesMarker";
            MarkerProperties.readFromStaticObjects = readFromStaticObjects, MarkerProperties.readFromSeries = readFromSeries, 
            MarkerProperties.getDefault = getDefault, MarkerProperties.populateInstance = populateInstance;
        })(MarkerProperties = visuals.MarkerProperties || (visuals.MarkerProperties = {}));
        var MarkerRenderer = (function() {
            function MarkerRenderer() {
                this.markerKeyModifier = "", this.shouldCycleKeyModifier = jsCommon.BrowserUtils.isInternetExplorerOrEdge(), 
                this.uniqueIdentifier = _.uniqueId();
            }
            return MarkerRenderer.prototype.ensureMarkers = function(defs, markerProperties) {
                var _this = this, modifiedMarkerProperties = this.modifyMarkersIfNeeded(markerProperties, this.shouldCycleKeyModifier), markersData = defs.selectAll("marker").data(modifiedMarkerProperties.filter((function(markerProp) {
                    return markerProp.showMarker;
                })), (function(markerProp) {
                    return _this.getMarkerId(markerProp);
                })), markersEnter = markersData.enter(), markers = markersEnter.append("marker");
                markers.append("path").classed("markerPaths", !0), markersData.attr({
                    id: function(d) {
                        return _this.getMarkerId(d);
                    },
                    markerUnits: "strokeWidth",
                    orient: 0,
                    refX: 0,
                    refY: 0,
                    viewBox: "-6 -6 12 12"
                }).transition().duration(1).attr({
                    markerHeight: function(d) {
                        return d.size;
                    },
                    markerWidth: function(d) {
                        return d.size;
                    }
                }), markersData.exit().remove();
                var paths = defs.selectAll(".markerPaths").data(modifiedMarkerProperties.filter((function(markerProp) {
                    return markerProp.showMarker;
                })), (function(markerProp) {
                    return _this.getMarkerId(markerProp);
                }));
                paths.attr("d", (function(d) {
                    return Markers.getPath(d.shape);
                })).style("stroke-width", (function(d) {
                    return Markers.getStrokeWidth(d.shape);
                })).style("stroke-opacity", 1).style("stroke", (function(d) {
                    return d.color;
                })).style("fill", (function(d) {
                    return d.color;
                })), paths.exit().remove();
            }, MarkerRenderer.prototype.renderMarkers = function(markerPathTransition) {
                var _this = this;
                markerPathTransition.attr("marker-start", (function(d, i) {
                    return _this.getMarkerKey(d.lineStyle.markerProperties);
                })).attr("marker-mid", (function(d, i) {
                    return _this.getMarkerKey(d.lineStyle.markerProperties);
                })).attr("marker-end", (function(d, i) {
                    return _this.getMarkerKey(d.lineStyle.markerProperties);
                }));
            }, MarkerRenderer.prototype.shouldDisableAnimations = function() {
                return this.shouldCycleKeyModifier;
            }, MarkerRenderer.prototype.getMarkerId = function(d) {
                return d.key + "-" + this.uniqueIdentifier + (d.modifier || "");
            }, MarkerRenderer.prototype.getMarkerKey = function(markerProperties) {
                var hrefAdjustment = window.location.href;
                return markerProperties.showMarker ? "url(" + hrefAdjustment + "#" + markerProperties.key + "-" + this.uniqueIdentifier + this.markerKeyModifier + ")" : null;
            }, MarkerRenderer.prototype.modifyMarkersIfNeeded = function(markerProperties, shouldCycleKeyModifier) {
                if (shouldCycleKeyModifier) {
                    var modifiedMarkerProperties = [];
                    return this.cycleMarkerKeyModifier(), modifiedMarkerProperties = this.modifyMarkerProperties(markerProperties, "a"), 
                    modifiedMarkerProperties.push.apply(modifiedMarkerProperties, this.modifyMarkerProperties(markerProperties, "b")), 
                    modifiedMarkerProperties;
                }
                return markerProperties;
            }, MarkerRenderer.prototype.cycleMarkerKeyModifier = function() {
                "a" === this.markerKeyModifier ? this.markerKeyModifier = "b" : this.markerKeyModifier = "a";
            }, MarkerRenderer.prototype.modifyMarkerProperties = function(markerProperties, modifier) {
                return _.map(markerProperties, (function(markerProp) {
                    var modifiedProp = powerbi.Prototype.inherit(markerProp);
                    return modifiedProp.modifier = modifier, modifiedProp;
                }));
            }, MarkerRenderer;
        })();
        visuals.MarkerRenderer = MarkerRenderer;
        var Markers;
        !(function(Markers) {
            function getPath(shape) {
                switch (shape) {
                  case visuals.markerShape.circle:
                    return circlePath;

                  case visuals.markerShape.square:
                    return squarePath;

                  case visuals.markerShape.diamond:
                    return diamondPath;

                  case visuals.markerShape.triangle:
                    return trianglePath;

                  case visuals.markerShape.x:
                    return xPath;

                  case visuals.markerShape.shortDash:
                    return shortDashPath;

                  case visuals.markerShape.longDash:
                    return longDashPath;

                  case visuals.markerShape.plus:
                    return plusPath;

                  case visuals.markerShape.none:
                    return;
                }
            }
            function getStrokeWidth(shape) {
                switch (shape) {
                  case visuals.markerShape.circle:
                  case visuals.markerShape.square:
                  case visuals.markerShape.diamond:
                  case visuals.markerShape.triangle:
                  case visuals.markerShape.none:
                    return shapeStroke;

                  case visuals.markerShape.x:
                  case visuals.markerShape.plus:
                    return thinStroke;

                  case visuals.markerShape.shortDash:
                  case visuals.markerShape.longDash:
                    return thickStroke;
                }
            }
            function resolveMarkerShape(markerProperties, renderingSetting, defaultShape) {
                var finalShape;
                return finalShape = renderingSetting === visuals.legendMarkerRendering.markerOnly ? markerProperties && markerProperties.showMarker ? markerProperties.shape : defaultShape : renderingSetting === visuals.legendMarkerRendering.lineAndMarker ? markerProperties && markerProperties.showMarker ? markerProperties.shape : visuals.markerShape.none : renderingSetting === visuals.legendMarkerRendering.lineOnly ? visuals.markerShape.none : visuals.markerShape.circle;
            }
            function resolveMarkerColor(markerProperties, seriesColor, renderingSetting, matchSeriesColor) {
                if (!markerProperties) return seriesColor;
                if (renderingSetting === visuals.legendMarkerRendering.markerOnly) {
                    if (matchSeriesColor) return seriesColor;
                    if (markerProperties.showMarker === !1) return seriesColor;
                }
                return markerProperties.color || seriesColor;
            }
            function getPathWithRadius(shape, radius) {
                switch (shape) {
                  case visuals.markerShape.circle:
                    return "M 0 0 m " + -radius + " 0 a " + radius + " " + radius + " 0 1 0 " + 2 * radius + " 0 a " + radius + " " + radius + " 0 1 0 " + -2 * radius + " 0";

                  case visuals.markerShape.square:
                    return "M 0 0 m " + -radius + " " + -radius + " l " + 2 * radius + " 0 l 0 " + 2 * radius + " l " + -2 * radius + " 0 z";

                  case visuals.markerShape.diamond:
                    return "M 0 0 m " + -radius + " 0 l " + radius + " " + -radius + " l " + radius + " " + radius + " l " + -radius + " " + radius + " z";

                  case visuals.markerShape.triangle:
                    return "M 0 0 m " + -radius + " " + radius + " l " + radius + " " + -2 * radius + " l " + radius + " " + 2 * radius + " z";

                  case visuals.markerShape.x:
                  case visuals.markerShape.shortDash:
                  case visuals.markerShape.longDash:
                  case visuals.markerShape.plus:
                  case visuals.markerShape.none:
                    return null;
                }
            }
            Markers.defaultSize = 5;
            var circlePath = "M 0 0 m -5 0 a 5 5 0 1 0 10 0 a 5 5 0 1 0 -10 0", squarePath = "M 0 0 m -5 -5 l 10 0 l 0 10 l -10 0 z", diamondPath = "M 0 0 m -5 0 l 5 -5 l 5 5 l -5 5 z", trianglePath = "M 0 0 m -5 5 l 5 -10 l 5 10 z", xPath = "M 0 0 m -5 -5 l 10 10 m -10 0 l 10 -10", shortDashPath = "M 0 0 l 5 0", longDashPath = "M 0 0 m -5 0 l 10 0", plusPath = "M 0 0 m -5 0 l 10 0 m -5 -5 l 0 10", shapeStroke = 0, thinStroke = 1, thickStroke = 2;
            Markers.getPath = getPath, Markers.getStrokeWidth = getStrokeWidth, Markers.resolveMarkerShape = resolveMarkerShape, 
            Markers.resolveMarkerColor = resolveMarkerColor, Markers.getPathWithRadius = getPathWithRadius;
        })(Markers = visuals.Markers || (visuals.Markers = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var ReferenceLineHelper, createClassAndSelector = jsCommon.CssConstants.createClassAndSelector;
        !(function(ReferenceLineHelper) {
            function isHorizontal(refLine, axes) {
                return 1 === refLine.axis && !axes.y1.isCategoryAxis;
            }
            function enumerateObjectInstances(enumeration, referenceLines, defaultColor, objectName, isValueAxisDisabled) {
                if (!isValueAxisDisabled) {
                    if (_.isEmpty(referenceLines)) {
                        var instance = {
                            selector: {
                                id: "0"
                            },
                            properties: {
                                show: !1,
                                value: "",
                                lineColor: {
                                    solid: {
                                        color: defaultColor
                                    }
                                },
                                transparency: 50,
                                style: visuals.lineStyle.dashed,
                                position: visuals.referenceLinePosition.front,
                                dataLabelShow: !1
                            },
                            objectName: objectName
                        };
                        return void enumeration.pushInstance(instance);
                    }
                    for (var _i = 0, referenceLines_1 = referenceLines; _i < referenceLines_1.length; _i++) {
                        var referenceLine = referenceLines_1[_i], dataLabelShow = referenceLine.dataLabelProperties && referenceLine.dataLabelProperties.show, instance = {
                            selector: referenceLine.selector,
                            properties: {
                                show: referenceLine.show,
                                displayName: referenceLine.displayName,
                                value: referenceLine.value,
                                lineColor: referenceLine.color,
                                transparency: referenceLine.transparency,
                                style: referenceLine.style,
                                position: referenceLine.position,
                                dataLabelShow: dataLabelShow
                            },
                            objectName: referenceLine.type
                        };
                        if (dataLabelShow) {
                            var dataLabelProperties = referenceLine.dataLabelProperties;
                            instance.properties[ReferenceLineProps.dataLabelColor] = dataLabelProperties.color, 
                            instance.properties[ReferenceLineProps.dataLabelText] = dataLabelProperties.text, 
                            instance.properties[ReferenceLineProps.dataLabelHorizontalPosition] = dataLabelProperties.horizontalPosition, 
                            instance.properties[ReferenceLineProps.dataLabelVerticalPosition] = dataLabelProperties.verticalPosition, 
                            instance.properties[ReferenceLineProps.dataLabelDisplayUnits] = dataLabelProperties.displayUnits, 
                            instance.properties[ReferenceLineProps.dataLabelDecimalPoints] = dataLabelProperties.decimalPoints;
                        }
                        enumeration.pushInstance(instance);
                    }
                }
            }
            function render(options) {
                function setRefLineProperties(refLine) {
                    if (refLine.show && _.isNumber(refLine.value)) {
                        var isHorizontal = ReferenceLineHelper.isHorizontal(refLine, options.axes), viewport = options.viewport, value = refLine.value, line = d3.select(this);
                        line.attr("x1", isHorizontal ? 0 : xScale(value)), line.attr("y1", isHorizontal ? yScale(value) : 0), 
                        line.attr("x2", isHorizontal ? viewport.width : xScale(value)), line.attr("y2", isHorizontal ? yScale(value) : viewport.height);
                        var style = {};
                        style.stroke = refLine.color.solid.color;
                        var transparency = refLine.transparency;
                        switch (style["stroke-opacity"] = (100 - transparency) / 100, refLine.style) {
                          case visuals.lineStyle.dotted:
                            style["stroke-dasharray"] = "1, 5", style["stroke-linecap"] = "round";
                            break;

                          case visuals.lineStyle.solid:
                            style["stroke-dasharray"] = null, style["stroke-linecap"] = null;
                            break;

                          case visuals.lineStyle.dashed:
                          default:
                            style["stroke-dasharray"] = "5, 5", style["stroke-linecap"] = null;
                        }
                        line.style(style);
                    }
                }
                var xScale = options.axes.x.scale, yScale = options.axes.y1.scale, graphicsContext = options.graphicContext, frontClassAndSelector = createClassAndSelector("reference-line-front"), frontReferenceLines = _.filter(options.referenceLines, (function(line) {
                    return line.position === visuals.referenceLinePosition.front && line.show;
                })), frontLines = graphicsContext.selectAll(frontClassAndSelector.selector).data(frontReferenceLines);
                frontLines.enter().append("line").classed(frontClassAndSelector.class, !0), frontLines.each(setRefLineProperties), 
                frontLines.exit().remove();
                var backClassAndSelector = createClassAndSelector("reference-line-back"), backReferenceLines = _.filter(options.referenceLines, (function(line) {
                    return line.position !== visuals.referenceLinePosition.front && line.show;
                })), backLines = graphicsContext.selectAll(backClassAndSelector.selector).data(backReferenceLines);
                backLines.enter().insert("line", ":first-child").classed(backClassAndSelector.class, !0), 
                backLines.each(setRefLineProperties), backLines.exit().remove();
            }
            function readDataView(objects, defaultColor, objectName, axis, metaDataColumn) {
                if (!objects) return [];
                var referenceLines = [];
                for (var id in objects) {
                    var referenceLineObject = objects[id], show = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.show, !1), displayName = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.displayName, void 0), value = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.value, 0), lineColor = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.lineColor, {
                        solid: {
                            color: defaultColor
                        }
                    }), transparency = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.transparency, 50), style = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.style, visuals.lineStyle.dashed), position = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.position, visuals.referenceLinePosition.front), dataLabelShow = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.dataLabelShow, !1), dataLabelColor = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.dataLabelColor, {
                        solid: {
                            color: defaultColor
                        }
                    }), dataLabelText = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.dataLabelText, visuals.labelText.value), dataLabelHorizontalPosition = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.dataLabelHorizontalPosition, visuals.referenceLineDataLabelHorizontalPosition.left), dataLabelVerticalPosition = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.dataLabelVerticalPosition, visuals.referenceLineDataLabelVerticalPosition.above), decimalPoints = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.dataLabelDecimalPoints, void 0), dataLabelDecimalPoints = decimalPoints < 0 ? void 0 : decimalPoints, dataLabelDisplayUnits = powerbi.DataViewObject.getValue(referenceLineObject, ReferenceLineProps.dataLabelDisplayUnits, 0), selector = {
                        id: id,
                        metadata: metaDataColumn
                    };
                    referenceLines.push({
                        type: objectName,
                        selector: selector,
                        show: show,
                        displayName: displayName,
                        value: value,
                        color: lineColor,
                        transparency: transparency,
                        style: style,
                        position: position,
                        dataLabelProperties: {
                            show: dataLabelShow,
                            color: dataLabelColor,
                            text: dataLabelText,
                            horizontalPosition: dataLabelHorizontalPosition,
                            verticalPosition: dataLabelVerticalPosition,
                            decimalPoints: dataLabelDecimalPoints,
                            displayUnits: dataLabelDisplayUnits
                        },
                        axis: axis
                    });
                }
                return referenceLines;
            }
            function createLabelDataPoint(options) {
                if (_.isEmpty(options.referenceLines)) return [];
                for (var dataLabels = [], offsetRefLine = 5, axes = options.axes, viewport = options.viewport, xScale = axes.x.scale, yScale = axes.y1.scale, _i = 0, _a = options.referenceLines; _i < _a.length; _i++) {
                    var referenceLine = _a[_i];
                    if (referenceLine.show && _.isNumber(referenceLine.value) && referenceLine.dataLabelProperties.show) {
                        var isHorizontal_1 = ReferenceLineHelper.isHorizontal(referenceLine, axes), axisFormatter = isHorizontal_1 ? axes.y1.formatter : axes.x.formatter, formatterForReferenceLineDataLabel = axisFormatter, refValue = referenceLine.value, dataLabelProperties = referenceLine.dataLabelProperties;
                        if (null != axisFormatter.options) {
                            var formatterOptions = powerbi.Prototype.inherit(axisFormatter.options);
                            formatterOptions.precision = dataLabelProperties.decimalPoints, formatterOptions.value = dataLabelProperties.displayUnits, 
                            formatterForReferenceLineDataLabel = visuals.valueFormatter.create(formatterOptions);
                        }
                        var text = "";
                        switch (dataLabelProperties.text) {
                          case visuals.labelText.name:
                            text = referenceLine.displayName;
                            break;

                          case visuals.labelText.nameAndValue:
                            if (!_.isNumber(refValue)) continue;
                            var formatString = options.hostServices.getLocalizedString("Visual_LabelText_Name_Value_Format");
                            text = jsCommon.StringExtensions.format(formatString, referenceLine.displayName, visuals.LabelUtils.getLabelFormattedText(formatterForReferenceLineDataLabel.format(refValue)));
                            break;

                          case visuals.labelText.value:
                          default:
                            if (!_.isNumber(refValue)) continue;
                            text = visuals.LabelUtils.getLabelFormattedText(formatterForReferenceLineDataLabel.format(refValue));
                        }
                        var fontProperties = visuals.FontProperties.inherit(visuals.LabelUtils.defaultFontProperties, {
                            size: visuals.Units.FontSize.createFromPt(9)
                        }), properties = visuals.FontProperties.toTextProperties(fontProperties, text), rectWidth = powerbi.TextMeasurementService.measureSvgTextWidth(properties), rectHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(properties), dataLabelX = void 0, dataLabelY = void 0, x1 = isHorizontal_1 ? 0 : xScale(refValue), y1 = isHorizontal_1 ? yScale(refValue) : 0, x2 = isHorizontal_1 ? viewport.width : xScale(refValue), y2 = isHorizontal_1 ? yScale(refValue) : viewport.height, validPositions = [ 1 ];
                        isHorizontal_1 ? (dataLabelX = dataLabelProperties.horizontalPosition === visuals.referenceLineDataLabelHorizontalPosition.left ? x1 + offsetRefLine : x2 - rectWidth / 2 - offsetRefLine, 
                        dataLabelY = y1, validPositions = dataLabelProperties.verticalPosition === visuals.referenceLineDataLabelVerticalPosition.above ? [ 1 ] : [ 2 ]) : (dataLabelX = x1, 
                        dataLabelY = dataLabelProperties.verticalPosition === visuals.referenceLineDataLabelVerticalPosition.above ? y1 + rectHeight / 2 + offsetRefLine : y2 - rectHeight / 2 - offsetRefLine, 
                        validPositions = dataLabelProperties.horizontalPosition === visuals.referenceLineDataLabelHorizontalPosition.left ? [ 4 ] : [ 8 ]);
                        var textWidth = powerbi.TextMeasurementService.measureSvgTextWidth(properties), textHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(properties, !0), parentShape = void 0;
                        parentShape = {
                            point: {
                                x: dataLabelX,
                                y: dataLabelY
                            },
                            radius: 0,
                            validPositions: validPositions
                        }, dataLabels.push({
                            isPreferred: !0,
                            text: text,
                            textSize: {
                                width: textWidth,
                                height: textHeight
                            },
                            outsideFill: dataLabelProperties.color.solid.color,
                            insideFill: null,
                            parentShape: parentShape,
                            parentType: 0,
                            fontProperties: fontProperties,
                            identity: null,
                            secondRowText: null,
                            key: JSON.stringify({
                                type: referenceLine.type,
                                id: referenceLine.selector.id
                            })
                        });
                    }
                }
                return dataLabels;
            }
            function extractReferenceLineValue(referenceLineProperties) {
                var referenceLineValue = null;
                return referenceLineProperties && powerbi.DataViewObject.getValue(referenceLineProperties, ReferenceLineProps.show, !1) && (referenceLineValue = powerbi.DataViewObject.getValue(referenceLineProperties, ReferenceLineProps.value, null)), 
                referenceLineValue;
            }
            function gatherDomainExtents(referenceLines, xs, ys) {
                if (!_.isEmpty(referenceLines)) for (var _i = 0, referenceLines_2 = referenceLines; _i < referenceLines_2.length; _i++) {
                    var referenceLine = referenceLines_2[_i];
                    if (referenceLine.show) {
                        var value = referenceLine.value;
                        0 === referenceLine.axis ? xs.push(value) : ys.push(value);
                    }
                }
            }
            var ReferenceLineProps;
            !(function(ReferenceLineProps) {
                ReferenceLineProps.show = "show", ReferenceLineProps.lineColor = "lineColor", ReferenceLineProps.transparency = "transparency", 
                ReferenceLineProps.displayName = "displayName", ReferenceLineProps.value = "value", 
                ReferenceLineProps.style = "style", ReferenceLineProps.position = "position", ReferenceLineProps.dataLabelShow = "dataLabelShow", 
                ReferenceLineProps.dataLabelColor = "dataLabelColor", ReferenceLineProps.dataLabelText = "dataLabelText", 
                ReferenceLineProps.dataLabelDecimalPoints = "dataLabelDecimalPoints", ReferenceLineProps.dataLabelHorizontalPosition = "dataLabelHorizontalPosition", 
                ReferenceLineProps.dataLabelVerticalPosition = "dataLabelVerticalPosition", ReferenceLineProps.dataLabelDisplayUnits = "dataLabelDisplayUnits";
            })(ReferenceLineProps = ReferenceLineHelper.ReferenceLineProps || (ReferenceLineHelper.ReferenceLineProps = {})), 
            ReferenceLineHelper.isHorizontal = isHorizontal, ReferenceLineHelper.enumerateObjectInstances = enumerateObjectInstances, 
            ReferenceLineHelper.render = render, ReferenceLineHelper.readDataView = readDataView, 
            ReferenceLineHelper.createLabelDataPoint = createLabelDataPoint, ReferenceLineHelper.extractReferenceLineValue = extractReferenceLineValue, 
            ReferenceLineHelper.gatherDomainExtents = gatherDomainExtents;
        })(ReferenceLineHelper = visuals.ReferenceLineHelper || (visuals.ReferenceLineHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {})), powerbi.define("PowerBIVisuals/visuals/common/ribbonChartUtils", (function(imports) {
    function getRibbonOptionsFromDataviewObjects(dataViewMetadata, columnChartProps) {
        var colorBands = defaultColorBands, showBorder = defaultShowBorder, seriesGapRatio = defaultSeriesGapRatio, bandsTransparency = defaultBandsTransparency;
        if (dataViewMetadata && dataViewMetadata.objects) {
            var objects = dataViewMetadata.objects;
            colorBands = DataViewObjects.getValue(objects, columnChartProps.ribbonChart.colorBands, defaultColorBands), 
            showBorder = DataViewObjects.getValue(objects, columnChartProps.dataPoint.showBorder, defaultShowBorder), 
            seriesGapRatio = DataViewObjects.getValue(objects, columnChartProps.series.seriesGapRatio, defaultSeriesGapRatio), 
            bandsTransparency = DataViewObjects.getValue(objects, columnChartProps.ribbonChart.bandsTransparency, defaultBandsTransparency);
        }
        return {
            seriesGapRatio: seriesGapRatio,
            colorBands: colorBands,
            bandsTransparency: bandsTransparency,
            showBorder: showBorder
        };
    }
    function enumerateRibbonChart(enumeration, ribbonChartData, ribbonChart) {
        ribbonChartData && ribbonChart && enumeration.pushInstance({
            objectName: "ribbonChart",
            selector: null,
            properties: {
                seriesGapRatio: ribbonChartData.ribbonOptions.seriesGapRatio,
                colorBands: ribbonChartData.ribbonOptions.colorBands,
                bandsTransparency: ribbonChartData.ribbonOptions.bandsTransparency,
                showBorder: ribbonChartData.ribbonOptions.showBorder
            },
            validValues: {
                seriesGapRatio: {
                    numberRange: {
                        min: 0,
                        max: 20
                    }
                },
                bandsTransparency: {
                    numberRange: {
                        min: 0,
                        max: 100
                    }
                }
            }
        });
    }
    function createRibbonChartDataPoints(options) {
        for (var heightMatrixPositive = [], heightMatrixNegative = [], categoryIndex = 0, len = options.categoryCount; categoryIndex < len; categoryIndex++) heightMatrixPositive[categoryIndex] = [], 
        heightMatrixNegative[categoryIndex] = [];
        for (var maxHeight = 0, seriesIndex = 0, len = options.columnSeries.length; seriesIndex < len; seriesIndex++) for (var series = options.columnSeries[seriesIndex].data, dataPointIndex = 0, len_1 = series.length; dataPointIndex < len_1; dataPointIndex++) {
            var dataPoint = series[dataPointIndex], seriesIndexHeightInfo = {
                seriesIndex: seriesIndex,
                height: dataPoint.value,
                dataToChange: dataPoint,
                dataToChangeHighlight: options.hasHighlights ? series[dataPointIndex + 1] : void 0
            }, categoryIndex = dataPoint.categoryIndex;
            seriesIndexHeightInfo.height >= 0 ? heightMatrixPositive[categoryIndex].push(seriesIndexHeightInfo) : heightMatrixNegative[categoryIndex].push(seriesIndexHeightInfo), 
            options.hasHighlights && dataPointIndex++, dataPoint.valueAbsolute > maxHeight && (maxHeight = dataPoint.valueAbsolute);
        }
        for (var gapWidth = maxHeight * options.ribbonOptions.seriesGapRatio / 100, categoryIndex = 0; categoryIndex < options.categoryCount; categoryIndex++) {
            var startRank = heightMatrixPositive[categoryIndex].length, RankDataPointsOptions = {
                isPositive: !0,
                heightMatrix: heightMatrixPositive,
                categoryIndex: categoryIndex,
                hasHighlights: options.hasHighlights,
                startRank: startRank,
                gapWidth: gapWidth
            };
            rankDataPoints(RankDataPointsOptions), RankDataPointsOptions = {
                isPositive: !1,
                heightMatrix: heightMatrixNegative,
                categoryIndex: categoryIndex,
                hasHighlights: options.hasHighlights,
                startRank: startRank,
                gapWidth: gapWidth
            }, rankDataPoints(RankDataPointsOptions);
        }
        options.ribbonChartDataPoints = [];
        for (var columnSeries = options.columnSeries, _i = 0, columnSeries_1 = columnSeries; _i < columnSeries_1.length; _i++) {
            var series = columnSeries_1[_i], seriesData = series.data;
            options.hasHighlights && (seriesData = _.filter(seriesData, (function(columnChartDataPoint) {
                return columnChartDataPoint.highlight;
            })));
            for (var categoryIndex = 0, numCategories = seriesData.length; categoryIndex < numCategories - 1; categoryIndex++) {
                var d1 = seriesData[categoryIndex], d2 = seriesData[categoryIndex + 1];
                if (d1.value && d2.value) {
                    var tooltipInfo = [], valueColumnMetadata = options.reader.columns.getValueMetadataColumn("Y", series.index), startPointDisplayName = void 0, endPointDisplayName = void 0, categoryDisplayNameD1 = valueFormatter.format(d1.categoryValue, valueFormatter.getFormatString(options.reader.columns.getValueMetadataColumn("X", d1.categoryIndex), options.formatStringProp)), categoryDisplayNameD2 = valueFormatter.format(d2.categoryValue, valueFormatter.getFormatString(options.reader.columns.getValueMetadataColumn("X", d2.categoryIndex), options.formatStringProp));
                    options.hasDynamicSeries ? (startPointDisplayName = categoryDisplayNameD1 + " " + series.displayName + " " + valueColumnMetadata.displayName, 
                    endPointDisplayName = categoryDisplayNameD2 + " " + series.displayName + " " + valueColumnMetadata.displayName) : (startPointDisplayName = categoryDisplayNameD1 + " " + series.displayName, 
                    endPointDisplayName = categoryDisplayNameD2 + " " + series.displayName), tooltipInfo.push({
                        displayName: startPointDisplayName,
                        value: converterHelper.formatFromMetadataColumn(d1.value, valueColumnMetadata, options.formatStringProp, !1)
                    }), tooltipInfo.push({
                        displayName: endPointDisplayName,
                        value: converterHelper.formatFromMetadataColumn(d2.value, valueColumnMetadata, options.formatStringProp, !1)
                    });
                    var valueDiff = d2.value - d1.value, formattedValueDiff = converterHelper.formatFromMetadataColumn(valueDiff, valueColumnMetadata, options.formatStringProp, !1), formatString = valueFormatter.getLocalizedString("Percentage"), percentValue = valueDiff / d1.value, formattedPercentChange = valueFormatter.format(percentValue, formatString);
                    tooltipInfo.push({
                        displayName: valueColumnMetadata.displayName + " " + options.hostServices.getLocalizedString("RibbonChart_TooltipChange"),
                        value: formattedValueDiff + " (" + formattedPercentChange + ")"
                    }), tooltipInfo.push({
                        displayName: categoryDisplayNameD1 + " " + series.displayName + " " + options.hostServices.getLocalizedString("RibbonChart_TooltipRank"),
                        value: "" + d1.rank
                    }), tooltipInfo.push({
                        displayName: categoryDisplayNameD2 + " " + series.displayName + " " + options.hostServices.getLocalizedString("RibbonChart_TooltipRank"),
                        value: "" + d2.rank
                    });
                    var rankDiff = d2.rank - d1.rank;
                    if (0 !== rankDiff) {
                        var formattedRankDiff = rankDiff > 0 ? "▼" + rankDiff : "▲" + -rankDiff;
                        tooltipInfo.push({
                            displayName: options.hostServices.getLocalizedString("RibbonChart_TooltipRank") + " " + options.hostServices.getLocalizedString("RibbonChart_TooltipChange"),
                            value: formattedRankDiff
                        });
                    }
                    var newBanding = {
                        d1: d1,
                        d2: d2,
                        tooltipInfo: tooltipInfo
                    };
                    options.ribbonChartDataPoints.push(newBanding);
                }
            }
        }
        return options.ribbonChartDataPoints;
    }
    function rankDataPoints(options) {
        var totalCategoryHeight = 0, heightArray = options.heightMatrix[options.categoryIndex];
        heightArray = _.sortBy(heightArray, (function(seriesIndexHeightInfo) {
            return options.isPositive ? seriesIndexHeightInfo.height : -seriesIndexHeightInfo.height;
        }));
        for (var gapWidth = options.gapWidth && heightArray.length > 0 ? options.gapWidth : 0, seriesIndex = 0, len = heightArray.length; seriesIndex < len; seriesIndex++) {
            var seriesIndexHeightInfo = heightArray[seriesIndex], data = seriesIndexHeightInfo.dataToChange;
            if (options.hasHighlights) {
                var dataHighlight = seriesIndexHeightInfo.dataToChangeHighlight;
                options.isPositive ? dataHighlight.position = totalCategoryHeight + dataHighlight.value : dataHighlight.position = totalCategoryHeight;
            }
            var height = seriesIndexHeightInfo.height;
            options.isPositive ? (totalCategoryHeight += height, data.position = totalCategoryHeight, 
            totalCategoryHeight += data.value && 0 !== data.value ? gapWidth : 0, data.rank = heightArray.length - seriesIndex) : (data.position = totalCategoryHeight, 
            totalCategoryHeight += height, totalCategoryHeight -= gapWidth, data.rank = options.startRank + seriesIndex + 1), 
            options.hasHighlights && (seriesIndexHeightInfo.dataToChangeHighlight.rank = data.rank);
        }
    }
    function getRibbonChartAreaLayout(layout, ribbonChartDataPoints, isColumn) {
        for (var ribbonChartAreaLayout = [], i = 0, len = ribbonChartDataPoints.length; i < len; i++) {
            var ribbonChartDataPoint = ribbonChartDataPoints[i], d1 = ribbonChartDataPoint.d1, d2 = ribbonChartDataPoint.d2, shapeLayout = layout.shapeLayout, x1 = shapeLayout.x(d1), y1 = shapeLayout.y(d1), width1 = shapeLayout.width(d1), height1 = shapeLayout.height(d1);
            if (0 !== width1) {
                var x2 = shapeLayout.x(d2), y2 = shapeLayout.y(d2), width2 = shapeLayout.width(d2), height2 = shapeLayout.height(d2), bottomLeft = void 0, topLeft = void 0, bottomRight = void 0, topRight = void 0;
                isColumn ? (bottomLeft = {
                    x: x1 + width1,
                    y: y1
                }, topLeft = {
                    x: x1 + width1,
                    y: y1 + height1
                }, bottomRight = {
                    x: x2,
                    y: y2
                }, topRight = {
                    x: x2,
                    y: y2 + height2
                }) : (bottomLeft = {
                    x: x1,
                    y: y1
                }, topLeft = {
                    x: x1 + width1,
                    y: y1
                }, bottomRight = {
                    x: x2,
                    y: y2 + height2
                }, topRight = {
                    x: x2 + width2,
                    y: y2 + height2
                });
                var rankchangeBandingArea = {
                    bottomLeft: bottomLeft,
                    topLeft: topLeft,
                    bottomRight: bottomRight,
                    topRight: topRight,
                    tooltipInfo: ribbonChartDataPoint.tooltipInfo,
                    color: d1.color
                };
                ribbonChartAreaLayout.push(rankchangeBandingArea);
            } else i--;
        }
        return ribbonChartAreaLayout;
    }
    function drawRibbonChartAreaSmooth(options) {
        var layer = options.graphicsContext.select(options.ribbonChartGroupSelector.selector);
        layer.empty() && (layer = options.graphicsContext.append("g").classed(options.ribbonChartGroupSelector.class, !0));
        var shapeSelection = layer.selectAll(options.ribbonChartAreaSelector.selector), shapes = shapeSelection.data(options.layout);
        shapes.enter().append("path").classed(options.ribbonChartAreaSelector.class, !0);
        var bandsOpacity = (100 - options.bandsTransparency) / 100;
        return options.colorBands ? (shapes.style("fill", (function(ribbonChartArea) {
            return ribbonChartArea.color;
        })).style("fill-opacity", bandsOpacity), options.showBorder ? shapes.style("stroke", (function(ribbonChartArea) {
            return ribbonChartArea.color;
        })).style("stroke-width", ribbonChartStrokeWidth) : shapes.style("stroke-width", 0)) : (shapes.style("fill", ribbonChartFillColor).style("fill-opacity", bandsOpacity), 
        options.showBorder ? shapes.style("stroke", ribbonChartStrokeColor).style("stroke-width", ribbonChartStrokeWidth) : shapes.style("stroke-width", 0)), 
        shapes.attr("d", (function(d) {
            var xi = d3.interpolateNumber(d.bottomLeft.x, d.bottomRight.x), yi = d3.interpolateNumber(d.bottomLeft.y, d.bottomRight.y), path = "M" + d.bottomLeft.x + "," + d.bottomLeft.y;
            return path += options.isColumn ? "C" + xi(ribbonChartCurvature) + "," + d.bottomLeft.y + " " + xi(1 - ribbonChartCurvature) + "," + d.bottomRight.y + " " + d.bottomRight.x + "," + d.bottomRight.y : "C" + d.bottomLeft.x + "," + yi(ribbonChartCurvature) + " " + d.bottomRight.x + "," + yi(1 - ribbonChartCurvature) + " " + d.bottomRight.x + "," + d.bottomRight.y, 
            path += "L" + d.topRight.x + "," + d.topRight.y, xi = d3.interpolateNumber(d.topRight.x, d.topLeft.x), 
            yi = d3.interpolateNumber(d.topRight.y, d.topLeft.y), path += options.isColumn ? "C" + xi(ribbonChartCurvature) + "," + d.topRight.y + " " + xi(1 - ribbonChartCurvature) + "," + d.topLeft.y + " " + d.topLeft.x + "," + d.topLeft.y : "C" + d.topRight.x + "," + yi(ribbonChartCurvature) + " " + d.topLeft.x + "," + yi(1 - ribbonChartCurvature) + " " + d.topLeft.x + "," + d.topLeft.y, 
            path += "L" + d.bottomLeft.x + "," + d.bottomLeft.y + "Z";
        })), shapes.exit().remove(), shapes;
    }
    var converterHelper = powerbi.visuals.converterHelper, DataViewObjects = powerbi.DataViewObjects, valueFormatter = powerbi.visuals.valueFormatter, defaultColorBands = !0, defaultShowBorder = !1, defaultSeriesGapRatio = 0, defaultBandsTransparency = 30, ribbonChartCurvature = .7, ribbonChartFillColor = "#C8C8C8", ribbonChartStrokeColor = "#777777", ribbonChartStrokeWidth = 1;
    return {
        getRibbonOptionsFromDataviewObjects: function(dataViewMetadata, columnChartProps) {
            return getRibbonOptionsFromDataviewObjects(dataViewMetadata, columnChartProps);
        },
        enumerateRibbonChart: function(enumeration, ribbonChartData, ribbonChart) {
            return enumerateRibbonChart(enumeration, ribbonChartData, ribbonChart);
        },
        createRibbonChartDataPoints: function(options) {
            return createRibbonChartDataPoints(options);
        },
        getRibbonChartAreaLayout: function(layout, ribbonChartDataPoints, isColumn) {
            return getRibbonChartAreaLayout(layout, ribbonChartDataPoints, isColumn);
        },
        drawRibbonChartAreaSmooth: function(options) {
            return drawRibbonChartAreaSmooth(options);
        }
    };
}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var utility;
        !(function(utility) {
            var SelectionManager = (function() {
                function SelectionManager(options) {
                    this.dataPointObjectName = "dataPoint", this.hostServices = options.hostServices, 
                    this.selectedIds = [];
                }
                return SelectionManager.prototype.select = function(selectionId, multiSelect) {
                    void 0 === multiSelect && (multiSelect = !1);
                    var deferred = $.Deferred();
                    return this.hostServices.shouldRetainSelection() ? this.sendSelectionToHost([ selectionId ]) : (this.selectInternal(selectionId, multiSelect), 
                    this.sendSelectionToHost(this.selectedIds)), deferred.resolve(this.selectedIds), 
                    deferred;
                }, SelectionManager.prototype.showContextMenu = function(selectionId, position) {
                    var deferred = $.Deferred();
                    return position = position || visuals.InteractivityUtils.getPositionOfLastInputEvent(), 
                    this.sendContextMenuToHost(selectionId, position), deferred.resolve(), deferred;
                }, SelectionManager.prototype.hasSelection = function() {
                    return this.selectedIds.length > 0;
                }, SelectionManager.prototype.clear = function() {
                    var deferred = $.Deferred();
                    return this.selectedIds = [], this.sendSelectionToHost([]), deferred.resolve(), 
                    deferred;
                }, SelectionManager.prototype.getSelectionIds = function() {
                    return this.selectedIds;
                }, SelectionManager.prototype.sendSelectionToHost = function(ids) {
                    var dataPointObjectName = this.dataPointObjectName, selectArgs = {
                        visualObjects: _.chain(ids).filter((function(value) {
                            return value.hasIdentity();
                        })).map((function(value) {
                            return {
                                objectName: dataPointObjectName,
                                selectorsByColumn: value.getSelectorsByColumn()
                            };
                        })).value(),
                        selectors: void 0
                    }, shouldInsertSelectors = !1;
                    _.isEmpty(ids) || (shouldInsertSelectors = ids[0].getSelector() && !ids[0].getSelectorsByColumn()), 
                    shouldInsertSelectors && (selectArgs.selectors = _.chain(ids).filter((function(value) {
                        return value.hasIdentity();
                    })).map((function(value) {
                        return value.getSelector();
                    })).value()), this.hostServices.onSelect(selectArgs);
                }, SelectionManager.prototype.sendContextMenuToHost = function(selectionId, position) {
                    var selectors = this.getSelectorsByColumn([ selectionId ]);
                    if (!_.isEmpty(selectors)) {
                        var args = {
                            data: selectors,
                            position: position
                        };
                        this.hostServices.onContextMenu(args);
                    }
                }, SelectionManager.prototype.getSelectorsByColumn = function(selectionIds) {
                    return _(selectionIds).filter((function(value) {
                        return value.hasIdentity;
                    })).map((function(value) {
                        return value.getSelectorsByColumn();
                    })).compact().value();
                }, SelectionManager.prototype.selectInternal = function(selectionId, multiSelect) {
                    SelectionManager.containsSelection(this.selectedIds, selectionId) ? this.selectedIds = multiSelect ? this.selectedIds.filter((function(d) {
                        return !powerbi.data.Selector.equals(d.getSelector(), selectionId.getSelector());
                    })) : this.selectedIds.length > 1 ? [ selectionId ] : [] : multiSelect ? this.selectedIds.push(selectionId) : this.selectedIds = [ selectionId ];
                }, SelectionManager.containsSelection = function(list, id) {
                    return list.some((function(d) {
                        return powerbi.data.Selector.equals(d.getSelector(), id.getSelector());
                    }));
                }, SelectionManager;
            })();
            utility.SelectionManager = SelectionManager;
        })(utility = visuals.utility || (visuals.utility = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var shapeUtil;
        !(function(shapeUtil) {
            function getBubbleSizeMultiplier(value) {
                return null != value ? shapeUtil.MinBubbleMultiplier + value / 100 * shapeUtil.MaxBubbleMultiplier : shapeUtil.MinBubbleMultiplier;
            }
            function invertBubbleSizeMultiplier(multiplier) {
                return Math.round((multiplier - shapeUtil.MinBubbleMultiplier) / shapeUtil.MaxBubbleMultiplier * 100).toString();
            }
            shapeUtil.MinBubbleMultiplier = 1, shapeUtil.MaxBubbleMultiplier = 3, shapeUtil.getBubbleSizeMultiplier = getBubbleSizeMultiplier, 
            shapeUtil.invertBubbleSizeMultiplier = invertBubbleSizeMultiplier;
        })(shapeUtil = visuals.shapeUtil || (visuals.shapeUtil = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        visuals.SlicerResponsiveBreakpoints = {
            rangeSlicer: {
                iconWidth: 80,
                iconHeight: 70,
                hideHeaderHeight: 88
            },
            horizontalSlicer: {
                iconWidth: 75,
                iconHeight: 15,
                hideHeaderHeight: 48
            },
            slicerHeader: {
                fontSize: [ {
                    breakpoint: 140,
                    applyWidth: !0,
                    applyHeight: !0,
                    maxFontSizePt: 9
                }, {
                    breakpoint: 220,
                    applyWidth: !0,
                    applyHeight: !0,
                    maxFontSizePt: 16
                }, {
                    breakpoint: 320,
                    applyWidth: !0,
                    applyHeight: !1,
                    maxFontSizePt: 24
                }, {
                    breakpoint: 460,
                    applyWidth: !0,
                    applyHeight: !1,
                    maxFontSizePt: 32
                }, {
                    breakpoint: 540,
                    applyWidth: !0,
                    applyHeight: !1,
                    maxFontSizePt: 40
                } ]
            }
        };
        var SlicerHelper;
        !(function(SlicerHelper) {
            function fixWidgetPosition(widget, boundElement, padding, scaleWidget, position) {
                if (void 0 === padding && (padding = null), void 0 === scaleWidget && (scaleWidget = !1), 
                void 0 === position && (position = null), widget && boundElement) {
                    var top = "", right = "", bottom = "", left = "", transform = "", elementScale = SlicerHelper.getScale(boundElement), widgetElement = boundElement.get(0), parent = widget.offsetParent(), scale = SlicerHelper.getScale(parent);
                    scaleWidget && widget.css({
                        transform: "scale(" + elementScale + ")"
                    });
                    var rect = widgetElement.getBoundingClientRect();
                    if (null == position && (position = getWidgetPosition(rect)), 1 === (1 & position)) {
                        var elementTop = rect.top + rect.height;
                        top = elementTop / scale, transform = "top";
                    } else {
                        var elementBottom = window.innerHeight - rect.top;
                        bottom = elementBottom / scale, top = "auto", transform = "bottom";
                    }
                    if (2 === (2 & position)) {
                        var elementLeft = rect.left;
                        left = elementLeft / scale, SlicerHelper.isWidgetPositionExceedsBoundaries(widget, elementScale, left) && (left = window.innerWidth - widget.innerWidth() * elementScale), 
                        transform = "left " + transform;
                    } else {
                        var elementRight = window.innerWidth - rect.left - rect.width;
                        right = elementRight / scale, left = "auto", SlicerHelper.isWidgetPositionExceedsBoundaries(widget, elementScale, right) && (right = window.innerWidth - widget.innerWidth() * elementScale), 
                        transform = "right " + transform;
                    }
                    var css = {
                        left: left,
                        top: top,
                        right: right,
                        bottom: bottom,
                        "transform-origin": transform
                    };
                    padding && ("auto" !== css.top ? css.top += padding.top * elementScale : css.bottom += padding.top * elementScale, 
                    "auto" !== css.left ? css.left += padding.left * elementScale : css.right += padding.left * elementScale), 
                    widget.css(css);
                }
            }
            function getScale(element) {
                if (!element) return 1;
                var width = element.outerWidth();
                if (0 === width) return 1;
                var scaledWidth = element.get(0).getBoundingClientRect().width;
                return scaledWidth / width;
            }
            function isWidgetPositionExceedsBoundaries(widget, elementScale, position) {
                return widget.innerWidth() * elementScale + position > window.innerWidth;
            }
            function getWidgetPosition(elementRect) {
                var position = 3, availableHeight = window.innerHeight, availableWidth = window.innerWidth;
                return availableHeight - elementRect.top < availableHeight / 2 && (position &= -2, 
                position |= 0), availableWidth - elementRect.left < availableWidth / 2 && (position &= -3, 
                position |= 4), position;
            }
            SlicerHelper.SingleValueSlicer = !1, SlicerHelper.fixWidgetPosition = fixWidgetPosition, 
            SlicerHelper.getScale = getScale, SlicerHelper.isWidgetPositionExceedsBoundaries = isWidgetPositionExceedsBoundaries;
        })(SlicerHelper = visuals.SlicerHelper || (visuals.SlicerHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {})), powerbi.define("Visuals/common/responsiveVisualUtil", (function(imports) {
    var ResponsiveVisibilityHelper = (function() {
        function ResponsiveVisibilityHelper(visualElement, iconClassName) {
            this.visualElement = visualElement, this.iconClassName = iconClassName, this.isVisualVisible = !0;
        }
        return ResponsiveVisibilityHelper.prototype.updateVisibility = function(options) {
            options.showIcon ? (this.hideVisual(), this.renderResponsiveIcon(options.viewport)) : (this.removeResponsiveIcon(), 
            this.showVisual());
        }, ResponsiveVisibilityHelper.prototype.renderResponsiveIcon = function(viewport) {
            this.responsiveIcon || (this.responsiveIcon = InJs.DomFactory.div().addClass(this.iconClassName).appendTo(this.visualElement)), 
            this.responsiveIcon.css({
                width: viewport.width,
                height: viewport.height
            });
        }, ResponsiveVisibilityHelper.prototype.removeResponsiveIcon = function() {
            this.responsiveIcon && (this.responsiveIcon.remove(), this.responsiveIcon = void 0);
        }, ResponsiveVisibilityHelper.prototype.hideVisual = function() {
            this.isVisualVisible && (this.visualElement.children().hide(), this.isVisualVisible = !1);
        }, ResponsiveVisibilityHelper.prototype.showVisual = function() {
            this.isVisualVisible || (this.visualElement.children().show(), this.isVisualVisible = !0);
        }, ResponsiveVisibilityHelper;
    })();
    return {
        visibilityHelper: function(visualElement, iconClassName) {
            return new ResponsiveVisibilityHelper(visualElement, iconClassName);
        }
    };
}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var tooltipUtils;
        !(function(tooltipUtils) {
            function tooltipUpdate(selection, tooltips) {
                if (0 !== tooltips.length) {
                    var titles = selection.selectAll("title"), titlesUpdate = titles.data((function(d, i) {
                        return [ tooltips[i] ];
                    }));
                    titlesUpdate.enter().append("title"), titlesUpdate.exit().remove(), titlesUpdate.text((function(d) {
                        return d;
                    }));
                }
            }
            tooltipUtils.tooltipUpdate = tooltipUpdate;
        })(tooltipUtils = visuals.tooltipUtils || (visuals.tooltipUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var TextUtil;
        !(function(TextUtil) {
            function removeBreakingSpaces(str) {
                return str.toString().replace(new RegExp(" ", "g"), "&nbsp");
            }
            function removeEllipses(str) {
                return str.replace(/…/g, "");
            }
            function replaceSpaceWithNBSP(txt) {
                if (null != txt) return txt.replace(/ /g, " ");
            }
            function wordBreak(textElement, maxWidth, maxHeight, linePadding, preserveNewLines) {
                void 0 === linePadding && (linePadding = 0), void 0 === preserveNewLines && (preserveNewLines = !1);
                var properties = powerbi.TextMeasurementService.getSvgMeasurementProperties(textElement), height = powerbi.TextMeasurementService.estimateSvgTextHeight(properties) + linePadding, maxNumLines = Math.max(1, Math.floor(maxHeight / height)), node = d3.select(textElement), labelText = textElement.textContent;
                textElement.textContent = null;
                for (var words = jsCommon.WordBreaker.splitByWidth(labelText, properties, powerbi.TextMeasurementService.measureSvgTextWidth, maxWidth, maxNumLines, null, !1, preserveNewLines), i = 0, ilen = words.length; i < ilen; i++) properties.text = words[i], 
                node.append("tspan").attr({
                    x: 0,
                    dy: 0 === i ? 0 : height
                }).text(powerbi.TextMeasurementService.getTailoredTextOrDefault(properties, maxWidth));
            }
            TextUtil.removeBreakingSpaces = removeBreakingSpaces, TextUtil.removeEllipses = removeEllipses, 
            TextUtil.replaceSpaceWithNBSP = replaceSpaceWithNBSP, TextUtil.wordBreak = wordBreak;
        })(TextUtil = visuals.TextUtil || (visuals.TextUtil = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var TextboxUtil;
        !(function(TextboxUtil) {
            TextboxUtil.loadQuillResources = !0;
        })(TextboxUtil = visuals.TextboxUtil || (visuals.TextboxUtil = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var GradientUtils, DataRoleHelper = powerbi.data.DataRoleHelper;
        !(function(GradientUtils) {
            function getFillRuleDescriptor(objectDescs) {
                if (objectDescs) for (var objectName in objectDescs) {
                    var objectDesc = objectDescs[objectName];
                    for (var propertyName in objectDesc.properties) {
                        var propertyDesc = objectDesc.properties[propertyName];
                        if (propertyDesc.type && propertyDesc.type[FillRulePropertyIdentifier]) return propertyDesc.rule;
                    }
                }
            }
            function getUpdatedGradientSettings(gradientObject) {
                var gradientSettings;
                if (gradientObject && !$.isEmptyObject(gradientObject)) {
                    gradientSettings = getDefaultGradientSettings();
                    for (var propertyName in gradientSettings) {
                        var hasProperty = gradientObject.hasOwnProperty(propertyName);
                        if (hasProperty) {
                            var value = gradientObject[propertyName];
                            value && value.solid && value.solid.color && (value = value.solid.color), gradientSettings[propertyName] = value;
                        }
                    }
                }
                return gradientSettings;
            }
            function getGradientMeasureIndex(dataViewCategorical) {
                if (dataViewCategorical && dataViewCategorical.values && dataViewCategorical.values.grouped) {
                    var grouped = dataViewCategorical.values.grouped();
                    return DataRoleHelper.getMeasureIndexOfRole(grouped, "Gradient");
                }
                return -1;
            }
            function getGradientValueColumn(dataViewCategorical) {
                if (null == dataViewCategorical) return null;
                var gradientMeasureIndex = GradientUtils.getGradientMeasureIndex(dataViewCategorical), gradientValueColumn = gradientMeasureIndex === -1 ? null : dataViewCategorical.values[gradientMeasureIndex];
                return gradientValueColumn;
            }
            function hasGradientRole(dataViewCategorical) {
                var gradientMeasureIndex = getGradientMeasureIndex(dataViewCategorical);
                return gradientMeasureIndex >= 0;
            }
            function hasGradientRoleInMatrix(dataViewMatrix) {
                var gradientMeasureIndex = _.findIndex(dataViewMatrix.valueSources, (function(valueSource) {
                    return DataRoleHelper.hasRole(valueSource, "Gradient");
                }));
                return gradientMeasureIndex >= 0;
            }
            function getDefaultGradientSettings() {
                var colors = getDefaultColors(), gradientSettings = {
                    diverging: !1,
                    minColor: colors.minColor,
                    midColor: DefaultMidColor,
                    maxColor: colors.maxColor,
                    minValue: void 0,
                    midValue: void 0,
                    maxValue: void 0,
                    nullStrategy: GradientUtils.DefaultNullStrategy,
                    nullColor: GradientUtils.DefaultNullColor
                };
                return gradientSettings;
            }
            function getDefaultFillRuleDefinition() {
                return getLinearGradient2FillRuleDefinition();
            }
            function updateFillRule(propertyName, propertyValue, definitions) {
                var numericValueExpr, colorValueExpr, dataPointObjectDefinition = powerbi.data.DataViewObjectDefinitions.ensure(definitions, DataPointPropertyIdentifier, null), fillRule = getFillRule(definitions);
                if (fillRule) switch ($.isNumeric(propertyValue) && (numericValueExpr = void 0 !== propertyValue ? SQExprBuilder.double(+propertyValue) : void 0), 
                _.contains([ "minColor", "midColor", "maxColor", "nullColor" ], propertyName) && (colorValueExpr = getColorExpressionValue(fillRule, propertyName, propertyValue)), 
                propertyName) {
                  case "minColor":
                    updateMinColor(fillRule, colorValueExpr);
                    break;

                  case "midColor":
                    updateMidColor(fillRule, colorValueExpr);
                    break;

                  case "maxColor":
                    updateMaxColor(fillRule, colorValueExpr);
                    break;

                  case "nullColor":
                    updateNullColor(fillRule, colorValueExpr);
                    break;

                  case "minValue":
                    updateMinValue(fillRule, numericValueExpr);
                    break;

                  case "midValue":
                    updateMidValue(fillRule, numericValueExpr);
                    break;

                  case "maxValue":
                    updateMaxValue(fillRule, numericValueExpr);
                    break;

                  case "nullStrategy":
                    updateNullStrategy(fillRule, propertyValue);
                    break;

                  case "diverging":
                    fillRule = propertyValue ? getLinearGradient3FillRuleDefinition(fillRule) : getLinearGradient2FillRuleDefinition(fillRule), 
                    dataPointObjectDefinition.properties[FillRulePropertyIdentifier] = fillRule;
                    break;

                  case "revertToDefault":
                    fillRule = getDefaultFillRuleDefinition(), dataPointObjectDefinition.properties[FillRulePropertyIdentifier] = fillRule;
                }
            }
            function getGradientSettings(baseFillRule) {
                return baseFillRule ? getGradientSettingsFromRule(baseFillRule) : getDefaultGradientSettings();
            }
            function getFillRule(objectDefinitions) {
                var fillRuleDefinition = powerbi.data.DataViewObjectDefinitions.getValue(objectDefinitions, {
                    objectName: DataPointPropertyIdentifier,
                    propertyName: FillRulePropertyIdentifier
                }, null);
                return fillRuleDefinition;
            }
            function getDefaultColors() {
                var dataColors = new powerbi.visuals.DataColorPalette(), maxColorInfo = dataColors.getColorByIndex(0), colors = d3.scale.linear().domain([ 0, 100 ]).range([ "#ffffff", maxColorInfo.value ]);
                return {
                    minColor: colors(20),
                    midColor: DefaultMidColor,
                    maxColor: maxColorInfo.value,
                    nullColor: GradientUtils.DefaultNullColor
                };
            }
            function getGradientSettingsFromRule(fillRule) {
                var maxColor, minColor, maxValue, midValue, minValue, nullStrategyExpr, midColor = DefaultMidColor, nullColor = GradientUtils.DefaultNullColor, nullStrategy = GradientUtils.DefaultNullStrategy, diverging = void 0 !== fillRule.linearGradient3, rule2 = fillRule.linearGradient2, rule3 = fillRule.linearGradient3;
                if (rule2) {
                    maxColor = rule2.max.color.value, minColor = rule2.min.color.value;
                    var maxValueExpr = rule2.max.value;
                    maxValueExpr && (maxValue = maxValueExpr.value);
                    var minValueExpr = rule2.min.value;
                    minValueExpr && (minValue = minValueExpr.value), nullStrategyExpr = rule2.nullColoringStrategy;
                } else if (rule3) {
                    maxColor = rule3.max.color.value, midColor = rule3.mid.color.value, minColor = rule3.min.color.value;
                    var maxValueExpr = rule3.max.value;
                    maxValueExpr && (maxValue = maxValueExpr.value);
                    var midValueExpr = rule3.mid.value;
                    midValueExpr && (midValue = midValueExpr.value);
                    var minValueExpr = rule3.min.value;
                    minValueExpr && (minValue = minValueExpr.value), nullStrategyExpr = rule3.nullColoringStrategy;
                }
                if (nullStrategyExpr) {
                    nullStrategy = nullStrategyExpr.strategy.value;
                    var nullColorExpr = nullStrategyExpr.color;
                    nullColorExpr && (nullColor = nullColorExpr.value);
                }
                var output = {
                    diverging: diverging,
                    minColor: minColor,
                    midColor: midColor,
                    maxColor: maxColor,
                    nullStrategy: nullStrategy
                };
                return null != minValue && (output.minValue = minValue), null != midValue && (output.midValue = midValue), 
                null != maxValue && (output.maxValue = maxValue), null != nullColor ? output.nullColor = nullColor : output.nullColor = GradientUtils.DefaultNullColor, 
                output;
            }
            function getGradientBarColors(gradientSettings) {
                var colors = [];
                return gradientSettings.minColor = gradientSettings.minColor || DefaultColor, colors.push(gradientSettings.minColor), 
                gradientSettings.diverging && (gradientSettings.midColor = gradientSettings.midColor || DefaultColor, 
                colors.push(gradientSettings.midColor || DefaultColor)), gradientSettings.maxColor = gradientSettings.maxColor || DefaultColor, 
                colors.push(gradientSettings.maxColor || DefaultColor), colors.join(",");
            }
            function getLinearGradient2FillRuleDefinition(baseFillRule) {
                var gradientSettings = getGradientSettings(baseFillRule), fillRuleDefinition = {
                    linearGradient2: {
                        min: {
                            color: SQExprBuilder.text(gradientSettings.minColor)
                        },
                        max: {
                            color: SQExprBuilder.text(gradientSettings.maxColor)
                        },
                        nullColoringStrategy: {
                            strategy: SQExprBuilder.text(gradientSettings.nullStrategy)
                        }
                    }
                }, gradient = fillRuleDefinition.linearGradient2;
                return null != gradientSettings.minValue && (gradient.min.value = SQExprBuilder.double(gradientSettings.minValue)), 
                null != gradientSettings.maxValue && (gradient.max.value = SQExprBuilder.double(gradientSettings.maxValue)), 
                gradientSettings.nullStrategy === powerbi.NullStrategy.specificColor && gradientSettings.nullColor && (gradient.nullColoringStrategy.color = SQExprBuilder.text(gradientSettings.nullColor)), 
                fillRuleDefinition;
            }
            function getLinearGradient3FillRuleDefinition(baseFillRule) {
                var gradientSettings = getGradientSettings(baseFillRule), fillRuleDefinition = {
                    linearGradient3: {
                        min: {
                            color: SQExprBuilder.text(gradientSettings.minColor)
                        },
                        mid: {
                            color: SQExprBuilder.text(gradientSettings.midColor)
                        },
                        max: {
                            color: SQExprBuilder.text(gradientSettings.maxColor)
                        },
                        nullColoringStrategy: {
                            strategy: SQExprBuilder.text(gradientSettings.nullStrategy)
                        }
                    }
                }, gradient = fillRuleDefinition.linearGradient3;
                return null != gradientSettings.minValue && (gradient.min.value = SQExprBuilder.double(gradientSettings.minValue)), 
                null != gradientSettings.midValue && (gradient.mid.value = SQExprBuilder.double(gradientSettings.midValue)), 
                null != gradientSettings.maxValue && (gradient.max.value = SQExprBuilder.double(gradientSettings.maxValue)), 
                gradientSettings.nullStrategy === powerbi.NullStrategy.specificColor && gradientSettings.nullColor && (gradient.nullColoringStrategy.color = SQExprBuilder.text(gradientSettings.nullColor)), 
                fillRuleDefinition;
            }
            function getDefaultColorExpression(fillRule, propertyName) {
                var defaultColor;
                if (fillRule.linearGradient3) {
                    var defaultGradient = getLinearGradient3FillRuleDefinition().linearGradient3;
                    switch (propertyName) {
                      case "minColor":
                        defaultColor = defaultGradient.min.color;
                        break;

                      case "midColor":
                        defaultColor = defaultGradient.mid.color;
                        break;

                      case "maxColor":
                        defaultColor = defaultGradient.max.color;
                        break;

                      case "nullColor":
                        defaultColor = defaultGradient.nullColoringStrategy.color;
                    }
                } else if (fillRule.linearGradient2) {
                    var defaultGradient = getLinearGradient2FillRuleDefinition().linearGradient2;
                    switch (propertyName) {
                      case "minColor":
                        defaultColor = defaultGradient.min.color;
                        break;

                      case "maxColor":
                        defaultColor = defaultGradient.max.color;
                        break;

                      case "nullColor":
                        defaultColor = defaultGradient.nullColoringStrategy.color;
                    }
                }
                return defaultColor;
            }
            function getColorExpressionValue(fillRule, propertyName, propertyValue) {
                var colorExpressionValue;
                return colorExpressionValue = propertyValue ? SQExprBuilder.text(propertyValue) : getDefaultColorExpression(fillRule, propertyName);
            }
            function updateMinColor(fillRule, colorExpressionValue) {
                fillRule.linearGradient2 ? fillRule.linearGradient2.min.color = colorExpressionValue : fillRule.linearGradient3 && (fillRule.linearGradient3.min.color = colorExpressionValue);
            }
            function updateMidColor(fillRule, colorExpressionValue) {
                fillRule.linearGradient3 && (fillRule.linearGradient3.mid.color = colorExpressionValue);
            }
            function updateMaxColor(fillRule, colorExpressionValue) {
                fillRule.linearGradient2 ? fillRule.linearGradient2.max.color = colorExpressionValue : fillRule.linearGradient3 && (fillRule.linearGradient3.max.color = colorExpressionValue);
            }
            function updateMinValue(fillRule, value) {
                fillRule.linearGradient2 ? fillRule.linearGradient2.min.value = value : fillRule.linearGradient3 && (fillRule.linearGradient3.min.value = value);
            }
            function updateMidValue(fillRule, value) {
                fillRule.linearGradient3 && (fillRule.linearGradient3.mid.value = value);
            }
            function updateMaxValue(fillRule, value) {
                fillRule.linearGradient2 ? fillRule.linearGradient2.max.value = value : fillRule.linearGradient3 && (fillRule.linearGradient3.max.value = value);
            }
            function updateNullStrategy(fillRule, value) {
                fillRule.linearGradient2 ? fillRule.linearGradient2.nullColoringStrategy.strategy = value : fillRule.linearGradient3 && (fillRule.linearGradient3.nullColoringStrategy.strategy = value);
            }
            function updateNullColor(fillRule, colorExpressionValue) {
                fillRule.linearGradient2 ? fillRule.linearGradient2.nullColoringStrategy.color = colorExpressionValue : fillRule.linearGradient3 && (fillRule.linearGradient3.nullColoringStrategy.color = colorExpressionValue);
            }
            var SQExprBuilder = powerbi.data.SQExprBuilder, DefaultMidColor = "#ffffff";
            GradientUtils.DefaultNullColor = "#FF7F48", GradientUtils.DefaultNullStrategy = powerbi.NullStrategy.asZero;
            var DefaultColor = DefaultMidColor, DataPointPropertyIdentifier = "dataPoint", FillRulePropertyIdentifier = "fillRule";
            GradientUtils.getFillRuleDescriptor = getFillRuleDescriptor, GradientUtils.getUpdatedGradientSettings = getUpdatedGradientSettings, 
            GradientUtils.getGradientMeasureIndex = getGradientMeasureIndex, GradientUtils.getGradientValueColumn = getGradientValueColumn, 
            GradientUtils.hasGradientRole = hasGradientRole, GradientUtils.hasGradientRoleInMatrix = hasGradientRoleInMatrix, 
            GradientUtils.getDefaultGradientSettings = getDefaultGradientSettings, GradientUtils.getDefaultFillRuleDefinition = getDefaultFillRuleDefinition, 
            GradientUtils.updateFillRule = updateFillRule, GradientUtils.getGradientSettings = getGradientSettings, 
            GradientUtils.getFillRule = getFillRule, GradientUtils.getGradientSettingsFromRule = getGradientSettingsFromRule, 
            GradientUtils.getGradientBarColors = getGradientBarColors, GradientUtils.getLinearGradient2FillRuleDefinition = getLinearGradient2FillRuleDefinition, 
            GradientUtils.getLinearGradient3FillRuleDefinition = getLinearGradient3FillRuleDefinition;
        })(GradientUtils = visuals.GradientUtils || (visuals.GradientUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var HierarchyNodeType;
        !(function(HierarchyNodeType) {
            HierarchyNodeType[HierarchyNodeType.Leaf = 0] = "Leaf", HierarchyNodeType[HierarchyNodeType.NonLeaf = 1] = "NonLeaf";
        })(HierarchyNodeType = visuals.HierarchyNodeType || (visuals.HierarchyNodeType = {}));
        var HierarchyNodeHelpers;
        !(function(HierarchyNodeHelpers) {
            function isLeaf(node) {
                return HierarchyNodeHelpers.isKind(node, HierarchyNodeType.Leaf);
            }
            function isNonLeaf(node) {
                return HierarchyNodeHelpers.isKind(node, HierarchyNodeType.NonLeaf);
            }
            function isKind(node, kind) {
                return node && node.kind === kind;
            }
            function getNodeAtCategoryIndexForDepth(rootNode, categoryIndex, depth) {
                if (0 === depth) return rootNode;
                for (var currentNode = rootNode, currentDepth = 1; currentDepth <= depth; currentDepth++) {
                    var children = currentNode.children, levelNode = _.first(children);
                    currentNode = HierarchyNodeHelpers.getNodeAtCategoryIndex(levelNode, categoryIndex);
                }
                return currentNode;
            }
            function getNodeAtCategoryIndex(node, categoryIndex) {
                var currentMaxIndex = getMaxIndex(node);
                if (currentMaxIndex === categoryIndex) return node;
                if (currentMaxIndex < categoryIndex) {
                    var nextNode = node.next;
                    setVisited(node);
                    var returnNode = HierarchyNodeHelpers.getNodeAtCategoryIndex(nextNode, categoryIndex);
                    return clearVisited(node), returnNode;
                }
                var previousNode = node.previous;
                if (previousNode && getMaxIndex(previousNode) >= categoryIndex) {
                    setVisited(node);
                    var returnNode = HierarchyNodeHelpers.getNodeAtCategoryIndex(previousNode, categoryIndex);
                    return clearVisited(node), returnNode;
                }
                return node;
            }
            function setVisited(item) {
                var visitedItem = item;
                visitedItem.visited = !0;
            }
            function clearVisited(item) {
                var visitedItem = item;
                delete visitedItem.visited;
            }
            function getMaxIndex(node) {
                return HierarchyNodeHelpers.isLeaf(node) ? node.categoryIndex : HierarchyNodeHelpers.isNonLeaf(node) ? node.maxCategoryIndex : void 0;
            }
            function getLastLevelNode(node) {
                if (node.parent) {
                    var parent_1 = node.parent;
                    if (!_.isEmpty(parent_1.children)) return _.last(parent_1.children);
                    var previousParent = getLastLevelNode(parent_1);
                    return previousParent && _.last(previousParent.children);
                }
            }
            HierarchyNodeHelpers.isLeaf = isLeaf, HierarchyNodeHelpers.isNonLeaf = isNonLeaf, 
            HierarchyNodeHelpers.isKind = isKind, HierarchyNodeHelpers.getNodeAtCategoryIndexForDepth = getNodeAtCategoryIndexForDepth, 
            HierarchyNodeHelpers.getNodeAtCategoryIndex = getNodeAtCategoryIndex, HierarchyNodeHelpers.getLastLevelNode = getLastLevelNode;
            var Builder;
            !(function(Builder) {
                function build(categories) {
                    for (var categorySpan = _.first(categories).values.length, rootNode = {
                        categorySpan: categorySpan,
                        children: [],
                        kind: HierarchyNodeType.NonLeaf,
                        maxCategoryIndex: categorySpan,
                        parent: null
                    }, usedCategorySpan = 0; usedCategorySpan < categorySpan; ) usedCategorySpan += buildSubtree(rootNode, categories, 0, usedCategorySpan);
                    return rootNode;
                }
                function buildSubtree(parent, categoryColumns, columnIndex, categoryIndex, identitySubsetExprs) {
                    identitySubsetExprs || (identitySubsetExprs = []);
                    var previousNode, categoryColumn = categoryColumns[columnIndex], columnSubsetExprs = identitySubsetExprs[columnIndex];
                    if (!columnSubsetExprs) {
                        var newIdentityExprs = categoryColumn.source.identityExprs;
                        columnSubsetExprs = identitySubsetExprs[columnIndex] = columnIndex > 0 ? identitySubsetExprs[columnIndex - 1].slice() : [], 
                        columnSubsetExprs.push.apply(columnSubsetExprs, newIdentityExprs);
                    }
                    var categorySpan = getCategorySpan(categoryColumn, categoryIndex, columnSubsetExprs), node = {
                        categorySpan: categorySpan,
                        children: [],
                        kind: HierarchyNodeType.NonLeaf,
                        maxCategoryIndex: null,
                        parent: parent
                    };
                    void 0 === previousNode && (previousNode = getLastLevelNode(node)), previousNode && (node.previous = previousNode, 
                    previousNode.next = node);
                    var nextColumnIndex = columnIndex + 1;
                    if (nextColumnIndex >= categoryColumns.length - 1) buildLeaves(node, categoryColumns[nextColumnIndex], categoryIndex, categorySpan); else for (var usedCategorySpan = 0; usedCategorySpan < categorySpan; ) {
                        var startCategoryIndex = usedCategorySpan + categoryIndex;
                        usedCategorySpan += buildSubtree(node, categoryColumns, nextColumnIndex, startCategoryIndex, identitySubsetExprs);
                    }
                    var lastChild = _.last(node.children);
                    switch (lastChild.kind) {
                      case HierarchyNodeType.Leaf:
                        node.maxCategoryIndex = lastChild.categoryIndex;
                        break;

                      case HierarchyNodeType.NonLeaf:
                        node.maxCategoryIndex = lastChild.maxCategoryIndex;
                    }
                    return parent.children.push(node), categorySpan;
                }
                function getCategorySpan(categoryColumn, startCategoryIndex, identitySubsetExprs) {
                    for (var levelIdentity, categorySpan = 0, categoryValuesLength = categoryColumn.values.length, categoryIndex = startCategoryIndex; categoryIndex < categoryValuesLength; categoryIndex++) {
                        var currentIdentity = getSpecificIdentityFromCompositeIdentity(categoryColumn, categoryIndex, identitySubsetExprs);
                        if (levelIdentity && !powerbi.DataViewScopeIdentity.equals(levelIdentity, currentIdentity)) break;
                        levelIdentity || (levelIdentity = currentIdentity), categorySpan++;
                    }
                    return categorySpan;
                }
                function buildLeaves(parent, categoryColumn, startCategoryIndex, categorySpan) {
                    for (var previousLeaf, categoryIndex = startCategoryIndex, endCategoryIndex = startCategoryIndex + categorySpan; categoryIndex < endCategoryIndex; categoryIndex++) {
                        var leaf = {
                            categoryIndex: categoryIndex,
                            kind: HierarchyNodeType.Leaf,
                            parent: parent,
                            previous: previousLeaf
                        };
                        void 0 === previousLeaf && (previousLeaf = getLastLevelNode(leaf)), previousLeaf && (previousLeaf.next = leaf, 
                        leaf.previous = previousLeaf), previousLeaf = leaf, parent.children.push(leaf);
                    }
                }
                function getSpecificIdentityFromCompositeIdentity(column, valueIndex, groupIdentityFields) {
                    var columnIdentities = column.identity, identity = columnIdentities[valueIndex], identitySubsetExpr = powerbi.data.ScopeIdentityExtractor.getSubset(identity.expr, groupIdentityFields), valueGroupIdentity = powerbi.data.createDataViewScopeIdentity(identitySubsetExpr);
                    return valueGroupIdentity;
                }
                Builder.build = build;
            })(Builder = HierarchyNodeHelpers.Builder || (HierarchyNodeHelpers.Builder = {}));
        })(HierarchyNodeHelpers = visuals.HierarchyNodeHelpers || (visuals.HierarchyNodeHelpers = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var visualBackgroundHelper;
        !(function(visualBackgroundHelper) {
            function getDefaultColor() {
                return "#FFF";
            }
            function getDefaultTransparency() {
                return 50;
            }
            function getDefaultShow() {
                return !1;
            }
            function getDefaultValues() {
                return {
                    color: getDefaultColor(),
                    transparency: getDefaultTransparency(),
                    show: getDefaultShow()
                };
            }
            function enumeratePlot(enumeration, background) {
                var transparency = background && background.transparency;
                null == transparency && (transparency = getDefaultTransparency());
                var backgroundObject = {
                    selector: null,
                    properties: {
                        transparency: transparency,
                        image: background && background.image
                    },
                    objectName: "plotArea"
                };
                enumeration.pushInstance(backgroundObject);
            }
            function renderBackgroundImage(background, visualElement, layout) {
                var image = background && background.image, imageUrl = image && image.url, imageFit = image && image.scaling, imageTransparency = background && background.transparency, backgroundImage = visualElement.children(".background-image");
                if (!imageUrl) return void (0 !== backgroundImage.length && backgroundImage.remove());
                switch (0 === backgroundImage.length && (visualElement.prepend('<div class="background-image"></div>'), 
                backgroundImage = visualElement.children(".background-image"), backgroundImage.css("position", "absolute")), 
                backgroundImage.css({
                    width: layout.width,
                    height: layout.height,
                    "margin-left": layout.left,
                    "margin-top": layout.top
                }), backgroundImage.css({
                    "background-image": "url(" + imageUrl + ")",
                    "background-repeat": "no-repeat",
                    opacity: (100 - imageTransparency) / 100
                }), imageFit) {
                  case visuals.imageScalingType.normal:
                    backgroundImage.css({
                        "background-size": "",
                        "background-position": "50% 50%"
                    });
                    break;

                  case visuals.imageScalingType.fit:
                    backgroundImage.css({
                        "background-size": "100% 100%",
                        "background-position": ""
                    });
                    break;

                  case visuals.imageScalingType.fill:
                    backgroundImage.css({
                        "background-size": "100%",
                        "background-position": "50% 50%"
                    });
                    break;

                  default:
                    backgroundImage.css({
                        "background-size": "",
                        "background-position": "50% 50%"
                    });
                }
            }
            visualBackgroundHelper.getDefaultColor = getDefaultColor, visualBackgroundHelper.getDefaultTransparency = getDefaultTransparency, 
            visualBackgroundHelper.getDefaultShow = getDefaultShow, visualBackgroundHelper.getDefaultValues = getDefaultValues, 
            visualBackgroundHelper.enumeratePlot = enumeratePlot, visualBackgroundHelper.renderBackgroundImage = renderBackgroundImage;
        })(visualBackgroundHelper = visuals.visualBackgroundHelper || (visuals.visualBackgroundHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var Selector = powerbi.data.Selector, ObjectEnumerationBuilder = (function() {
            function ObjectEnumerationBuilder() {}
            return ObjectEnumerationBuilder.prototype.pushInstance = function(instance, mergeInstances) {
                void 0 === mergeInstances && (mergeInstances = !0);
                var instances = this.instances;
                instances || (instances = this.instances = []);
                var containerIdx = this.containerIdx;
                if (null != containerIdx && (instance.containerIdx = containerIdx), mergeInstances) for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
                    var existingInstance = instances_1[_i];
                    if (this.canMerge(existingInstance, instance)) return this.extend(existingInstance, instance, "properties"), 
                    this.extend(existingInstance, instance, "validValues"), this;
                }
                return instances.push(instance), this;
            }, ObjectEnumerationBuilder.prototype.pushContainer = function(container) {
                var containers = this.containers;
                containers || (containers = this.containers = []);
                var updatedLen = containers.push(container);
                return this.containerIdx = updatedLen - 1, this;
            }, ObjectEnumerationBuilder.prototype.popContainer = function() {
                return this.containerIdx = void 0, this;
            }, ObjectEnumerationBuilder.prototype.complete = function() {
                if (this.instances) {
                    var result = {
                        instances: this.instances
                    }, containers = this.containers;
                    return containers && (result.containers = containers), result;
                }
            }, ObjectEnumerationBuilder.prototype.canMerge = function(x, y) {
                return x.objectName === y.objectName && x.containerIdx === y.containerIdx && Selector.equals(x.selector, y.selector);
            }, ObjectEnumerationBuilder.prototype.extend = function(target, source, propertyName) {
                var sourceValues = source[propertyName];
                if (sourceValues) {
                    var targetValues = target[propertyName];
                    targetValues || (targetValues = target[propertyName] = {});
                    for (var valuePropertyName in sourceValues) targetValues[valuePropertyName] || (targetValues[valuePropertyName] = sourceValues[valuePropertyName]);
                }
            }, ObjectEnumerationBuilder.merge = function(x, y) {
                var xNormalized = ObjectEnumerationBuilder.normalize(x), yNormalized = ObjectEnumerationBuilder.normalize(y);
                if (!xNormalized || !yNormalized) return xNormalized || yNormalized;
                for (var xCategoryCount = xNormalized.containers ? xNormalized.containers.length : 0, _i = 0, _a = yNormalized.instances; _i < _a.length; _i++) {
                    var yInstance = _a[_i];
                    xNormalized.instances.push(yInstance), null != yInstance.containerIdx && (yInstance.containerIdx += xCategoryCount);
                }
                var yContainers = yNormalized.containers;
                return _.isEmpty(yContainers) || (xNormalized.containers ? Array.prototype.push.apply(xNormalized.containers, yContainers) : xNormalized.containers = yContainers), 
                xNormalized;
            }, ObjectEnumerationBuilder.normalize = function(x) {
                return _.isArray(x) ? {
                    instances: x
                } : x;
            }, ObjectEnumerationBuilder.getContainerForInstance = function(enumeration, instance) {
                return enumeration.containers[instance.containerIdx];
            }, ObjectEnumerationBuilder;
        })();
        visuals.ObjectEnumerationBuilder = ObjectEnumerationBuilder;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var VisualBorderUtil;
        !(function(VisualBorderUtil) {
            function getBorderWidth(outlineType, outlineWeight) {
                switch (outlineType) {
                  case visuals.outline.none:
                    return "0px";

                  case visuals.outline.bottomOnly:
                    return "0px 0px " + outlineWeight + "px 0px";

                  case visuals.outline.topOnly:
                    return outlineWeight + "px 0px 0px 0px";

                  case visuals.outline.leftOnly:
                    return "0px 0px 0px " + outlineWeight + "px";

                  case visuals.outline.rightOnly:
                    return "0px " + outlineWeight + "px 0px 0px";

                  case visuals.outline.topBottom:
                    return outlineWeight + "px 0px";

                  case visuals.outline.leftRight:
                    return "0px " + outlineWeight + "px";

                  case visuals.outline.frame:
                    return outlineWeight + "px";

                  default:
                    return "0px";
                }
            }
            VisualBorderUtil.getBorderWidth = getBorderWidth;
        })(VisualBorderUtil = visuals.VisualBorderUtil || (visuals.VisualBorderUtil = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function createTranslateMatrix(xOffset, yOffset) {
            return {
                m00: 1,
                m01: 0,
                m02: xOffset,
                m10: 0,
                m11: 1,
                m12: yOffset
            };
        }
        function createScaleMatrix(xScale, yScale) {
            return {
                m00: xScale,
                m01: 0,
                m02: 0,
                m10: 0,
                m11: yScale,
                m12: 0
            };
        }
        function createRotationMatrix(angleInRads) {
            var a = angleInRads, sinA = Math.sin(a), cosA = Math.cos(a);
            return {
                m00: cosA,
                m01: -sinA,
                m02: 0,
                m10: sinA,
                m11: cosA,
                m12: 0
            };
        }
        function createInverseMatrix(m) {
            var determinant = m.m00 * m.m11 - m.m01 * m.m10, invdet = 1 / determinant;
            return {
                m00: m.m11 * invdet,
                m01: -m.m01 * invdet,
                m02: (m.m01 * m.m12 - m.m02 * m.m11) * invdet,
                m10: -m.m10 * invdet,
                m11: m.m00 * invdet,
                m12: -(m.m00 * m.m12 - m.m10 * m.m02) * invdet
            };
        }
        function multiplyMatrices(a, b) {
            return {
                m00: a.m00 * b.m00 + a.m01 * b.m10,
                m01: a.m00 * b.m01 + a.m01 * b.m11,
                m02: a.m00 * b.m02 + a.m01 * b.m12 + a.m02,
                m10: a.m10 * b.m00 + a.m11 * b.m10,
                m11: a.m10 * b.m01 + a.m11 * b.m11,
                m12: a.m10 * b.m02 + a.m11 * b.m12 + a.m12
            };
        }
        var Transform = (function() {
            function Transform(m) {
                this.matrix = m || {
                    m00: 1,
                    m01: 0,
                    m02: 0,
                    m10: 0,
                    m11: 1,
                    m12: 0
                };
            }
            return Transform.prototype.applyToPoint = function(point) {
                if (!point) return point;
                var m = this.matrix;
                return {
                    x: m.m00 * point.x + m.m01 * point.y + m.m02,
                    y: m.m10 * point.x + m.m11 * point.y + m.m12
                };
            }, Transform.prototype.applyToRect = function(rect) {
                if (!rect) return rect;
                var x0 = rect.left, y0 = rect.top, m = this.matrix, isScaled = 1 !== m.m00 || 1 !== m.m11, isRotated = 0 !== m.m01 || 0 !== m.m10;
                if (!isRotated && !isScaled) return {
                    left: x0 + m.m02,
                    top: y0 + m.m12,
                    width: rect.width,
                    height: rect.height
                };
                var minX, maxX, minY, maxY, x1 = rect.left + rect.width, y1 = rect.top + rect.height;
                if (isRotated) {
                    var p0x = m.m00 * x0 + m.m01 * y0 + m.m02, p0y = m.m10 * x0 + m.m11 * y0 + m.m12, p1x = m.m00 * x0 + m.m01 * y1 + m.m02, p1y = m.m10 * x0 + m.m11 * y1 + m.m12, p2x = m.m00 * x1 + m.m01 * y0 + m.m02, p2y = m.m10 * x1 + m.m11 * y0 + m.m12, p3x = m.m00 * x1 + m.m01 * y1 + m.m02, p3y = m.m10 * x1 + m.m11 * y1 + m.m12;
                    minX = Math.min(p0x, p1x, p2x, p3x), maxX = Math.max(p0x, p1x, p2x, p3x), minY = Math.min(p0y, p1y, p2y, p3y), 
                    maxY = Math.max(p0y, p1y, p2y, p3y);
                } else {
                    var p0x = m.m00 * x0 + m.m02, p0y = m.m11 * y0 + m.m12, p3x = m.m00 * x1 + m.m02, p3y = m.m11 * y1 + m.m12;
                    minX = Math.min(p0x, p3x), maxX = Math.max(p0x, p3x), minY = Math.min(p0y, p3y), 
                    maxY = Math.max(p0y, p3y);
                }
                return {
                    left: minX,
                    top: minY,
                    width: maxX - minX,
                    height: maxY - minY
                };
            }, Transform.prototype.translate = function(xOffset, yOffset) {
                if (0 !== xOffset || 0 !== yOffset) {
                    var m = createTranslateMatrix(xOffset, yOffset);
                    this.matrix = multiplyMatrices(this.matrix, m), this._inverse = null;
                }
            }, Transform.prototype.scale = function(xScale, yScale) {
                if (1 !== xScale || 1 !== yScale) {
                    var m = createScaleMatrix(xScale, yScale);
                    this.matrix = multiplyMatrices(this.matrix, m), this._inverse = null;
                }
            }, Transform.prototype.rotate = function(angleInRadians) {
                if (0 !== angleInRadians) {
                    var m = createRotationMatrix(angleInRadians);
                    this.matrix = multiplyMatrices(this.matrix, m), this._inverse = null;
                }
            }, Transform.prototype.add = function(other) {
                other && (this.matrix = multiplyMatrices(this.matrix, other.matrix), this._inverse = null);
            }, Transform.prototype.getInverse = function() {
                return this._inverse || (this._inverse = new Transform(createInverseMatrix(this.matrix))), 
                this._inverse;
            }, Transform;
        })();
        visuals.Transform = Transform, visuals.createTranslateMatrix = createTranslateMatrix, 
        visuals.createScaleMatrix = createScaleMatrix, visuals.createRotationMatrix = createRotationMatrix, 
        visuals.createInverseMatrix = createInverseMatrix;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var TrendLineHelper, Color = jsCommon.Color, DataRoleHelper = powerbi.data.DataRoleHelper;
        !(function(TrendLineHelper) {
            function enumerateObjectInstances(enumeration, trendLines) {
                if (_.isEmpty(trendLines)) return void enumeration.pushInstance({
                    selector: null,
                    properties: {
                        show: !1,
                        lineColor: TrendLineHelper.defaults.lineColor,
                        transparency: TrendLineHelper.defaults.transparency,
                        style: TrendLineHelper.defaults.lineStyle,
                        combineSeries: TrendLineHelper.defaults.combineSeries
                    },
                    objectName: trendObjectName
                });
                var trendLine = trendLines[0], properties = {};
                properties.show = trendLine.show, properties.displayName = trendLine.displayName, 
                trendLine.combineSeries && (properties.lineColor = trendLine.lineColor), properties.transparency = trendLine.transparency, 
                properties.style = trendLine.style, properties.combineSeries = trendLine.combineSeries, 
                properties.useHighlightValues = trendLine.useHighlightValues, enumeration.pushInstance({
                    selector: null,
                    properties: properties,
                    objectName: trendObjectName
                });
            }
            function isDataViewForRegression(dataView) {
                return DataRoleHelper.hasRoleInDataView(dataView, "regression.X");
            }
            function readDataView(dataView, sourceDataView, y2, colors, readMatrix) {
                return readMatrix ? powerbi.requireSync("visuals/trendlineHelper/matrix").read(dataView, sourceDataView, y2, colors) : powerbi.requireSync("visuals/trendlineHelper/categorical").read(dataView, sourceDataView, y2, colors);
            }
            function getTrendLineProperties(objects) {
                var trendProperties = powerbi.DataViewObjects.getObject(objects, trendObjectName, {});
                return {
                    show: powerbi.DataViewObject.getValue(trendProperties, PropertyNames.show, !1),
                    displayName: powerbi.DataViewObject.getValue(trendProperties, PropertyNames.displayName),
                    lineColor: powerbi.DataViewObject.getValue(trendProperties, PropertyNames.lineColor),
                    transparency: powerbi.DataViewObject.getValue(trendProperties, PropertyNames.transparency, TrendLineHelper.defaults.transparency),
                    style: powerbi.DataViewObject.getValue(trendProperties, PropertyNames.style, TrendLineHelper.defaults.lineStyle),
                    combineSeries: powerbi.DataViewObject.getValue(trendProperties, PropertyNames.combineSeries, TrendLineHelper.defaults.combineSeries),
                    useHighlightValues: powerbi.DataViewObject.getValue(trendProperties, PropertyNames.useHighlightValues, TrendLineHelper.defaults.useHighlightValues)
                };
            }
            function darkenTrendLineColor(color) {
                var rgb = Color.parseColorString(color);
                return rgb = Color.darken(rgb, 20), Color.rgbString(rgb);
            }
            function render(trendLines, graphicsContext, axes, viewport) {
                var layer = graphicsContext.select(TrendLineLayerClassSelector.selector);
                layer.empty() && (layer = graphicsContext.append("svg").classed(TrendLineLayerClassSelector.class, !0)), 
                layer.attr({
                    height: viewport.height,
                    width: viewport.width
                });
                var lines = layer.selectAll(TrendLineClassSelector.selector).data(trendLines || []);
                lines.enter().append("path").classed(TrendLineClassSelector.class, !0), lines.attr("d", (function(d) {
                    var xScale = axes.x.scale, yScale = d.y2Axis && axes.y2 ? axes.y2.scale : axes.y1.scale, pathGen = d3.svg.line().x((function(point) {
                        return xScale(point.x);
                    })).y((function(point) {
                        return yScale(point.y);
                    }));
                    return pathGen(_.filter(d.points, (function(point) {
                        return null != point.x && null != point.y;
                    })));
                })), lines.each((function(data) {
                    var line = d3.select(this), style = {};
                    style.stroke = data.lineColor.solid.color, null != data.transparency && (style["stroke-opacity"] = (100 - data.transparency) / 100), 
                    data.style === visuals.lineStyle.dashed ? style["stroke-dasharray"] = "5, 5" : data.style === visuals.lineStyle.dotted ? (style["stroke-dasharray"] = "1, 5", 
                    style["stroke-linecap"] = "round") : data.style === visuals.lineStyle.solid && (style["stroke-dasharray"] = null, 
                    style["stroke-linecap"] = null), line.style(style);
                })), lines.exit().remove();
            }
            var PropertyNames;
            !(function(PropertyNames) {
                PropertyNames.show = "show", PropertyNames.displayName = "displayName", PropertyNames.lineColor = "lineColor", 
                PropertyNames.transparency = "transparency", PropertyNames.style = "style", PropertyNames.combineSeries = "combineSeries", 
                PropertyNames.useHighlightValues = "useHighlightValues";
            })(PropertyNames || (PropertyNames = {}));
            var trendObjectName = "trend";
            TrendLineHelper.defaults = {
                lineColor: {
                    solid: {
                        color: "#000"
                    }
                },
                lineStyle: visuals.lineStyle.dashed,
                transparency: 0,
                combineSeries: !0,
                useHighlightValues: !0
            };
            var TrendLineClassSelector = jsCommon.CssConstants.createClassAndSelector("trend-line"), TrendLineLayerClassSelector = jsCommon.CssConstants.createClassAndSelector("trend-line-layer");
            TrendLineHelper.enumerateObjectInstances = enumerateObjectInstances, TrendLineHelper.isDataViewForRegression = isDataViewForRegression, 
            TrendLineHelper.readDataView = readDataView, powerbi.define("visuals/trendlineHelper/matrix", (function(imports) {
                function read(dataView, sourceDataView, y2, colors) {
                    if (dataView && dataView.matrix) {
                        var matrix = dataView.matrix, seriesNodes = matrix.rows && matrix.rows.root && matrix.rows.root.children;
                        if (!_.isEmpty(seriesNodes)) {
                            var trendlineProperties = getTrendLineProperties(dataView.metadata.objects), legacyColor = powerbi.DataViewObjects.getValue(seriesNodes[0].children[0].objects, visuals.lineChartProps.dataPoint.fill);
                            legacyColor && (trendlineProperties.lineColor = legacyColor);
                            for (var objects = sourceDataView.metadata.objects, defaultColor = powerbi.DataViewObjects.getFillColor(objects, {
                                objectName: "dataPoint",
                                propertyName: "defaultColor"
                            }), colorHelper = new visuals.ColorHelper(colors, {
                                objectName: "dataPoint",
                                propertyName: "fill"
                            }, defaultColor), sourceSeriesNodes = sourceDataView.matrix && sourceDataView.matrix.rows && sourceDataView.matrix.rows.root.children, trendLines = [], seriesIndex = 0; seriesIndex < seriesNodes.length; seriesIndex++) {
                                for (var series = seriesNodes[seriesIndex], points = [], _i = 0, _a = series.children; _i < _a.length; _i++) {
                                    var category = _a[_i], x = visuals.AxisHelper.normalizeNonFiniteNumber(category.value), y = visuals.AxisHelper.normalizeNonFiniteNumber(category.values[0].value);
                                    null != x && null != y && points.push({
                                        x: x,
                                        y: y
                                    });
                                }
                                var seriesLineColor = void 0;
                                if (trendlineProperties.combineSeries) seriesLineColor = trendlineProperties.lineColor || TrendLineHelper.defaults.lineColor; else if (2 === sourceDataView.matrix.rows.levels.length) {
                                    var sourceSeriesNode = sourceSeriesNodes[seriesIndex], color = colorHelper.getColorForSeriesValue(sourceSeriesNode.objects, sourceSeriesNode.childIdentityFields, sourceSeriesNode.value);
                                    color = darkenTrendLineColor(color), seriesLineColor = {
                                        solid: {
                                            color: color
                                        }
                                    };
                                }
                                trendLines.push({
                                    points: points,
                                    show: trendlineProperties.show,
                                    displayName: trendlineProperties.displayName,
                                    lineColor: seriesLineColor,
                                    transparency: trendlineProperties.transparency,
                                    style: trendlineProperties.style,
                                    combineSeries: trendlineProperties.combineSeries,
                                    useHighlightValues: trendlineProperties.useHighlightValues,
                                    y2Axis: y2
                                });
                            }
                            return trendLines;
                        }
                    }
                }
                return {
                    read: function(dataView, sourceDataView, y2, colors) {
                        return read(dataView, sourceDataView, y2, colors);
                    }
                };
            })), powerbi.define("visuals/trendlineHelper/categorical", (function(imports) {
                function read(dataView, sourceDataView, y2, colors) {
                    if (dataView && dataView.categorical) {
                        var categorical = dataView.categorical;
                        if (!_.isEmpty(categorical.categories) && !_.isEmpty(categorical.values)) {
                            var categories = categorical.categories[0].values, groups = categorical.values.grouped();
                            if (categories && groups) {
                                var trendlineProperties = getTrendLineProperties(dataView.metadata.objects), legacyColor = powerbi.DataViewObjects.getValue(categorical.values[0].source.objects, visuals.lineChartProps.dataPoint.fill);
                                legacyColor && (trendlineProperties.lineColor = legacyColor);
                                for (var objects = sourceDataView.metadata.objects, defaultColor = powerbi.DataViewObjects.getFillColor(objects, {
                                    objectName: "dataPoint",
                                    propertyName: "defaultColor"
                                }), colorHelper = new visuals.ColorHelper(colors, {
                                    objectName: "dataPoint",
                                    propertyName: "fill"
                                }, defaultColor), trendLines = [], groupIndex = 0; groupIndex < groups.length; groupIndex++) {
                                    for (var group = groups[groupIndex], points = [], i = 0; i < categories.length; i++) {
                                        var x = visuals.AxisHelper.normalizeNonFiniteNumber(categories[i]), valueColumn = group.values[0], values = void 0;
                                        values = trendlineProperties.useHighlightValues && valueColumn.highlights ? valueColumn.highlights : valueColumn.values;
                                        var y = visuals.AxisHelper.normalizeNonFiniteNumber(values[i]);
                                        null != x && null != y && points.push({
                                            x: x,
                                            y: y
                                        });
                                    }
                                    var seriesLineColor = void 0;
                                    if (trendlineProperties.combineSeries) seriesLineColor = trendlineProperties.lineColor || TrendLineHelper.defaults.lineColor; else {
                                        var color = void 0;
                                        if (sourceDataView.categorical.values.source) {
                                            var sourceGroups = sourceDataView.categorical.values.grouped();
                                            color = colorHelper.getColorForSeriesValue(sourceGroups[groupIndex].objects, sourceDataView.categorical.values.identityFields, group.name);
                                        } else {
                                            var matchingMeasure = sourceDataView.categorical.values[groupIndex];
                                            color = colorHelper.getColorForMeasure(matchingMeasure.source.objects, group.name);
                                        }
                                        color = darkenTrendLineColor(color), seriesLineColor = {
                                            solid: {
                                                color: color
                                            }
                                        };
                                    }
                                    trendLines.push({
                                        points: points,
                                        show: trendlineProperties.show,
                                        displayName: trendlineProperties.displayName,
                                        lineColor: seriesLineColor,
                                        transparency: trendlineProperties.transparency,
                                        style: trendlineProperties.style,
                                        combineSeries: trendlineProperties.combineSeries,
                                        useHighlightValues: trendlineProperties.useHighlightValues,
                                        y2Axis: y2
                                    });
                                }
                                return trendLines;
                            }
                        }
                    }
                }
                return {
                    read: function(dataView, sourceDataView, y2, colors) {
                        return read(dataView, sourceDataView, y2, colors);
                    }
                };
            })), TrendLineHelper.darkenTrendLineColor = darkenTrendLineColor, TrendLineHelper.render = render;
        })(TrendLineHelper = visuals.TrendLineHelper || (visuals.TrendLineHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var visibilityHelper;
        !(function(visibilityHelper) {
            function partiallyVisible(element) {
                return element.is(":visible");
            }
            visibilityHelper.partiallyVisible = partiallyVisible;
        })(visibilityHelper = visuals.visibilityHelper || (visuals.visibilityHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var VisualObjectRepetition, DataViewObjectDefinitions = powerbi.data.DataViewObjectDefinitions, DataViewObjectDescriptors = powerbi.data.DataViewObjectDescriptors, Selector = powerbi.data.Selector;
    !(function(VisualObjectRepetition) {
        function equals(x, y) {
            return x = x || null, y = y || null, x === y || !x == !y && (!!Selector.equals(x.selector, y.selector) && _.isEqual(x.objects, y.objects));
        }
        function getMetadata(objectRepetitions, objectDescriptors) {
            if (_.isEmpty(objectRepetitions)) return [];
            for (var repetitionsMetadata = [], _i = 0, objectRepetitions_1 = objectRepetitions; _i < objectRepetitions_1.length; _i++) {
                var repetition = objectRepetitions_1[_i];
                for (var objectName in repetition.objects) {
                    var properties = repetition.objects[objectName] && repetition.objects[objectName].formattingProperties;
                    if (!_.isEmpty(properties)) for (var _a = 0, properties_1 = properties; _a < properties_1.length; _a++) {
                        var propertyName = properties_1[_a], propertyId = {
                            objectName: objectName,
                            propertyName: propertyName
                        }, propertyDescriptor = DataViewObjectDescriptors.findPropertyById(objectDescriptors, propertyId);
                        propertyDescriptor && repetitionsMetadata.push({
                            selector: repetition.selector,
                            propertyId: propertyId,
                            propertyDescriptor: propertyDescriptor,
                            containerName: repetition.containerName
                        });
                    }
                }
            }
            return repetitionsMetadata;
        }
        function metadataEquals(x, y) {
            return x === y || null == x && null == y || !x == !y && (x.containerName === y.containerName && _.isEqual(x.propertyDescriptor, y.propertyDescriptor) && _.isEqual(x.propertyId, y.propertyId) && Selector.equals(x.selector, y.selector));
        }
        function getDefinition(objectDefns, repetition) {
            return DataViewObjectDefinitions.getValue(objectDefns, repetition.propertyId, repetition.selector);
        }
        VisualObjectRepetition.equals = equals, VisualObjectRepetition.getMetadata = getMetadata, 
        VisualObjectRepetition.metadataEquals = metadataEquals, VisualObjectRepetition.getDefinition = getDefinition;
    })(VisualObjectRepetition = powerbi.VisualObjectRepetition || (powerbi.VisualObjectRepetition = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var RectOrientation, FontProperties = powerbi.visuals.FontProperties, shapes = powerbi.visuals.shapes;
    !(function(RectOrientation) {
        RectOrientation[RectOrientation.None = 0] = "None", RectOrientation[RectOrientation.VerticalBottomTop = 1] = "VerticalBottomTop", 
        RectOrientation[RectOrientation.VerticalTopBottom = 2] = "VerticalTopBottom", RectOrientation[RectOrientation.HorizontalLeftRight = 3] = "HorizontalLeftRight", 
        RectOrientation[RectOrientation.HorizontalRightLeft = 4] = "HorizontalRightLeft";
    })(RectOrientation = powerbi.RectOrientation || (powerbi.RectOrientation = {}));
    var OutsidePlacement;
    !(function(OutsidePlacement) {
        OutsidePlacement[OutsidePlacement.Allowed = 0] = "Allowed", OutsidePlacement[OutsidePlacement.Disallowed = 1] = "Disallowed", 
        OutsidePlacement[OutsidePlacement.Partial = 2] = "Partial";
    })(OutsidePlacement = powerbi.OutsidePlacement || (powerbi.OutsidePlacement = {}));
    var DataLabelManager = (function() {
        function DataLabelManager() {
            this.movingStep = 3, this.hideOverlapped = !0, this.defaultDataLabelSettings = {
                anchorMargin: DataLabelManager.DefaultAnchorMargin,
                anchorRectOrientation: RectOrientation.None,
                contentPosition: 128,
                outsidePlacement: OutsidePlacement.Disallowed,
                maximumMovingDistance: DataLabelManager.DefaultMaximumMovingDistance,
                minimumMovingDistance: DataLabelManager.DefaultMinimumMovingDistance,
                validContentPositions: 128,
                opacity: 1
            };
        }
        return Object.defineProperty(DataLabelManager.prototype, "defaultSettings", {
            get: function() {
                return this.defaultDataLabelSettings;
            },
            enumerable: !0,
            configurable: !0
        }), DataLabelManager.prototype.hideCollidedLabels = function(viewport, data, layout, addTransform) {
            void 0 === addTransform && (addTransform = !1);
            var arrangeGrid = new DataLabelArrangeGrid(viewport, data, layout), filteredData = [], transform = {
                x: 0,
                y: 0
            };
            addTransform && (transform.x = viewport.width / 2, transform.y = viewport.height / 2);
            for (var i = 0, len = data.length; i < len; i++) if (layout.filter(data[i])) {
                var info = this.getLabelInfo(data[i]);
                info.anchorPoint = {
                    x: layout.labelLayout.x(data[i]) + transform.x,
                    y: layout.labelLayout.y(data[i]) + transform.y
                };
                var position = this.calculateContentPosition(info, info.contentPosition, data[i].size, info.anchorMargin);
                DataLabelManager.isValid(position) && !this.hasCollisions(arrangeGrid, info, position, viewport) && (data[i].labelX = position.left - transform.x, 
                data[i].labelY = position.top - transform.y, arrangeGrid.add(info, position), filteredData.push(data[i]));
            }
            return filteredData;
        }, DataLabelManager.prototype.getLabelInfo = function(source) {
            var settings = this.defaultDataLabelSettings;
            return source.anchorMargin = void 0 !== source.anchorMargin ? source.anchorMargin : settings.anchorMargin, 
            source.anchorRectOrientation = void 0 !== source.anchorRectOrientation ? source.anchorRectOrientation : settings.anchorRectOrientation, 
            source.contentPosition = void 0 !== source.contentPosition ? source.contentPosition : settings.contentPosition, 
            source.maximumMovingDistance = void 0 !== source.maximumMovingDistance ? source.maximumMovingDistance : settings.maximumMovingDistance, 
            source.minimumMovingDistance = void 0 !== source.minimumMovingDistance ? source.minimumMovingDistance : settings.minimumMovingDistance, 
            source.outsidePlacement = void 0 !== source.outsidePlacement ? source.outsidePlacement : settings.outsidePlacement, 
            source.validContentPositions = void 0 !== source.validContentPositions ? source.validContentPositions : settings.validContentPositions, 
            source.opacity = void 0 !== source.opacity ? source.opacity : settings.opacity, 
            source.maximumMovingDistance += source.anchorMargin, source;
        }, DataLabelManager.prototype.calculateContentPositionFromPoint = function(anchorPoint, contentPosition, contentSize, offset) {
            var position = {
                x: 0,
                y: 0
            };
            if (anchorPoint) {
                if (void 0 !== anchorPoint.x && isFinite(anchorPoint.x)) switch (position.x = anchorPoint.x, 
                contentPosition) {
                  case 1:
                  case 8:
                  case 64:
                    position.x -= contentSize.width / 2;
                    break;

                  case 4:
                  case 32:
                  case 256:
                    position.x += contentSize.width / 2;
                }
                if (void 0 !== anchorPoint.y && isFinite(anchorPoint.y)) switch (position.y = anchorPoint.y, 
                contentPosition) {
                  case 8:
                  case 16:
                  case 32:
                    position.y -= contentSize.height / 2;
                    break;

                  case 4:
                  case 1:
                  case 2:
                    position.y -= contentSize.height;
                }
                if (void 0 !== offset && isFinite(offset)) switch (contentPosition) {
                  case 1:
                    position.x -= offset, position.y -= offset;
                    break;

                  case 8:
                    position.x -= offset;
                    break;

                  case 64:
                    position.x -= offset, position.y += offset;
                    break;

                  case 2:
                    position.y -= offset;
                    break;

                  case 16:
                    break;

                  case 128:
                    position.y += offset;
                    break;

                  case 4:
                    position.x += offset, position.y -= offset;
                    break;

                  case 32:
                    position.x += offset;
                    break;

                  case 256:
                    position.x += offset, position.y += offset;
                }
            }
            return {
                left: position.x,
                top: position.y,
                width: contentSize.width,
                height: contentSize.height
            };
        }, DataLabelManager.prototype.calculateContentPositionFromRect = function(anchorRect, anchorRectOrientation, contentPosition, contentSize, offset) {
            switch (contentPosition) {
              case 512:
                return this.handleInsideCenterPosition(anchorRectOrientation, contentSize, anchorRect, offset);

              case 2048:
                return this.handleInsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset);

              case 1024:
                return this.handleInsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset);

              case 8192:
                return this.handleOutsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset);

              case 4096:
                return this.handleOutsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset);
            }
            return {
                left: 0,
                top: 0,
                width: -1,
                height: -1
            };
        }, DataLabelManager.prototype.handleInsideCenterPosition = function(anchorRectOrientation, contentSize, anchorRect, offset) {
            switch (anchorRectOrientation) {
              case RectOrientation.VerticalBottomTop:
              case RectOrientation.VerticalTopBottom:
                return LocationConverter.middleVertical(contentSize, anchorRect, offset);

              case RectOrientation.HorizontalLeftRight:
              case RectOrientation.HorizontalRightLeft:
              default:
                return LocationConverter.middleHorizontal(contentSize, anchorRect, offset);
            }
        }, DataLabelManager.prototype.handleInsideEndPosition = function(anchorRectOrientation, contentSize, anchorRect, offset) {
            switch (anchorRectOrientation) {
              case RectOrientation.VerticalBottomTop:
                return LocationConverter.topInside(contentSize, anchorRect, offset);

              case RectOrientation.VerticalTopBottom:
                return LocationConverter.bottomInside(contentSize, anchorRect, offset);

              case RectOrientation.HorizontalRightLeft:
                return LocationConverter.leftInside(contentSize, anchorRect, offset);

              case RectOrientation.HorizontalLeftRight:
              default:
                return LocationConverter.rightInside(contentSize, anchorRect, offset);
            }
        }, DataLabelManager.prototype.handleInsideBasePosition = function(anchorRectOrientation, contentSize, anchorRect, offset) {
            switch (anchorRectOrientation) {
              case RectOrientation.VerticalBottomTop:
                return LocationConverter.bottomInside(contentSize, anchorRect, offset);

              case RectOrientation.VerticalTopBottom:
                return LocationConverter.topInside(contentSize, anchorRect, offset);

              case RectOrientation.HorizontalRightLeft:
                return LocationConverter.rightInside(contentSize, anchorRect, offset);

              case RectOrientation.HorizontalLeftRight:
              default:
                return LocationConverter.leftInside(contentSize, anchorRect, offset);
            }
        }, DataLabelManager.prototype.handleOutsideEndPosition = function(anchorRectOrientation, contentSize, anchorRect, offset) {
            switch (anchorRectOrientation) {
              case RectOrientation.VerticalBottomTop:
                return LocationConverter.topOutside(contentSize, anchorRect, offset);

              case RectOrientation.VerticalTopBottom:
                return LocationConverter.bottomOutside(contentSize, anchorRect, offset);

              case RectOrientation.HorizontalRightLeft:
                return LocationConverter.leftOutside(contentSize, anchorRect, offset);

              case RectOrientation.HorizontalLeftRight:
              default:
                return LocationConverter.rightOutside(contentSize, anchorRect, offset);
            }
        }, DataLabelManager.prototype.handleOutsideBasePosition = function(anchorRectOrientation, contentSize, anchorRect, offset) {
            switch (anchorRectOrientation) {
              case RectOrientation.VerticalBottomTop:
                return LocationConverter.bottomOutside(contentSize, anchorRect, offset);

              case RectOrientation.VerticalTopBottom:
                return LocationConverter.topOutside(contentSize, anchorRect, offset);

              case RectOrientation.HorizontalRightLeft:
                return LocationConverter.rightOutside(contentSize, anchorRect, offset);

              case RectOrientation.HorizontalLeftRight:
              default:
                return LocationConverter.leftOutside(contentSize, anchorRect, offset);
            }
        }, DataLabelManager.prototype.calculateContentPosition = function(anchoredElementInfo, contentPosition, contentSize, offset) {
            return 2048 !== contentPosition && 512 !== contentPosition && 1024 !== contentPosition && 4096 !== contentPosition && 8192 !== contentPosition ? this.calculateContentPositionFromPoint(anchoredElementInfo.anchorPoint, contentPosition, contentSize, offset) : this.calculateContentPositionFromRect(anchoredElementInfo.anchorRect, anchoredElementInfo.anchorRectOrientation, contentPosition, contentSize, offset);
        }, DataLabelManager.prototype.hasCollisions = function(arrangeGrid, info, position, size) {
            var rect = shapes.Rect;
            if (arrangeGrid.hasConflict(position)) return !0;
            var intersection = {
                left: 0,
                top: position.height / 2,
                width: size.width,
                height: size.height
            };
            if (intersection = rect.inflate(intersection, {
                left: DataLabelManager.InflateAmount,
                top: 0,
                right: DataLabelManager.InflateAmount,
                bottom: 0
            }), intersection = rect.intersect(intersection, position), rect.isEmpty(intersection)) return !0;
            var lessWithPrecision = powerbi.Double.lessWithPrecision;
            switch (info.outsidePlacement) {
              case OutsidePlacement.Disallowed:
                return lessWithPrecision(intersection.width, position.width) || lessWithPrecision(intersection.height, position.height / 2);

              case OutsidePlacement.Partial:
                return lessWithPrecision(intersection.width, position.width / 2) || lessWithPrecision(intersection.height, position.height / 4);
            }
            return !1;
        }, DataLabelManager.isValid = function(rect) {
            return !shapes.Rect.isEmpty(rect) && rect.width > 0 && rect.height > 0;
        }, DataLabelManager.DefaultAnchorMargin = 0, DataLabelManager.DefaultMaximumMovingDistance = 12, 
        DataLabelManager.DefaultMinimumMovingDistance = 3, DataLabelManager.InflateAmount = 5, 
        DataLabelManager;
    })();
    powerbi.DataLabelManager = DataLabelManager;
    var DataLabelArrangeGrid = (function() {
        function DataLabelArrangeGrid(size, elements, layout) {
            this.grid = [], 0 !== size.width && 0 !== size.height || (this.cellSize = size, 
            this.rowCount = this.colCount = 0);
            var baseProperties = FontProperties.toTextProperties(powerbi.visuals.LabelUtils.defaultFontProperties), defaultFontSize = baseProperties.fontSize;
            this.cellSize = {
                width: 0,
                height: 0
            };
            for (var i = 0, len = elements.length; i < len; i++) {
                var child = elements[i];
                child.labeltext = layout.labelText(child);
                var properties = powerbi.Prototype.inherit(baseProperties);
                properties.text = child.labeltext, properties.fontSize = child.data ? child.data.labelFontSize : child.labelFontSize ? child.labelFontSize : defaultFontSize, 
                child.size = {
                    width: powerbi.TextMeasurementService.measureSvgTextWidth(properties),
                    height: powerbi.TextMeasurementService.estimateSvgTextHeight(properties)
                };
                var w = 2 * child.size.width, h = 2 * child.size.height;
                w > this.cellSize.width && (this.cellSize.width = w), h > this.cellSize.height && (this.cellSize.height = h);
            }
            0 === this.cellSize.width && (this.cellSize.width = size.width), 0 === this.cellSize.height && (this.cellSize.height = size.height), 
            this.colCount = this.getGridRowColCount(this.cellSize.width, size.width, DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT, DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT), 
            this.rowCount = this.getGridRowColCount(this.cellSize.height, size.height, DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT, DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT), 
            this.cellSize.width = size.width / this.colCount, this.cellSize.height = size.height / this.rowCount;
            for (var grid = this.grid, x = 0; x < this.colCount; x++) {
                grid[x] = [];
                for (var y = 0; y < this.rowCount; y++) grid[x][y] = [];
            }
        }
        return DataLabelArrangeGrid.prototype.add = function(element, rect) {
            for (var indexRect = this.getGridIndexRect(rect), grid = this.grid, x = indexRect.left; x < indexRect.right; x++) for (var y = indexRect.top; y < indexRect.bottom; y++) grid[x][y].push({
                element: element,
                rect: rect
            });
        }, DataLabelArrangeGrid.prototype.hasConflict = function(rect) {
            for (var indexRect = this.getGridIndexRect(rect), grid = this.grid, isIntersecting = shapes.Rect.isIntersecting, x = indexRect.left; x < indexRect.right; x++) for (var y = indexRect.top; y < indexRect.bottom; y++) for (var _i = 0, _a = grid[x][y]; _i < _a.length; _i++) {
                var item = _a[_i];
                if (isIntersecting(item.rect, rect)) return !0;
            }
            return !1;
        }, DataLabelArrangeGrid.prototype.getGridRowColCount = function(step, length, minCount, maxCount) {
            return Math.min(Math.max(Math.ceil(length / step), minCount), maxCount);
        }, DataLabelArrangeGrid.prototype.getGridIndexRect = function(rect) {
            var restrict = function(n, min, max) {
                return Math.min(Math.max(n, min), max);
            };
            return {
                left: restrict(Math.floor(rect.left / this.cellSize.width), 0, this.colCount),
                top: restrict(Math.floor(rect.top / this.cellSize.height), 0, this.rowCount),
                right: restrict(Math.ceil((rect.left + rect.width) / this.cellSize.width), 0, this.colCount),
                bottom: restrict(Math.ceil((rect.top + rect.height) / this.cellSize.height), 0, this.rowCount)
            };
        }, DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT = 1, DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT = 100, 
        DataLabelArrangeGrid;
    })();
    powerbi.DataLabelArrangeGrid = DataLabelArrangeGrid;
    var LocationConverter;
    !(function(LocationConverter) {
        function topInside(size, rect, offset) {
            return {
                left: rect.left + rect.width / 2 - size.width / 2,
                top: rect.top + offset,
                width: size.width,
                height: size.height
            };
        }
        function bottomInside(size, rect, offset) {
            return {
                left: rect.left + rect.width / 2 - size.width / 2,
                top: rect.top + rect.height - size.height - offset,
                width: size.width,
                height: size.height
            };
        }
        function rightInside(size, rect, offset) {
            return {
                left: rect.left + rect.width - size.width - offset,
                top: rect.top + rect.height / 2 - size.height / 2,
                width: size.width,
                height: size.height
            };
        }
        function leftInside(size, rect, offset) {
            return {
                left: rect.left + offset,
                top: rect.top + rect.height / 2 - size.height / 2,
                width: size.width,
                height: size.height
            };
        }
        function topOutside(size, rect, offset) {
            return {
                left: rect.left + rect.width / 2 - size.width / 2,
                top: rect.top - size.height - offset,
                width: size.width,
                height: size.height
            };
        }
        function bottomOutside(size, rect, offset) {
            return {
                left: rect.left + rect.width / 2 - size.width / 2,
                top: rect.top + rect.height + offset,
                width: size.width,
                height: size.height
            };
        }
        function rightOutside(size, rect, offset) {
            return {
                left: rect.left + rect.width + offset,
                top: rect.top + rect.height / 2 - size.height / 2,
                width: size.width,
                height: size.height
            };
        }
        function leftOutside(size, rect, offset) {
            return {
                left: rect.left - size.width - offset,
                top: rect.top + rect.height / 2 - size.height / 2,
                width: size.width,
                height: size.height
            };
        }
        function middleHorizontal(size, rect, offset) {
            return {
                left: rect.left + rect.width / 2 - size.width / 2 + offset,
                top: rect.top + rect.height / 2 - size.height / 2,
                width: size.width,
                height: size.height
            };
        }
        function middleVertical(size, rect, offset) {
            return {
                left: rect.left + rect.width / 2 - size.width / 2,
                top: rect.top + rect.height / 2 - size.height / 2 + offset,
                width: size.width,
                height: size.height
            };
        }
        LocationConverter.topInside = topInside, LocationConverter.bottomInside = bottomInside, 
        LocationConverter.rightInside = rightInside, LocationConverter.leftInside = leftInside, 
        LocationConverter.topOutside = topOutside, LocationConverter.bottomOutside = bottomOutside, 
        LocationConverter.rightOutside = rightOutside, LocationConverter.leftOutside = leftOutside, 
        LocationConverter.middleHorizontal = middleHorizontal, LocationConverter.middleVertical = middleVertical;
    })(LocationConverter || (LocationConverter = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var FontProperties = powerbi.visuals.FontProperties, LabelUtils = powerbi.visuals.LabelUtils, Rect = powerbi.visuals.shapes.Rect, shapes = powerbi.visuals.shapes, LabelArrangeGrid = (function() {
        function LabelArrangeGrid(labelDataPointGroups, viewport) {
            this.viewport = viewport;
            for (var maxLabelWidth = 0, maxLabelHeight = 0, _i = 0, labelDataPointGroups_1 = labelDataPointGroups; _i < labelDataPointGroups_1.length; _i++) for (var labelDataPointsGroup = labelDataPointGroups_1[_i], _a = 0, _b = labelDataPointsGroup.labelDataPoints; _a < _b.length; _a++) {
                var labelDataPoint = _b[_a], dataLabelSize = labelDataPoint.labelSize;
                dataLabelSize.width > maxLabelWidth && (maxLabelWidth = dataLabelSize.width), dataLabelSize.height > maxLabelHeight && (maxLabelHeight = dataLabelSize.height);
            }
            0 === maxLabelWidth && (maxLabelWidth = viewport.width), 0 === maxLabelHeight && (maxLabelHeight = viewport.height);
            var cellSize = this.cellSize = {
                width: maxLabelWidth * LabelArrangeGrid.cellSizeMultiplier,
                height: maxLabelHeight * LabelArrangeGrid.cellSizeMultiplier
            };
            this.columnCount = LabelArrangeGrid.getCellCount(cellSize.width, viewport.width, 1, 100), 
            this.rowCount = LabelArrangeGrid.getCellCount(cellSize.height, viewport.height, 1, 100);
            for (var grid = [], i = 0, ilen = this.columnCount; i < ilen; i++) {
                grid[i] = [];
                for (var j = 0, jlen = this.rowCount; j < jlen; j++) grid[i][j] = [];
            }
            this.grid = grid;
        }
        return LabelArrangeGrid.prototype.add = function(rect) {
            for (var containingIndexRect = this.getContainingGridSubsection(rect), x = containingIndexRect.xMin; x < containingIndexRect.xMax; x++) for (var y = containingIndexRect.yMin; y < containingIndexRect.yMax; y++) this.grid[x][y].push(rect);
        }, LabelArrangeGrid.prototype.hasConflict = function(rect) {
            return !this.isWithinGridViewport(rect) || this.hasCollision(rect);
        }, LabelArrangeGrid.prototype.tryPositionInViewport = function(rect) {
            if (this.isCloseToGridViewport(rect)) return this.isWithinGridViewport(rect) || (rect = this.tryMoveInsideViewport(rect)), 
            rect && !this.hasCollision(rect) ? rect : void 0;
        }, LabelArrangeGrid.prototype.hasCollision = function(rect) {
            for (var containingIndexRect = this.getContainingGridSubsection(rect), grid = this.grid, isIntersecting = shapes.Rect.isIntersecting, x = containingIndexRect.xMin; x < containingIndexRect.xMax; x++) for (var y = containingIndexRect.yMin; y < containingIndexRect.yMax; y++) for (var _i = 0, _a = grid[x][y]; _i < _a.length; _i++) {
                var currentGridRect = _a[_i];
                if (isIntersecting(currentGridRect, rect)) return !0;
            }
            return !1;
        }, LabelArrangeGrid.prototype.isWithinGridViewport = function(rect) {
            return rect.left >= 0 && rect.top >= 0 && rect.left + rect.width <= this.viewport.width && rect.top + rect.height <= this.viewport.height;
        }, LabelArrangeGrid.prototype.isCloseToGridViewport = function(rect) {
            return rect.left + rect.width >= 0 - rect.width && rect.top + rect.height >= -rect.height && rect.left <= this.viewport.width + rect.width && rect.top <= this.viewport.height + rect.height;
        }, LabelArrangeGrid.prototype.tryMoveInsideViewport = function(rect) {
            var result = Rect.clone(rect), viewport = this.viewport;
            if (!(rect.width > viewport.width || rect.height > viewport.height)) return rect.left < 0 ? result.left = 0 : rect.left + rect.width > viewport.width && (result.left -= rect.left + rect.width - viewport.width), 
            rect.top < 0 ? result.top = 0 : rect.top + rect.height > viewport.height && (result.top -= rect.top + rect.height - viewport.height), 
            result;
        }, LabelArrangeGrid.prototype.getContainingGridSubsection = function(rect) {
            return {
                xMin: LabelArrangeGrid.bound(Math.floor(rect.left / this.cellSize.width), 0, this.columnCount),
                xMax: LabelArrangeGrid.bound(Math.ceil((rect.left + rect.width) / this.cellSize.width), 0, this.columnCount),
                yMin: LabelArrangeGrid.bound(Math.floor(rect.top / this.cellSize.height), 0, this.rowCount),
                yMax: LabelArrangeGrid.bound(Math.ceil((rect.top + rect.height) / this.cellSize.height), 0, this.rowCount)
            };
        }, LabelArrangeGrid.getCellCount = function(step, length, minCount, maxCount) {
            return LabelArrangeGrid.bound(Math.ceil(length / step), minCount, maxCount);
        }, LabelArrangeGrid.bound = function(value, min, max) {
            return Math.max(Math.min(value, max), min);
        }, LabelArrangeGrid.cellSizeMultiplier = 2, LabelArrangeGrid;
    })();
    powerbi.LabelArrangeGrid = LabelArrangeGrid;
    var LabelLayout = (function() {
        function LabelLayout(options) {
            this.startingOffset = options.startingOffset, this.maximumOffset = options.maximumOffset, 
            null != options.offsetIterationDelta ? this.offsetIterationDelta = options.offsetIterationDelta : this.offsetIterationDelta = LabelLayout.defaultOffsetIterationDelta, 
            null != options.horizontalPadding ? this.horizontalPadding = options.horizontalPadding : this.horizontalPadding = LabelLayout.defaultHorizontalPadding, 
            null != options.verticalPadding ? this.verticalPadding = options.verticalPadding : this.verticalPadding = LabelLayout.defaultVerticalPadding, 
            this.allowLeaderLines = !!options.allowLeaderLines, this.attemptToMoveLabelsIntoViewport = !!options.attemptToMoveLabelsIntoViewport;
        }
        return LabelLayout.prototype.layout = function(arg0, viewport) {
            var labelDataPointsGroups;
            labelDataPointsGroups = this.isOldLabelDataPointGroups(arg0) ? this.upgradeToNewLabelDataPointsGroups(arg0) : arg0;
            for (var labelDataPointsGroupsLayoutInfo = [], _i = 0, labelDataPointsGroups_1 = labelDataPointsGroups; _i < labelDataPointsGroups_1.length; _i++) {
                for (var labelDataPointsGroup = labelDataPointsGroups_1[_i], labelDataPointsLayoutInfo = _.map(labelDataPointsGroup.labelDataPoints, (function(labelDataPoint) {
                    return {
                        labelDataPoint: labelDataPoint
                    };
                })), labelGroupOrientation = labelDataPointsGroup.labelOrientation, _a = 0, labelDataPointsLayoutInfo_1 = labelDataPointsLayoutInfo; _a < labelDataPointsLayoutInfo_1.length; _a++) {
                    var labelDataPointLayoutInfo = labelDataPointsLayoutInfo_1[_a], labelDataPoint = labelDataPointLayoutInfo.labelDataPoint;
                    labelDataPointLayoutInfo.hasBeenRendered = !1;
                    var textWidth = labelDataPoint.textSize.width, textHeight = labelDataPoint.textSize.height;
                    0 === labelGroupOrientation && (textWidth = labelDataPoint.textSize.height, textHeight = labelDataPoint.textSize.width), 
                    labelDataPoint.hasBackground ? labelDataPointLayoutInfo.labelSize = {
                        width: textWidth + 2 * LabelUtils.horizontalLabelBackgroundPadding,
                        height: textHeight + 2 * LabelUtils.verticalLabelBackgroundPadding
                    } : labelDataPointLayoutInfo.labelSize = {
                        width: textWidth,
                        height: textHeight
                    };
                }
                labelDataPointsGroupsLayoutInfo.push({
                    labelDataPoints: labelDataPointsLayoutInfo,
                    maxNumberOfLabels: labelDataPointsGroup.maxNumberOfLabels,
                    labelOrientation: labelDataPointsGroup.labelOrientation
                });
            }
            for (var resultingDataLabels = [], grid = new LabelArrangeGrid(labelDataPointsGroupsLayoutInfo, viewport), _b = 0, labelDataPointsGroupsLayoutInfo_1 = labelDataPointsGroupsLayoutInfo; _b < labelDataPointsGroupsLayoutInfo_1.length; _b++) {
                for (var labelDataPointsGroupLayoutInfo = labelDataPointsGroupsLayoutInfo_1[_b], maxLabelsToRender = labelDataPointsGroupLayoutInfo.maxNumberOfLabels, labelDataPointsLayoutInfo = _.clone(labelDataPointsGroupLayoutInfo.labelDataPoints), preferredLabels = [], labelGroupOrientation = labelDataPointsGroupLayoutInfo.labelOrientation, j = labelDataPointsLayoutInfo.length - 1, localMax = maxLabelsToRender; j >= 0 && localMax > 0; j--) {
                    var labelDataPoint = labelDataPointsLayoutInfo[j].labelDataPoint;
                    labelDataPoint.isPreferred && (preferredLabels.unshift(labelDataPointsLayoutInfo.splice(j, 1)[0]), 
                    localMax--);
                }
                if (preferredLabels.length > 0) {
                    var positionedLabels = this.positionDataLabels(preferredLabels, viewport, grid, maxLabelsToRender, labelGroupOrientation);
                    maxLabelsToRender -= positionedLabels.length, resultingDataLabels = resultingDataLabels.concat(positionedLabels);
                }
                if (labelDataPointsLayoutInfo.length > 0) {
                    var labels = this.positionDataLabels(labelDataPointsLayoutInfo, viewport, grid, maxLabelsToRender, labelGroupOrientation);
                    resultingDataLabels = resultingDataLabels.concat(labels);
                }
            }
            var filtedResultingDataLabels = _.filter(resultingDataLabels, (function(d) {
                return d.isVisible;
            }));
            return this.isOldLabelDataPointGroups(arg0) ? LabelUtils.downgradeToOldLabels(filtedResultingDataLabels) : filtedResultingDataLabels;
        }, LabelLayout.prototype.positionDataLabels = function(labelDataPointsLayoutInfo, viewport, grid, maxLabelsToRender, labelOrientation) {
            for (var drawLeaderLinesOnIteration, resultingDataLabels = [], offsetDelta = this.offsetIterationDelta, currentOffset = this.startingOffset, currentCenteredOffset = 0, labelsRendered = 0; currentOffset <= this.maximumOffset && labelsRendered < maxLabelsToRender; ) {
                drawLeaderLinesOnIteration = this.allowLeaderLines && currentOffset > this.startingOffset;
                for (var _i = 0, labelDataPointsLayoutInfo_2 = labelDataPointsLayoutInfo; _i < labelDataPointsLayoutInfo_2.length; _i++) {
                    var labelDataPointLayoutInfo = labelDataPointsLayoutInfo_2[_i], labelDataPoint = labelDataPointLayoutInfo.labelDataPoint;
                    if (!labelDataPointLayoutInfo.hasBeenRendered) {
                        var dataLabel = void 0;
                        if (dataLabel = 1 === labelDataPoint.parentType ? this.tryPositionForRectPositions(labelDataPointLayoutInfo, grid, currentOffset, currentCenteredOffset, labelOrientation) : this.tryPositionForPointPositions(labelDataPointLayoutInfo, grid, currentOffset, drawLeaderLinesOnIteration, labelOrientation), 
                        dataLabel && (resultingDataLabels.push(dataLabel), labelsRendered++), !(labelsRendered < maxLabelsToRender)) break;
                    }
                }
                currentOffset += offsetDelta, currentCenteredOffset += offsetDelta;
            }
            return resultingDataLabels;
        }, LabelLayout.prototype.tryPositionForRectPositions = function(labelDataPointLayoutInfo, grid, currentLabelOffset, currentCenteredLabelOffset, labelOrientation) {
            for (var _this = this, labelDataPoint = labelDataPointLayoutInfo.labelDataPoint, tryPosition = function(position, adjustForViewport) {
                var isPositionInside = 7 & position;
                if (!isPositionInside || DataLabelRectPositioner.canFitWithinParent(labelDataPointLayoutInfo, _this.horizontalPadding, _this.verticalPadding)) {
                    var resultingBoundingBox = LabelLayout.tryPositionRect(grid, position, labelDataPointLayoutInfo, currentLabelOffset, currentCenteredLabelOffset, adjustForViewport);
                    if (resultingBoundingBox) {
                        if (isPositionInside && !DataLabelRectPositioner.isLabelWithinParent(resultingBoundingBox, labelDataPoint, _this.horizontalPadding, _this.verticalPadding)) return;
                        return grid.add(resultingBoundingBox), labelDataPointLayoutInfo.hasBeenRendered = !0, 
                        {
                            boundingBox: resultingBoundingBox,
                            text: labelDataPoint.text,
                            tooltip: labelDataPoint.tooltip,
                            isVisible: !0,
                            identity: labelDataPoint.identity,
                            key: labelDataPoint.key,
                            fontProperties: FontProperties.inherit(labelDataPoint.fontProperties, {
                                color: isPositionInside ? labelDataPoint.insideFill : labelDataPoint.outsideFill
                            }),
                            selected: !1,
                            hasBackground: !!labelDataPoint.hasBackground,
                            labelOrientation: labelOrientation
                        };
                    }
                }
            }, _i = 0, _a = labelDataPoint.parentShape.validPositions; _i < _a.length; _i++) {
                var position = _a[_i], label = tryPosition(position, !1);
                if (label) return label;
            }
            if (this.attemptToMoveLabelsIntoViewport) for (var _b = 0, _c = labelDataPoint.parentShape.validPositions; _b < _c.length; _b++) {
                var position = _c[_b], label = tryPosition(position, !0);
                if (label) return label;
            }
            return null;
        }, LabelLayout.tryPositionRect = function(grid, position, labelDataPointLayoutInfo, offset, centerOffset, adjustForViewport) {
            var offsetForPosition = offset;
            1 & position && (offsetForPosition = centerOffset);
            var labelRect = DataLabelRectPositioner.getLabelRect(labelDataPointLayoutInfo, position, offsetForPosition), labelDataPoint = labelDataPointLayoutInfo.labelDataPoint;
            if (1 !== position || 0 === labelDataPoint.parentShape.orientation) {
                if (!grid.hasConflict(labelRect)) return labelRect;
                if (adjustForViewport) return grid.tryPositionInViewport(labelRect);
            } else {
                if (!grid.hasConflict(labelRect)) return labelRect;
                if (labelRect = DataLabelRectPositioner.getLabelRect(labelDataPointLayoutInfo, position, -offsetForPosition), 
                !grid.hasConflict(labelRect)) return labelRect;
            }
            return null;
        }, LabelLayout.prototype.tryPositionForPointPositions = function(labelDataPointLayoutInfo, grid, currentLabelOffset, drawLeaderLines, labelOrientation) {
            for (var labelDataPoint = labelDataPointLayoutInfo.labelDataPoint, tryPosition = function(position, parentShape, adjustForViewport) {
                var resultingBoundingBox = LabelLayout.tryPositionPoint(grid, position, labelDataPointLayoutInfo, currentLabelOffset, adjustForViewport);
                if (resultingBoundingBox) return grid.add(resultingBoundingBox), labelDataPointLayoutInfo.hasBeenRendered = !0, 
                {
                    boundingBox: resultingBoundingBox,
                    text: labelDataPoint.text,
                    tooltip: labelDataPoint.tooltip,
                    isVisible: !0,
                    isInsideParent: 256 === position,
                    identity: labelDataPoint.identity,
                    key: labelDataPoint.key,
                    fontProperties: FontProperties.inherit(labelDataPoint.fontProperties, {
                        color: 256 === position ? labelDataPoint.insideFill : labelDataPoint.outsideFill
                    }),
                    selected: !1,
                    leaderLinePoints: drawLeaderLines ? DataLabelPointPositioner.getLabelLeaderLineEndingPoint(resultingBoundingBox, position, parentShape) : null,
                    hasBackground: !!labelDataPoint.hasBackground,
                    labelOrientation: labelOrientation
                };
            }, parentShape = labelDataPoint.parentShape, validPositions = parentShape.validPositions, _i = 0, validPositions_1 = validPositions; _i < validPositions_1.length; _i++) {
                var position = validPositions_1[_i], label = tryPosition(position, parentShape, !1);
                if (label) return label;
            }
            if (this.attemptToMoveLabelsIntoViewport && !_.isEmpty(validPositions)) {
                var label = tryPosition(validPositions[0], parentShape, !0);
                if (label) return label;
            }
            return null;
        }, LabelLayout.tryPositionPoint = function(grid, position, labelDataPointLayoutInfo, offset, adjustForViewport) {
            var labelRect = DataLabelPointPositioner.getLabelRect(labelDataPointLayoutInfo.labelSize, labelDataPointLayoutInfo.labelDataPoint.parentShape, position, offset);
            return grid.hasConflict(labelRect) ? adjustForViewport ? grid.tryPositionInViewport(labelRect) : null : labelRect;
        }, LabelLayout.prototype.isOldLabelDataPoint = function(labelDataPoint) {
            var newLabelDataPoint = labelDataPoint;
            return !newLabelDataPoint.fontProperties;
        }, LabelLayout.prototype.isOldLabelDataPointGroups = function(labelDataPointGroups) {
            var newLabelDataPointGroups = labelDataPointGroups;
            if (0 !== newLabelDataPointGroups.length) {
                var labelDataPointGroup = _.find(newLabelDataPointGroups, (function(labelDataPointGroup) {
                    return !_.isEmpty(labelDataPointGroup.labelDataPoints);
                }));
                if (labelDataPointGroup) {
                    var labelDataPoint = labelDataPointGroup.labelDataPoints[0];
                    return this.isOldLabelDataPoint(labelDataPoint);
                }
            }
            return !1;
        }, LabelLayout.prototype.upgradeToNewLabelDataPointsGroups = function(labelDataPointsGroups) {
            for (var newLabelDataPointsGroups = [], _loop_3 = function(labelDataPointsGroup) {
                var newLabelDataPointsGroup;
                newLabelDataPointsGroup = {
                    labelOrientation: labelDataPointsGroup.labelOrientation,
                    maxNumberOfLabels: labelDataPointsGroup.maxNumberOfLabels,
                    labelDataPoints: []
                }, _.map(labelDataPointsGroup.labelDataPoints, (function(labelDataPoint) {
                    newLabelDataPointsGroup.labelDataPoints.push({
                        textSize: labelDataPoint.textSize,
                        isPreferred: labelDataPoint.isPreferred,
                        parentType: labelDataPoint.parentType,
                        parentShape: labelDataPoint.parentShape,
                        hasBackground: labelDataPoint.hasBackground,
                        text: labelDataPoint.text,
                        tooltip: labelDataPoint.tooltip,
                        insideFill: labelDataPoint.insideFill,
                        outsideFill: labelDataPoint.outsideFill,
                        identity: labelDataPoint.identity,
                        key: labelDataPoint.key,
                        fontProperties: FontProperties.inherit(LabelUtils.defaultFontProperties, {
                            size: labelDataPoint.fontSize ? powerbi.visuals.Units.FontSize.createFromPt(labelDataPoint.fontSize) : void 0
                        }),
                        secondRowText: labelDataPoint.secondRowText,
                        weight: labelDataPoint.weight
                    });
                })), newLabelDataPointsGroups.push(newLabelDataPointsGroup);
            }, _i = 0, labelDataPointsGroups_2 = labelDataPointsGroups; _i < labelDataPointsGroups_2.length; _i++) {
                var labelDataPointsGroup = labelDataPointsGroups_2[_i];
                _loop_3(labelDataPointsGroup);
            }
            return newLabelDataPointsGroups;
        }, LabelLayout.defaultOffsetIterationDelta = 2, LabelLayout.defaultHorizontalPadding = 2, 
        LabelLayout.defaultVerticalPadding = 2, LabelLayout;
    })();
    powerbi.LabelLayout = LabelLayout;
    var DataLabelRectPositioner;
    !(function(DataLabelRectPositioner) {
        function getLabelRect(labelDataPointLayoutInfo, position, offset) {
            var labelDataPoint = labelDataPointLayoutInfo.labelDataPoint, parentRect = labelDataPoint.parentShape;
            if (null != parentRect) switch (position) {
              case 1:
                switch (parentRect.orientation) {
                  case 1:
                  case 2:
                    return DataLabelRectPositioner.middleVertical(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 3:
                  case 4:
                    return DataLabelRectPositioner.middleHorizontal(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 0:                }

              case 2:
                switch (parentRect.orientation) {
                  case 1:
                    return DataLabelRectPositioner.bottomInside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 2:
                    return DataLabelRectPositioner.topInside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 3:
                    return DataLabelRectPositioner.leftInside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 4:
                    return DataLabelRectPositioner.rightInside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 0:                }

              case 4:
                switch (parentRect.orientation) {
                  case 1:
                    return DataLabelRectPositioner.topInside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 2:
                    return DataLabelRectPositioner.bottomInside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 3:
                    return DataLabelRectPositioner.rightInside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 4:
                    return DataLabelRectPositioner.leftInside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 0:                }

              case 8:
                switch (parentRect.orientation) {
                  case 1:
                    return DataLabelRectPositioner.bottomOutside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 2:
                    return DataLabelRectPositioner.topOutside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 3:
                    return DataLabelRectPositioner.leftOutside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 4:
                    return DataLabelRectPositioner.rightOutside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 0:                }

              case 16:
                switch (parentRect.orientation) {
                  case 1:
                    return DataLabelRectPositioner.topOutside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 2:
                    return DataLabelRectPositioner.bottomOutside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 3:
                    return DataLabelRectPositioner.rightOutside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 4:
                    return DataLabelRectPositioner.leftOutside(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 0:                }
            }
            return null;
        }
        function canFitWithinParent(labelDataPointLayoutInfo, horizontalPadding, verticalPadding) {
            var labelDataPoint = labelDataPointLayoutInfo.labelDataPoint;
            return labelDataPointLayoutInfo.labelSize.width + 2 * horizontalPadding < labelDataPoint.parentShape.rect.width || labelDataPointLayoutInfo.labelSize.height + 2 * verticalPadding < labelDataPoint.parentShape.rect.height;
        }
        function isLabelWithinParent(labelRect, labelPoint, horizontalPadding, verticalPadding) {
            var parentRect = labelPoint.parentShape.rect, labelRectWithPadding = shapes.Rect.inflate(labelRect, {
                left: horizontalPadding,
                right: horizontalPadding,
                top: verticalPadding,
                bottom: verticalPadding
            });
            return shapes.Rect.containsPoint(parentRect, {
                x: labelRectWithPadding.left,
                y: labelRectWithPadding.top
            }) && shapes.Rect.containsPoint(parentRect, {
                x: labelRectWithPadding.left + labelRectWithPadding.width,
                y: labelRectWithPadding.top + labelRectWithPadding.height
            });
        }
        function topInside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2,
                top: parentRect.top + offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function bottomInside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2,
                top: parentRect.top + parentRect.height - offset - labelSize.height,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function rightInside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width - labelSize.width - offset,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function leftInside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + offset,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function topOutside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2,
                top: parentRect.top - labelSize.height - offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function bottomOutside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2,
                top: parentRect.top + parentRect.height + offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function rightOutside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width + offset,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function leftOutside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left - labelSize.width - offset,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function middleHorizontal(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2 + offset,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function middleVertical(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2 + offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        DataLabelRectPositioner.getLabelRect = getLabelRect, DataLabelRectPositioner.canFitWithinParent = canFitWithinParent, 
        DataLabelRectPositioner.isLabelWithinParent = isLabelWithinParent, DataLabelRectPositioner.topInside = topInside, 
        DataLabelRectPositioner.bottomInside = bottomInside, DataLabelRectPositioner.rightInside = rightInside, 
        DataLabelRectPositioner.leftInside = leftInside, DataLabelRectPositioner.topOutside = topOutside, 
        DataLabelRectPositioner.bottomOutside = bottomOutside, DataLabelRectPositioner.rightOutside = rightOutside, 
        DataLabelRectPositioner.leftOutside = leftOutside, DataLabelRectPositioner.middleHorizontal = middleHorizontal, 
        DataLabelRectPositioner.middleVertical = middleVertical;
    })(DataLabelRectPositioner = powerbi.DataLabelRectPositioner || (powerbi.DataLabelRectPositioner = {}));
    var DataLabelPointPositioner;
    !(function(DataLabelPointPositioner) {
        function getLabelRect(labelSize, parentPoint, position, offset) {
            switch (position) {
              case 1:
                return DataLabelPointPositioner.above(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 2:
                return DataLabelPointPositioner.below(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 4:
                return DataLabelPointPositioner.left(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 8:
                return DataLabelPointPositioner.right(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 32:
                return DataLabelPointPositioner.belowLeft(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 16:
                return DataLabelPointPositioner.belowRight(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 128:
                return DataLabelPointPositioner.aboveLeft(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 64:
                return DataLabelPointPositioner.aboveRight(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 256:
                return DataLabelPointPositioner.center(labelSize, parentPoint.point);
            }
            return null;
        }
        function above(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x - labelSize.width / 2,
                top: parentPoint.y - offset - labelSize.height,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function below(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x - labelSize.width / 2,
                top: parentPoint.y + offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function left(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x - offset - labelSize.width,
                top: parentPoint.y - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function right(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x + offset,
                top: parentPoint.y - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function belowLeft(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x - DataLabelPointPositioner.sin45 * offset - labelSize.width,
                top: parentPoint.y + DataLabelPointPositioner.cos45 * offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function belowRight(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x + DataLabelPointPositioner.sin45 * offset,
                top: parentPoint.y + DataLabelPointPositioner.cos45 * offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function aboveLeft(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x - DataLabelPointPositioner.sin45 * offset - labelSize.width,
                top: parentPoint.y - DataLabelPointPositioner.cos45 * offset - labelSize.height,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function aboveRight(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x + DataLabelPointPositioner.sin45 * offset,
                top: parentPoint.y - DataLabelPointPositioner.cos45 * offset - labelSize.height,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function center(labelSize, parentPoint) {
            return {
                left: parentPoint.x - labelSize.width / 2,
                top: parentPoint.y - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function getLabelLeaderLineEndingPoint(boundingBox, position, parentShape) {
            var x = boundingBox.left, y = boundingBox.top;
            switch (position) {
              case 1:
                x += boundingBox.width / 2, y += boundingBox.height;
                break;

              case 2:
                x += boundingBox.width / 2;
                break;

              case 4:
                x += boundingBox.width, y += 2 * boundingBox.height / 3;
                break;

              case 8:
                y += 2 * boundingBox.height / 3;
                break;

              case 32:
                x += boundingBox.width, y += boundingBox.height / 2;
                break;

              case 16:
                y += boundingBox.height / 2;
                break;

              case 128:
                x += boundingBox.width, y += boundingBox.height;
                break;

              case 64:
                y += boundingBox.height;
            }
            return [ [ parentShape.point.x, parentShape.point.y ], [ x, y ] ];
        }
        DataLabelPointPositioner.cos45 = Math.cos(45), DataLabelPointPositioner.sin45 = Math.sin(45), 
        DataLabelPointPositioner.getLabelRect = getLabelRect, DataLabelPointPositioner.above = above, 
        DataLabelPointPositioner.below = below, DataLabelPointPositioner.left = left, DataLabelPointPositioner.right = right, 
        DataLabelPointPositioner.belowLeft = belowLeft, DataLabelPointPositioner.belowRight = belowRight, 
        DataLabelPointPositioner.aboveLeft = aboveLeft, DataLabelPointPositioner.aboveRight = aboveRight, 
        DataLabelPointPositioner.center = center, DataLabelPointPositioner.getLabelLeaderLineEndingPoint = getLabelLeaderLineEndingPoint;
    })(DataLabelPointPositioner = powerbi.DataLabelPointPositioner || (powerbi.DataLabelPointPositioner = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var LabelUtils = powerbi.visuals.LabelUtils, DefaultCentroidOffset = 5, OffsetDelta = 10, MaximumOffset = 60, stemExtension = 5, FilledMapLabelLayout = (function() {
        function FilledMapLabelLayout() {}
        return FilledMapLabelLayout.prototype.layout = function(labelDataPoints, viewport, polygonInfoTransform, redrawDataLabels) {
            var labelDataPointsLayoutInfo = _.map(labelDataPoints, (function(labelDataPoint) {
                return {
                    labelDataPoint: labelDataPoint
                };
            }));
            if (redrawDataLabels || void 0 === this.labels) {
                for (var labelDataPointsGroup = {
                    labelDataPoints: labelDataPointsLayoutInfo,
                    maxNumberOfLabels: labelDataPointsLayoutInfo.length
                }, _i = 0, labelDataPointsLayoutInfo_3 = labelDataPointsLayoutInfo; _i < labelDataPointsLayoutInfo_3.length; _i++) {
                    var labelDataPointLayoutInfo = labelDataPointsLayoutInfo_3[_i], labelPoint = labelDataPointLayoutInfo.labelDataPoint;
                    labelDataPointLayoutInfo.labelSize = {
                        width: labelPoint.textSize.width + 2 * LabelUtils.horizontalLabelBackgroundPadding,
                        height: labelPoint.textSize.height + 2 * LabelUtils.verticalLabelBackgroundPadding
                    };
                }
                for (var grid = new powerbi.LabelArrangeGrid([ labelDataPointsGroup ], viewport), resultingDataLabels = [], allPolygons = [], _a = 0, labelDataPoints_3 = labelDataPoints; _a < labelDataPoints_3.length; _a++) {
                    var labelPoint = labelDataPoints_3[_a], polygon = labelPoint.parentShape.polygon;
                    allPolygons.push(polygon), polygon.pixelBoundingRect = polygonInfoTransform.applyToRect(polygon.absoluteBoundingRect());
                }
                for (var shapesgrid = new LabelPolygonArrangeGrid(allPolygons, viewport), _b = 0, labelDataPoints_4 = labelDataPoints; _b < labelDataPoints_4.length; _b++) {
                    var labelPoint = labelDataPoints_4[_b], dataLabel = this.getLabelByPolygonPositions(labelPoint, polygonInfoTransform, grid, shapesgrid);
                    null != dataLabel && resultingDataLabels.push(dataLabel);
                }
                this.labels = resultingDataLabels;
            } else this.updateLabelOffsets(polygonInfoTransform);
            return _.filter(this.labels, (function(d) {
                return d.isVisible;
            }));
        }, FilledMapLabelLayout.prototype.getLabelPolygon = function(mapDataPoint, position, pointPosition, offset) {
            var dataPointSize = {
                width: mapDataPoint.textSize.width,
                height: mapDataPoint.textSize.height
            };
            return this.getLabelBoundingBox(dataPointSize, position, pointPosition, offset);
        }, FilledMapLabelLayout.prototype.getLabelBoundingBox = function(dataPointSize, position, pointPosition, offset) {
            switch (position) {
              case 1:
                return powerbi.DataLabelPointPositioner.above(dataPointSize, pointPosition, offset);

              case 2:
                return powerbi.DataLabelPointPositioner.below(dataPointSize, pointPosition, offset);

              case 4:
                return powerbi.DataLabelPointPositioner.left(dataPointSize, pointPosition, offset);

              case 8:
                return powerbi.DataLabelPointPositioner.right(dataPointSize, pointPosition, offset);

              case 128:
                return powerbi.DataLabelPointPositioner.aboveLeft(dataPointSize, pointPosition, offset);

              case 64:
                return powerbi.DataLabelPointPositioner.aboveRight(dataPointSize, pointPosition, offset);

              case 32:
                return powerbi.DataLabelPointPositioner.belowLeft(dataPointSize, pointPosition, offset);

              case 16:
                return powerbi.DataLabelPointPositioner.belowRight(dataPointSize, pointPosition, offset);

              case 256:
                return powerbi.DataLabelPointPositioner.center(dataPointSize, pointPosition);
            }
            return null;
        }, FilledMapLabelLayout.prototype.getLabelByPolygonPositions = function(labelPoint, polygonInfoTransform, grid, shapesGrid) {
            for (var offset = 0, inverseTransorm = polygonInfoTransform.getInverse(), i = 0; i < 2; i++) {
                1 === i && (offset = DefaultCentroidOffset);
                for (var _i = 0, _a = labelPoint.parentShape.validPositions; _i < _a.length; _i++) {
                    var position = _a[_i], resultingAbsoluteBoundingBox = this.tryPositionForPolygonPosition(position, labelPoint, polygonInfoTransform, offset, inverseTransorm);
                    if ((256 !== position || 0 === i) && resultingAbsoluteBoundingBox) {
                        var resultingBoundingBox = polygonInfoTransform.applyToRect(resultingAbsoluteBoundingBox), dataLabel = {
                            text: labelPoint.text,
                            secondRowText: labelPoint.secondRowText,
                            boundingBox: resultingBoundingBox,
                            isVisible: !0,
                            fontProperties: {
                                color: labelPoint.insideFill
                            },
                            identity: null,
                            selected: !1,
                            hasBackground: !0,
                            textAnchor: "middle",
                            originalPixelOffset: offset,
                            isPlacedInsidePolygon: !0,
                            absoluteBoundingBoxCenter: {
                                x: resultingAbsoluteBoundingBox.left + resultingAbsoluteBoundingBox.width / 2,
                                y: resultingAbsoluteBoundingBox.top + resultingAbsoluteBoundingBox.height / 2
                            }
                        };
                        return dataLabel;
                    }
                }
            }
            for (var currentOffset = 6; currentOffset <= MaximumOffset; ) {
                for (var _b = 0, _c = labelPoint.parentShape.validPositions; _b < _c.length; _b++) {
                    var position = _c[_b];
                    if (256 !== position) {
                        var polygon = labelPoint.parentShape.polygon, pixelCentroid = polygonInfoTransform.applyToPoint(polygon.absoluteCentroid()), resultingAbsolutBoundingBox = this.tryPlaceLabelOutsidePolygon(grid, position, labelPoint, currentOffset, pixelCentroid, shapesGrid, inverseTransorm);
                        if (resultingAbsolutBoundingBox) {
                            var resultingBoundingBox = polygonInfoTransform.applyToRect(resultingAbsolutBoundingBox), dataLabel = {
                                text: labelPoint.text,
                                secondRowText: labelPoint.secondRowText,
                                boundingBox: resultingBoundingBox,
                                isVisible: !0,
                                fontProperties: {
                                    color: labelPoint.insideFill
                                },
                                identity: null,
                                selected: !1,
                                hasBackground: !0,
                                isPlacedInsidePolygon: !1,
                                textAnchor: "middle",
                                originalPixelOffset: currentOffset,
                                originalPosition: position,
                                originalAbsoluteCentroid: polygon.absoluteCentroid(),
                                absoluteBoundingBoxCenter: {
                                    x: resultingAbsolutBoundingBox.left + resultingAbsolutBoundingBox.width / 2,
                                    y: resultingAbsolutBoundingBox.top + resultingAbsolutBoundingBox.height / 2
                                }
                            }, pixelStemSource = this.calculateStemSource(polygonInfoTransform, inverseTransorm, polygon, resultingBoundingBox, position, pixelCentroid);
                            return dataLabel.leaderLinePoints = this.setLeaderLinePoints(pixelStemSource, this.calculateStemDestination(resultingBoundingBox, position)), 
                            dataLabel.absoluteStemSource = inverseTransorm.applyToPoint(pixelStemSource), grid.add(resultingBoundingBox), 
                            dataLabel;
                        }
                    }
                }
                currentOffset += OffsetDelta;
            }
            return null;
        }, FilledMapLabelLayout.prototype.setLeaderLinePoints = function(stemSource, stemDestination) {
            return [ [ stemSource.x, stemSource.y ], [ stemDestination.x, stemDestination.y ] ];
        }, FilledMapLabelLayout.prototype.calculateStemSource = function(polygonInfoTransform, inverseTransorm, polygon, labelBoundingBox, position, pixelCentroid) {
            var absoluteStemSource = polygon.lineIntersectionPoint(polygon.absoluteCentroid(), inverseTransorm.applyToPoint({
                x: labelBoundingBox.left + labelBoundingBox.width / 2,
                y: labelBoundingBox.top + labelBoundingBox.height / 2
            }));
            if (null == absoluteStemSource) return pixelCentroid;
            var stemSource = polygonInfoTransform.applyToPoint(absoluteStemSource);
            switch (position) {
              case 1:
                stemSource.y += stemExtension;
                break;

              case 2:
                stemSource.y -= stemExtension;
                break;

              case 4:
                stemSource.x += stemExtension;
                break;

              case 8:
                stemSource.x -= stemExtension;
                break;

              case 128:
                stemSource.x += stemExtension / powerbi.DataLabelPointPositioner.cos45, stemSource.y += stemExtension / powerbi.DataLabelPointPositioner.sin45;
                break;

              case 64:
                stemSource.x -= stemExtension / powerbi.DataLabelPointPositioner.cos45, stemSource.y += stemExtension / powerbi.DataLabelPointPositioner.sin45;
                break;

              case 32:
                stemSource.x += stemExtension / powerbi.DataLabelPointPositioner.cos45, stemSource.y -= stemExtension / powerbi.DataLabelPointPositioner.sin45;
                break;

              case 16:
                stemSource.x -= stemExtension / powerbi.DataLabelPointPositioner.cos45, stemSource.y -= stemExtension / powerbi.DataLabelPointPositioner.sin45;
                break;

              case 256:            }
            return stemSource;
        }, FilledMapLabelLayout.prototype.calculateStemDestination = function(labelBoundingBox, position) {
            var x, y;
            switch (position) {
              case 1:
                x = labelBoundingBox.left + labelBoundingBox.width / 2, y = labelBoundingBox.top + labelBoundingBox.height;
                break;

              case 2:
                x = labelBoundingBox.left + labelBoundingBox.width / 2, y = labelBoundingBox.top;
                break;

              case 4:
                x = labelBoundingBox.left + labelBoundingBox.width, y = labelBoundingBox.top + labelBoundingBox.height / 2;
                break;

              case 8:
                x = labelBoundingBox.left, y = labelBoundingBox.top + labelBoundingBox.height / 2;
                break;

              case 128:
                x = labelBoundingBox.left + labelBoundingBox.width, y = labelBoundingBox.top + labelBoundingBox.height;
                break;

              case 64:
                x = labelBoundingBox.left, y = labelBoundingBox.top + labelBoundingBox.height;
                break;

              case 32:
                x = labelBoundingBox.left + labelBoundingBox.width, y = labelBoundingBox.top;
                break;

              case 16:
                x = labelBoundingBox.left, y = labelBoundingBox.top;
                break;

              case 256:            }
            return {
                x: x,
                y: y
            };
        }, FilledMapLabelLayout.prototype.tryPositionForPolygonPosition = function(position, labelDataPoint, polygonInfoTransform, offset, inverseTransorm) {
            var polygon = labelDataPoint.parentShape.polygon, pixelCentroid = polygonInfoTransform.applyToPoint(polygon.absoluteCentroid()), labelRect = this.getLabelPolygon(labelDataPoint, position, pixelCentroid, offset), absoluteLabelRect = this.getAbsoluteRectangle(inverseTransorm, labelRect);
            return polygon.contains(absoluteLabelRect) ? absoluteLabelRect : null;
        }, FilledMapLabelLayout.prototype.tryPlaceLabelOutsidePolygon = function(grid, position, labelDataPoint, offset, pixelCentroid, shapesGrid, inverseTransform) {
            var offsetForPosition = offset, labelRect = this.getLabelPolygon(labelDataPoint, position, pixelCentroid, offsetForPosition), otherLabelsConflict = grid.hasConflict(labelRect);
            if (!otherLabelsConflict) {
                var absoluteLabelRect = this.getAbsoluteRectangle(inverseTransform, labelRect);
                if (!shapesGrid.hasConflict(absoluteLabelRect, labelRect)) return absoluteLabelRect;
            }
            return null;
        }, FilledMapLabelLayout.prototype.updateLabelOffsets = function(polygonInfoTransform) {
            for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                var label = _a[_i];
                if (label.isVisible) if (label.isPlacedInsidePolygon) {
                    var newOffset = polygonInfoTransform.applyToPoint(label.absoluteBoundingBoxCenter), xDelta = label.boundingBox.left + label.boundingBox.width / 2 - newOffset.x, yDelta = label.boundingBox.top + label.boundingBox.height / 2 - newOffset.y;
                    label.boundingBox.top -= yDelta, label.boundingBox.left -= xDelta;
                } else {
                    var stemSourcePoint = polygonInfoTransform.applyToPoint(label.absoluteStemSource), pixelCentroid = polygonInfoTransform.applyToPoint(label.originalAbsoluteCentroid);
                    label.boundingBox = this.getLabelBoundingBox({
                        width: label.boundingBox.width,
                        height: label.boundingBox.height
                    }, label.originalPosition, pixelCentroid, label.originalPixelOffset), void 0 !== label.leaderLinePoints && (label.leaderLinePoints = this.setLeaderLinePoints(stemSourcePoint, this.calculateStemDestination(label.boundingBox, label.originalPosition)));
                }
            }
        }, FilledMapLabelLayout.prototype.getAbsoluteRectangle = function(inverseTransorm, rect) {
            return inverseTransorm.applyToRect(rect);
        }, FilledMapLabelLayout;
    })();
    powerbi.FilledMapLabelLayout = FilledMapLabelLayout;
    var LabelPolygonArrangeGrid = (function() {
        function LabelPolygonArrangeGrid(polygons, viewport) {
            this.viewport = viewport;
            for (var maxPolygonWidth = 0, maxPolygonHeight = 0, _i = 0, polygons_1 = polygons; _i < polygons_1.length; _i++) {
                var polygon = polygons_1[_i], polygonSize = polygon.pixelBoundingRect;
                polygonSize.width > maxPolygonWidth && (maxPolygonWidth = polygonSize.width), polygonSize.height > maxPolygonHeight && (maxPolygonHeight = polygonSize.height);
            }
            0 === maxPolygonWidth && (maxPolygonWidth = viewport.width), 0 === maxPolygonHeight && (maxPolygonHeight = viewport.height);
            var cellSize = this.cellSize = {
                width: maxPolygonWidth * LabelPolygonArrangeGrid.cellSizeMultiplier,
                height: maxPolygonHeight * LabelPolygonArrangeGrid.cellSizeMultiplier
            };
            this.columnCount = LabelPolygonArrangeGrid.getCellCount(cellSize.width, viewport.width, 1, 100), 
            this.rowCount = LabelPolygonArrangeGrid.getCellCount(cellSize.height, viewport.height, 1, 100);
            for (var grid = [], i = 0, ilen = this.columnCount; i < ilen; i++) {
                grid[i] = [];
                for (var j = 0, jlen = this.rowCount; j < jlen; j++) grid[i][j] = [];
            }
            this.grid = grid;
            for (var _a = 0, polygons_2 = polygons; _a < polygons_2.length; _a++) {
                var polygon = polygons_2[_a];
                this.add(polygon);
            }
        }
        return LabelPolygonArrangeGrid.prototype.hasConflict = function(absolutLabelRect, pixelLabelRect) {
            for (var containingIndexRect = this.getContainingGridSubsection(pixelLabelRect), grid = this.grid, x = containingIndexRect.xMin; x < containingIndexRect.xMax; x++) for (var y = containingIndexRect.yMin; y < containingIndexRect.yMax; y++) for (var _i = 0, _a = grid[x][y]; _i < _a.length; _i++) {
                var currentPolygon = _a[_i];
                if (currentPolygon.conflicts(absolutLabelRect)) return !0;
            }
            return !1;
        }, LabelPolygonArrangeGrid.prototype.add = function(polygon) {
            for (var containingIndexRect = this.getContainingGridSubsection(polygon.pixelBoundingRect), x = containingIndexRect.xMin; x < containingIndexRect.xMax; x++) for (var y = containingIndexRect.yMin; y < containingIndexRect.yMax; y++) this.grid[x][y].push(polygon);
        }, LabelPolygonArrangeGrid.prototype.getContainingGridSubsection = function(rect) {
            return {
                xMin: LabelPolygonArrangeGrid.bound(Math.floor(rect.left / this.cellSize.width), 0, this.columnCount),
                xMax: LabelPolygonArrangeGrid.bound(Math.ceil((rect.left + rect.width) / this.cellSize.width), 0, this.columnCount),
                yMin: LabelPolygonArrangeGrid.bound(Math.floor(rect.top / this.cellSize.height), 0, this.rowCount),
                yMax: LabelPolygonArrangeGrid.bound(Math.ceil((rect.top + rect.height) / this.cellSize.height), 0, this.rowCount)
            };
        }, LabelPolygonArrangeGrid.getCellCount = function(step, length, minCount, maxCount) {
            return LabelPolygonArrangeGrid.bound(Math.ceil(length / step), minCount, maxCount);
        }, LabelPolygonArrangeGrid.bound = function(value, min, max) {
            return Math.max(Math.min(value, max), min);
        }, LabelPolygonArrangeGrid.cellSizeMultiplier = 2, LabelPolygonArrangeGrid;
    })();
    powerbi.LabelPolygonArrangeGrid = LabelPolygonArrangeGrid;
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var FormattingStrategies;
        !(function(FormattingStrategies) {
            function defaultFormatter(formatStringProp) {
                return function(value, source) {
                    return visuals.converterHelper.formatFromMetadataColumn(value, source, formatStringProp, !0);
                };
            }
            function fallbackBasedOnType(formatStringProp) {
                return function(value, source) {
                    return visuals.converterHelper.formatFromMetadataColumn(value, source, formatStringProp, !1);
                };
            }
            FormattingStrategies.defaultFormatter = defaultFormatter, FormattingStrategies.fallbackBasedOnType = fallbackBasedOnType;
        })(FormattingStrategies = visuals.FormattingStrategies || (visuals.FormattingStrategies = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var DataViewTransform = powerbi.data.DataViewTransform, BeautifiedFormat = {
            "0.00 %;-0.00 %;0.00 %": "Percentage",
            "0.0 %;-0.0 %;0.0 %": "Percentage1"
        }, defaultLocalizedStrings = {
            NullValue: "(Blank)",
            BooleanTrue: "True",
            BooleanFalse: "False",
            NaNValue: "NaN",
            InfinityValue: "+Infinity",
            NegativeInfinityValue: "-Infinity",
            Restatement_Comma: "{0}, {1}",
            Restatement_CompoundAnd: "{0} and {1}",
            DisplayUnitSystem_EAuto_Title: "Auto",
            DisplayUnitSystem_E0_Title: "None",
            DisplayUnitSystem_E3_LabelFormat: "{0}K",
            DisplayUnitSystem_E3_Title: "Thousands",
            DisplayUnitSystem_E6_LabelFormat: "{0}M",
            DisplayUnitSystem_E6_Title: "Millions",
            DisplayUnitSystem_E9_LabelFormat: "{0}bn",
            DisplayUnitSystem_E9_Title: "Billions",
            DisplayUnitSystem_E12_LabelFormat: "{0}T",
            DisplayUnitSystem_E12_Title: "Trillions",
            Percentage: "#,0.##%",
            Percentage1: "#,0.#%",
            RichTextbox_Link_DefaultText: "Link",
            TableTotalLabel: "Total",
            ListJoin_Separator: ", ",
            Tooltip_HighlightedValueDisplayName: "Highlighted",
            Funnel_PercentOfFirst: "Percent of first",
            Funnel_PercentOfPrevious: "Percent of previous",
            Funnel_PercentOfFirst_Highlight: "Percent of first (highlighted)",
            Funnel_PercentOfPrevious_Highlight: "Percent of previous (highlighted)",
            Waterfall_BreakdownDifferenceTooltip: "Difference in {0}",
            Waterfall_OtherLabel: "Other",
            GeotaggingString_Continent: "continent",
            GeotaggingString_Continents: "continents",
            GeotaggingString_Country: "country",
            GeotaggingString_Countries: "countries",
            GeotaggingString_State: "state",
            GeotaggingString_States: "states",
            GeotaggingString_City: "city",
            GeotaggingString_Cities: "cities",
            GeotaggingString_Town: "town",
            GeotaggingString_Towns: "towns",
            GeotaggingString_Province: "province",
            GeotaggingString_Provinces: "provinces",
            GeotaggingString_County: "county",
            GeotaggingString_Counties: "counties",
            GeotaggingString_Village: "village",
            GeotaggingString_Villages: "villages",
            GeotaggingString_Post: "post",
            GeotaggingString_Zip: "zip",
            GeotaggingString_Code: "code",
            GeotaggingString_Place: "place",
            GeotaggingString_Places: "places",
            GeotaggingString_Address: "address",
            GeotaggingString_Addresses: "addresses",
            GeotaggingString_Street: "street",
            GeotaggingString_Streets: "streets",
            GeotaggingString_Longitude: "longitude",
            GeotaggingString_Longitude_Short: "lon",
            GeotaggingString_Longitude_Short2: "long",
            GeotaggingString_Latitude: "latitude",
            GeotaggingString_Latitude_Short: "lat",
            GeotaggingString_PostalCode: "postal code",
            GeotaggingString_PostalCodes: "postal codes",
            GeotaggingString_ZipCode: "zip code",
            GeotaggingString_ZipCodes: "zip codes",
            GeotaggingString_Territory: "territory",
            GeotaggingString_Territories: "territories",
            Waterfall_IncreaseLabel: "Increase",
            Waterfall_DecreaseLabel: "Decrease",
            Waterfall_TotalLabel: "Total",
            Slicer_SelectAll: "Select All",
            Visual_Quarter_Abbreviated: "Qtr {0}"
        }, DefaultVisualHostServices = (function() {
            function DefaultVisualHostServices() {
                this.instanceId = void 0;
            }
            return DefaultVisualHostServices.initialize = function() {
                visuals.valueFormatter.setLocaleOptions(DefaultVisualHostServices.createLocaleOptions()), 
                visuals.TooltipManager.setLocalizedStrings(DefaultVisualHostServices.createTooltipLocaleOptions()), 
                DataViewTransform.setLocalizationOptions(DefaultVisualHostServices.createDataViewTransformLocalizationOptions());
            }, DefaultVisualHostServices.createLocaleOptions = function() {
                return {
                    null: defaultLocalizedStrings.NullValue,
                    true: defaultLocalizedStrings.BooleanTrue,
                    false: defaultLocalizedStrings.BooleanFalse,
                    NaN: defaultLocalizedStrings.NaNValue,
                    infinity: defaultLocalizedStrings.InfinityValue,
                    negativeInfinity: defaultLocalizedStrings.NegativeInfinityValue,
                    beautify: function(format) {
                        return DefaultVisualHostServices.beautify(format);
                    },
                    describe: function(exponent) {
                        return DefaultVisualHostServices.describeUnit(exponent);
                    },
                    restatementComma: defaultLocalizedStrings.Restatement_Comma,
                    restatementCompoundAnd: defaultLocalizedStrings.Restatement_CompoundAnd,
                    restatementCompoundOr: defaultLocalizedStrings.Restatement_CompoundOr
                };
            }, DefaultVisualHostServices.createTooltipLocaleOptions = function() {
                return {
                    highlightedValueDisplayName: defaultLocalizedStrings.Tooltip_HighlightedValueDisplayName
                };
            }, DefaultVisualHostServices.createDataViewTransformLocalizationOptions = function() {
                return {
                    quarterPrefix: defaultLocalizedStrings.Visual_Quarter_Abbreviated
                };
            }, DefaultVisualHostServices.prototype.getLocalizedString = function(stringId) {
                return defaultLocalizedStrings[stringId];
            }, DefaultVisualHostServices.prototype.onDragStart = function() {}, DefaultVisualHostServices.prototype.canSelect = function() {
                return !1;
            }, DefaultVisualHostServices.prototype.onSelecting = function(args) {
                args.action = 0;
            }, DefaultVisualHostServices.prototype.onSelect = function() {}, DefaultVisualHostServices.prototype.onContextMenu = function() {}, 
            DefaultVisualHostServices.prototype.loadMoreData = function() {}, DefaultVisualHostServices.prototype.persistProperties = function(changes) {}, 
            DefaultVisualHostServices.prototype.onCustomSort = function(args) {}, DefaultVisualHostServices.prototype.getViewMode = function() {
                return 0;
            }, DefaultVisualHostServices.prototype.getEditMode = function() {
                return 0;
            }, DefaultVisualHostServices.prototype.setWarnings = function(warnings) {}, DefaultVisualHostServices.prototype.setToolbar = function($toolbar) {}, 
            DefaultVisualHostServices.prototype.shouldRetainSelection = function() {
                return !1;
            }, DefaultVisualHostServices.prototype.geocoder = function() {
                return visuals.services.createGeocoder();
            }, DefaultVisualHostServices.prototype.geolocation = function() {
                return visuals.services.createGeolocation();
            }, DefaultVisualHostServices.prototype.promiseFactory = function() {
                return powerbi.createJQueryPromiseFactory();
            }, DefaultVisualHostServices.prototype.visualCapabilitiesChanged = function() {}, 
            DefaultVisualHostServices.prototype.analyzeFilter = function(options) {
                return {
                    isNotFilter: !1,
                    selectedIdentities: [],
                    filter: void 0,
                    defaultValue: void 0
                };
            }, DefaultVisualHostServices.prototype.getIdentityDisplayNames = function(dentities) {}, 
            DefaultVisualHostServices.prototype.setIdentityDisplayNames = function(displayNamesIdentityPairs) {}, 
            DefaultVisualHostServices.prototype.tooltips = function() {}, DefaultVisualHostServices.prototype.telemetry = function() {}, 
            DefaultVisualHostServices.prototype.locale = function() {
                return navigator.language;
            }, DefaultVisualHostServices.prototype.allowInteractions = function() {
                return !0;
            }, DefaultVisualHostServices.prototype.loader = function() {
                return powerbi.createModuleLoader(this.promiseFactory(), _.noop, null);
            }, DefaultVisualHostServices.prototype.getUIComponentFactory = function() {
                return null;
            }, DefaultVisualHostServices.prototype.applyJsonFilter = function(filter, objectName, propertyName, action) {}, 
            DefaultVisualHostServices.prototype.launchUrl = function(url) {}, DefaultVisualHostServices.prototype.refreshHostData = function() {}, 
            DefaultVisualHostServices.beautify = function(format) {
                var key = BeautifiedFormat[format];
                return key ? defaultLocalizedStrings[key] || format : format;
            }, DefaultVisualHostServices.describeUnit = function(exponent) {
                var exponentLookup = exponent === -1 ? "Auto" : exponent.toString(), title = defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_Title"], format = exponent <= 0 ? "{0}" : defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_LabelFormat"];
                if (title || format) return {
                    title: title,
                    format: format
                };
            }, DefaultVisualHostServices;
        })();
        visuals.DefaultVisualHostServices = DefaultVisualHostServices, visuals.defaultVisualHostServices = new DefaultVisualHostServices();
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function createInteractivityService(hostServices) {
            return new InteractivityService(hostServices);
        }
        function appendClearCatcher(selection) {
            return selection.append("rect").classed("clearCatcher", !0).attr({
                width: "100%",
                height: "100%"
            });
        }
        function isCategoryColumnSelected(propertyId, categories, idx) {
            return null != categories.objects && categories.objects[idx] && powerbi.DataViewObjects.getValue(categories.objects[idx], propertyId);
        }
        function dataHasSelection(data) {
            for (var i = 0, ilen = data.length; i < ilen; i++) if (data[i].selected) return !0;
            return !1;
        }
        var ArrayExtensions = jsCommon.ArrayExtensions, SemanticFilter = powerbi.data.SemanticFilter;
        visuals.createInteractivityService = createInteractivityService, visuals.appendClearCatcher = appendClearCatcher, 
        visuals.isCategoryColumnSelected = isCategoryColumnSelected, visuals.dataHasSelection = dataHasSelection;
        var InteractivityService = (function() {
            function InteractivityService(hostServices) {
                this.renderSelectionInVisual = _.noop, this.renderSelectionInLegend = _.noop, this.renderSelectionInLabels = _.noop, 
                this.selectedIds = [], this.isInvertedSelectionMode = !1, this.dataPointObjectName = "dataPoint", 
                this.hostService = hostServices;
            }
            return InteractivityService.prototype.bind = function(dataPoints, behavior, behaviorOptions, options) {
                var _this = this;
                options && options.overrideSelectionFromData && this.takeSelectionStateFromDataPoints(dataPoints), 
                options ? (options.isLegend ? (this.selectableLegendDataPoints = dataPoints, this.renderSelectionInLegend = function() {
                    return behavior.renderSelection(_this.legendHasSelection());
                }) : options.isLabels ? (this.selectableLabelsDataPoints = dataPoints, this.renderSelectionInLabels = function() {
                    return behavior.renderSelection(_this.labelsHasSelection());
                }) : (this.selectableDataPoints = dataPoints, this.renderSelectionInVisual = function() {
                    return behavior.renderSelection(_this.hasSelection());
                }), null != options.hasSelectionOverride && (this.hasSelectionOverride = options.hasSelectionOverride), 
                options.slicerValueHandler && (this.slicerValueHandler = options.slicerValueHandler)) : (this.selectableDataPoints = dataPoints, 
                this.renderSelectionInVisual = function() {
                    return behavior.renderSelection(_this.hasSelection());
                }), this.behavior = behavior, behavior.bindEvents(behaviorOptions, this), this.syncSelectionState();
            }, InteractivityService.prototype.clearSelection = function() {
                return this.slicerValueHandler && this.slicerValueHandler.getDefaultValue() && this.useDefaultValue ? void (this.isInvertedSelectionMode = !1) : (this.hasSelectionOverride = void 0, 
                ArrayExtensions.clear(this.selectedIds), this.isInvertedSelectionMode = !1, this.applyToAllSelectableDataPoints((function(dataPoint) {
                    return dataPoint.selected = !1;
                })), void this.renderAll());
            }, InteractivityService.prototype.applySelectionStateToData = function(dataPoints) {
                for (var _i = 0, dataPoints_2 = dataPoints; _i < dataPoints_2.length; _i++) {
                    var dataPoint = dataPoints_2[_i];
                    dataPoint.selected = InteractivityService.checkDatapointAgainstSelectedIds(dataPoint, this.selectedIds);
                }
                return this.hasSelection();
            }, InteractivityService.prototype.hasSelection = function() {
                return this.selectedIds.length > 0;
            }, InteractivityService.prototype.legendHasSelection = function() {
                return !!this.selectableLegendDataPoints && dataHasSelection(this.selectableLegendDataPoints);
            }, InteractivityService.prototype.labelsHasSelection = function() {
                return !!this.selectableLabelsDataPoints && dataHasSelection(this.selectableLabelsDataPoints);
            }, InteractivityService.prototype.isSelectionModeInverted = function() {
                return this.isInvertedSelectionMode;
            }, InteractivityService.prototype.setSelectionModeInverted = function(inverted) {
                this.isInvertedSelectionMode = inverted;
            }, InteractivityService.prototype.handleSelection = function(dataPoint, multiSelect, position) {
                if (dataPoint) {
                    var selectingSelectorsByColumn;
                    dataPoint.specificIdentity ? selectingSelectorsByColumn = dataPoint.specificIdentity.getSelectorsByColumn() : dataPoint.identity && (selectingSelectorsByColumn = dataPoint.identity.getSelectorsByColumn());
                    var selectingArgs = {
                        visualObjects: [ {
                            objectName: this.dataPointObjectName,
                            selectorsByColumn: selectingSelectorsByColumn
                        } ],
                        position: position
                    };
                    _.isEmpty(selectingSelectorsByColumn) || this.hostService.onSelecting(selectingArgs), 
                    0 !== selectingArgs.action && null != selectingArgs.action || (dataPoint.identity ? (this.useDefaultValue = !1, 
                    this.select(dataPoint, multiSelect), this.sendSelectionToHost(), this.renderAll()) : this.handleClearSelection());
                }
            }, InteractivityService.prototype.handleMultipleSelection = function(dataPoints, mode) {
                this.useDefaultValue = !1, this.selectMultiple(dataPoints, mode), this.sendSelectionToHost(), 
                this.renderAll();
            }, InteractivityService.prototype.handleContextMenu = function(dataPoint, point) {
                this.sendContextMenuToHost(dataPoint, point);
            }, InteractivityService.prototype.handleClearSelection = function() {
                this.useDefaultValue = !0, this.clearSelection(), this.sendSelectionToHost();
            }, InteractivityService.prototype.toggleSelectionModeInversion = function() {
                return this.useDefaultValue = !1, this.isInvertedSelectionMode = !this.isInvertedSelectionMode, 
                ArrayExtensions.clear(this.selectedIds), this.applyToAllSelectableDataPoints((function(dataPoint) {
                    return dataPoint.selected = !1;
                })), this.sendSelectionToHost(), this.isInvertedSelectionMode ? this.syncSelectionStateInverted() : this.syncSelectionState(), 
                this.renderAll(), this.isInvertedSelectionMode;
            }, InteractivityService.prototype.persistSelectionFilter = function(filterPropertyIdentifier) {
                this.hostService.persistProperties(InteractivityService.createChangeForFilterProperty(filterPropertyIdentifier, this.getFilterFromSelectors()));
            }, InteractivityService.prototype.persistSelfFilter = function(filterPropertyIdentifier, selfFilter) {
                this.hostService.persistProperties(InteractivityService.createChangeForFilterProperty(filterPropertyIdentifier, selfFilter));
            }, InteractivityService.prototype.setDefaultValueMode = function(useDefaultValue) {
                this.useDefaultValue = useDefaultValue;
            }, InteractivityService.prototype.isDefaultValueEnabled = function() {
                return this.useDefaultValue;
            }, InteractivityService.prototype.renderAll = function() {
                this.renderSelectionInVisual(), this.renderSelectionInLegend(), this.renderSelectionInLabels();
            }, InteractivityService.prototype.selectMultiple = function(dataPoints, mode) {
                0 !== mode && 2 !== mode || (this.selectedIds = []);
                for (var _i = 0, dataPoints_3 = dataPoints; _i < dataPoints_3.length; _i++) {
                    var dataPoint = dataPoints_3[_i], id = dataPoint.identity;
                    id.highlight || (1 === mode || 0 === mode ? (dataPoint.selected = !0, this.selectedIds.push(id)) : 3 === mode ? (dataPoint.selected = !1, 
                    this.removeId(id)) : 2 === mode && dataPoint.selected && this.selectedIds.push(id));
                }
                if (2 === mode) for (var _a = 0, _b = this.selectableDataPoints; _a < _b.length; _a++) {
                    var dataPoint = _b[_a];
                    _.contains(this.selectedIds, dataPoint.identity) || (dataPoint.selected = !1);
                }
                this.syncSelectionState();
            }, InteractivityService.prototype.select = function(d, multiSelect) {
                if (this.isInvertedSelectionMode) return this.selectInverted(d, multiSelect);
                d.identity && d.identity.highlight && (d = _.find(this.selectableDataPoints, (function(dp) {
                    return !dp.identity.highlight && d.identity.includes(dp.identity, !0);
                })));
                var id = d.identity;
                if (id) {
                    var selected = !d.selected || !multiSelect && this.selectedIds.length > 1;
                    multiSelect && (selected ? (d.selected = !0, this.selectedIds.push(id), id.hasIdentity() ? this.removeSelectionIdsWithOnlyMeasures() : this.removeSelectionIdsExceptOnlyMeasures()) : (d.selected = !1, 
                    this.removeId(id))), multiSelect && this.hostService.canSelect(this.createSelectEventArgs(this.selectedIds)) || (this.clearSelection(), 
                    selected && (d.selected = !0, this.selectedIds.push(id))), this.syncSelectionState();
                }
            }, InteractivityService.prototype.selectInverted = function(d, multiSelect) {
                var wasSelected = d.selected, id = d.identity;
                d.selected = !wasSelected, wasSelected ? this.removeId(id) : (this.selectedIds.push(id), 
                id.hasIdentity() ? this.removeSelectionIdsWithOnlyMeasures() : this.removeSelectionIdsExceptOnlyMeasures()), 
                this.syncSelectionStateInverted();
            }, InteractivityService.prototype.removeId = function(toRemove) {
                for (var selectedIds = this.selectedIds, i = selectedIds.length - 1; i > -1; i--) {
                    var currentId = selectedIds[i];
                    toRemove.includes(currentId) && selectedIds.splice(i, 1);
                }
            }, InteractivityService.prototype.getFilterFromSelectors = function() {
                var selectors = [];
                this.selectedIds.length > 0 && (selectors = _.chain(this.selectedIds).filter((function(value) {
                    return value.hasIdentity();
                })).map((function(value) {
                    return value.getSelector();
                })).value());
                var filter = powerbi.data.Selector.filterFromSelector(selectors, this.isInvertedSelectionMode);
                return this.slicerValueHandler && this.slicerValueHandler.getDefaultValue() && (this.useDefaultValue === !0 ? filter = SemanticFilter.getDefaultValueFilter(this.slicerValueHandler.getIdentityFields()) : _.isEmpty(selectors) && (filter = SemanticFilter.getAnyValueFilter(this.slicerValueHandler.getIdentityFields()))), 
                filter;
            }, InteractivityService.createChangeForFilterProperty = function(filterPropertyIdentifier, filter) {
                var properties = {}, instance = {
                    objectName: filterPropertyIdentifier.objectName,
                    selector: void 0,
                    properties: properties
                };
                return null == filter ? (properties[filterPropertyIdentifier.propertyName] = {}, 
                {
                    remove: [ instance ]
                }) : (properties[filterPropertyIdentifier.propertyName] = filter, {
                    merge: [ instance ]
                });
            }, InteractivityService.prototype.sendContextMenuToHost = function(dataPoint, position) {
                var host = this.hostService;
                if (host.onContextMenu) {
                    var dataPointIdentity;
                    dataPoint.specificIdentity ? dataPointIdentity = dataPoint.specificIdentity : dataPoint.identity && (dataPointIdentity = dataPoint.identity);
                    var identities;
                    identities = !dataPointIdentity || _.size(this.selectedIds) > 1 && _.any(this.selectedIds, (function(selectedId) {
                        return selectedId.equals(dataPointIdentity);
                    })) ? this.selectedIds : [ dataPointIdentity ];
                    for (var selectorsByColumn = [], _i = 0, identities_1 = identities; _i < identities_1.length; _i++) {
                        var identity = identities_1[_i], selectors = identity.getSelectorsByColumn();
                        _.isEmpty(selectors) || selectorsByColumn.push(selectors);
                    }
                    if (!_.isEmpty(selectorsByColumn)) {
                        var args = {
                            data: selectorsByColumn,
                            position: position
                        };
                        host.onContextMenu(args);
                    }
                }
            }, InteractivityService.prototype.sendSelectionToHost = function() {
                var host = this.hostService;
                if (host.onSelect) {
                    var selectArgs = this.createSelectEventArgs(this.selectedIds);
                    host.onSelect(selectArgs);
                }
            }, InteractivityService.prototype.createSelectEventArgs = function(selectedIds) {
                var shouldInsertSelectors = !1, dataPointObjectName = this.dataPointObjectName;
                _.isEmpty(selectedIds) || (shouldInsertSelectors = selectedIds[0].getSelector() && !selectedIds[0].getSelectorsByColumn());
                var selectedIdsWithIdentities = _.chain(selectedIds).filter((function(value) {
                    return value.hasIdentity();
                })), selectEventArgs = {
                    visualObjects: selectedIdsWithIdentities.map((function(value) {
                        return {
                            objectName: dataPointObjectName,
                            selectorsByColumn: value.getSelectorsByColumn()
                        };
                    })).value()
                };
                return shouldInsertSelectors && (selectEventArgs.selectors = selectedIdsWithIdentities.map((function(value) {
                    return value.getSelector();
                })).value()), selectEventArgs;
            }, InteractivityService.prototype.takeSelectionStateFromDataPoints = function(dataPoints) {
                var selectedIds = this.selectedIds;
                ArrayExtensions.clear(selectedIds);
                for (var _i = 0, dataPoints_4 = dataPoints; _i < dataPoints_4.length; _i++) {
                    var dataPoint = dataPoints_4[_i];
                    dataPoint.selected && selectedIds.push(dataPoint.identity);
                }
            }, InteractivityService.prototype.syncSelectionState = function() {
                if (this.isInvertedSelectionMode) return this.syncSelectionStateInverted();
                var selectedIds = this.selectedIds, selectableDataPoints = this.selectableDataPoints, selectableLegendDataPoints = this.selectableLegendDataPoints, selectableLabelsDataPoints = this.selectableLabelsDataPoints, foundMatchingId = !1;
                if (selectableDataPoints || selectableLegendDataPoints) {
                    if (selectableDataPoints && InteractivityService.updateSelectableDataPointsBySelectedIds(selectableDataPoints, selectedIds) && (foundMatchingId = !0), 
                    selectableLegendDataPoints && InteractivityService.updateSelectableDataPointsBySelectedIds(selectableLegendDataPoints, selectedIds) && (foundMatchingId = !0), 
                    selectableLabelsDataPoints) for (var labelsDataPoint_1, i = 0, ilen = selectableLabelsDataPoints.length; i < ilen; i++) labelsDataPoint_1 = selectableLabelsDataPoints[i], 
                    selectedIds.some((function(value) {
                        return value.includes(labelsDataPoint_1.identity);
                    })) ? labelsDataPoint_1.selected = !0 : labelsDataPoint_1.selected = !1;
                    !foundMatchingId && selectedIds.length > 0 && (this.clearSelection(), this.sendSelectionToHost());
                }
            }, InteractivityService.prototype.syncSelectionStateInverted = function() {
                var selectedIds = this.selectedIds, selectableDataPoints = this.selectableDataPoints;
                if (selectableDataPoints) if (0 === selectedIds.length) for (var _i = 0, selectableDataPoints_1 = selectableDataPoints; _i < selectableDataPoints_1.length; _i++) {
                    var dataPoint_1 = selectableDataPoints_1[_i];
                    dataPoint_1.selected = !1;
                } else for (var _a = 0, selectableDataPoints_2 = selectableDataPoints; _a < selectableDataPoints_2.length; _a++) {
                    var dataPoint = selectableDataPoints_2[_a];
                    selectedIds.some((function(value) {
                        return value.includes(dataPoint.identity);
                    })) ? dataPoint.selected = !0 : dataPoint.selected && (dataPoint.selected = !1);
                }
            }, InteractivityService.prototype.applyToAllSelectableDataPoints = function(action) {
                var selectableDataPoints = this.selectableDataPoints, selectableLegendDataPoints = this.selectableLegendDataPoints, selectableLabelsDataPoints = this.selectableLabelsDataPoints;
                if (selectableDataPoints) for (var _i = 0, selectableDataPoints_3 = selectableDataPoints; _i < selectableDataPoints_3.length; _i++) {
                    var dataPoint = selectableDataPoints_3[_i];
                    action(dataPoint);
                }
                if (selectableLegendDataPoints) for (var _a = 0, selectableLegendDataPoints_1 = selectableLegendDataPoints; _a < selectableLegendDataPoints_1.length; _a++) {
                    var dataPoint = selectableLegendDataPoints_1[_a];
                    action(dataPoint);
                }
                if (selectableLabelsDataPoints) for (var _b = 0, selectableLabelsDataPoints_1 = selectableLabelsDataPoints; _b < selectableLabelsDataPoints_1.length; _b++) {
                    var dataPoint = selectableLabelsDataPoints_1[_b];
                    action(dataPoint);
                }
            }, InteractivityService.updateSelectableDataPointsBySelectedIds = function(selectableDataPoints, selectedIds) {
                for (var foundMatchingId = !1, _i = 0, selectableDataPoints_4 = selectableDataPoints; _i < selectableDataPoints_4.length; _i++) {
                    var dataPoint = selectableDataPoints_4[_i];
                    dataPoint.selected = InteractivityService.checkDatapointAgainstSelectedIds(dataPoint, selectedIds), 
                    dataPoint.selected && (foundMatchingId = !0);
                }
                return foundMatchingId;
            }, InteractivityService.checkDatapointAgainstSelectedIds = function(datapoint, selectedIds) {
                return selectedIds.some((function(value) {
                    return value.includes(datapoint.identity);
                }));
            }, InteractivityService.prototype.removeSelectionIdsWithOnlyMeasures = function() {
                this.selectedIds = _.filter(this.selectedIds, (function(identity) {
                    return identity.hasIdentity();
                }));
            }, InteractivityService.prototype.removeSelectionIdsExceptOnlyMeasures = function() {
                this.selectedIds = _.filter(this.selectedIds, (function(identity) {
                    return !identity.hasIdentity();
                }));
            }, InteractivityService;
        })();
        visuals.InteractivityService = InteractivityService;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var services;
        !(function(services) {
            function createGeocoder() {
                return new DefaultGeocoder();
            }
            function isNotUpHierarchyMatchCode(matchCodes) {
                return !_.any(matchCodes, (function(code) {
                    return "UpHierarchy" === code;
                }));
            }
            function isCategoryType(value) {
                return services.CategoryTypeArray.indexOf(value) > -1;
            }
            function getBestLocation(data, quality) {
                var resources = data && !_.isEmpty(data.resourceSets) && data.resourceSets[0].resources;
                if (Array.isArray(resources)) {
                    var bestLocation = _.chain(resources).map((function(location) {
                        return {
                            location: location,
                            value: quality(location)
                        };
                    })).filter((function(locationValue) {
                        return locationValue.value >= 0;
                    })).max((function(locationValue) {
                        return locationValue.value;
                    })).value().location;
                    return bestLocation;
                }
            }
            function mapLocalesForBing(locale) {
                switch (locale.toLowerCase()) {
                  case "fr":
                    return "fr-FR";

                  case "de":
                    return "de-DE";

                  case "da":
                    return "da-DK";

                  case "es":
                    return "es-ES";

                  case "it":
                    return "it-IT";

                  default:
                    return locale;
                }
            }
            function resetStaticGeocoderState(cache) {
                void 0 !== cache && GeocodeCacheManager.reset(cache), GeocodeQueueManager.reset(), 
                CategoryToBingEntity.reset(), CategoryToBingEntityGeodata.reset();
            }
            var CategoryTypes = visuals.MapUtil.CategoryTypes, JQueryPromiseState = powerbi.JQueryPromiseState, Settings = visuals.MapUtil.Settings;
            services.createGeocoder = createGeocoder;
            var BingMapsGeocoder = (function() {
                function BingMapsGeocoder() {}
                return BingMapsGeocoder.prototype.geocode = function(location, options) {
                    return this.geocodeCore("geocode", new GeocodeQuery(this.bingGeocodingUrl(), this.bingSpatialDataUrl(), location), options);
                }, BingMapsGeocoder.prototype.geocodeBoundary = function(latitude, longitude, category, levelOfDetail, maxGeoData, options) {
                    return void 0 === category && (category = ""), void 0 === levelOfDetail && (levelOfDetail = 2), 
                    void 0 === maxGeoData && (maxGeoData = 3), this.geocodeCore("geocodeBoundary", new GeocodeBoundaryQuery(this.bingGeocodingUrl(), this.bingSpatialDataUrl(), latitude, longitude, category, levelOfDetail, maxGeoData, options && options.entityType), options);
                }, BingMapsGeocoder.prototype.geocodePoint = function(latitude, longitude, entities, options) {
                    return this.geocodeCore("geocodePoint", new GeocodePointQuery(this.bingGeocodingUrl(), this.bingSpatialDataUrl(), latitude, longitude, entities), options);
                }, BingMapsGeocoder.prototype.tryGeocodeImmediate = function(location) {
                    return GeocodeCacheManager.getCoordinates(new GeocodeQuery(this.bingGeocodingUrl(), this.bingSpatialDataUrl(), location).key);
                }, BingMapsGeocoder.prototype.tryGeocodeBoundaryImmediate = function(latitude, longitude, category, levelOfDetail, maxGeoData, entityType) {
                    void 0 === maxGeoData && (maxGeoData = 3);
                    var result = GeocodeCacheManager.getCoordinates(new GeocodeBoundaryQuery(this.bingGeocodingUrl(), this.bingSpatialDataUrl(), latitude, longitude, category, levelOfDetail, maxGeoData, entityType).key);
                    return result;
                }, BingMapsGeocoder.prototype.geocodeCore = function(queueName, geocodeQuery, options) {
                    var result = GeocodeCacheManager.getCoordinates(geocodeQuery.getKey()), deferred = $.Deferred();
                    if (result) deferred.resolve(result); else {
                        var item_1 = {
                            query: geocodeQuery,
                            deferred: deferred
                        };
                        GeocodeQueueManager.enqueue(queueName, item_1), options && options.timeout && options.timeout.finally((function() {
                            item_1.deferred.state() === JQueryPromiseState[JQueryPromiseState.pending] && item_1.deferred.reject();
                        }));
                    }
                    return deferred;
                }, BingMapsGeocoder;
            })();
            services.BingMapsGeocoder = BingMapsGeocoder;
            var DefaultGeocoder = (function(_super) {
                function DefaultGeocoder() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(DefaultGeocoder, _super), DefaultGeocoder.prototype.bingSpatialDataUrl = function() {
                    return "https://platform.bing.com/geo/spatial/v1/public/Geodata";
                }, DefaultGeocoder.prototype.bingGeocodingUrl = function() {
                    return "https://dev.virtualearth.net/REST/v1/Locations";
                }, DefaultGeocoder;
            })(BingMapsGeocoder);
            services.DefaultGeocoder = DefaultGeocoder, services.safeCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-", 
            services.BingAjaxCall = $.ajax, services.CategoryTypeArray = [ CategoryTypes.Address, CategoryTypes.City, CategoryTypes.Continent, CategoryTypes.CountryRegion, CategoryTypes.County, CategoryTypes.Longitude, CategoryTypes.Latitude, CategoryTypes.Place, CategoryTypes.PostalCode, CategoryTypes.StateOrProvince ], 
            services.isCategoryType = isCategoryType, services.BingEntities = {
                Continent: "Continent",
                Sovereign: "Sovereign",
                CountryRegion: "CountryRegion",
                AdminDivision1: "AdminDivision1",
                AdminDivision2: "AdminDivision2",
                PopulatedPlace: "PopulatedPlace",
                Postcode: "Postcode",
                Postcode1: "Postcode1",
                Neighborhood: "Neighborhood",
                Address: "Address"
            };
            var CategoryToBingEntity, BingEntitiesToRequestParameter = {
                Sovereign: "countryRegion",
                CountryRegion: "countryRegion",
                AdminDivision1: "adminDistrict",
                AdminDivision2: "adminDistrict",
                PopulatedPlace: "locality",
                Postcode: "postalCode",
                Postcode1: "postalCode",
                Neighborhood: "locality",
                Address: "addressLine"
            };
            !(function(CategoryToBingEntity) {
                function reset() {
                    categoryToBingEntity = void 0;
                }
                function find(category) {
                    return categoryToBingEntity || (categoryToBingEntity = {}, categoryToBingEntity[CategoryTypes.Continent.toLowerCase()] = services.BingEntities.Continent, 
                    categoryToBingEntity[CategoryTypes.CountryRegion.toLowerCase()] = services.BingEntities.Sovereign, 
                    categoryToBingEntity[CategoryTypes.StateOrProvince.toLowerCase()] = services.BingEntities.AdminDivision1, 
                    categoryToBingEntity[CategoryTypes.County.toLowerCase()] = services.BingEntities.AdminDivision2, 
                    categoryToBingEntity[CategoryTypes.City.toLowerCase()] = services.BingEntities.PopulatedPlace, 
                    categoryToBingEntity[CategoryTypes.PostalCode.toLowerCase()] = services.BingEntities.Postcode, 
                    categoryToBingEntity[CategoryTypes.Address.toLowerCase()] = services.BingEntities.Address), 
                    category && categoryToBingEntity[category.toLowerCase()] || "";
                }
                var categoryToBingEntity;
                CategoryToBingEntity.reset = reset, CategoryToBingEntity.find = find;
            })(CategoryToBingEntity || (CategoryToBingEntity = {}));
            var CategoryToBingEntityGeodata;
            !(function(CategoryToBingEntityGeodata) {
                function reset() {
                    categoryToBingEntityGeodata = void 0;
                }
                function find(category) {
                    return categoryToBingEntityGeodata || (categoryToBingEntityGeodata = {}, categoryToBingEntityGeodata[CategoryTypes.CountryRegion.toLowerCase()] = services.BingEntities.CountryRegion, 
                    categoryToBingEntityGeodata[CategoryTypes.StateOrProvince.toLowerCase()] = services.BingEntities.AdminDivision1, 
                    categoryToBingEntityGeodata[CategoryTypes.County.toLowerCase()] = services.BingEntities.AdminDivision2, 
                    categoryToBingEntityGeodata[CategoryTypes.City.toLowerCase()] = services.BingEntities.PopulatedPlace, 
                    categoryToBingEntityGeodata[CategoryTypes.PostalCode.toLowerCase()] = services.BingEntities.Postcode1), 
                    category && categoryToBingEntityGeodata[category.toLowerCase()] || "";
                }
                var categoryToBingEntityGeodata;
                CategoryToBingEntityGeodata.reset = reset, CategoryToBingEntityGeodata.find = find;
            })(CategoryToBingEntityGeodata || (CategoryToBingEntityGeodata = {}));
            var GeocodeQueryBase = (function() {
                function GeocodeQueryBase(bingGeocodingUrl, bingSpatialDataUrl, location, version) {
                    this.bingGeocodingUrl = bingGeocodingUrl, this.bingSpatialDataUrl = bingSpatialDataUrl, 
                    this.location = location, this.makeKey(version);
                }
                return GeocodeQueryBase.prototype.makeKey = function(version) {
                    var locationKey = _.map(this.location.components, (function(component) {
                        return (component.query || "") + "/" + (component.category || "");
                    })).join("&");
                    this.key = ("G:" + this.bingGeocodingUrl + "; S:" + this.bingSpatialDataUrl + ";" + locationKey).toLowerCase(), 
                    version && (this.key = "V:" + version + "-" + this.key);
                }, GeocodeQueryBase.prototype.getKey = function() {
                    return this.key;
                }, GeocodeQueryBase;
            })();
            services.GeocodeQueryBase = GeocodeQueryBase;
            var GeocodeQuery = (function(_super) {
                function GeocodeQuery(bingGeocodingUrl, bingSpatialDataUrl, location) {
                    return _super.call(this, bingGeocodingUrl, bingSpatialDataUrl, location, GeocodeQuery.CacheKeyVersion) || this;
                }
                return __extends(GeocodeQuery, _super), GeocodeQuery.prototype.getBingEntity = function() {
                    return CategoryToBingEntity.find(_.last(this.location.components).category);
                }, GeocodeQuery.prototype.getUrl = function() {
                    var parameters = {
                        key: Settings.BingKey
                    }, components = this.getGeocodingParameters();
                    if (_.any(components, (function(component) {
                        return !component.key;
                    }))) parameters.q = _.chain(components).map((function(component) {
                        return component.value;
                    })).filter((function(value) {
                        return value;
                    })).reverse().value().join(", "); else for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {
                        var component = components_1[_i], value = component.value;
                        if (!value) return;
                        var key = component.key;
                        "adminDistrict" === key && parameters[key] ? parameters[key] = component.value + ", " + parameters[key] : parameters[key] = component.value;
                    }
                    var cultureName = navigator.userLanguage || navigator.language;
                    return cultureName = mapLocalesForBing(cultureName), cultureName && (parameters.c = cultureName), 
                    parameters.maxRes = "20", parameters.include = "ciso2", jsCommon.UrlUtils.setQueryParameters(this.bingGeocodingUrl, parameters, !0);
                }, GeocodeQuery.prototype.getGeocodingParameters = function() {
                    var locationComponents = this.location.components;
                    locationComponents.length >= 2 && locationComponents[0].category === CategoryTypes.Continent && locationComponents[1].category === CategoryTypes.CountryRegion && (locationComponents = _.rest(locationComponents));
                    var components = _.map(locationComponents, (function(component) {
                        var entityType = CategoryToBingEntity.find(component.category), key = entityType && BingEntitiesToRequestParameter[entityType] || "", value = component.query;
                        return entityType === services.BingEntities.Sovereign && value && (value = GeocodeQuery.Iso3166Substitutions[value] || value), 
                        {
                            key: key,
                            value: value
                        };
                    }));
                    return components;
                }, GeocodeQuery.prototype.isGeneralQuery = function() {
                    return _.any(this.getGeocodingParameters(), (function(component) {
                        return !component.key;
                    }));
                }, GeocodeQuery.prototype.getResult = function(data) {
                    var _this = this, isGeneralQuery = this.isGeneralQuery(), location = getBestLocation(data, (function(location) {
                        return _this.locationQuality(location, isGeneralQuery);
                    }));
                    if (location) {
                        var pointData = location.point.coordinates, coordinates = {
                            latitude: pointData && pointData[0],
                            longitude: pointData && pointData[1],
                            entityType: location.entityType
                        };
                        return {
                            coordinates: coordinates
                        };
                    }
                    return {
                        error: new Error("Geocode result is empty.")
                    };
                }, GeocodeQuery.prototype.locationQuality = function(location, isGeneralQuery) {
                    if (!isGeneralQuery && location.matchCodes && !isNotUpHierarchyMatchCode(location.matchCodes)) return -1;
                    var quality = 0;
                    if (1 === this.location.components.length && this.location.components[0].category === CategoryTypes.CountryRegion) {
                        var iso2 = location.address && location.address.countryRegionIso2;
                        if (iso2) {
                            var queryString = this.location.components[0].query.toLowerCase();
                            2 === queryString.length && queryString === iso2.toLowerCase() && (quality += 2);
                        }
                    }
                    return location.entityType && location.entityType.toLowerCase() === this.getBingEntity().toLowerCase() && (quality += 1), 
                    quality;
                }, GeocodeQuery.CacheKeyVersion = "2", GeocodeQuery.Iso3166Substitutions = {
                    BI: "Burundi",
                    BQ: "Bonaire",
                    SJ: "Svalbard",
                    BES: "Bonaire",
                    NGA: "Nigeria",
                    NAM: "Namibia",
                    SJM: "Svalbard",
                    MAF: "MF"
                }, GeocodeQuery;
            })(GeocodeQueryBase);
            services.GeocodeQuery = GeocodeQuery;
            var GeocodePointQuery = (function(_super) {
                function GeocodePointQuery(bingGeocodingUrl, bingSpatialDataUrl, latitude, longitude, entities) {
                    var _this = _super.call(this, bingGeocodingUrl, bingSpatialDataUrl, {
                        components: [ {
                            query: [ latitude, longitude ].join(),
                            category: "Point"
                        } ]
                    }) || this;
                    return _this.latitude = latitude, _this.longitude = longitude, _this.entities = entities, 
                    _this;
                }
                return __extends(GeocodePointQuery, _super), GeocodePointQuery.prototype.getKey = function() {
                    return null;
                }, GeocodePointQuery.prototype.getUrl = function() {
                    var urlAndQuery = jsCommon.UrlUtils.splitUrlAndQuery(this.bingGeocodingUrl), url = _.endsWith(urlAndQuery.baseUrl, "/") ? urlAndQuery.baseUrl : urlAndQuery.baseUrl + "/";
                    url += [ this.latitude, this.longitude ].join();
                    var parameters = {
                        key: Settings.BingKey,
                        include: "ciso2"
                    };
                    return _.isEmpty(this.entities) || (parameters.includeEntityTypes = this.entities.join()), 
                    jsCommon.UrlUtils.setQueryParameters(url, parameters, !0);
                }, GeocodePointQuery.prototype.getResult = function(data) {
                    var _this = this, location = getBestLocation(data, (function(location) {
                        return _this.entities.indexOf(location.entityType) === -1 ? 0 : 1;
                    }));
                    if (location) {
                        var pointData = location.point.coordinates, addressData = location.address || {}, name_1 = location.name, coordinates = {
                            latitude: pointData[0],
                            longitude: pointData[1],
                            addressLine: addressData.addressLine,
                            locality: addressData.locality,
                            neighborhood: addressData.neighborhood,
                            adminDistrict: addressData.adminDistrict,
                            adminDistrict2: addressData.adminDistrict2,
                            formattedAddress: addressData.formattedAddress,
                            postalCode: addressData.postalCode,
                            countryRegionIso2: addressData.countryRegionIso2,
                            countryRegion: addressData.countryRegion,
                            landmark: addressData.landmark,
                            name: name_1
                        };
                        return {
                            coordinates: coordinates
                        };
                    }
                    return {
                        coordinates: null
                    };
                }, GeocodePointQuery;
            })(GeocodeQueryBase);
            services.GeocodePointQuery = GeocodePointQuery;
            var GeocodeBoundaryQuery = (function(_super) {
                function GeocodeBoundaryQuery(bingGeocodingUrl, bingSpatialDataUrl, latitude, longitude, category, levelOfDetail, maxGeoData, entityType) {
                    void 0 === maxGeoData && (maxGeoData = 3);
                    var _this = _super.call(this, bingGeocodingUrl, bingSpatialDataUrl, {
                        components: [ {
                            query: [ latitude, longitude, levelOfDetail, maxGeoData ].join(",") + (entityType !== CategoryToBingEntityGeodata.find(category) ? "," + entityType : ""),
                            category: category
                        } ]
                    }) || this;
                    return _this.latitude = latitude, _this.longitude = longitude, _this.levelOfDetail = levelOfDetail, 
                    _this.maxGeoData = maxGeoData, _this.entityType = entityType, _this;
                }
                return __extends(GeocodeBoundaryQuery, _super), GeocodeBoundaryQuery.prototype.getBingEntity = function() {
                    return CategoryToBingEntityGeodata.find(_.last(this.location.components).category);
                }, GeocodeBoundaryQuery.prototype.getUrl = function() {
                    var parameters = {
                        key: Settings.BingKey,
                        $format: "json"
                    }, entityType = this.entityType || this.getBingEntity();
                    if (!entityType) return null;
                    var cultureName = navigator.userLanguage || navigator.language;
                    cultureName = mapLocalesForBing(cultureName);
                    var cultures = cultureName.split("-"), data = [ this.latitude, this.longitude, this.levelOfDetail, "'" + entityType + "'", 1, 0, "'" + cultureName + "'" ];
                    return cultures.length > 1 && data.push("'" + cultures[1] + "'"), parameters.SpatialFilter = "GetBoundary(" + data.join(", ") + ")", 
                    jsCommon.UrlUtils.setQueryParameters(this.bingSpatialDataUrl, parameters, !0);
                }, GeocodeBoundaryQuery.prototype.getResult = function(data) {
                    var result = data;
                    if (result && result.d && Array.isArray(result.d.results) && result.d.results.length > 0) {
                        var entity = result.d.results[0], primitives = entity.Primitives;
                        if (primitives && primitives.length > 0) {
                            var coordinates = {
                                latitude: this.latitude,
                                longitude: this.longitude,
                                locations: []
                            };
                            primitives.sort((function(a, b) {
                                return a.Shape.length < b.Shape.length ? 1 : a.Shape.length > b.Shape.length ? -1 : 0;
                            }));
                            for (var maxGeoData = Math.min(primitives.length, this.maxGeoData), i = 0; i < maxGeoData; i++) for (var ringStr = primitives[i].Shape, ringArray = ringStr.split(","), j = 1; j < ringArray.length; j++) coordinates.locations.push({
                                nativeBing: ringArray[j]
                            });
                            return {
                                coordinates: coordinates
                            };
                        }
                    }
                    return {
                        error: new Error("Geocode result is empty.")
                    };
                }, GeocodeBoundaryQuery;
            })(GeocodeQueryBase);
            services.GeocodeBoundaryQuery = GeocodeBoundaryQuery;
            var GeocodeQueueManager;
            !(function(GeocodeQueueManager) {
                function ensureQueue(queueName) {
                    var queue = queues[queueName];
                    return queue || (queues[queueName] = queue = new GeocodeQueue()), queue;
                }
                function enqueue(queueName, item) {
                    ensureQueue(queueName).enqueue(item);
                }
                function reset() {
                    for (var queueName in queues) queues[queueName].reset();
                    queues = {};
                }
                var queues = {};
                GeocodeQueueManager.enqueue = enqueue, GeocodeQueueManager.reset = reset;
            })(GeocodeQueueManager || (GeocodeQueueManager = {}));
            var GeocodeQueue = (function() {
                function GeocodeQueue() {
                    this.entries = [], this.activeEntries = [], this.inDequeue = !1;
                }
                return GeocodeQueue.prototype.reset = function() {
                    var timeout = this.dequeueTimeout;
                    timeout && (this.dequeueTimeout = void 0, clearTimeout(timeout));
                    for (var _i = 0, _a = this.entries.concat(this.activeEntries); _i < _a.length; _i++) {
                        var entry = _a[_i];
                        this.cancel(entry);
                    }
                    this.entries = [], this.activeEntries = [];
                }, GeocodeQueue.prototype.enqueue = function(item) {
                    var _this = this, entry = {
                        item: item
                    };
                    this.entries.push(entry), item.deferred.always((function() {
                        _this.cancel(entry);
                    })), this.dequeue();
                }, GeocodeQueue.prototype.dequeue = function() {
                    if (!this.inDequeue && !this.dequeueTimeout) try {
                        for (this.inDequeue = !0; 0 !== this.entries.length && this.activeEntries.length < Settings.MaxBingRequest; ) {
                            var entry = this.entries.shift();
                            entry.isCompleted || this.makeRequest(entry);
                        }
                    } finally {
                        this.inDequeue = !1;
                    }
                }, GeocodeQueue.prototype.scheduleDequeue = function() {
                    var _this = this;
                    this.dequeueTimeout || 0 === this.entries.length || (this.dequeueTimeout = setTimeout((function() {
                        _this.dequeueTimeout = void 0, _this.dequeue();
                    })));
                }, GeocodeQueue.prototype.cancel = function(entry) {
                    if (!entry.jsonp) {
                        var request = entry.request;
                        request && (entry.request = null, request.abort());
                    }
                    this.complete(entry, {
                        error: new Error("cancelled")
                    });
                }, GeocodeQueue.prototype.complete = function(entry, result) {
                    entry.isCompleted || (entry.isCompleted = !0, entry.item.deferred.state() === JQueryPromiseState[JQueryPromiseState.pending] && (!result || result.error ? entry.item.deferred.reject(result && result.error || new Error("cancelled")) : (result.coordinates && GeocodeCacheManager.registerCoordinates(entry.item.query.getKey(), result.coordinates), 
                    entry.item.deferred.resolve(result.coordinates)))), this.scheduleDequeue();
                }, GeocodeQueue.prototype.makeRequest = function(entry) {
                    var _this = this, result = GeocodeCacheManager.getCoordinates(entry.item.query.getKey());
                    if (result) return void this.complete(entry, {
                        coordinates: result
                    });
                    var config = {
                        type: "GET",
                        dataType: "jsonp",
                        jsonp: "jsonp"
                    };
                    entry.jsonp = !0;
                    var url = entry.item.query.getUrl();
                    return url ? (this.activeEntries.push(entry), entry.request = services.BingAjaxCall(url, config), 
                    entry.request.always((function() {
                        _.pull(_this.activeEntries, entry);
                    })), void entry.request.then((function(data) {
                        entry.request = null;
                        try {
                            _this.complete(entry, entry.item.query.getResult(data));
                        } catch (error) {
                            _this.complete(entry, {
                                error: error
                            });
                        }
                    }), (function(error) {
                        entry.request = null, _this.complete(entry, {
                            error: new Error(error && error.statusText || "cancelled")
                        });
                    }))) : void this.complete(entry, {
                        error: new Error("Unsupported query.")
                    });
                }, GeocodeQueue;
            })();
            services.GeocodeQueue = GeocodeQueue;
            var GeocodeCacheManager;
            !(function(GeocodeCacheManager) {
                function ensureCache() {
                    return geocodingCache || (geocodingCache = services.createGeocodingCache(Settings.MaxCacheSize, Settings.MaxCacheSizeOverflow)), 
                    geocodingCache;
                }
                function getCoordinates(key) {
                    if (key) return ensureCache().getCoordinates(key);
                }
                function registerCoordinates(key, coordinates) {
                    if (key) return ensureCache().registerCoordinates(key, coordinates);
                }
                function reset(cache) {
                    geocodingCache = cache;
                }
                var geocodingCache;
                GeocodeCacheManager.getCoordinates = getCoordinates, GeocodeCacheManager.registerCoordinates = registerCoordinates, 
                GeocodeCacheManager.reset = reset;
            })(GeocodeCacheManager || (GeocodeCacheManager = {})), services.resetStaticGeocoderState = resetStaticGeocoderState, 
            resetStaticGeocoderState();
        })(services = visuals.services || (visuals.services = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var services;
        !(function(services) {
            function createGeocodingCache(maxCacheSize, maxCacheSizeOverflow, localStorageService) {
                return localStorageService || (localStorageService = powerbi.localStorageService), 
                new GeocodingCache(maxCacheSize, maxCacheSizeOverflow, localStorageService);
            }
            services.createGeocodingCache = createGeocodingCache;
            var GeocodingCache = (function() {
                function GeocodingCache(maxCacheSize, maxCacheSizeOverflow, localStorageService) {
                    this.geocodeCache = {}, this.geocodeCacheCount = 0, this.maxCacheSize = maxCacheSize, 
                    this.maxCacheSizeOverflow = maxCacheSizeOverflow, this.localStorageService = localStorageService;
                }
                return GeocodingCache.prototype.getCoordinates = function(key) {
                    var pair = this.geocodeCache[key];
                    return pair ? (++pair.hitCount, pair.coordinate) : (pair = this.localStorageService.getData(key), 
                    pair ? (this.registerInMemory(key, pair.coordinate), pair.coordinate) : void 0);
                }, GeocodingCache.prototype.registerCoordinates = function(key, coordinate) {
                    this.registerInMemory(key, coordinate), this.registerInStorage(key, coordinate);
                }, GeocodingCache.prototype.registerInMemory = function(key, coordinate) {
                    var geocodeCache = this.geocodeCache, maxCacheSize = this.maxCacheSize, maxCacheCount = maxCacheSize + this.maxCacheSizeOverflow;
                    if (this.geocodeCacheCount >= maxCacheCount) {
                        var keys = Object.keys(geocodeCache), cacheSize = keys.length;
                        if (keys.sort((function(a, b) {
                            var cachedA = geocodeCache[a], cachedB = geocodeCache[b], ca = cachedA ? cachedA.hitCount : 0, cb = cachedB ? cachedB.hitCount : 0;
                            return ca < cb ? 1 : ca > cb ? -1 : 0;
                        })), cacheSize < 2 * maxCacheCount) for (var i = maxCacheSize; i < cacheSize; i++) geocodeCache[keys[i]] = void 0; else {
                            for (var newGeocodeCache = {}, i = 0; i < maxCacheSize; ++i) newGeocodeCache[keys[i]] = geocodeCache[keys[i]];
                            geocodeCache = this.geocodeCache = newGeocodeCache;
                        }
                        this.geocodeCacheCount = maxCacheSize;
                    }
                    geocodeCache[key] = {
                        coordinate: coordinate,
                        hitCount: 1
                    }, ++this.geocodeCacheCount;
                }, GeocodingCache.prototype.registerInStorage = function(key, coordinate) {
                    this.localStorageService.setData(key, {
                        coordinate: coordinate
                    });
                }, GeocodingCache;
            })();
        })(services = visuals.services || (visuals.services = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var services;
        !(function(services) {
            function createGeolocation() {
                return new GeolocationService();
            }
            services.createGeolocation = createGeolocation;
            var GeolocationService = (function() {
                function GeolocationService() {
                    this.webGeolocation = navigator.geolocation;
                }
                return GeolocationService.prototype.watchPosition = function(successCallback, errorCallback) {
                    return this.webGeolocation.watchPosition((function(position) {
                        successCallback(position);
                    }), (function(error) {
                        null != errorCallback && errorCallback(error);
                    }));
                }, GeolocationService.prototype.clearWatch = function(watchId) {
                    this.webGeolocation.clearWatch(watchId);
                }, GeolocationService.prototype.getCurrentPosition = function(successCallback, errorCallback) {
                    this.webGeolocation.getCurrentPosition((function(position) {
                        successCallback(position);
                    }), (function(error) {
                        null != errorCallback && errorCallback(error);
                    }));
                }, GeolocationService;
            })();
        })(services = visuals.services || (visuals.services = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {})), powerbi.define("PowerBIVisuals/visuals/services/tooltipEventsRegistrator", (function(imports) {
    var TouchUtils = powerbi.visuals.TouchUtils, TooltipsNamespace = ".tooltip", MouseOverEventName = "mouseover" + TooltipsNamespace, MouseOutEventName = "mouseout" + TooltipsNamespace, MouseMoveEventName = "mousemove" + TooltipsNamespace, TouchStartEventName = TouchUtils.touchStartEventName() + TooltipsNamespace, TouchEndEventName = TouchUtils.touchEndEventName() + TooltipsNamespace, TouchMoveEventName = TouchUtils.touchMoveEventName() + TooltipsNamespace, TooltipServiceDelegate = (function() {
        function TooltipServiceDelegate(visualHostTooltipService, handleTouchDelay) {
            this.visualHostTooltipService = visualHostTooltipService, this.handleTouchDelay = handleTouchDelay, 
            this.rootNode = this.visualHostTooltipService.container();
        }
        return TooltipServiceDelegate.prototype.showTooltip = function(isTouchEvent, isPointerEvent, getTooltipInfo, getDataPointIdentity, loadTooltipData, hideBeforeShowAttempt, hideTooltipOnNoData) {
            hideBeforeShowAttempt && this.visualHostTooltipService.hide({
                isTouchEvent: isTouchEvent,
                immediately: !0
            });
            var tooltipEventArgs = this.makeTooltipEventArgs(isPointerEvent, isTouchEvent);
            if (tooltipEventArgs) {
                var tooltipInfo;
                if (loadTooltipData && (tooltipInfo = getTooltipInfo(tooltipEventArgs), null == tooltipInfo)) return void (hideTooltipOnNoData && this.visualHostTooltipService.hide({
                    isTouchEvent: !1,
                    immediately: !1
                }));
                var selectionId = getDataPointIdentity(tooltipEventArgs), identity = selectionId && selectionId.getSelectorsByColumn();
                this.visualHostTooltipService.show({
                    coordinates: tooltipEventArgs.coordinates,
                    isTouchEvent: isTouchEvent,
                    dataItems: tooltipInfo,
                    identities: identity ? [ identity ] : []
                });
            }
        }, TooltipServiceDelegate.prototype.hideTooltip = function(isTouchEvent) {
            this.visualHostTooltipService.hide({
                isTouchEvent: isTouchEvent,
                immediately: !1
            });
        }, TooltipServiceDelegate.prototype.getCoordinates = function(node, isPointerEvent) {
            var coordinates;
            if (isPointerEvent) {
                for (var e = d3.event, s = void 0; s = e.sourceEvent; ) e = s;
                var rect = node.getBoundingClientRect();
                coordinates = [ e.clientX - rect.left - node.clientLeft, e.clientY - rect.top - node.clientTop ];
            } else {
                var touchCoordinates = d3.touches(node);
                touchCoordinates && touchCoordinates.length > 0 && (coordinates = touchCoordinates[0]);
            }
            return coordinates;
        }, TooltipServiceDelegate.prototype.makeTooltipEventArgs = function(isPointerEvent, isTouchEvent) {
            var eventCoordinates = this.getCoordinates(this.rootNode, isPointerEvent), target = isTouchEvent ? document.elementFromPoint(eventCoordinates[0], eventCoordinates[1]) : d3.event.target, data = d3.select(target).datum(), elementCoordinates = this.getCoordinates(target, isPointerEvent), tooltipEventArgs = {
                data: data,
                coordinates: eventCoordinates,
                elementCoordinates: elementCoordinates,
                context: target,
                isTouchEvent: isTouchEvent
            };
            return tooltipEventArgs;
        }, TooltipServiceDelegate.prototype.startTimeout = function() {
            var _this = this;
            this.handleTouchTimeoutId && clearTimeout(this.handleTouchTimeoutId), this.handleTouchTimeoutId = setTimeout((function() {
                _this.handleTouchTimeoutId = void 0;
            }), this.handleTouchDelay);
        }, TooltipServiceDelegate.prototype.canDisplayTooltip = function(d3Event) {
            var canDisplay = !0, mouseEvent = d3Event;
            if (void 0 !== mouseEvent.buttons) {
                var hasMouseButtonPressed = 0 !== mouseEvent.buttons;
                canDisplay = !hasMouseButtonPressed;
            }
            return canDisplay = canDisplay && null == this.handleTouchTimeoutId;
        }, TooltipServiceDelegate;
    })(), DefaultTooltipEventsRegistrator = (function() {
        function DefaultTooltipEventsRegistrator(tooltipServiceDelegate) {
            this.tooltipServiceDelegate = tooltipServiceDelegate;
        }
        return DefaultTooltipEventsRegistrator.prototype.unregisterEvents = function(selection) {
            selection.on(TooltipsNamespace, null);
        }, DefaultTooltipEventsRegistrator.prototype.registerEvents = function(selection, getTooltipInfo, getDataPointIdentity, reloadTooltipDataOnMouseMove) {
            this.registerMouseEvents(selection, getTooltipInfo, getDataPointIdentity, reloadTooltipDataOnMouseMove), 
            this.registerTouchEvents(selection, getTooltipInfo, getDataPointIdentity);
        }, DefaultTooltipEventsRegistrator.prototype.registerMouseEvents = function(selection, getTooltipInfo, getDataPointIdentity, reloadTooltipDataOnMouseMove) {
            var _this = this;
            selection.on(MouseOverEventName, (function() {
                _this.tooltipServiceDelegate.canDisplayTooltip(d3.event) && _this.tooltipServiceDelegate.showTooltip(!1, !0, getTooltipInfo, getDataPointIdentity, !0, !0, !1);
            })), selection.on(MouseOutEventName, (function() {
                _this.tooltipServiceDelegate.hideTooltip(!1);
            })), selection.on(MouseMoveEventName, (function() {
                _this.tooltipServiceDelegate.canDisplayTooltip(d3.event) && _this.tooltipServiceDelegate.showTooltip(!1, !0, getTooltipInfo, getDataPointIdentity, reloadTooltipDataOnMouseMove, !1, !0);
            }));
        }, DefaultTooltipEventsRegistrator.prototype.registerTouchEvents = function(selection, getTooltipInfo, getDataPointIdentity) {
            var _this = this, isPointerEvent = TouchUtils.usePointerEvents();
            selection.on(TouchStartEventName, (function() {
                _this.tooltipServiceDelegate.showTooltip(!0, isPointerEvent, getTooltipInfo, getDataPointIdentity, !0, !0, !1);
            })), selection.on(TouchEndEventName, (function() {
                _this.tooltipServiceDelegate.hideTooltip(!0), _this.tooltipServiceDelegate.startTimeout();
            }));
        }, DefaultTooltipEventsRegistrator;
    })(), TouchScreenOptimizedTooltipEventsRegistrator = (function(_super) {
        function TouchScreenOptimizedTooltipEventsRegistrator(tooltipServiceDelegate, visualHostTooltipService) {
            var _this = _super.call(this, tooltipServiceDelegate) || this;
            return _this.visualHostTooltipService = visualHostTooltipService, _this;
        }
        return __extends(TouchScreenOptimizedTooltipEventsRegistrator, _super), TouchScreenOptimizedTooltipEventsRegistrator.prototype.unregisterEvents = function(selection) {
            selection.on(TooltipsNamespace, null);
        }, TouchScreenOptimizedTooltipEventsRegistrator.prototype.registerEvents = function(selection, getTooltipInfo, getDataPointIdentity, reloadTooltipDataOnMouseMove) {
            this.registerMouseEvents(selection, getTooltipInfo, getDataPointIdentity, reloadTooltipDataOnMouseMove), 
            this.registerTouchEvents(selection, getTooltipInfo, getDataPointIdentity);
        }, TouchScreenOptimizedTooltipEventsRegistrator.prototype.registerTouchEvents = function(selection, getTooltipInfo, getDataPointIdentity) {
            var _this = this, isPointerEvent = TouchUtils.usePointerEvents();
            selection.on(TouchStartEventName, (function() {
                _this.tooltipServiceDelegate.showTooltip(!0, isPointerEvent, getTooltipInfo, getDataPointIdentity, !0, !1, !1);
            })), selection.on(TouchEndEventName, (function() {
                _this.visualHostTooltipService.visible() || _this.visualHostTooltipService.hide({
                    isTouchEvent: !0,
                    immediately: !0
                }), _this.tooltipServiceDelegate.startTimeout();
            })), selection.on(TouchMoveEventName, (function() {
                _this.tooltipServiceDelegate.showTooltip(!0, isPointerEvent, getTooltipInfo, getDataPointIdentity, !0, !1, !1);
            }));
        }, TouchScreenOptimizedTooltipEventsRegistrator;
    })(DefaultTooltipEventsRegistrator);
    return {
        create: function(options) {
            var tooltipServiceDelegate = new TooltipServiceDelegate(options.visualHostTooltipService, options.handleTouchDelay);
            return options.touchScreenOptimizedTooltips ? new TouchScreenOptimizedTooltipEventsRegistrator(tooltipServiceDelegate, options.visualHostTooltipService) : new DefaultTooltipEventsRegistrator(tooltipServiceDelegate);
        }
    };
}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function createTooltipService(hostServices, touchScreenOptimizedTooltips) {
            var visualHostTooltipService = hostServices.tooltips();
            return visualHostTooltipService ? new TooltipService(visualHostTooltipService, touchScreenOptimizedTooltips) : new LegacyTooltipService();
        }
        visuals.createTooltipService = createTooltipService;
        var DefaultHandleTouchDelay = 1e3, TooltipService = (function() {
            function TooltipService(visualHostTooltipService, touchScreenOptimizedTooltips, handleTouchDelay) {
                void 0 === handleTouchDelay && (handleTouchDelay = DefaultHandleTouchDelay), this.visualHostTooltipService = visualHostTooltipService, 
                this.tooltipEventsRegistrator = powerbi.requireSync("PowerBIVisuals/visuals/services/tooltipEventsRegistrator").create({
                    touchScreenOptimizedTooltips: touchScreenOptimizedTooltips,
                    visualHostTooltipService: this.visualHostTooltipService,
                    handleTouchDelay: handleTouchDelay
                });
            }
            return TooltipService.prototype.addTooltip = function(selection, getTooltipInfoDelegate, getDataPointIdentity, reloadTooltipDataOnMouseMove) {
                this.visualHostTooltipService.enabled() && this.tooltipEventsRegistrator.registerEvents(selection, getTooltipInfoDelegate, getDataPointIdentity, reloadTooltipDataOnMouseMove);
            }, TooltipService.prototype.removeTooltips = function(selection) {
                this.tooltipEventsRegistrator.unregisterEvents(selection);
            }, TooltipService.prototype.hide = function() {
                this.visualHostTooltipService.hide({
                    immediately: !0,
                    isTouchEvent: !1
                });
            }, TooltipService;
        })();
        visuals.TooltipService = TooltipService;
        var LegacyTooltipService = (function() {
            function LegacyTooltipService() {}
            return LegacyTooltipService.prototype.addTooltip = function(selection, getTooltipInfoDelegate, getDataPointIdentity, reloadTooltipDataOnMouseMove) {
                visuals.TooltipManager.addTooltip(selection, getTooltipInfoDelegate, reloadTooltipDataOnMouseMove);
            }, LegacyTooltipService.prototype.removeTooltips = function(selection) {}, LegacyTooltipService.prototype.hide = function() {
                visuals.TooltipManager.ToolTipInstance.hide();
            }, LegacyTooltipService;
        })();
        visuals.LegacyTooltipService = LegacyTooltipService;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var CardUtil;
        !(function(CardUtil) {
            CardUtil.DefaultStyle = {
                card: {
                    maxFontSize: 200
                },
                label: {
                    textSize: 12,
                    fontFamily: visuals.LabelUtils.StandardFontFamily,
                    color: "#a6a6a6",
                    paddingTop: 8
                },
                value: {
                    textSize: 27,
                    color: "#333333",
                    fontFamily: visuals.Font.Family.regularSecondary.css
                }
            };
        })(CardUtil = visuals.CardUtil || (visuals.CardUtil = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            function fire(eventHandlers, eventArgs) {
                if (eventHandlers) for (var _i = 0, eventHandlers_1 = eventHandlers; _i < eventHandlers_1.length; _i++) {
                    var h = eventHandlers_1[_i];
                    h(eventArgs);
                }
            }
            var UNSELECTABLE_CLASS_NAME = "unselectable";
            controls.fire = fire;
            var ScrollbarButton = (function() {
                function ScrollbarButton(owner, direction) {
                    this._owner = owner, this._direction = direction, this._timerHandle = void 0, this.createView();
                    var that = this;
                    this._element.addEventListener("mousedown", (function(e) {
                        that.onMouseDown(e);
                    })), $(this._element).addClass(UNSELECTABLE_CLASS_NAME), $(this._svg).addClass(UNSELECTABLE_CLASS_NAME), 
                    $(this._polygon).addClass(UNSELECTABLE_CLASS_NAME);
                }
                return Object.defineProperty(ScrollbarButton.prototype, "element", {
                    get: function() {
                        return this._element;
                    },
                    enumerable: !0,
                    configurable: !0
                }), ScrollbarButton.prototype.createView = function() {
                    var svgns = "http://www.w3.org/2000/svg";
                    this._polygon = document.createElementNS(svgns, "polygon"), this._polygon.setAttributeNS(null, "points", "3,3 6,3 13,8 6,13 3,13 10,8"), 
                    this._polygon.setAttributeNS(null, "fill", ScrollbarButton.ARROW_COLOR), this._svg = document.createElementNS(svgns, "svg");
                    var svgStyle = this._svg.style;
                    svgStyle.position = "absolute", svgStyle.left = "0px", svgStyle.top = "0px", this._svg.appendChild(this._polygon), 
                    this._element = document.createElement("div"), this._element.className = Scrollbar.arrowClassName, 
                    this._element.appendChild(this._svg), this._owner.element.appendChild(this._element);
                }, ScrollbarButton.prototype.onMouseDown = function(event) {
                    var that = this;
                    if (clearTimeout(this._timerHandle), !this._mouseUpWrapper) {
                        event.cancelBubble = !0;
                        var that_1 = this;
                        this._mouseUpWrapper = function(event) {
                            that_1.onMouseUp(event);
                        }, Scrollbar.addDocumentMouseUpEvent(this._mouseUpWrapper);
                    }
                    this._owner._scrollSmallIncrement(this._direction), this._owner.refresh(), this._timerHandle = setTimeout((function() {
                        that.onMouseDown(event);
                    }), 100), event.preventDefault && event.preventDefault();
                }, ScrollbarButton.prototype.onMouseUp = function(event) {
                    clearTimeout(this._timerHandle), Scrollbar.removeDocumentMouseUpEvent(this._mouseUpWrapper), 
                    this._mouseUpWrapper = void 0;
                }, ScrollbarButton.prototype.arrange = function(width, height, angle) {
                    var size = Math.min(width, height), scale = size / 16, x = (width - size) / 2, y = (height - size) / 2;
                    this._polygon.setAttributeNS(null, "transform", "translate(" + x + ", " + y + ") scale(" + scale + ") rotate(" + angle + ",8,8)"), 
                    this._svg.setAttributeNS(null, "width", width + "px"), this._svg.setAttributeNS(null, "height", height + "px"), 
                    controls.HTMLElementUtils.setElementWidth(this._element, width), controls.HTMLElementUtils.setElementHeight(this._element, height);
                }, ScrollbarButton.MIN_WIDTH = 26, ScrollbarButton.ARROW_COLOR = "#404040", ScrollbarButton;
            })();
            controls.ScrollbarButton = ScrollbarButton;
            var Scrollbar = (function() {
                function Scrollbar(parentElement, layoutKind) {
                    this.MIN_BAR_SIZE = 10, this.min = 0, this.max = 10, this.viewMin = 0, this.viewSize = 2, 
                    this.smallIncrement = 1, this._onscroll = [], this._screenToOffsetScale = 1, this.createView(parentElement, layoutKind);
                    var that = this;
                    this._element.addEventListener("mousedown", (function(e) {
                        that.onBackgroundMouseDown(e);
                    })), this._middleBar.addEventListener("mousedown", (function(e) {
                        that.onMiddleBarMouseDown(e);
                    })), this._timerHandle = void 0, this._visible = !0, this.element.winControl = this, 
                    $(this._touchPanel).addClass(UNSELECTABLE_CLASS_NAME);
                }
                return Scrollbar.prototype.scrollBy = function(delta) {
                    this.scrollTo(this.viewMin + delta);
                }, Scrollbar.prototype.scrollUp = function() {
                    this.scrollBy(-this.smallIncrement);
                }, Scrollbar.prototype.scrollDown = function() {
                    this.scrollBy(this.smallIncrement);
                }, Scrollbar.prototype.scrollPageUp = function() {
                    this.scrollBy(-this.viewSize);
                }, Scrollbar.prototype.scrollPageDown = function() {
                    this.scrollBy(this.viewSize);
                }, Object.defineProperty(Scrollbar.prototype, "width", {
                    get: function() {
                        return this._width;
                    },
                    set: function(value) {
                        this._width = value, this._element.style.width = value, this.invalidateArrange();
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "height", {
                    get: function() {
                        return this._height;
                    },
                    set: function(value) {
                        this._height = value, this._element.style.height = value, this.invalidateArrange();
                    },
                    enumerable: !0,
                    configurable: !0
                }), Scrollbar.prototype.refresh = function() {}, Object.defineProperty(Scrollbar.prototype, "element", {
                    get: function() {
                        return this._element;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "maxButton", {
                    get: function() {
                        return this._maxButton;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "middleBar", {
                    get: function() {
                        return this._middleBar;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Scrollbar.prototype._scrollSmallIncrement = function(direction) {
                    this.scrollBy(this.smallIncrement * direction);
                }, Object.defineProperty(Scrollbar.prototype, "visible", {
                    get: function() {
                        return this._visible;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "isInMouseCapture", {
                    get: function() {
                        return void 0 !== this._timerHandle;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Scrollbar.prototype.show = function(value) {
                    this._visible = value, this.element.style.visibility = value ? "visible" : "hidden", 
                    this.invalidateArrange();
                }, Scrollbar.prototype._getMouseOffset = function(event) {
                    return void 0 !== event.offsetX ? {
                        x: event.offsetX,
                        y: event.offsetY
                    } : void 0 !== event.layerX ? {
                        x: event.layerX,
                        y: event.layerY
                    } : {
                        x: event.screenX,
                        y: event.screenY
                    };
                }, Scrollbar.prototype._getOffsetXDelta = function(event) {
                    return (event.screenX - this._screenPrevMousePos.x) / this._screenToOffsetScale;
                }, Scrollbar.prototype._getOffsetYDelta = function(event) {
                    return (event.screenY - this._screenPrevMousePos.y) / this._screenToOffsetScale;
                }, Scrollbar.prototype._getOffsetXTouchDelta = function(event) {
                    return this._getMouseOffset(event).x - this._offsetTouchPrevPos.x;
                }, Scrollbar.prototype._getOffsetYTouchDelta = function(event) {
                    return this._getMouseOffset(event).y - this._offsetTouchPrevPos.y;
                }, Scrollbar.prototype.initTouch = function(panel, allowMouseDrag) {
                    var _this = this;
                    this._touchPanel = panel, this._allowMouseDrag = void 0 === allowMouseDrag || allowMouseDrag, 
                    "ontouchmove" in panel ? (panel.addEventListener("touchstart", (function(e) {
                        return _this.onTouchStart(e);
                    })), panel.addEventListener("touchmove", (function(e) {
                        return _this.onTouchMove(e);
                    })), panel.addEventListener("touchend", (function(e) {
                        return _this.onTouchEnd(e);
                    }))) : (panel.addEventListener("mousedown", (function(e) {
                        return _this.onTouchMouseDown(e);
                    })), panel.addEventListener("mousemove", (function(e) {
                        return _this.onTouchMouseMove(e);
                    })), panel.addEventListener("mouseup", (function(e) {
                        return _this.onTouchMouseUp(e);
                    })));
                }, Scrollbar.prototype.onTouchStart = function(e) {
                    1 === e.touches.length && this.onTouchMouseDown(e.touches[0]);
                }, Scrollbar.prototype.onTouchMove = function(e) {
                    1 === e.touches.length && (e.preventDefault && e.preventDefault(), this.onTouchMouseMove(e.touches[0]));
                }, Scrollbar.prototype.onTouchEnd = function(e) {
                    this.onTouchMouseUp(1 === e.touches.length ? e.touches[0] : e, !0);
                }, Scrollbar.prototype.onTouchMouseDown = function(e) {
                    (this._allowMouseDrag || e.pointerType !== MSPointerEvent.MSPOINTER_TYPE_MOUSE) && ("setCapture" in this._touchPanel && this._touchPanel.setCapture(!0), 
                    this._offsetTouchPrevPos = this._offsetTouchStartPos = null, this._touchStarted = !0);
                }, Scrollbar.prototype._getOffsetTouchDelta = function(e) {
                    return null;
                }, Scrollbar.prototype.onTouchMouseMove = function(e) {
                    if (this._touchStarted) {
                        this._offsetTouchStartPos || (this._offsetTouchPrevPos = this._offsetTouchStartPos = this._getMouseOffset(e));
                        var delta = this._getOffsetTouchDelta(e);
                        0 !== delta && (this.scrollBy(-delta / this._getRunningSize(!1) * this.viewSize), 
                        this._offsetTouchPrevPos = this._getMouseOffset(e)), e.preventDefault && e.preventDefault(), 
                        e.cancelBubble = !0;
                    }
                }, Scrollbar.prototype.onTouchMouseUp = function(e, bubble) {
                    if (this._touchStarted && this._offsetTouchStartPos) {
                        var end = this._getMouseOffset(e);
                        !bubble && (Math.abs(this._offsetTouchStartPos.x - end.x) > 3 || Math.abs(this._offsetTouchStartPos.y - end.y) > 3) && (e.preventDefault && e.preventDefault(), 
                        e.cancelBubble = !0);
                    }
                    "releaseCapture" in this._touchPanel && this._touchPanel.releaseCapture(), this._touchStarted = !1;
                }, Scrollbar.prototype.createView = function(parentElement, layoutKind) {
                    this._element = document.createElement("div"), this._element.className = Scrollbar.className, 
                    this._element.setAttribute("drag-resize-disabled", "true"), 0 === layoutKind && parentElement.appendChild(this._element), 
                    this._minButton = new ScrollbarButton(this, (-1)), this._maxButton = new ScrollbarButton(this, 1), 
                    this._middleBar = document.createElement("div"), this._middleBar.className = Scrollbar.barClassName, 
                    this._element.appendChild(this._middleBar);
                }, Scrollbar.prototype.scrollTo = function(pos) {
                    var viewMin = Math.min(this.max - this.viewSize, Math.max(this.min, pos));
                    viewMin !== this.viewMin && (this.viewMin = viewMin, fire(this._onscroll, null));
                }, Scrollbar.prototype._scrollByPage = function(event) {}, Scrollbar.prototype._getRunningSize = function(net) {
                    return null;
                }, Scrollbar.prototype._getOffsetDelta = function(event) {
                    return null;
                }, Scrollbar.prototype.scroll = function(event) {
                    var delta = this._getOffsetDelta(event) / this._getRunningSize(!0) * (this.max - this.min);
                    if (delta < 0) {
                        if (this._getScreenMousePos(event) >= this._screenMaxMousePos) return;
                    } else if (delta > 0 && this._getScreenMousePos(event) <= this._screenMinMousePos) return;
                    this.scrollBy(delta);
                }, Object.defineProperty(Scrollbar.prototype, "actualWidth", {
                    get: function() {
                        return void 0 === this._actualWidth && this.arrange(), this._actualWidth;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "actualHeight", {
                    get: function() {
                        return void 0 === !this._actualHeight && this.arrange(), this._actualHeight;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "actualButtonWidth", {
                    get: function() {
                        return void 0 === !this._actualButtonWidth && this.arrange(), this._actualButtonWidth;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "actualButtonHeight", {
                    get: function() {
                        return void 0 === !this._actualButtonHeight && this.arrange(), this._actualButtonHeight;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Scrollbar.prototype.arrange = function() {
                    this._actualWidth || (this._actualWidth = this._element.offsetWidth, this._actualHeight = this._element.offsetHeight, 
                    this._actualButtonWidth = this._calculateButtonWidth(), this._actualButtonHeight = this._calculateButtonHeight(), 
                    this._minButton.arrange(this._actualButtonWidth, this._actualButtonHeight, this._getMinButtonAngle()), 
                    this._maxButton.arrange(this._actualButtonWidth, this._actualButtonHeight, this._getMaxButtonAngle()), 
                    this._setMaxButtonPosition());
                }, Scrollbar.prototype._calculateButtonWidth = function() {
                    return null;
                }, Scrollbar.prototype._calculateButtonHeight = function() {
                    return null;
                }, Scrollbar.prototype._getMinButtonAngle = function() {
                    return null;
                }, Scrollbar.prototype._getMaxButtonAngle = function() {
                    return null;
                }, Scrollbar.prototype._setMaxButtonPosition = function() {}, Scrollbar.prototype.invalidateArrange = function() {
                    this._actualWidth = void 0, this._actualHeight = void 0, this._actualButtonWidth = void 0, 
                    this._actualButtonHeight = void 0;
                }, Scrollbar.prototype.onHoldBackgroundMouseDown = function(event) {
                    var _this = this, holdDelay = this._timerHandle ? Scrollbar.ScrollbarBackgroundMousedownHoldDelay : Scrollbar.ScrollbarBackgroundFirstTimeMousedownHoldDelay;
                    this._timerHandle = setTimeout((function() {
                        _this.onBackgroundMouseDown(event);
                    }), holdDelay);
                }, Scrollbar.prototype.onBackgroundMouseDown = function(event) {
                    var that = this;
                    clearTimeout(this._timerHandle), this._backgroundMouseUpWrapper || (event.cancelBubble = !0, 
                    this._backgroundMouseUpWrapper = function(event) {
                        that.onBackgroundMouseUp(event);
                    }, Scrollbar.addDocumentMouseUpEvent(this._backgroundMouseUpWrapper)), this._scrollByPage(event), 
                    this.refresh(), this.onHoldBackgroundMouseDown(event), event.preventDefault && event.preventDefault();
                }, Scrollbar.prototype.onBackgroundMouseUp = function(event) {
                    clearTimeout(this._timerHandle), this._timerHandle = void 0, Scrollbar.removeDocumentMouseUpEvent(this._backgroundMouseUpWrapper), 
                    this._backgroundMouseUpWrapper = void 0;
                }, Scrollbar.prototype.getPinchZoomY = function() {
                    return document.documentElement.clientHeight / window.innerHeight;
                }, Scrollbar.prototype.onMiddleBarMouseDown = function(event) {
                    event.cancelBubble = !0, this._screenPrevMousePos = {
                        x: event.screenX,
                        y: event.screenY
                    }, this._screenMinMousePos = this._getScreenMousePos(event) - (this._getScreenContextualLeft(this._middleBar) - this._getScreenContextualRight(this._minButton.element)), 
                    this._screenMaxMousePos = this._getScreenMousePos(event) + (this._getScreenContextualLeft(this._maxButton.element) - this._getScreenContextualRight(this._middleBar)), 
                    this._screenToOffsetScale = controls.HTMLElementUtils.getAccumulatedScale(this.element) * this.getPinchZoomY();
                    var that = this;
                    this._middleBarMouseMoveWrapper = function(e) {
                        that.onMiddleBarMouseMove(e);
                    }, Scrollbar.addDocumentMouseMoveEvent(this._middleBarMouseMoveWrapper), this._middleBarMouseUpWrapper = function(e) {
                        that.onMiddleBarMouseUp(e);
                    }, Scrollbar.addDocumentMouseUpEvent(this._middleBarMouseUpWrapper), event.preventDefault && event.preventDefault();
                }, Scrollbar.prototype.onMiddleBarMouseMove = function(event) {
                    this._screenPrevMousePos && (this.scroll(event), this.refresh(), this._screenPrevMousePos = {
                        x: event.screenX,
                        y: event.screenY
                    });
                }, Scrollbar.prototype.onMiddleBarMouseUp = function(event) {
                    this._screenPrevMousePos = void 0, Scrollbar.removeDocumentMouseMoveEvent(this._middleBarMouseMoveWrapper), 
                    this._middleBarMouseMoveWrapper = void 0, Scrollbar.removeDocumentMouseUpEvent(this._middleBarMouseUpWrapper), 
                    this._middleBarMouseUpWrapper = void 0, event.preventDefault && event.preventDefault();
                }, Scrollbar.prototype._getScreenContextualLeft = function(element) {
                    return null;
                }, Scrollbar.prototype._getScreenContextualRight = function(element) {
                    return null;
                }, Scrollbar.prototype.onMouseWheel = function(delta) {
                    delta && this.mouseWheel(delta);
                }, Scrollbar.prototype.mouseWheel = function(delta) {
                    this.visible && (delta < 0 ? delta = Math.min(-Scrollbar.MouseWheelRange, delta) : delta > 0 && (delta = Math.max(Scrollbar.MouseWheelRange, delta)), 
                    this.scrollBy(-delta / Scrollbar.MouseWheelRange * this.smallIncrement));
                }, Scrollbar.prototype._getScreenMousePos = function(event) {
                    return null;
                }, Scrollbar.addDocumentMouseUpEvent = function(func) {
                    document.addEventListener("mouseup", func);
                }, Scrollbar.removeDocumentMouseUpEvent = function(func) {
                    document.removeEventListener("mouseup", func);
                }, Scrollbar.addDocumentMouseMoveEvent = function(func) {
                    document.addEventListener("mousemove", func);
                }, Scrollbar.removeDocumentMouseMoveEvent = function(func) {
                    document.removeEventListener("mousemove", func);
                }, Scrollbar.DefaultScrollbarWidth = "15px", Scrollbar.ScrollbarBackgroundFirstTimeMousedownHoldDelay = 500, 
                Scrollbar.ScrollbarBackgroundMousedownHoldDelay = 50, Scrollbar.MouseWheelRange = 120, 
                Scrollbar.className = "scroll-bar-div", Scrollbar.barClassName = "scroll-bar-part-bar", 
                Scrollbar.arrowClassName = "scroll-bar-part-arrow", Scrollbar;
            })();
            controls.Scrollbar = Scrollbar;
            var HorizontalScrollbar = (function(_super) {
                function HorizontalScrollbar(parentElement, layoutKind) {
                    var _this = _super.call(this, parentElement, layoutKind) || this;
                    return _this.height = Scrollbar.DefaultScrollbarWidth, _this;
                }
                return __extends(HorizontalScrollbar, _super), HorizontalScrollbar.prototype._calculateButtonWidth = function() {
                    return Math.min(this.actualWidth / 2, Math.max(this.actualHeight, ScrollbarButton.MIN_WIDTH));
                }, HorizontalScrollbar.prototype._calculateButtonHeight = function() {
                    return this.actualHeight;
                }, HorizontalScrollbar.prototype._getMinButtonAngle = function() {
                    return -180;
                }, HorizontalScrollbar.prototype._getMaxButtonAngle = function() {
                    return 0;
                }, HorizontalScrollbar.prototype._setMaxButtonPosition = function() {
                    controls.HTMLElementUtils.setElementLeft(this.maxButton.element, this.actualWidth - this.actualButtonWidth);
                }, HorizontalScrollbar.prototype.refresh = function() {
                    this.arrange();
                    var runningSize = this.actualWidth - 2 * this.actualButtonWidth - 2, barSize = this.viewSize / (this.max - this.min) * runningSize;
                    barSize < this.MIN_BAR_SIZE && (runningSize -= this.MIN_BAR_SIZE - barSize, barSize = this.MIN_BAR_SIZE), 
                    runningSize < 0 && (runningSize = 0, barSize = 0), barSize = Math.min(barSize, runningSize);
                    var barPos = this.viewMin / (this.max - this.min) * runningSize;
                    controls.HTMLElementUtils.setElementWidth(this.middleBar, barSize), controls.HTMLElementUtils.setElementHeight(this.middleBar, this.actualHeight), 
                    controls.HTMLElementUtils.setElementLeft(this.middleBar, this.actualButtonWidth + 1 + barPos);
                }, HorizontalScrollbar.prototype.show = function(visible) {
                    visible !== this.visible && (_super.prototype.show.call(this, visible), visible ? this.element.style.height = this.height : controls.HTMLElementUtils.setElementHeight(this.element, 0));
                }, HorizontalScrollbar.prototype._scrollByPage = function(event) {
                    var left = this.middleBar.offsetLeft, right = left + this.middleBar.offsetWidth, x = void 0 === event.offsetX ? event.layerX : event.offsetX;
                    x > right ? this.scrollPageDown() : x < left && this.scrollPageUp();
                }, HorizontalScrollbar.prototype._getRunningSize = function(net) {
                    var result = this.actualWidth;
                    if (net) {
                        var barMinPos = this.actualButtonWidth + 1;
                        result -= 2 * barMinPos;
                        var barSize = result * (this.viewSize / (this.max - this.min));
                        barSize < this.MIN_BAR_SIZE && (result -= this.MIN_BAR_SIZE - barSize);
                    }
                    return result;
                }, HorizontalScrollbar.prototype._getOffsetDelta = function(event) {
                    return this._getOffsetXDelta(event);
                }, HorizontalScrollbar.prototype._getOffsetTouchDelta = function(e) {
                    return this._getOffsetXTouchDelta(e);
                }, HorizontalScrollbar.prototype._getScreenContextualLeft = function(element) {
                    return element.getBoundingClientRect().left;
                }, HorizontalScrollbar.prototype._getScreenContextualRight = function(element) {
                    return element.getBoundingClientRect().right;
                }, HorizontalScrollbar.prototype._getScreenMousePos = function(event) {
                    return event.screenX;
                }, HorizontalScrollbar;
            })(Scrollbar);
            controls.HorizontalScrollbar = HorizontalScrollbar;
            var VerticalScrollbar = (function(_super) {
                function VerticalScrollbar(parentElement, layoutKind) {
                    var _this = _super.call(this, parentElement, layoutKind) || this;
                    return _this.width = Scrollbar.DefaultScrollbarWidth, _this;
                }
                return __extends(VerticalScrollbar, _super), VerticalScrollbar.prototype._calculateButtonWidth = function() {
                    return this.actualWidth;
                }, VerticalScrollbar.prototype._calculateButtonHeight = function() {
                    return Math.min(this.actualHeight / 2, Math.max(this.actualWidth, ScrollbarButton.MIN_WIDTH));
                }, VerticalScrollbar.prototype._getMinButtonAngle = function() {
                    return -90;
                }, VerticalScrollbar.prototype._getMaxButtonAngle = function() {
                    return 90;
                }, VerticalScrollbar.prototype._setMaxButtonPosition = function() {
                    controls.HTMLElementUtils.setElementTop(this.maxButton.element, this.actualHeight - this.actualButtonHeight);
                }, VerticalScrollbar.prototype.refresh = function() {
                    this.arrange();
                    var runningSize = this.actualHeight - 2 * this.actualButtonHeight - 2, barSize = this.viewSize / (this.max - this.min) * runningSize;
                    barSize < this.MIN_BAR_SIZE && (runningSize -= this.MIN_BAR_SIZE - barSize, barSize = this.MIN_BAR_SIZE), 
                    runningSize < 0 && (runningSize = 0, barSize = 0);
                    var barPos = this.viewMin / (this.max - this.min) * runningSize;
                    controls.HTMLElementUtils.setElementWidth(this.middleBar, this.actualWidth), controls.HTMLElementUtils.setElementHeight(this.middleBar, barSize), 
                    controls.HTMLElementUtils.setElementTop(this.middleBar, this.actualButtonHeight + 1 + barPos);
                }, VerticalScrollbar.prototype.show = function(visible) {
                    visible !== this.visible && (_super.prototype.show.call(this, visible), visible ? this.element.style.width = this.width : controls.HTMLElementUtils.setElementWidth(this.element, 0));
                }, VerticalScrollbar.prototype._scrollByPage = function(event) {
                    var top = this.middleBar.offsetTop, bottom = top + this.middleBar.offsetHeight, y = void 0 === event.offsetY ? event.layerY : event.offsetY;
                    y > bottom ? this.scrollPageDown() : y < top && this.scrollPageUp();
                }, VerticalScrollbar.prototype._getRunningSize = function(net) {
                    var result = this.actualHeight;
                    if (net) {
                        var barMinPos = this.actualButtonHeight + 1;
                        result -= 2 * barMinPos;
                        var barSize = result * (this.viewSize / (this.max - this.min));
                        barSize < this.MIN_BAR_SIZE && (result -= this.MIN_BAR_SIZE - barSize);
                    }
                    return result;
                }, VerticalScrollbar.prototype._getOffsetDelta = function(event) {
                    return this._getOffsetYDelta(event);
                }, VerticalScrollbar.prototype._getOffsetTouchDelta = function(e) {
                    return this._getOffsetYTouchDelta(e);
                }, VerticalScrollbar.prototype._getScreenContextualLeft = function(element) {
                    return element.getBoundingClientRect().top;
                }, VerticalScrollbar.prototype._getScreenContextualRight = function(element) {
                    return element.getBoundingClientRect().bottom;
                }, VerticalScrollbar.prototype._getScreenMousePos = function(event) {
                    return event.screenY;
                }, VerticalScrollbar;
            })(Scrollbar);
            controls.VerticalScrollbar = VerticalScrollbar;
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var SlicerHelper = powerbi.visuals.SlicerHelper, DisableDragAttribute = "drag-resize-disabled", DefaultPaddingTop = 0, DefaultPaddingLeft = 0, SelectMenu = (function() {
                function SelectMenu(settings) {
                    this.settings = settings, this.init(), this.applyStyles(), this.setValue(this.settings.selectedValue);
                }
                return SelectMenu.prototype.update = function(settings) {
                    _.extend(this.settings, settings), SelectMenu.populateOptions(this.select, this.settings.options), 
                    null != this.settings.selectedValue && this.setValue(this.settings.selectedValue), 
                    this.select.selectmenu("refresh"), this.applyStyles(), this.applyState();
                }, SelectMenu.prototype.disableOption = function(value) {
                    for (var options = this.select.find("option"), i = 0; i < options.length; i++) {
                        var option = options[i], val = option.getAttribute("value");
                        val === value && option.setAttribute("disabled", "true");
                    }
                    this.select.selectmenu("refresh");
                }, SelectMenu.prototype.enableOption = function(value) {
                    for (var options = this.select.find("option"), i = 0; i < options.length; i++) {
                        var option = options[i], val = option.getAttribute("value");
                        val === value && option.setAttribute("disabled", "false");
                    }
                    this.select.selectmenu("refresh");
                }, SelectMenu.prototype.close = function() {
                    this.select.selectmenu("close");
                }, SelectMenu.prototype.setValue = function(value) {
                    this.select.val(value);
                }, SelectMenu.prototype.init = function() {
                    var _this = this;
                    this.select = InJs.DomFactory.select(), this.select.attr(DisableDragAttribute, "true").appendTo(this.settings.container), 
                    SelectMenu.populateOptions(this.select, this.settings.options), this.select.selectmenu({
                        open: function() {
                            SlicerHelper.fixWidgetPosition(_this.menuWidget, _this.widget, {
                                left: -DefaultPaddingLeft,
                                top: DefaultPaddingTop
                            }, !0);
                        },
                        select: function(event) {
                            event.stopPropagation();
                        },
                        width: "auto"
                    }), this.settings.onChange && this.select.on("selectmenuchange", (function(event, element) {
                        var value = element.item.value;
                        _this.settings.onChange(value);
                    })), this.applyState(), this.widget = this.select.selectmenu("widget"), this.menuWidget = this.select.selectmenu("menuWidget").parent(), 
                    this.menuWidget.addClass(this.settings.className);
                }, SelectMenu.prototype.applyState = function() {
                    this.settings.disabled ? this.select.selectmenu("disable") : this.select.selectmenu("enable");
                }, SelectMenu.prototype.applyStyles = function() {
                    this.settings.css && this.widget.css(this.settings.css);
                }, SelectMenu.populateOptions = function(select, options) {
                    select.find("option").remove();
                    for (var _i = 0, options_2 = options; _i < options_2.length; _i++) {
                        var option = options_2[_i];
                        $("<option />").attr("value", option.value).text(option.text).appendTo(select);
                    }
                }, SelectMenu;
            })();
            controls.SelectMenu = SelectMenu;
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var internal;
            !(function(internal) {
                var UNSELECTABLE_CLASS_NAME = "unselectable", TablixResizer = (function() {
                    function TablixResizer(element, handler) {
                        this._element = element, this._handler = handler, this._elementMouseDownWrapper = null, 
                        this._elementMouseMoveWrapper = null, this._elementMouseOutWrapper = null, this._documentMouseMoveWrapper = null, 
                        this._documentMouseUpWrapper = null, this._startMousePosition = null, this._originalCursor = null;
                    }
                    return TablixResizer.addDocumentMouseUpEvent = function(listener) {
                        document.addEventListener("mouseup", listener);
                    }, TablixResizer.removeDocumentMouseUpEvent = function(listener) {
                        document.removeEventListener("mouseup", listener);
                    }, TablixResizer.addDocumentMouseMoveEvent = function(listener) {
                        document.addEventListener("mousemove", listener);
                    }, TablixResizer.removeDocumentMouseMoveEvent = function(listener) {
                        document.removeEventListener("mousemove", listener);
                    }, TablixResizer.getMouseCoordinates = function(event) {
                        return {
                            x: event.pageX,
                            y: event.pageY
                        };
                    }, TablixResizer.getMouseCoordinateDelta = function(previous, current) {
                        return {
                            x: current.x - previous.x,
                            y: current.y - previous.y
                        };
                    }, TablixResizer.prototype.initialize = function() {
                        var _this = this;
                        this._elementMouseDownWrapper = function(e) {
                            return _this.onElementMouseDown(e);
                        }, this._element.addEventListener("mousedown", this._elementMouseDownWrapper), this._elementMouseMoveWrapper = function(e) {
                            return _this.onElementMouseMove(e);
                        }, this._element.addEventListener("mousemove", this._elementMouseMoveWrapper), this._elementMouseOutWrapper = function(e) {
                            return _this.onElementMouseOut(e);
                        }, this._element.addEventListener("mouseout", this._elementMouseOutWrapper), this._elementMouseDoubleClickOutWrapper = function(e) {
                            return _this.onElementMouseDoubleClick(e);
                        }, this._element.addEventListener("dblclick", this._elementMouseDoubleClickOutWrapper);
                    }, TablixResizer.prototype.uninitialize = function() {
                        this._element.removeEventListener("mousedown", this._elementMouseDownWrapper), this._elementMouseDownWrapper = null, 
                        this._element.removeEventListener("mousemove", this._elementMouseMoveWrapper), this._elementMouseMoveWrapper = null, 
                        this._element.removeEventListener("mouseout", this._elementMouseOutWrapper), this._elementMouseOutWrapper = null, 
                        this._element.removeEventListener("dblclick", this._elementMouseDoubleClickOutWrapper), 
                        this._elementMouseDoubleClickOutWrapper = null;
                    }, Object.defineProperty(TablixResizer.prototype, "cell", {
                        get: function() {
                            return null;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixResizer.prototype, "element", {
                        get: function() {
                            return this._element;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixResizer.prototype._hotSpot = function(position) {
                        return !1;
                    }, TablixResizer.prototype.onElementMouseDown = function(event) {
                        var _this = this, position = TablixResizer.getMouseCoordinates(event);
                        this._hotSpot(position) && ("setCapture" in this._element && this._element.setCapture(), 
                        event.cancelBubble = !0, this._startMousePosition = position, this._documentMouseMoveWrapper = function(e) {
                            return _this.onDocumentMouseMove(e);
                        }, TablixResizer.addDocumentMouseMoveEvent(this._documentMouseMoveWrapper), this._documentMouseUpWrapper = function(e) {
                            return _this.onDocumentMouseUp(e);
                        }, TablixResizer.addDocumentMouseUpEvent(this._documentMouseUpWrapper), document.documentElement && (this._originalCursor = document.documentElement.style.cursor, 
                        document.documentElement.style.cursor = TablixResizer.resizeCursor), this._handler.onStartResize(this.cell, this._startMousePosition.x, this._startMousePosition.y));
                    }, TablixResizer.prototype.onElementMouseMove = function(event) {
                        this._startMousePosition || (this._hotSpot(TablixResizer.getMouseCoordinates(event)) ? null === this._originalCursor && (this._originalCursor = this._element.style.cursor, 
                        this._element.style.cursor = TablixResizer.resizeCursor) : null !== this._originalCursor && (this._element.style.cursor = this._originalCursor, 
                        this._originalCursor = null));
                    }, TablixResizer.prototype.onElementMouseOut = function(event) {
                        this._startMousePosition || null !== this._originalCursor && (this._element.style.cursor = this._originalCursor, 
                        this._originalCursor = null);
                    }, TablixResizer.prototype.onElementMouseDoubleClick = function(event) {
                        this._hotSpot(TablixResizer.getMouseCoordinates(event)) && this._handler.onReset(this.cell);
                    }, TablixResizer.prototype.onDocumentMouseMove = function(event) {
                        if (this._startMousePosition) {
                            var delta = TablixResizer.getMouseCoordinateDelta(this._startMousePosition, TablixResizer.getMouseCoordinates(event));
                            this._handler.onResize(this.cell, delta.x, delta.y), event.preventDefault();
                        }
                    }, TablixResizer.prototype.onDocumentMouseUp = function(event) {
                        this._startMousePosition = null, "releaseCapture" in this._element && this._element.releaseCapture(), 
                        TablixResizer.removeDocumentMouseMoveEvent(this._documentMouseMoveWrapper), this._documentMouseMoveWrapper = null, 
                        TablixResizer.removeDocumentMouseUpEvent(this._documentMouseUpWrapper), this._documentMouseUpWrapper = null, 
                        document.documentElement && (document.documentElement.style.cursor = this._originalCursor), 
                        event.preventDefault && event.preventDefault(), this._handler.onEndResize(this.cell);
                    }, TablixResizer.resizeHandleSize = 4, TablixResizer.resizeCursor = "e-resize", 
                    TablixResizer;
                })();
                internal.TablixResizer = TablixResizer;
                var TablixDomResizer = (function(_super) {
                    function TablixDomResizer(cell, element, handler) {
                        var _this = _super.call(this, element, handler) || this;
                        return _this._cell = cell, _this;
                    }
                    return __extends(TablixDomResizer, _super), Object.defineProperty(TablixDomResizer.prototype, "cell", {
                        get: function() {
                            return this._cell;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixDomResizer.prototype._hotSpot = function(position) {
                        return position.x >= this.element.getBoundingClientRect().right - TablixResizer.resizeHandleSize;
                    }, TablixDomResizer;
                })(TablixResizer);
                internal.TablixDomResizer = TablixDomResizer;
                var TablixCellPresenter = (function() {
                    function TablixCellPresenter(fitProportionally, layoutKind) {
                        this._tableCell = null, this._contentElement = internal.TablixUtils.createDiv(), 
                        this._contentHost = internal.TablixUtils.createDiv(), this.layoutKind = layoutKind, 
                        this._contentElement.appendChild(this._contentHost), this._resizer = null;
                    }
                    return TablixCellPresenter.prototype.initialize = function(owner) {
                        this._owner = owner;
                    }, Object.defineProperty(TablixCellPresenter.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixCellPresenter.prototype.registerTableCell = function(tableCell) {
                        this._tableCell = tableCell, tableCell.appendChild(this._contentElement);
                    }, Object.defineProperty(TablixCellPresenter.prototype, "tableCell", {
                        get: function() {
                            return this._tableCell;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixCellPresenter.prototype, "contentElement", {
                        get: function() {
                            return this._contentElement;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixCellPresenter.prototype, "contentHost", {
                        get: function() {
                            return this._contentHost;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixCellPresenter.prototype.registerClickHandler = function(handler) {
                        this._contentElement.onclick = handler;
                    }, TablixCellPresenter.prototype.unregisterClickHandler = function() {
                        this._contentElement.onclick = null;
                    }, TablixCellPresenter.prototype.onContainerWidthChanged = function(value) {
                        controls.HTMLElementUtils.setElementWidth(this._contentElement, value);
                    }, TablixCellPresenter.prototype.onContinerHeightChanged = function(height) {
                        controls.HTMLElementUtils.setElementHeight(this._contentElement, height);
                    }, TablixCellPresenter.prototype.onColumnSpanChanged = function(value) {
                        this._tableCell.colSpan = value;
                    }, TablixCellPresenter.prototype.onRowSpanChanged = function(value) {
                        this._tableCell.rowSpan = value;
                    }, TablixCellPresenter.prototype.onTextAlignChanged = function(value) {
                        this._tableCell.style.textAlign = value;
                    }, TablixCellPresenter.prototype.onClear = function() {
                        this._contentHost.className = "", this._tableCell.className = "";
                    }, TablixCellPresenter.prototype.onHorizontalScroll = function(width, offset) {
                        controls.HTMLElementUtils.setElementLeft(this._contentHost, offset), controls.HTMLElementUtils.setElementWidth(this._contentHost, width);
                    }, TablixCellPresenter.prototype.onVerticalScroll = function(height, offset) {
                        controls.HTMLElementUtils.setElementTop(this._contentHost, offset), controls.HTMLElementUtils.setElementHeight(this._contentHost, height);
                    }, TablixCellPresenter.prototype.onInitializeScrolling = function() {
                        controls.HTMLElementUtils.setElementLeft(this._contentHost, 0), controls.HTMLElementUtils.setElementTop(this._contentHost, 0), 
                        controls.HTMLElementUtils.setElementWidth(this._contentHost, -1), controls.HTMLElementUtils.setElementHeight(this._contentHost, -1);
                    }, TablixCellPresenter.prototype.enableHorizontalResize = function(enable, handler) {
                        enable !== (null !== this._resizer) && (enable ? (this._resizer = new TablixDomResizer(this._owner, this._tableCell, handler), 
                        this._resizer.initialize()) : (this._resizer.uninitialize(), this._resizer = null));
                    }, TablixCellPresenter.prototype.disableDragResize = function() {
                        this._tableCell.setAttribute(TablixCellPresenter._dragResizeDisabledAttributeName, "true");
                    }, TablixCellPresenter._dragResizeDisabledAttributeName = "drag-resize-disabled", 
                    TablixCellPresenter;
                })();
                internal.TablixCellPresenter = TablixCellPresenter;
                var TablixRowPresenter = (function() {
                    function TablixRowPresenter(fitProportionally) {
                        this._tableRow = null, this._fitProportionally = fitProportionally;
                    }
                    return TablixRowPresenter.prototype.initialize = function(row) {
                        this._row = row;
                    }, TablixRowPresenter.prototype.createCellPresenter = function(layoutKind) {
                        return new TablixCellPresenter(this._fitProportionally, layoutKind);
                    }, TablixRowPresenter.prototype.registerRow = function(tableRow) {
                        this._tableRow = tableRow;
                    }, TablixRowPresenter.prototype.onAppendCell = function(cell) {
                        var presenter = cell._presenter;
                        if (null === presenter.tableCell) {
                            var tableCell = this._tableRow.insertCell(-1);
                            presenter.registerTableCell(tableCell);
                        } else this._tableRow.appendChild(presenter.tableCell);
                    }, TablixRowPresenter.prototype.onInsertCellBefore = function(cell, refCell) {
                        var presenter = cell._presenter;
                        if (null === presenter.tableCell) {
                            var tableCell = this._tableRow.insertCell(Math.max(0, refCell._presenter.tableCell.cellIndex - 1));
                            presenter.registerTableCell(tableCell);
                        } else this._tableRow.insertBefore(cell._presenter.tableCell, refCell._presenter.tableCell);
                    }, TablixRowPresenter.prototype.onRemoveCell = function(cell) {
                        this._tableRow.removeChild(cell._presenter.tableCell);
                    }, TablixRowPresenter.prototype.getHeight = function() {
                        return this.getCellHeight(this._row.getTablixCell());
                    }, TablixRowPresenter.prototype.getCellHeight = function(cell) {
                        return -1;
                    }, TablixRowPresenter.prototype.getCellContentHeight = function(cell) {
                        return -1;
                    }, Object.defineProperty(TablixRowPresenter.prototype, "tableRow", {
                        get: function() {
                            return this._tableRow;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixRowPresenter;
                })();
                internal.TablixRowPresenter = TablixRowPresenter;
                var DashboardRowPresenter = (function(_super) {
                    function DashboardRowPresenter(gridPresenter, fitProportionally) {
                        var _this = _super.call(this, fitProportionally) || this;
                        return _this._gridPresenter = gridPresenter, _this;
                    }
                    return __extends(DashboardRowPresenter, _super), DashboardRowPresenter.prototype.getCellHeight = function(cell) {
                        return cell.containerHeight;
                    }, DashboardRowPresenter.prototype.getCellContentHeight = function(cell) {
                        return cell.contentHeight;
                    }, DashboardRowPresenter;
                })(TablixRowPresenter);
                internal.DashboardRowPresenter = DashboardRowPresenter;
                var CanvasRowPresenter = (function(_super) {
                    function CanvasRowPresenter() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(CanvasRowPresenter, _super), CanvasRowPresenter.prototype.getCellHeight = function(cell) {
                        return cell.containerHeight;
                    }, CanvasRowPresenter.prototype.getCellContentHeight = function(cell) {
                        return cell.contentHeight;
                    }, CanvasRowPresenter;
                })(TablixRowPresenter);
                internal.CanvasRowPresenter = CanvasRowPresenter;
                var TablixColumnPresenter = (function() {
                    function TablixColumnPresenter() {}
                    return TablixColumnPresenter.prototype.initialize = function(column) {
                        this._column = column;
                    }, TablixColumnPresenter.prototype.getWidth = function() {
                        var width = this.getPersistedWidth();
                        return null == width && (width = this.getCellWidth(this._column.getTablixCell())), 
                        width;
                    }, TablixColumnPresenter.prototype.getPersistedWidth = function() {
                        return -1;
                    }, TablixColumnPresenter.prototype.getCellWidth = function(cell) {
                        return -1;
                    }, TablixColumnPresenter;
                })();
                internal.TablixColumnPresenter = TablixColumnPresenter;
                var DashboardColumnPresenter = (function(_super) {
                    function DashboardColumnPresenter(gridPresenter) {
                        var _this = _super.call(this) || this;
                        return _this._gridPresenter = gridPresenter, _this;
                    }
                    return __extends(DashboardColumnPresenter, _super), DashboardColumnPresenter.prototype.getPersistedWidth = function() {
                        return this._gridPresenter.sizeComputationManager.cellWidth;
                    }, DashboardColumnPresenter.prototype.getCellWidth = function(cell) {
                        return this._gridPresenter.sizeComputationManager.cellWidth;
                    }, DashboardColumnPresenter;
                })(TablixColumnPresenter);
                internal.DashboardColumnPresenter = DashboardColumnPresenter;
                var CanvasColumnPresenter = (function(_super) {
                    function CanvasColumnPresenter(gridPresenter, index) {
                        var _this = _super.call(this) || this;
                        return _this._gridPresenter = gridPresenter, _this._columnIndex = index, _this;
                    }
                    return __extends(CanvasColumnPresenter, _super), CanvasColumnPresenter.prototype.getPersistedWidth = function() {
                        return this._gridPresenter.getPersistedColumnWidth(this._column);
                    }, CanvasColumnPresenter.prototype.getCellWidth = function(cell) {
                        var tablixCell = cell;
                        return tablixCell._presenter ? cell.contentWidth : 0;
                    }, CanvasColumnPresenter;
                })(TablixColumnPresenter);
                internal.CanvasColumnPresenter = CanvasColumnPresenter;
                var TablixGridPresenter = (function() {
                    function TablixGridPresenter(columnWidthManager) {
                        this._table = internal.TablixUtils.createTable(), this._table.className = UNSELECTABLE_CLASS_NAME, 
                        this._footerTable = internal.TablixUtils.createTable(), this._footerTable.className = UNSELECTABLE_CLASS_NAME, 
                        this._columnWidthManager = columnWidthManager;
                    }
                    return TablixGridPresenter.prototype.initialize = function(owner, gridHost, footerHost, control) {
                        this._owner = owner, gridHost.appendChild(this._table), footerHost.appendChild(this._footerTable);
                    }, TablixGridPresenter.prototype.getWidth = function() {
                        return -1;
                    }, TablixGridPresenter.prototype.getHeight = function() {
                        return -1;
                    }, TablixGridPresenter.prototype.getScreenToCssRatioX = function() {
                        return 1;
                    }, TablixGridPresenter.prototype.getScreenToCssRatioY = function() {
                        return 1;
                    }, TablixGridPresenter.prototype.createRowPresenter = function() {
                        return null;
                    }, TablixGridPresenter.prototype.createColumnPresenter = function(index) {
                        return null;
                    }, TablixGridPresenter.prototype.onAppendRow = function(row) {
                        var presenter = row.presenter;
                        if (null === presenter.tableRow) {
                            var tableRow = this._table.insertRow(-1);
                            presenter.registerRow(tableRow);
                        } else this._table.tBodies[0].appendChild(row.presenter.tableRow);
                    }, TablixGridPresenter.prototype.onInsertRowBefore = function(row, refRow) {
                        var presenter = row.presenter;
                        if (null === presenter.tableRow) {
                            var tableRow = this._table.insertRow(Math.max(0, refRow.presenter.tableRow.rowIndex - 1));
                            presenter.registerRow(tableRow);
                        } else this._table.tBodies[0].insertBefore(row.presenter.tableRow, refRow.presenter.tableRow);
                    }, TablixGridPresenter.prototype.onRemoveRow = function(row) {
                        this._table.tBodies[0].removeChild(row.presenter.tableRow);
                    }, TablixGridPresenter.prototype.onAddFooterRow = function(row) {
                        var presenter = row.presenter;
                        if (null === presenter.tableRow) {
                            var tableRow = this._footerTable.insertRow(-1);
                            presenter.registerRow(tableRow);
                        } else this._footerTable.tBodies[0].appendChild(row.presenter.tableRow);
                    }, TablixGridPresenter.prototype.onClear = function() {
                        controls.HTMLElementUtils.clearChildren(this._table), controls.HTMLElementUtils.clearChildren(this._footerTable);
                    }, TablixGridPresenter.prototype.onFillColumnsProportionallyChanged = function(value) {
                        value ? (this._table.style.width = "100%", this._footerTable.style.width = "100%") : (this._table.style.width = "auto", 
                        this._footerTable.style.width = "auto");
                    }, TablixGridPresenter.prototype.invokeColumnResizeEndCallback = function(column, width) {
                        this._columnWidthManager && this._columnWidthManager.onColumnWidthChanged(controls.TablixColumnWidthManager.getColumnQueryName(column), width);
                    }, TablixGridPresenter.prototype.getPersistedColumnWidth = function(column) {
                        if (this._columnWidthManager) return this._columnWidthManager.getPersistedColumnWidth(controls.TablixColumnWidthManager.getColumnQueryName(column));
                    }, TablixGridPresenter;
                })();
                internal.TablixGridPresenter = TablixGridPresenter;
                var DashboardTablixGridPresenter = (function(_super) {
                    function DashboardTablixGridPresenter(sizeComputationManager) {
                        var _this = _super.call(this) || this;
                        return _this._sizeComputationManager = sizeComputationManager, _this;
                    }
                    return __extends(DashboardTablixGridPresenter, _super), DashboardTablixGridPresenter.prototype.createRowPresenter = function() {
                        return new DashboardRowPresenter(this, this._owner.fillColumnsProportionally);
                    }, DashboardTablixGridPresenter.prototype.createColumnPresenter = function(index) {
                        return new DashboardColumnPresenter(this);
                    }, Object.defineProperty(DashboardTablixGridPresenter.prototype, "sizeComputationManager", {
                        get: function() {
                            return this._sizeComputationManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), DashboardTablixGridPresenter.prototype.getWidth = function() {
                        return this._sizeComputationManager.gridWidth;
                    }, DashboardTablixGridPresenter.prototype.getHeight = function() {
                        return this._sizeComputationManager.gridHeight;
                    }, DashboardTablixGridPresenter;
                })(TablixGridPresenter);
                internal.DashboardTablixGridPresenter = DashboardTablixGridPresenter;
                var CanvasTablixGridPresenter = (function(_super) {
                    function CanvasTablixGridPresenter(columnWidthManager) {
                        return _super.call(this, columnWidthManager) || this;
                    }
                    return __extends(CanvasTablixGridPresenter, _super), CanvasTablixGridPresenter.prototype.createRowPresenter = function() {
                        return new CanvasRowPresenter(this._owner.fillColumnsProportionally);
                    }, CanvasTablixGridPresenter.prototype.createColumnPresenter = function(index) {
                        return new CanvasColumnPresenter(this, index);
                    }, CanvasTablixGridPresenter.prototype.getWidth = function() {
                        return controls.HTMLElementUtils.getElementWidth(this._table);
                    }, CanvasTablixGridPresenter.prototype.getHeight = function() {
                        return controls.HTMLElementUtils.getElementHeight(this._table);
                    }, CanvasTablixGridPresenter;
                })(TablixGridPresenter);
                internal.CanvasTablixGridPresenter = CanvasTablixGridPresenter;
            })(internal = controls.internal || (controls.internal = {}));
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var internal;
            !(function(internal) {
                var TablixDimensionRealizationManager = (function() {
                    function TablixDimensionRealizationManager(binder) {
                        this._binder = binder, this._adjustmentFactor = 1;
                    }
                    return TablixDimensionRealizationManager.prototype._getOwner = function() {
                        return null;
                    }, Object.defineProperty(TablixDimensionRealizationManager.prototype, "binder", {
                        get: function() {
                            return this._binder;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixDimensionRealizationManager.prototype, "adjustmentFactor", {
                        get: function() {
                            return this._adjustmentFactor;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixDimensionRealizationManager.prototype, "itemsToRealizeCount", {
                        get: function() {
                            return this._itemsToRealizeCount;
                        },
                        set: function(count) {
                            this._itemsToRealizeCount = count;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixDimensionRealizationManager.prototype, "itemsEstimatedContextualWidth", {
                        get: function() {
                            return this._itemsEstimatedContextualWidth;
                        },
                        set: function(contextualWidth) {
                            this._itemsEstimatedContextualWidth = contextualWidth;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixDimensionRealizationManager.prototype.onStartRenderingIteration = function() {
                        var owner = this._getOwner();
                        owner.measureEnabled && !owner.done && this._getEstimatedItemsToRealizeCount(), 
                        this._realizedLeavesCount = 0;
                    }, TablixDimensionRealizationManager.prototype.onEndRenderingIteration = function(gridContextualWidth, filled) {
                        filled || this._getOwner().allItemsRealized || (this._adjustmentFactor *= this._getSizeAdjustment(gridContextualWidth));
                    }, TablixDimensionRealizationManager.prototype.onEndRenderingSession = function() {
                        this._adjustmentFactor = 1;
                    }, TablixDimensionRealizationManager.prototype.onCornerCellRealized = function(item, cell) {}, 
                    TablixDimensionRealizationManager.prototype.onHeaderRealized = function(item, cell, leaf) {
                        leaf && this._realizedLeavesCount++;
                    }, Object.defineProperty(TablixDimensionRealizationManager.prototype, "needsToRealize", {
                        get: function() {
                            return this._realizedLeavesCount < this._itemsToRealizeCount;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixDimensionRealizationManager.prototype._getEstimatedItemsToRealizeCount = function() {}, 
                    TablixDimensionRealizationManager.prototype._getSizeAdjustment = function(gridContextualWidth) {
                        return 1;
                    }, TablixDimensionRealizationManager;
                })();
                internal.TablixDimensionRealizationManager = TablixDimensionRealizationManager;
                var RowRealizationManager = (function(_super) {
                    function RowRealizationManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(RowRealizationManager, _super), Object.defineProperty(RowRealizationManager.prototype, "owner", {
                        set: function(owner) {
                            this._owner = owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), RowRealizationManager.prototype._getOwner = function() {
                        return this._owner;
                    }, RowRealizationManager.prototype._getEstimatedItemsToRealizeCount = function() {
                        this.estimateRowsToRealizeCount();
                    }, RowRealizationManager.prototype.estimateRowsToRealizeCount = function() {
                        return this._owner.dimension.model ? void (this._owner.alignToEnd ? this.itemsToRealizeCount = this._owner.dimension.getItemsCount() - this._owner.dimension.getIntegerScrollOffset() + 1 : this.itemsToRealizeCount = Math.ceil(this._owner.contextualWidthToFill / (this._owner.owner.getEstimatedRowHeight() * this.adjustmentFactor) + this._owner.dimension.getFractionScrollOffset()) - this._owner.otherLayoutManager.dimension.getDepth() + 1) : void (this.itemsToRealizeCount = 0);
                    }, RowRealizationManager.prototype.getEstimatedRowHierarchyWidth = function() {
                        if (!this._owner.dimension.model || 0 === this._owner.dimension.getItemsCount()) return 0;
                        var levels = new RowWidths();
                        this.updateRowHiearchyEstimatedWidth(this._owner.dimension.model, this._owner.dimension._hierarchyNavigator.getIndex(this._owner.dimension.getFirstVisibleItem(0)), levels);
                        for (var levelsArray = levels.items, levelCount = levelsArray.length, width = 0, i = 0; i < levelCount; i++) {
                            var level = levelsArray[i];
                            width += 0 !== level.maxNonLeafWidth ? level.maxNonLeafWidth : level.maxLeafWidth;
                        }
                        return width;
                    }, RowRealizationManager.prototype.updateRowHiearchyEstimatedWidth = function(items, firstVisibleIndex, levels) {
                        if (!(firstVisibleIndex < 0)) for (var hierarchyNavigator = this._owner.owner.owner.hierarchyNavigator, binder = this.binder, length = hierarchyNavigator.getCount(items), i = firstVisibleIndex; i < length; i++) {
                            if (levels.leafCount === this.itemsToRealizeCount) return;
                            var item = hierarchyNavigator.getAt(items, i), label = binder.getHeaderLabel(item), itemWidth = this._owner.getEstimatedHeaderWidth(label, firstVisibleIndex), isLeaf = hierarchyNavigator.isLeaf(item), l = hierarchyNavigator.getLevel(item), level = levels.items[l];
                            level || (level = new RowWidth(), levels.items[l] = level), isLeaf ? (level.maxLeafWidth = Math.max(level.maxLeafWidth, itemWidth), 
                            levels.leafCount = levels.leafCount + 1) : (level.maxNonLeafWidth = Math.max(level.maxNonLeafWidth, itemWidth), 
                            this.updateRowHiearchyEstimatedWidth(hierarchyNavigator.getChildren(item), this._owner.dimension.getFirstVisibleChildIndex(item), levels));
                        }
                    }, RowRealizationManager.prototype._getSizeAdjustment = function(gridContextualWidth) {
                        return gridContextualWidth / ((this._owner.getRealizedItemsCount() - this._owner.dimension.getFractionScrollOffset()) * this._owner.owner.getEstimatedRowHeight());
                    }, RowRealizationManager;
                })(TablixDimensionRealizationManager);
                internal.RowRealizationManager = RowRealizationManager;
                var ColumnRealizationManager = (function(_super) {
                    function ColumnRealizationManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(ColumnRealizationManager, _super), Object.defineProperty(ColumnRealizationManager.prototype, "owner", {
                        set: function(owner) {
                            this._owner = owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), ColumnRealizationManager.prototype._getOwner = function() {
                        return this._owner;
                    }, ColumnRealizationManager.prototype._getEstimatedItemsToRealizeCount = function() {
                        this.estimateColumnsToRealizeCount(this.getEstimatedRowHierarchyWidth());
                    }, Object.defineProperty(ColumnRealizationManager.prototype, "rowRealizationManager", {
                        get: function() {
                            return this._owner.otherLayoutManager.realizationManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), ColumnRealizationManager.prototype.getEstimatedRowHierarchyWidth = function() {
                        return this._owner.otherLayoutManager.done ? this._owner.getOtherHierarchyContextualHeight() : this.rowRealizationManager.getEstimatedRowHierarchyWidth() * this.adjustmentFactor;
                    }, ColumnRealizationManager.prototype.estimateColumnsToRealizeCount = function(rowHierarchyWidth) {
                        var widthToFill = this._owner.contextualWidthToFill - rowHierarchyWidth;
                        if (!this._owner.dimension.model || powerbi.Double.lessOrEqualWithPrecision(widthToFill, 0, internal.DimensionLayoutManager._pixelPrecision)) return void (this.itemsToRealizeCount = 0);
                        var binder = this.binder, hierarchyNavigator = this._owner.owner.owner.hierarchyNavigator, startColumnIndex = this._owner.dimension.getIntegerScrollOffset(), endColumnIndex = this._owner.dimension.getItemsCount(), columnCount = endColumnIndex - startColumnIndex, startRowIndex = this._owner.otherLayoutManager.dimension.getIntegerScrollOffset(), endRowIndex = this._owner.otherLayoutManager.dimension.getItemsCount();
                        if (this.itemsEstimatedContextualWidth = 0, this._owner.alignToEnd) return void (this.itemsToRealizeCount = columnCount);
                        for (var i = startColumnIndex; i < endColumnIndex; i++) {
                            if (powerbi.Double.greaterOrEqualWithPrecision(this.itemsEstimatedContextualWidth, widthToFill, internal.DimensionLayoutManager._pixelPrecision)) return void (this.itemsToRealizeCount = i - startColumnIndex);
                            var maxWidth = 0, visibleSizeRatio = void 0;
                            visibleSizeRatio = i === startColumnIndex ? this._owner.getVisibleSizeRatio() : 1;
                            var columnMember = hierarchyNavigator.getLeafAt(this._owner.dimension.model, i), label = binder.getHeaderLabel(columnMember);
                            maxWidth = Math.max(maxWidth, this._owner.getEstimatedHeaderWidth(label, i));
                            for (var j = startRowIndex; j < endRowIndex; j++) {
                                var intersection = hierarchyNavigator.getIntersection(hierarchyNavigator.getLeafAt(this._owner.otherLayoutManager.dimension.model, j), columnMember);
                                label = binder.getCellContent(intersection), maxWidth = Math.max(maxWidth, this._owner.getEstimatedBodyCellWidth(label));
                            }
                            this.itemsEstimatedContextualWidth += maxWidth * visibleSizeRatio * this.adjustmentFactor;
                        }
                        this.itemsToRealizeCount = columnCount;
                    }, ColumnRealizationManager.prototype._getSizeAdjustment = function(gridContextualWidth) {
                        return gridContextualWidth / (this.getEstimatedRowHierarchyWidth() + this.itemsEstimatedContextualWidth);
                    }, ColumnRealizationManager;
                })(TablixDimensionRealizationManager);
                internal.ColumnRealizationManager = ColumnRealizationManager;
                var RowWidths = (function() {
                    function RowWidths() {
                        this.items = [], this.leafCount = 0;
                    }
                    return RowWidths;
                })();
                internal.RowWidths = RowWidths;
                var RowWidth = (function() {
                    function RowWidth() {
                        this.maxLeafWidth = 0, this.maxNonLeafWidth = 0;
                    }
                    return RowWidth;
                })();
                internal.RowWidth = RowWidth;
            })(internal = controls.internal || (controls.internal = {}));
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var internal;
            !(function(internal) {
                var TablixCell = (function() {
                    function TablixCell(presenter, extension, row) {
                        this._scrollable = !1, this._presenter = presenter, this.extension = extension, 
                        this._presenter.initialize(this), this._row = row, this.item = null, this.type = null, 
                        this._horizontalOffset = 0, this._verticalOffset = 0, this._colSpan = 1, this._rowSpan = 1, 
                        this._containerWidth = -1, this._containerHeight = -1, this.contentHeight = this.contentWidth = 0, 
                        this.position = new internal.TablixUtils.CellPosition();
                    }
                    return TablixCell.prototype.unfixRowHeight = function() {
                        this._row.unfixSize();
                    }, Object.defineProperty(TablixCell.prototype, "colSpan", {
                        get: function() {
                            return this._colSpan;
                        },
                        set: function(value) {
                            this._colSpan !== value && (this._presenter.onColumnSpanChanged(value), this._colSpan = value, 
                            this._presenter.onContainerWidthChanged(-1));
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixCell.prototype, "rowSpan", {
                        get: function() {
                            return this._rowSpan;
                        },
                        set: function(value) {
                            this._rowSpan !== value && (this._presenter.onRowSpanChanged(value), this._rowSpan = value, 
                            this._row.unfixSize());
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixCell.prototype.getCellSpanningHeight = function() {
                        return this._row.getCellSpanningHeight(this);
                    }, Object.defineProperty(TablixCell.prototype, "textAlign", {
                        get: function() {
                            return this._textAlign;
                        },
                        set: function(value) {
                            value !== this._textAlign && (this._presenter.onTextAlignChanged(value), this._textAlign = value);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixCell.prototype, "horizontalOffset", {
                        get: function() {
                            return this._horizontalOffset;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixCell.prototype, "verticalOffset", {
                        get: function() {
                            return this._verticalOffset;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixCell.prototype.isScrollable = function() {
                        return this._scrollable;
                    }, TablixCell.prototype.clear = function() {
                        this.isScrollable() && this.initializeScrolling(), this._presenter.onClear(), this.setContainerWidth(-1), 
                        this.setContainerHeight(-1), this.contentHeight = this.contentWidth = 0;
                    }, TablixCell.prototype.initializeScrolling = function() {
                        this._presenter.onInitializeScrolling(), this._horizontalOffset = 0, 0 !== this._verticalOffset && (this._verticalOffset = 0), 
                        1 === this.colSpan && this.setContainerWidth(-1), 1 === this.rowSpan && this.setContainerHeight(-1);
                    }, TablixCell.prototype.prepare = function(scrollable) {
                        this.isScrollable() && this.initializeScrolling(), this._scrollable = scrollable;
                    }, TablixCell.prototype.scrollVertically = function(height, offset) {
                        var offsetInPixels = Math.ceil(-height * offset);
                        this._verticalOffset = offsetInPixels, this.isScrollable() ? (this._presenter.onVerticalScroll(height, offsetInPixels), 
                        this.setContainerHeight(height + offsetInPixels)) : this.setContainerHeight(this._row.getCellSpanningHeight(this) + offsetInPixels);
                    }, TablixCell.prototype.scrollHorizontally = function(width, offset) {
                        this.isScrollable() && (this._presenter.onHorizontalScroll(width, offset), this.setContainerWidth(width + offset));
                    }, TablixCell.prototype.setContainerWidth = function(value) {
                        value !== this._containerWidth && (this._containerWidth = value, this._presenter.onContainerWidthChanged(value));
                    }, Object.defineProperty(TablixCell.prototype, "containerWidth", {
                        get: function() {
                            return this._containerWidth;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixCell.prototype.setContainerHeight = function(value) {
                        if (value < 0 && (value = -1), value !== this._containerHeight) {
                            this._containerHeight = value;
                            var tablix = this._row.owner.owner, binder = tablix.getBinder();
                            tablix.wordWrapRowHeaders && null != binder.applyWordWrapping && value !== -1 && 1 === this.type && !this.position.column.isLast && binder.applyWordWrapping(this.item, this), 
                            this._presenter.onContinerHeightChanged(value);
                        }
                    }, Object.defineProperty(TablixCell.prototype, "containerHeight", {
                        get: function() {
                            return this._containerHeight;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixCell.prototype.applyStyle = function(style) {
                        style && (style.applyStyle(this), this.contentHeight += style.getExtraBottom() + style.getExtraTop(), 
                        this.contentWidth += style.getExtraLeft() + style.getExtraRight());
                    }, TablixCell.prototype.enableHorizontalResize = function(enable, handler) {
                        this._presenter.enableHorizontalResize(enable, handler);
                    }, TablixCell.prototype.isColumnResizing = function() {
                        return this._column && this._column.isResizing();
                    }, TablixCell;
                })();
                internal.TablixCell = TablixCell;
                var TablixColumn = (function() {
                    function TablixColumn(presenter, columnIndex) {
                        this._presenter = presenter, this._presenter.initialize(this), this._containerWidth = -1, 
                        this._width = -1, this._sizeFixed = !1, this._aligningWidth = -1, this._fixedToAligningWidth = !1, 
                        this._items = [], this._itemType = null, this._footerCell = null, this._columnIndex = columnIndex, 
                        this.isColumnResizing = !1;
                    }
                    return TablixColumn.prototype.initialize = function(owner) {
                        this._owner = owner, this._realizedRowHeaders = [], this._realizedColumnHeaders = [], 
                        this._realizedCornerCells = [], this._realizedBodyCells = [];
                    }, Object.defineProperty(TablixColumn.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixColumn.prototype.getType = function() {
                        return this._realizedCornerCells.length > 0 ? 0 : 2;
                    }, TablixColumn.prototype.getColumnHeadersOrCorners = function() {
                        return this._realizedCornerCells.length > 0 ? this._realizedCornerCells : this._realizedColumnHeaders;
                    }, TablixColumn.prototype.columnHeadersOrCornersEqual = function(newType, headers, hierarchyNavigator) {
                        if (this._items.length !== headers.length) return !1;
                        for (var count = this._items.length, i = 0; i < count; i++) if (!this.columnHeaderOrCornerEquals(this._itemType, this._items[i], newType, headers[i].item, hierarchyNavigator)) return !1;
                        return !0;
                    }, Object.defineProperty(TablixColumn.prototype, "itemType", {
                        get: function() {
                            return this._itemType;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixColumn.prototype.getLeafItem = function() {
                        return 0 === this._items.length ? null : this._items[this._items.length - 1];
                    }, TablixColumn.prototype.columnHeaderOrCornerEquals = function(type1, item1, type2, item2, hierarchyNavigator) {
                        if (type1 !== type2) return !1;
                        if (0 === type1) {
                            if (!hierarchyNavigator.cornerCellItemEquals(item1, item2)) return !1;
                        } else if (!hierarchyNavigator.headerItemEquals(item1, item2)) return !1;
                        return !0;
                    }, TablixColumn.prototype.OnLeafRealized = function(hierarchyNavigator) {
                        var type = this.getType(), columnHeadersOrCorners = this.getColumnHeadersOrCorners();
                        if (this.columnHeadersOrCornersEqual(type, columnHeadersOrCorners, hierarchyNavigator)) this.clearSpanningCellsWidth(this._realizedColumnHeaders); else {
                            var count = columnHeadersOrCorners.length;
                            this._items = [];
                            for (var i = 0; i < count; i++) this._items.push(columnHeadersOrCorners[i].item);
                            this._itemType = type, this.clearSize();
                        }
                    }, TablixColumn.prototype.clearSpanningCellsWidth = function(cells) {
                        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
                            var cell = cells_1[_i];
                            cell.colSpan > 1 && cell.setContainerWidth(-1);
                        }
                    }, TablixColumn.prototype.addCornerCell = function(cell) {
                        cell._column = this, this._realizedCornerCells.push(cell), cell.setContainerWidth(this._containerWidth);
                    }, TablixColumn.prototype.addRowHeader = function(cell) {
                        cell._column = this, this._realizedRowHeaders.push(cell), cell.setContainerWidth(this._containerWidth);
                    }, TablixColumn.prototype.addColumnHeader = function(cell, isLeaf) {
                        cell._column = this, this._realizedColumnHeaders.push(cell), isLeaf && cell.setContainerWidth(this._containerWidth);
                    }, TablixColumn.prototype.addBodyCell = function(cell) {
                        cell._column = this, this._realizedBodyCells.push(cell), cell.setContainerWidth(this._containerWidth);
                    }, Object.defineProperty(TablixColumn.prototype, "footer", {
                        get: function() {
                            return this._footerCell;
                        },
                        set: function(footerCell) {
                            this._footerCell = footerCell, footerCell._column = this, footerCell.setContainerWidth(this._containerWidth);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixColumn.prototype.isResizing = function() {
                        return this.isColumnResizing;
                    }, TablixColumn.prototype.onResize = function(width) {
                        this.isColumnResizing = !0, width !== this.getContentContextualWidth() && (this._containerWidth = width, 
                        this.setContainerWidth(this._containerWidth), this._sizeFixed = !0, this._fixedToAligningWidth = !1, 
                        this._aligningWidth = -1);
                    }, TablixColumn.prototype.onResizeEnd = function(width) {
                        this.isColumnResizing = !1;
                        var gridPresenter = this.owner._presenter;
                        gridPresenter && gridPresenter.invokeColumnResizeEndCallback(this, width);
                    }, TablixColumn.prototype.fixSize = function() {
                        var shouldAlign = this._aligningWidth !== -1, switched = shouldAlign !== this._fixedToAligningWidth;
                        (!this._sizeFixed || switched || shouldAlign) && (this._aligningWidth === -1 ? this.setContainerWidth(this._containerWidth) : this.setContainerWidth(this._aligningWidth), 
                        this._sizeFixed = !0, this._fixedToAligningWidth = this._aligningWidth !== -1);
                    }, TablixColumn.prototype.clearSize = function() {
                        this._containerWidth = -1, this.setContainerWidth(this._containerWidth), this._sizeFixed = !1;
                    }, TablixColumn.prototype.getContentContextualWidth = function() {
                        return this._containerWidth;
                    }, TablixColumn.prototype.getCellIContentContextualWidth = function(cell) {
                        return this._presenter.getCellWidth(cell);
                    }, TablixColumn.prototype.getContextualWidth = function() {
                        return this._width !== -1 && this._containerWidth !== -1 || (this._width = this._presenter.getWidth()), 
                        this._width;
                    }, TablixColumn.prototype.calculateSize = function() {
                        if (this._sizeFixed) return this._containerWidth;
                        var contentWidth = 0, persistedWidth = this._presenter.getPersistedWidth();
                        if (null != persistedWidth) {
                            contentWidth = persistedWidth;
                            for (var i = 0, len = this._realizedColumnHeaders.length; i < len - 1; i++) {
                                var cell = this._realizedColumnHeaders[i];
                                1 === cell.colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell)));
                            }
                            return this._containerWidth = contentWidth;
                        }
                        for (var _i = 0, _a = this._realizedColumnHeaders; _i < _a.length; _i++) {
                            var cell = _a[_i];
                            1 === cell.colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell)));
                        }
                        for (var _b = 0, _c = this._realizedRowHeaders; _b < _c.length; _b++) {
                            var cell = _c[_b];
                            1 === cell.colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell)));
                        }
                        for (var _d = 0, _e = this._realizedCornerCells; _d < _e.length; _d++) {
                            var cell = _e[_d];
                            contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell));
                        }
                        for (var _f = 0, _g = this._realizedBodyCells; _f < _g.length; _f++) {
                            var cell = _g[_f];
                            contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell));
                        }
                        return null !== this._footerCell && 1 === this._footerCell.colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(this._footerCell))), 
                        this._containerWidth = contentWidth;
                    }, TablixColumn.prototype.setAligningContextualWidth = function(size) {
                        this._aligningWidth = size;
                    }, TablixColumn.prototype.getAligningContextualWidth = function() {
                        return this._aligningWidth;
                    }, TablixColumn.prototype.setContainerWidth = function(value) {
                        for (var _i = 0, _a = this._realizedColumnHeaders; _i < _a.length; _i++) {
                            var cell = _a[_i];
                            1 === cell.colSpan && cell.setContainerWidth(value);
                        }
                        for (var _b = 0, _c = this._realizedRowHeaders; _b < _c.length; _b++) {
                            var cell = _c[_b];
                            1 === cell.colSpan && cell.setContainerWidth(value);
                        }
                        for (var _d = 0, _e = this._realizedCornerCells; _d < _e.length; _d++) {
                            var cell = _e[_d];
                            cell.setContainerWidth(value);
                        }
                        for (var _f = 0, _g = this._realizedBodyCells; _f < _g.length; _f++) {
                            var cell = _g[_f];
                            cell.setContainerWidth(value);
                        }
                        null !== this._footerCell && 1 === this._footerCell.colSpan && this._footerCell.setContainerWidth(value), 
                        this._width = value;
                    }, TablixColumn.prototype.getTablixCell = function() {
                        var realizedCells = this._realizedColumnHeaders.length > 0 ? this._realizedColumnHeaders : this._realizedCornerCells;
                        return realizedCells[realizedCells.length - 1];
                    }, TablixColumn.prototype.getIndex = function(grid) {
                        return grid.realizedColumns.indexOf(this);
                    }, TablixColumn.prototype.getHeaders = function() {
                        return this._realizedColumnHeaders;
                    }, TablixColumn.prototype.getOtherDimensionHeaders = function() {
                        return this._realizedRowHeaders;
                    }, TablixColumn.prototype.getCellContextualSpan = function(cell) {
                        return cell.colSpan;
                    }, TablixColumn.prototype.getOtherDimensionOwner = function(cell) {
                        return cell._row;
                    }, TablixColumn;
                })();
                internal.TablixColumn = TablixColumn;
                var TablixRow = (function() {
                    function TablixRow(presenter) {
                        this._containerHeight = -1, this._presenter = presenter, this._presenter.initialize(this), 
                        this._allocatedCells = [], this._heightFixed = !1, this._containerHeight = -1, this._height = -1;
                    }
                    return TablixRow.prototype.initialize = function(owner) {
                        this._owner = owner, this._realizedRowHeaders = [], this._realizedBodyCells = [], 
                        this._realizedCornerCells = [], this._realizedColumnHeaders = [], this._realizedCellsCount = 0;
                    }, Object.defineProperty(TablixRow.prototype, "presenter", {
                        get: function() {
                            return this._presenter;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixRow.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixRow.prototype.releaseUnusedCells = function(owner) {
                        this.releaseCells(owner, this._realizedCellsCount);
                    }, TablixRow.prototype.releaseAllCells = function(owner) {
                        this.releaseCells(owner, 0);
                    }, TablixRow.prototype.releaseCells = function(owner, startIndex) {
                        for (var cells = this._allocatedCells, length = cells.length, i = startIndex; i < length; i++) {
                            var cell = cells[i];
                            owner._unbindCell(cell), cell.clear();
                        }
                    }, TablixRow.prototype.moveScrollableCellsToEnd = function(count) {
                        for (var frontIndex = Math.max(this._realizedRowHeaders.length, this._realizedCornerCells.length), i = frontIndex; i < frontIndex + count; i++) {
                            var cell = this._allocatedCells[i];
                            this._presenter.onRemoveCell(cell), this._presenter.onAppendCell(cell), this._allocatedCells.push(cell);
                        }
                        this._allocatedCells.splice(frontIndex, count);
                    }, TablixRow.prototype.moveScrollableCellsToStart = function(count) {
                        for (var frontIndex = Math.max(this._realizedRowHeaders.length, this._realizedCornerCells.length), i = frontIndex; i < frontIndex + count; i++) {
                            var cell = this._allocatedCells.pop();
                            this._presenter.onRemoveCell(cell), this._presenter.onInsertCellBefore(cell, this._allocatedCells[frontIndex]), 
                            this._allocatedCells.splice(frontIndex, 0, cell);
                        }
                    }, TablixRow.prototype.getOrCreateCornerCell = function(column) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(!1), column.addCornerCell(cell), this._realizedCornerCells.push(cell), 
                        cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getOrCreateRowHeader = function(column, scrollable, leaf) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(scrollable), column.addRowHeader(cell), this._realizedRowHeaders.push(cell), 
                        leaf && cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getOrCreateColumnHeader = function(column, scrollable, leaf) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(scrollable), column.addColumnHeader(cell, leaf), this._realizedColumnHeaders.push(cell), 
                        cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getOrCreateBodyCell = function(column, scrollable) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(scrollable), column.addBodyCell(cell), this._realizedBodyCells.push(cell), 
                        cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getOrCreateFooterRowHeader = function(column) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(!1), column.footer = cell, this._realizedRowHeaders.push(cell), 
                        cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getOrCreateFooterBodyCell = function(column, scrollable) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(scrollable), column.footer = cell, this._realizedBodyCells.push(cell), 
                        cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getRowHeaderLeafIndex = function() {
                        for (var index = -1, count = this._allocatedCells.length, i = 0; i < count && 1 === this._allocatedCells[i].type; i++) index++;
                        return index;
                    }, TablixRow.prototype.getAllocatedCellAt = function(index) {
                        return this._allocatedCells[index];
                    }, TablixRow.prototype.moveCellsBy = function(delta) {
                        if (0 !== this._allocatedCells.length) if (delta > 0) for (var refCell = this._allocatedCells[0], i = 0; i < delta; i++) {
                            var cell = this.createCell(this);
                            this._presenter.onInsertCellBefore(cell, refCell), this._allocatedCells.unshift(cell), 
                            refCell = cell;
                        } else {
                            delta = -delta;
                            for (var i = 0; i < delta; i++) this._presenter.onRemoveCell(this._allocatedCells[i]);
                            this._allocatedCells.splice(0, delta);
                        }
                    }, TablixRow.prototype.getRealizedCellCount = function() {
                        return this._realizedCellsCount;
                    }, TablixRow.prototype.getRealizedHeadersCount = function() {
                        return this._realizedRowHeaders.length;
                    }, TablixRow.prototype.getRealizedHeaderAt = function(index) {
                        return this._realizedRowHeaders[index];
                    }, TablixRow.prototype.getTablixCell = function() {
                        var realizedCells;
                        return realizedCells = this._realizedRowHeaders.length > 0 ? this._realizedRowHeaders : this._realizedCornerCells.length > 0 ? this._realizedCornerCells : this._realizedColumnHeaders, 
                        realizedCells[realizedCells.length - 1];
                    }, TablixRow.prototype.getOrCreateEmptySpaceCell = function() {
                        var cell = this._allocatedCells[this._realizedCellsCount];
                        return void 0 === cell && (cell = this.createCell(this), this._allocatedCells[this._realizedCellsCount] = cell, 
                        this._presenter.onAppendCell(cell)), cell;
                    }, TablixRow.prototype.createCell = function(row) {
                        var presenter = this._presenter.createCellPresenter(this._owner.owner.layoutManager.getLayoutKind());
                        return new TablixCell(presenter, presenter, this);
                    }, TablixRow.prototype.getOrCreateCell = function() {
                        var cell = this._allocatedCells[this._realizedCellsCount];
                        return void 0 === cell ? (cell = this.createCell(this), this._allocatedCells[this._realizedCellsCount] = cell, 
                        this._presenter.onAppendCell(cell)) : (cell.colSpan = 1, cell.rowSpan = 1), this._realizedCellsCount = this._realizedCellsCount + 1, 
                        cell;
                    }, TablixRow.prototype.isResizing = function() {
                        return !1;
                    }, TablixRow.prototype.onResize = function(height) {
                        height !== this.getContentContextualWidth() && (this._containerHeight = height, 
                        this.setContentHeight(), this._heightFixed = !0, this.setAligningContextualWidth(-1));
                    }, TablixRow.prototype.onResizeEnd = function(height) {}, TablixRow.prototype.fixSize = function() {
                        this.setContentHeight(), this._heightFixed = !0;
                    }, TablixRow.prototype.unfixSize = function() {
                        this._heightFixed = !1, this._height = -1;
                    }, TablixRow.prototype.getContentContextualWidth = function() {
                        return this._containerHeight;
                    }, TablixRow.prototype.getCellIContentContextualWidth = function(cell) {
                        return this.presenter.getCellContentHeight(cell);
                    }, TablixRow.prototype.getCellSpanningHeight = function(cell) {
                        var height = this.getContextualWidth();
                        if (cell.rowSpan > 1) for (var index = this.getIndex(this.owner), rows = this.owner.realizedRows, i = 1; i < cell.rowSpan; i++) height += rows[i + index].getContextualWidth();
                        return height;
                    }, TablixRow.prototype.getContextualWidth = function() {
                        return this._height !== -1 && this._containerHeight !== -1 || (this._height = this._presenter.getHeight()), 
                        this._height;
                    }, TablixRow.prototype.sizeFixed = function() {
                        return this._heightFixed;
                    }, TablixRow.prototype.calculateSize = function() {
                        if (this._heightFixed) return this._containerHeight;
                        for (var contentHeight = 0, count = this._realizedRowHeaders.length, i = 0; i < count; i++) {
                            var cell = this._realizedRowHeaders[i];
                            1 === cell.rowSpan && (contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(cell)));
                        }
                        count = this._realizedCornerCells.length;
                        for (var i = 0; i < count; i++) contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(this._realizedCornerCells[i]));
                        count = this._realizedColumnHeaders.length;
                        for (var i = 0; i < count; i++) {
                            var cell = this._realizedColumnHeaders[i];
                            1 === cell.rowSpan && (contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(cell)));
                        }
                        count = this._realizedBodyCells.length;
                        for (var i = 0; i < count; i++) contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(this._realizedBodyCells[i]));
                        return this._containerHeight = contentHeight;
                    }, TablixRow.prototype.setAligningContextualWidth = function(size) {}, TablixRow.prototype.getAligningContextualWidth = function() {
                        return -1;
                    }, TablixRow.prototype.setContentHeight = function() {
                        for (var count = this._realizedRowHeaders.length, i = count - 1; i >= 0; i--) {
                            var cell = this._realizedRowHeaders[i];
                            cell.containerHeight !== -1 && cell._row.sizeFixed() || (cell.setContainerHeight(this._containerHeight), 
                            cell.rowSpan > 1 && cell.setContainerHeight(this.getCellSpanningHeight(cell)));
                        }
                        for (var _i = 0, _a = this._realizedCornerCells; _i < _a.length; _i++) {
                            var cell = _a[_i];
                            cell.containerHeight !== -1 && cell._row.sizeFixed() || cell.setContainerHeight(this._containerHeight);
                        }
                        for (var _b = 0, _c = this._realizedColumnHeaders; _b < _c.length; _b++) {
                            var cell = _c[_b];
                            cell.containerHeight !== -1 && cell._row.sizeFixed() || (cell.setContainerHeight(this._containerHeight), 
                            cell.rowSpan > 1 && cell.setContainerHeight(this.getCellSpanningHeight(cell)));
                        }
                        count = this._realizedBodyCells.length;
                        for (var _d = 0, _e = this._realizedBodyCells; _d < _e.length; _d++) {
                            var cell = _e[_d];
                            cell.containerHeight !== -1 && cell._row.sizeFixed() || cell.setContainerHeight(this._containerHeight);
                        }
                        this._height = -1;
                    }, TablixRow.prototype.getIndex = function(grid) {
                        return grid.realizedRows.indexOf(this);
                    }, TablixRow.prototype.getHeaders = function() {
                        return this._realizedRowHeaders;
                    }, TablixRow.prototype.getOtherDimensionHeaders = function() {
                        return this._realizedColumnHeaders;
                    }, TablixRow.prototype.getCellContextualSpan = function(cell) {
                        return cell.rowSpan;
                    }, TablixRow.prototype.getOtherDimensionOwner = function(cell) {
                        return cell._column;
                    }, TablixRow;
                })();
                internal.TablixRow = TablixRow;
                var TablixGrid = (function() {
                    function TablixGrid(presenter) {
                        this._presenter = presenter, this._footerRow = null;
                    }
                    return TablixGrid.prototype.initialize = function(owner, gridHost, footerHost) {
                        this._owner = owner, this._presenter.initialize(this, gridHost, footerHost, owner), 
                        this.fillColumnsProportionally = !1, this._realizedRows = [], this._realizedColumns = [], 
                        this._emptySpaceHeaderCell = null, this._emptyFooterSpaceCell = null;
                    }, Object.defineProperty(TablixGrid.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "fillColumnsProportionally", {
                        get: function() {
                            return this._fillColumnsProportionally;
                        },
                        set: function(value) {
                            this._fillColumnsProportionally !== value && (this._fillColumnsProportionally = value, 
                            this._presenter.onFillColumnsProportionallyChanged(value));
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "realizedColumns", {
                        get: function() {
                            return this._realizedColumns;
                        },
                        set: function(columns) {
                            this._realizedColumns = columns;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "realizedRows", {
                        get: function() {
                            return this._realizedRows;
                        },
                        set: function(rows) {
                            this._realizedRows = rows;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "footerRow", {
                        get: function() {
                            return this._footerRow;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "emptySpaceHeaderCell", {
                        get: function() {
                            return this._emptySpaceHeaderCell;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "emptySpaceFooterCell", {
                        get: function() {
                            return this._emptyFooterSpaceCell;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixGrid.prototype.ShowEmptySpaceCells = function(rowSpan, width) {
                        0 !== this._realizedRows.length && (0 === this._realizedRows.length || this._emptySpaceHeaderCell || (this._emptySpaceHeaderCell = this._realizedRows[0].getOrCreateEmptySpaceCell(), 
                        this._emptySpaceHeaderCell.rowSpan = rowSpan, this._emptySpaceHeaderCell.colSpan = 1, 
                        this._emptySpaceHeaderCell.setContainerWidth(width)), this._footerRow && null === this._emptyFooterSpaceCell && (this._emptyFooterSpaceCell = this._footerRow.getOrCreateEmptySpaceCell(), 
                        this._emptyFooterSpaceCell.rowSpan = 1, this._emptyFooterSpaceCell.colSpan = 1, 
                        this._emptyFooterSpaceCell.setContainerWidth(width)));
                    }, TablixGrid.prototype.HideEmptySpaceCells = function() {
                        this._emptySpaceHeaderCell && (this._emptySpaceHeaderCell.clear(), this._emptySpaceHeaderCell = null), 
                        this._emptyFooterSpaceCell && (this._emptyFooterSpaceCell.clear(), this._emptyFooterSpaceCell = null);
                    }, TablixGrid.prototype.onStartRenderingSession = function(clear) {
                        clear && (this.clearRows(), this.clearColumns());
                    }, TablixGrid.prototype.onStartRenderingIteration = function() {
                        this.initializeRows(), this.initializeColumns();
                    }, TablixGrid.prototype.onEndRenderingIteration = function() {
                        var rows = this._rows;
                        if (void 0 !== rows) for (var rowCount = rows.length, i = 0; i < rowCount; i++) rows[i].releaseUnusedCells(this._owner);
                        this._footerRow && this._footerRow.releaseUnusedCells(this._owner);
                    }, TablixGrid.prototype.getOrCreateRow = function(rowIndex) {
                        var currentRow = this._rows[rowIndex];
                        return void 0 === currentRow && (currentRow = new TablixRow(this._presenter.createRowPresenter()), 
                        currentRow.initialize(this), this._presenter.onAppendRow(currentRow), this._rows[rowIndex] = currentRow), 
                        void 0 === this._realizedRows[rowIndex] && (this._realizedRows[rowIndex] = currentRow), 
                        currentRow;
                    }, TablixGrid.prototype.getOrCreateFootersRow = function() {
                        return null === this._footerRow && (this._footerRow = new TablixRow(this._presenter.createRowPresenter()), 
                        this._footerRow.initialize(this), this._presenter.onAddFooterRow(this._footerRow)), 
                        this._footerRow;
                    }, TablixGrid.prototype.moveRowsToEnd = function(moveFromIndex, count) {
                        for (var i = 0; i < count; i++) {
                            var row = this._rows[i + moveFromIndex];
                            row.unfixSize(), this._presenter.onRemoveRow(row), this._presenter.onAppendRow(row), 
                            this._rows.push(row);
                        }
                        this._rows.splice(moveFromIndex, count);
                    }, TablixGrid.prototype.moveRowsToStart = function(moveToIndex, count) {
                        for (var refRow = this._rows[moveToIndex], i = 0; i < count; i++) {
                            var row = this._rows.pop();
                            row.unfixSize(), this._presenter.onRemoveRow(row), this._presenter.onInsertRowBefore(row, refRow), 
                            this._rows.splice(moveToIndex + i, 0, row);
                        }
                    }, TablixGrid.prototype.moveColumnsToEnd = function(moveFromIndex, count) {
                        for (var firstCol = this._rows[0]._realizedCornerCells.length, leafStartDepth = Math.max(this._columns[firstCol]._realizedColumnHeaders.length - 1, 0), i = leafStartDepth; i < this._rows.length; i++) this._rows[i].moveScrollableCellsToEnd(count);
                        for (var i = 0; i < count; i++) {
                            var column = this._columns[i + moveFromIndex];
                            this._columns.push(column);
                        }
                        this._columns.splice(moveFromIndex, count);
                    }, TablixGrid.prototype.moveColumnsToStart = function(moveToIndex, count) {
                        for (var firstCol = this._rows[0]._realizedCornerCells.length, leafStartDepth = Math.max(this._columns[firstCol]._realizedColumnHeaders.length - 1, 0), i = leafStartDepth; i < this._rows.length; i++) this._rows[i].moveScrollableCellsToStart(count);
                        for (var i = 0; i < count; i++) {
                            var column = this._columns.pop();
                            this._columns.splice(moveToIndex + i, 0, column);
                        }
                    }, TablixGrid.prototype.getOrCreateColumn = function(columnIndex) {
                        var currentColumn = this._columns[columnIndex];
                        return void 0 === currentColumn && (currentColumn = new TablixColumn(this._presenter.createColumnPresenter(columnIndex), columnIndex), 
                        currentColumn.initialize(this), this._columns[columnIndex] = currentColumn), void 0 === this._realizedColumns[columnIndex] && (this._realizedColumns[columnIndex] = currentColumn), 
                        currentColumn;
                    }, TablixGrid.prototype.initializeColumns = function() {
                        this._columns || (this._columns = []);
                        for (var length = this._columns.length, i = 0; i < length; i++) this._columns[i].initialize(this);
                        this._realizedColumns = [];
                    }, TablixGrid.prototype.clearColumns = function() {
                        this._columns = null, this._realizedColumns = null;
                    }, TablixGrid.prototype.initializeRows = function() {
                        var hasFooter = this._owner.rowDimension.hasFooter() && null !== this._footerRow;
                        this._realizedRows = [], this._rows || (this._rows = []);
                        for (var rows = this._rows, length = rows.length, i = 0; i < length; i++) rows[i].initialize(this);
                        hasFooter && (this._footerRow || this.getOrCreateFootersRow(), this._footerRow.initialize(this));
                    }, TablixGrid.prototype.clearRows = function() {
                        var rows = this._rows;
                        if (rows) {
                            for (var length_1 = rows.length, i = 0; i < length_1; i++) rows[i].releaseAllCells(this._owner);
                            this._footerRow && this._footerRow.releaseAllCells(this._owner), this._presenter.onClear(), 
                            this._footerRow = null, this._rows = null, this._realizedRows = null;
                        }
                    }, TablixGrid.prototype.getWidth = function() {
                        return this._presenter.getWidth();
                    }, TablixGrid.prototype.getHeight = function() {
                        return this._presenter.getHeight();
                    }, TablixGrid;
                })();
                internal.TablixGrid = TablixGrid;
            })(internal = controls.internal || (controls.internal = {}));
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var internal;
            !(function(internal) {
                var PixelConverter = jsCommon.PixelConverter, SizeComputationManager = (function() {
                    function SizeComputationManager() {}
                    return Object.defineProperty(SizeComputationManager.prototype, "visibleWidth", {
                        get: function() {
                            return this._viewport ? this._viewport.width : 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "visibleHeight", {
                        get: function() {
                            return this._viewport ? this._viewport.height : 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "gridWidth", {
                        get: function() {
                            return this.visibleWidth;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "gridHeight", {
                        get: function() {
                            return this.visibleHeight;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "rowHeight", {
                        get: function() {
                            return this._cellHeight;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "cellWidth", {
                        get: function() {
                            return this._cellWidth;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "cellHeight", {
                        get: function() {
                            return this._cellHeight;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "contentWidth", {
                        get: function() {
                            return this._cellWidth;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "contentHeight", {
                        get: function() {
                            return this._cellHeight;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), SizeComputationManager.prototype.updateColumnCount = function(columnCount) {
                        this._columnCount = columnCount;
                    }, SizeComputationManager.prototype.updateRowHeight = function(rowHeight) {
                        this._cellHeight = rowHeight;
                    }, SizeComputationManager.prototype.updateScalingFactor = function(scalingFactor) {
                        this._scalingFactor = scalingFactor, this._cellWidth = this.computeColumnWidth(this._columnCount);
                    }, SizeComputationManager.prototype.updateViewport = function(viewport) {
                        this._viewport = viewport, this._cellWidth = this.computeColumnWidth(this._columnCount), 
                        this._cellHeight = this.computeColumnHeight();
                    }, SizeComputationManager.prototype.computeColumnWidth = function(totalColumnCount) {
                        var scalingFactor = this._scalingFactor;
                        scalingFactor || (scalingFactor = 1);
                        var minimumColumnWidth = scalingFactor * SizeComputationManager.TablixMinimumColumnWidth, maxAllowedColumns = Math.floor(this._viewport.width / minimumColumnWidth);
                        return this.fitToColumnCount(maxAllowedColumns, totalColumnCount);
                    }, SizeComputationManager.prototype.computeColumnHeight = function() {
                        if (!this.hasImageContent) return this._cellHeight;
                        var width = this._viewport.width;
                        return width <= 250 ? 20 : width <= 510 ? 51 : width <= 770 ? 52 : void 0;
                    }, SizeComputationManager.prototype.fitToColumnCount = function(maxAllowedColumnCount, totalColumnCount) {
                        var columnsToFit = Math.min(maxAllowedColumnCount, totalColumnCount);
                        return Math.floor(this._viewport.width / columnsToFit);
                    }, SizeComputationManager.TablixMinimumColumnWidth = 75, SizeComputationManager;
                })();
                internal.SizeComputationManager = SizeComputationManager;
                var DimensionLayoutManager = (function() {
                    function DimensionLayoutManager(owner, grid, realizationManager) {
                        this._owner = owner, this._grid = grid, this._lastScrollOffset = null, this._isScrolling = !1, 
                        this._fixedSizeEnabled = !0, this._done = !1, this._realizationManager = realizationManager;
                    }
                    return Object.defineProperty(DimensionLayoutManager.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        set: function(owner) {
                            this._owner = owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(DimensionLayoutManager.prototype, "realizationManager", {
                        get: function() {
                            return this._realizationManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(DimensionLayoutManager.prototype, "fixedSizeEnabled", {
                        get: function() {
                            return this._fixedSizeEnabled;
                        },
                        set: function(enable) {
                            this._fixedSizeEnabled = enable;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.onCornerCellRealized = function(item, cell, leaf) {
                        this._realizationManager.onCornerCellRealized(item, cell);
                    }, DimensionLayoutManager.prototype.onHeaderRealized = function(item, cell, leaf) {
                        this._realizationManager.onHeaderRealized(item, cell, leaf);
                    }, Object.defineProperty(DimensionLayoutManager.prototype, "needsToRealize", {
                        get: function() {
                            return this._realizationManager.needsToRealize;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.getVisibleSizeRatio = function() {
                        return 1 - this.dimension.getFractionScrollOffset();
                    }, Object.defineProperty(DimensionLayoutManager.prototype, "alignToEnd", {
                        get: function() {
                            return this._alignToEnd;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(DimensionLayoutManager.prototype, "done", {
                        get: function() {
                            return this._done;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), DimensionLayoutManager.prototype._requiresMeasure = function() {
                        return !0;
                    }, DimensionLayoutManager.prototype.startScrollingSession = function() {
                        this._isScrolling = !0;
                    }, DimensionLayoutManager.prototype.endScrollingSession = function() {
                        this._isScrolling = !1;
                    }, DimensionLayoutManager.prototype.isScrolling = function() {
                        return this._isScrolling;
                    }, DimensionLayoutManager.prototype.isResizing = function() {
                        return !1;
                    }, DimensionLayoutManager.prototype.getOtherHierarchyContextualHeight = function() {
                        var otherDimension = this.dimension.otherDimension, count = otherDimension.getDepth(), contextualHeight = 0, items = this._getRealizedItems();
                        if (items.length > 0) for (var i = 0; i < count; i++) contextualHeight += items[i].getContextualWidth();
                        return contextualHeight;
                    }, DimensionLayoutManager.prototype._isAutoSized = function() {
                        return !1;
                    }, DimensionLayoutManager.prototype.onStartRenderingSession = function() {
                        this._measureEnabled = this._requiresMeasure(), this._gridOffset = this.dimension.otherDimension.getDepth();
                    }, DimensionLayoutManager.prototype.onEndRenderingSession = function() {
                        this._realizationManager.onEndRenderingSession(), this._alignToEnd = !1, this._done = !1, 
                        this._measureEnabled = !0, this._sendDimensionsToControl();
                    }, DimensionLayoutManager.prototype._sendDimensionsToControl = function() {}, Object.defineProperty(DimensionLayoutManager.prototype, "measureEnabled", {
                        get: function() {
                            return this._measureEnabled;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.getFooterContextualWidth = function() {
                        return 0;
                    }, DimensionLayoutManager.prototype.onStartRenderingIteration = function(clear, contextualWidth) {
                        this._measureEnabled && !this._done && (this._contextualWidthToFill = (contextualWidth - this.otherScrollbarContextualWidth) * this.getGridScale() - this.getFooterContextualWidth()), 
                        this._realizationManager.onStartRenderingIteration(), clear ? this._lastScrollOffset = null : null !== this._lastScrollOffset && this.swapElements();
                    }, Object.defineProperty(DimensionLayoutManager.prototype, "allItemsRealized", {
                        get: function() {
                            return this.getRealizedItemsCount() - this._gridOffset === this.dimension.getItemsCount() || 0 === this.dimension.getItemsCount();
                        },
                        enumerable: !0,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.onEndRenderingIteration = function() {
                        if (!this._done) {
                            if (!this._measureEnabled) return this._lastScrollOffset = this.dimension.scrollOffset, 
                            void (this._done = !0);
                            var newScrollOffset, gridContextualWidth = this.getGridContextualWidth(), filled = powerbi.Double.greaterOrEqualWithPrecision(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision), allRealized = this.allItemsRealized;
                            newScrollOffset = filled ? this.scrollForwardToAlignEnd(gridContextualWidth) : this.scrollBackwardToFill(gridContextualWidth), 
                            this._realizationManager.onEndRenderingIteration(gridContextualWidth, filled);
                            var originalScrollbarVisible = this.dimension.scrollbar.visible;
                            this.updateScrollbar(gridContextualWidth), this._done = (filled || allRealized) && this.dimension.scrollbar.visible === originalScrollbarVisible && powerbi.Double.equalWithPrecision(newScrollOffset, this.dimension.scrollOffset, DimensionLayoutManager._scrollOffsetPrecision), 
                            this.dimension.scrollOffset = newScrollOffset, this._lastScrollOffset = this.dimension.scrollOffset;
                        }
                    }, DimensionLayoutManager.prototype.getScrollDeltaWithinPage = function() {
                        if (null !== this._lastScrollOffset) {
                            var delta = this.dimension.getIntegerScrollOffset() - Math.floor(this._lastScrollOffset);
                            if (Math.abs(delta) < this.getRealizedItemsCount() - this.dimension.otherDimension.getDepth()) return delta;
                        }
                        return null;
                    }, DimensionLayoutManager.prototype.swapElements = function() {
                        var delta = this.getScrollDeltaWithinPage();
                        if (null !== delta) {
                            var otherHierarchyDepth = this.dimension.otherDimension.getDepth();
                            Math.abs(delta) < this.getRealizedItemsCount() - otherHierarchyDepth && (delta > 0 ? this._moveElementsToBottom(otherHierarchyDepth, delta) : delta < 0 && this._moveElementsToTop(otherHierarchyDepth, -delta));
                        }
                    }, DimensionLayoutManager.prototype._getRealizedItems = function() {
                        return null;
                    }, DimensionLayoutManager.prototype.getRealizedItemsCount = function() {
                        var realizedItems = this._getRealizedItems();
                        return realizedItems.length;
                    }, DimensionLayoutManager.prototype._moveElementsToBottom = function(moveFromIndex, count) {}, 
                    DimensionLayoutManager.prototype._moveElementsToTop = function(moveToIndex, count) {}, 
                    DimensionLayoutManager.prototype.isScrollingWithinPage = function() {
                        return null !== this.getScrollDeltaWithinPage();
                    }, DimensionLayoutManager.prototype.getGridContextualWidth = function() {
                        return 0;
                    }, DimensionLayoutManager.prototype.updateScrollbar = function(gridContextualWidth) {
                        var scrollbar = this.dimension.scrollbar;
                        scrollbar.viewMin = this.dimension.scrollOffset, scrollbar.min = 0, scrollbar.max = this.dimension.getItemsCount(), 
                        scrollbar.viewSize = this.getViewSize(gridContextualWidth), this.dimension.scrollbar.show(this.canScroll(gridContextualWidth));
                    }, DimensionLayoutManager.prototype.getViewSize = function(gridContextualWidth) {
                        var count = this.getRealizedItemsCount();
                        if (0 === count) return 0;
                        for (var startIndex = this._gridOffset, sizeInItems = 0, sizeInPixels = 0, widthToFill = this._contextualWidthToFill, scrollableArea = widthToFill - this.getOtherHierarchyContextualHeight(), error = this.getMeaurementError(gridContextualWidth), i = startIndex; i < count; i++) {
                            var visibleRatio = void 0;
                            visibleRatio = i === startIndex ? this.getVisibleSizeRatio() : 1;
                            var itemContextualWidth = this.getItemContextualWidthWithScrolling(i) * error;
                            if (sizeInPixels += itemContextualWidth, sizeInItems += visibleRatio, powerbi.Double.greaterWithPrecision(sizeInPixels, scrollableArea, DimensionLayoutManager._pixelPrecision)) {
                                sizeInItems -= (sizeInPixels - scrollableArea) / itemContextualWidth * visibleRatio;
                                break;
                            }
                        }
                        return sizeInItems;
                    }, DimensionLayoutManager.prototype.isScrollableHeader = function(item, items, index) {
                        if (0 !== index || 0 === this.dimension.getFractionScrollOffset()) return !1;
                        var hierarchyNavigator = this.dimension._hierarchyNavigator;
                        if (hierarchyNavigator.isLeaf(item)) return !0;
                        var currentItem = item, currentItems = items;
                        do {
                            if (currentItems = hierarchyNavigator.getChildren(currentItem), currentItem = this.dimension.getFirstVisibleItem(hierarchyNavigator.getLevel(currentItem) + 1), 
                            void 0 === currentItem) break;
                            if (!hierarchyNavigator.isLastItem(currentItem, currentItems)) return !1;
                        } while (!hierarchyNavigator.isLeaf(currentItem));
                        return !0;
                    }, DimensionLayoutManager.prototype.reachedEnd = function() {
                        return this.dimension.getIntegerScrollOffset() + (this.getRealizedItemsCount() - this._gridOffset) >= this.dimension.getItemsCount();
                    }, DimensionLayoutManager.prototype.scrollBackwardToFill = function(gridContextualWidth) {
                        var newScrollOffset = this.dimension.scrollOffset;
                        if (this.reachedEnd()) {
                            var widthToFill = this._contextualWidthToFill - gridContextualWidth;
                            if (this.dimension.getItemsCount() > 0) {
                                var averageColumnwidth = gridContextualWidth / (this.getRealizedItemsCount() - this.dimension.getFractionScrollOffset());
                                newScrollOffset = this.dimension.getValidScrollOffset(Math.floor(this.dimension.scrollOffset - widthToFill / averageColumnwidth));
                            }
                            this._alignToEnd = !powerbi.Double.equalWithPrecision(newScrollOffset, this.dimension.scrollOffset, DimensionLayoutManager._scrollOffsetPrecision);
                        }
                        return newScrollOffset;
                    }, DimensionLayoutManager.prototype.getItemContextualWidth = function(index) {
                        var realizedItems = this._getRealizedItems();
                        return index >= realizedItems.length ? null : realizedItems[index].getContextualWidth();
                    }, DimensionLayoutManager.prototype.getItemContextualWidthWithScrolling = function(index) {
                        return this.getSizeWithScrolling(this.getItemContextualWidth(index), index);
                    }, DimensionLayoutManager.prototype.getSizeWithScrolling = function(size, index) {
                        var ratio;
                        return ratio = this._gridOffset === index ? this.getVisibleSizeRatio() : 1, size * ratio;
                    }, DimensionLayoutManager.prototype.getGridContextualWidthFromItems = function() {
                        for (var count = this.getRealizedItemsCount(), contextualWidth = 0, i = 0; i < count; i++) contextualWidth += this.getItemContextualWidthWithScrolling(i);
                        return contextualWidth;
                    }, DimensionLayoutManager.prototype.getMeaurementError = function(gridContextualWidth) {
                        return gridContextualWidth / this.getGridContextualWidthFromItems();
                    }, DimensionLayoutManager.prototype.scrollForwardToAlignEnd = function(gridContextualWidth) {
                        var newScrollOffset = this.dimension.scrollOffset;
                        if (this._alignToEnd) {
                            var withinThreshold = powerbi.Double.equalWithPrecision(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision);
                            if (!withinThreshold) for (var count = this.getRealizedItemsCount(), startIndex = this._gridOffset, widthToScroll = gridContextualWidth - this._contextualWidthToFill, error = this.getMeaurementError(gridContextualWidth), i = startIndex; i < count; i++) {
                                var itemContextualWidth = this.getItemContextualWidth(i) * error;
                                if (!powerbi.Double.lessWithPrecision(itemContextualWidth, widthToScroll, DimensionLayoutManager._pixelPrecision)) {
                                    var visibleRatio = startIndex === i ? 1 - this.dimension.getFractionScrollOffset() : 1;
                                    newScrollOffset = this.dimension.getValidScrollOffset(this.dimension.scrollOffset + (i - startIndex) + widthToScroll * visibleRatio / itemContextualWidth);
                                    break;
                                }
                                widthToScroll -= itemContextualWidth;
                            }
                            this._alignToEnd = !withinThreshold;
                        }
                        return newScrollOffset;
                    }, Object.defineProperty(DimensionLayoutManager.prototype, "dimension", {
                        get: function() {
                            return null;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(DimensionLayoutManager.prototype, "otherLayoutManager", {
                        get: function() {
                            return this.dimension.otherDimension.layoutManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(DimensionLayoutManager.prototype, "contextualWidthToFill", {
                        get: function() {
                            return this._contextualWidthToFill;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.getGridScale = function() {
                        return 0;
                    }, Object.defineProperty(DimensionLayoutManager.prototype, "otherScrollbarContextualWidth", {
                        get: function() {
                            return 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.getActualContextualWidth = function(gridContextualWidth) {
                        return this._isAutoSized() && !this.canScroll(gridContextualWidth) ? gridContextualWidth : this._contextualWidthToFill;
                    }, DimensionLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                        return !1;
                    }, DimensionLayoutManager.prototype.calculateSizes = function() {
                        this.fixedSizeEnabled && (this.calculateContextualWidths(), this.calculateSpans());
                    }, DimensionLayoutManager.prototype._calculateSize = function(item) {
                        return null;
                    }, DimensionLayoutManager.prototype.calculateContextualWidths = function() {
                        for (var items = this._getRealizedItems(), count = items.length, i = 0; i < count; i++) {
                            var item = items[i];
                            this.measureEnabled && item.setAligningContextualWidth(-1), this._calculateSize(item);
                        }
                    }, DimensionLayoutManager.prototype.calculateSpans = function() {
                        this.measureEnabled && (this.updateNonScrollableItemsSpans(), this.updateScrollableItemsSpans());
                    }, DimensionLayoutManager.prototype.updateNonScrollableItemsSpans = function() {
                        for (var otherDimensionItems = this.otherLayoutManager._getRealizedItems(), otherDimensionItemsCount = otherDimensionItems.length, startIndex = this.dimension.getDepth(), i = startIndex; i < otherDimensionItemsCount; i++) {
                            var otherDimensionItem = otherDimensionItems[i];
                            this.updateSpans(otherDimensionItem, otherDimensionItem.getHeaders(), !1);
                        }
                    }, DimensionLayoutManager.prototype.updateScrollableItemsSpans = function() {
                        for (var otherRealizedItems = this.otherLayoutManager._getRealizedItems(), otherRealizedItemsCount = Math.min(this.dimension.getDepth(), otherRealizedItems.length), i = 0; i < otherRealizedItemsCount; i++) {
                            var otherRealizedItem = otherRealizedItems[i];
                            this.updateSpans(otherRealizedItem, otherRealizedItem.getOtherDimensionHeaders(), !0);
                        }
                    }, DimensionLayoutManager.prototype.fixSizes = function() {
                        if (this.fixedSizeEnabled) for (var items = this._getRealizedItems(), count = items.length, i = count - 1; i >= 0; i--) items[i].fixSize();
                    }, DimensionLayoutManager.prototype.updateSpans = function(otherRealizedItem, cells, considerScrolling) {
                        for (var realizedItems = this._getRealizedItems(), cellCount = cells.length, j = 0; j < cellCount; j++) {
                            var cell = cells[j], owner = otherRealizedItem.getOtherDimensionOwner(cell), span = owner.getCellContextualSpan(cell);
                            if (span > 1) for (var totalSizeInSpan = 0, startIndex = owner.getIndex(this._grid), k = 0; k < span; k++) {
                                var item = realizedItems[k + startIndex], childWidth = item.getContentContextualWidth();
                                considerScrolling && 0 === j && 0 === k && (childWidth = Math.floor((1 - this.dimension.getFractionScrollOffset()) * childWidth)), 
                                totalSizeInSpan += childWidth, k === span - 1 && this.updateLastChildSize(cell, item, totalSizeInSpan);
                            }
                        }
                    }, DimensionLayoutManager.prototype.updateLastChildSize = function(spanningCell, item, totalSpanSize) {
                        var delta = item.getCellIContentContextualWidth(spanningCell) - totalSpanSize;
                        delta > 0 && item.setAligningContextualWidth(Math.max(item.getAligningContextualWidth(), delta + item.getContentContextualWidth()));
                    }, DimensionLayoutManager._pixelPrecision = 1.0001, DimensionLayoutManager._scrollOffsetPrecision = .01, 
                    DimensionLayoutManager;
                })();
                internal.DimensionLayoutManager = DimensionLayoutManager;
                var ResizeState = (function() {
                    function ResizeState(column, width, scale) {
                        this.column = column, this.item = column.getLeafItem(), this.itemType = column.itemType, 
                        this.startColumnWidth = width, this.resizingDelta = 0, this.animationFrame = null, 
                        this.scale = scale;
                    }
                    return ResizeState.prototype.getNewSize = function() {
                        return this.startColumnWidth + this.resizingDelta;
                    }, ResizeState;
                })();
                internal.ResizeState = ResizeState;
                var ColumnLayoutManager = (function(_super) {
                    function ColumnLayoutManager(owner, grid, realizationManager) {
                        var _this = _super.call(this, owner, grid, realizationManager) || this;
                        return realizationManager.owner = _this, _this.fillProportionally = !1, _this._resizeState = null, 
                        _this;
                    }
                    return __extends(ColumnLayoutManager, _super), Object.defineProperty(ColumnLayoutManager.prototype, "dimension", {
                        get: function() {
                            return this.owner.owner.columnDimension;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), ColumnLayoutManager.prototype.isResizing = function() {
                        return null !== this._resizeState;
                    }, Object.defineProperty(ColumnLayoutManager.prototype, "fillProportionally", {
                        get: function() {
                            return this._grid.fillColumnsProportionally;
                        },
                        set: function(value) {
                            this._grid.fillColumnsProportionally = value;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), ColumnLayoutManager.prototype.getGridScale = function() {
                        return this._grid._presenter.getScreenToCssRatioX();
                    }, Object.defineProperty(ColumnLayoutManager.prototype, "otherScrollbarContextualWidth", {
                        get: function() {
                            return this.dimension.otherDimension.scrollbar.visible ? controls.HTMLElementUtils.getElementWidth(this.dimension.otherDimension.scrollbar.element) : 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), ColumnLayoutManager.prototype._getRealizedItems = function() {
                        return this._grid.realizedColumns || (this._grid.realizedColumns = []), this._grid.realizedColumns;
                    }, ColumnLayoutManager.prototype._moveElementsToBottom = function(moveFromIndex, count) {
                        this._grid.moveColumnsToEnd(moveFromIndex, count);
                    }, ColumnLayoutManager.prototype._moveElementsToTop = function(moveToIndex, count) {
                        this._grid.moveColumnsToStart(moveToIndex, count);
                    }, ColumnLayoutManager.prototype._requiresMeasure = function() {
                        return !this.isScrolling() && !this.otherLayoutManager.isScrolling() || this.isScrolling() || this.isResizing();
                    }, ColumnLayoutManager.prototype.getGridContextualWidth = function() {
                        return this._grid.getWidth();
                    }, ColumnLayoutManager.prototype.getFirstVisibleColumn = function() {
                        return this._grid.realizedColumns[this._gridOffset];
                    }, ColumnLayoutManager.prototype._isAutoSized = function() {
                        return this.owner.owner.autoSizeWidth;
                    }, ColumnLayoutManager.prototype.applyScrolling = function() {
                        var columnOffset = this.dimension.getFractionScrollOffset(), firstVisibleColumnWidth = 0, firstVisibleColumn = this.getFirstVisibleColumn();
                        if (void 0 !== firstVisibleColumn) {
                            firstVisibleColumnWidth = firstVisibleColumn.getContextualWidth();
                            var offsetInPixels = Math.ceil(-firstVisibleColumnWidth * columnOffset);
                            this.scroll(firstVisibleColumn, firstVisibleColumnWidth, offsetInPixels);
                        }
                    }, ColumnLayoutManager.prototype.scroll = function(firstVisibleColumn, width, offset) {
                        this.scrollCells(firstVisibleColumn._realizedColumnHeaders, width, offset), this.scrollBodyCells(this._grid.realizedRows, width, offset), 
                        null !== firstVisibleColumn.footer && firstVisibleColumn.footer.scrollHorizontally(width, offset);
                    }, ColumnLayoutManager.prototype.scrollCells = function(cells, width, offset) {
                        for (var length = cells.length, i = 0; i < length; i++) cells[i].scrollHorizontally(width, offset);
                    }, ColumnLayoutManager.prototype.scrollBodyCells = function(rows, width, offset) {
                        for (var cells, cell, length = rows.length, i = 0; i < length; i++) cells = rows[i]._realizedBodyCells, 
                        void 0 !== cells && (cell = cells[0], void 0 !== cell && cell.scrollHorizontally(width, offset));
                    }, ColumnLayoutManager.prototype.onStartResize = function(cell, currentX, currentY) {
                        this._resizeState = new ResizeState(cell._column, cell._column.getContentContextualWidth(), controls.HTMLElementUtils.getAccumulatedScale(this.owner.owner.container));
                    }, ColumnLayoutManager.prototype.onResize = function(cell, deltaX, deltaY) {
                        var _this = this;
                        this.isResizing() && (this.owner.owner.wordWrapColumnHeaders && cell.unfixRowHeight(), 
                        this._resizeState.resizingDelta = Math.round(Math.max(deltaX / this._resizeState.scale, ColumnLayoutManager.minColumnWidth - this._resizeState.startColumnWidth)), 
                        null === this._resizeState.animationFrame && (this._resizeState.animationFrame = requestAnimationFrame((function() {
                            return _this.performResizing();
                        }))));
                    }, ColumnLayoutManager.prototype.onEndResize = function(cell) {
                        this.isResizing() && null !== this._resizeState.animationFrame && this.performResizing(), 
                        this.endResizing(), this._resizeState = null;
                    }, ColumnLayoutManager.prototype.onReset = function(cell) {
                        this.owner.owner.wordWrapColumnHeaders && cell.unfixRowHeight(), this._resizeState = new ResizeState(cell._column, (-1), 1), 
                        cell._column.clearSize(), this.endResizing(), this.owner.owner.refresh(!1), this._resizeState = null;
                    }, ColumnLayoutManager.prototype.updateItemToResizeState = function(realizedColumns) {
                        if (null !== this._resizeState) for (var columnCount = realizedColumns.length, hierarchyNavigator = this.owner.owner.hierarchyNavigator, startIndex = this.otherLayoutManager.dimension.getDepth(), i = startIndex; i < columnCount; i++) {
                            var column = realizedColumns[i];
                            if (column.columnHeaderOrCornerEquals(this._resizeState.itemType, this._resizeState.item, column.itemType, column.getLeafItem(), hierarchyNavigator) && column !== this._resizeState.column) {
                                this._resizeState.column = column, column.onResize(this._resizeState.getNewSize());
                                break;
                            }
                        }
                    }, ColumnLayoutManager.prototype.performResizing = function() {
                        if (null !== this._resizeState) {
                            this._resizeState.animationFrame = null;
                            var newSize = this._resizeState.getNewSize();
                            this._resizeState.column.onResize(newSize), this.owner.owner.refresh(!1);
                        }
                    }, ColumnLayoutManager.prototype.endResizing = function() {
                        if (null !== this._resizeState) {
                            var newSize = this._resizeState.getNewSize();
                            this._resizeState.column.onResizeEnd(newSize);
                        }
                    }, ColumnLayoutManager.prototype._sendDimensionsToControl = function() {
                        var gridContextualWidth = this.getGridContextualWidth(), widthToFill = this.getActualContextualWidth(gridContextualWidth), otherContextualHeight = this.getOtherHierarchyContextualHeight(), scale = this.getGridScale();
                        this.owner.owner.updateColumnDimensions(otherContextualHeight / scale, (widthToFill - otherContextualHeight) / scale, this.getViewSize(gridContextualWidth));
                    }, ColumnLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return -1;
                    }, ColumnLayoutManager.prototype.getEstimatedBodyCellWidth = function(content) {
                        return -1;
                    }, ColumnLayoutManager.minColumnWidth = 10, ColumnLayoutManager;
                })(DimensionLayoutManager);
                internal.ColumnLayoutManager = ColumnLayoutManager;
                var DashboardColumnLayoutManager = (function(_super) {
                    function DashboardColumnLayoutManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(DashboardColumnLayoutManager, _super), DashboardColumnLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return this.ignoreColumn(headerIndex) ? 0 : this.owner.getCellWidth(void 0);
                    }, DashboardColumnLayoutManager.prototype.getEstimatedBodyCellWidth = function(content) {
                        return this.owner.getCellWidth(void 0);
                    }, DashboardColumnLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                        return !1;
                    }, DashboardColumnLayoutManager.prototype._calculateSize = function(item) {
                        var headerIndex = item.getIndex(this._grid), computedSize = 0;
                        return this.ignoreColumn(headerIndex) || (computedSize = this.owner.getContentWidth(void 0)), 
                        item.onResize(computedSize), item.onResizeEnd(computedSize), computedSize;
                    }, DashboardColumnLayoutManager.prototype.ignoreColumn = function(headerIndex) {
                        return 0 === headerIndex && !this.owner.binder.hasRowGroups();
                    }, DashboardColumnLayoutManager;
                })(ColumnLayoutManager);
                internal.DashboardColumnLayoutManager = DashboardColumnLayoutManager;
                var CanvasColumnLayoutManager = (function(_super) {
                    function CanvasColumnLayoutManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(CanvasColumnLayoutManager, _super), CanvasColumnLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return this.owner.getEstimatedTextWidth(label);
                    }, CanvasColumnLayoutManager.prototype.getEstimatedBodyCellWidth = function(content) {
                        return this.owner.getEstimatedTextWidth(content);
                    }, CanvasColumnLayoutManager.prototype.calculateContextualWidths = function() {
                        for (var items = this._getRealizedItems(), columnWidths = [], i = 0, len = items.length; i < len; i++) {
                            var item = items[i];
                            this.measureEnabled && item.setAligningContextualWidth(-1);
                            var queryName = controls.TablixColumnWidthManager.getColumnQueryName(item);
                            null != queryName && columnWidths.push({
                                queryName: queryName,
                                width: this._calculateSize(item),
                                isFixed: !1
                            });
                        }
                        this.owner.columnWidthsToPersist = columnWidths;
                    }, CanvasColumnLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                        return !powerbi.Double.equalWithPrecision(this.dimension.scrollOffset, 0, DimensionLayoutManager._scrollOffsetPrecision) || this.getRealizedItemsCount() - this._gridOffset < this.dimension.getItemsCount() && this._contextualWidthToFill > 0 || powerbi.Double.greaterWithPrecision(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision);
                    }, CanvasColumnLayoutManager.prototype._calculateSize = function(item) {
                        return item.calculateSize();
                    }, CanvasColumnLayoutManager;
                })(ColumnLayoutManager);
                internal.CanvasColumnLayoutManager = CanvasColumnLayoutManager;
                var RowLayoutManager = (function(_super) {
                    function RowLayoutManager(owner, grid, realizationManager) {
                        var _this = _super.call(this, owner, grid, realizationManager) || this;
                        return realizationManager.owner = _this, _this;
                    }
                    return __extends(RowLayoutManager, _super), Object.defineProperty(RowLayoutManager.prototype, "dimension", {
                        get: function() {
                            return this.owner.owner.rowDimension;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), RowLayoutManager.prototype.getGridScale = function() {
                        return this._grid._presenter.getScreenToCssRatioY();
                    }, Object.defineProperty(RowLayoutManager.prototype, "otherScrollbarContextualWidth", {
                        get: function() {
                            return this.dimension.otherDimension.scrollbar.visible ? controls.HTMLElementUtils.getElementHeight(this.dimension.otherDimension.scrollbar.element) : 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), RowLayoutManager.prototype.startScrollingSession = function() {
                        _super.prototype.startScrollingSession.call(this);
                    }, RowLayoutManager.prototype._getRealizedItems = function() {
                        return this._grid.realizedRows || (this._grid.realizedRows = []), this._grid.realizedRows;
                    }, RowLayoutManager.prototype._moveElementsToBottom = function(moveFromIndex, count) {
                        this._grid.moveRowsToEnd(moveFromIndex, count);
                    }, RowLayoutManager.prototype._moveElementsToTop = function(moveToIndex, count) {
                        this._grid.moveRowsToStart(moveToIndex, count);
                    }, RowLayoutManager.prototype._requiresMeasure = function() {
                        return !this.isScrolling() && !this.otherLayoutManager.isScrolling() && !this.otherLayoutManager.isResizing() || this.isScrolling() && this.dimension.getIntegerScrollOffset() + (this.getRealizedItemsCount() - this._gridOffset) >= this.dimension.getItemsCount();
                    }, RowLayoutManager.prototype.getGridContextualWidth = function() {
                        return this._grid.getHeight();
                    }, RowLayoutManager.prototype.getFirstVisibleRow = function() {
                        return this._grid.realizedRows[this._gridOffset];
                    }, RowLayoutManager.prototype._isAutoSized = function() {
                        return this.owner.owner.autoSizeHeight;
                    }, RowLayoutManager.prototype.applyScrolling = function() {
                        var rowOffset = this.dimension.getFractionScrollOffset(), firstVisibleRowHeight = 0, firstVisibleRow = this.getFirstVisibleRow();
                        firstVisibleRow && (firstVisibleRowHeight = firstVisibleRow.getContextualWidth(), 
                        this.scroll(firstVisibleRow, firstVisibleRowHeight, rowOffset));
                    }, RowLayoutManager.prototype.scroll = function(firstVisibleRow, height, offset) {
                        this.scrollCells(firstVisibleRow._realizedRowHeaders, height, offset), this.scrollCells(firstVisibleRow._realizedBodyCells, height, offset);
                    }, RowLayoutManager.prototype.scrollCells = function(cells, height, offset) {
                        for (var length = cells.length, i = 0; i < length; i++) cells[i].scrollVertically(height, offset);
                    }, RowLayoutManager.prototype.getFooterContextualWidth = function() {
                        return this.owner.owner.rowDimension.hasFooter() && this.owner.grid.footerRow ? this.owner.grid.footerRow.getContextualWidth() : 0;
                    }, RowLayoutManager.prototype.calculateContextualWidths = function() {
                        if (_super.prototype.calculateContextualWidths.call(this), this.fixedSizeEnabled) {
                            var footerRow = this._grid.footerRow;
                            footerRow && this._calculateSize(footerRow);
                        }
                    }, RowLayoutManager.prototype.fixSizes = function() {
                        _super.prototype.fixSizes.call(this), this.fixedSizeEnabled && this._grid.footerRow && this._grid.footerRow.fixSize();
                    }, RowLayoutManager.prototype._sendDimensionsToControl = function() {
                        var gridContextualWidth = this.getGridContextualWidth(), widthToFill = this.getActualContextualWidth(gridContextualWidth), otherContextualHeight = this.getOtherHierarchyContextualHeight(), scale = this.getGridScale();
                        this.owner.owner.updateRowDimensions(otherContextualHeight / scale, (widthToFill - otherContextualHeight) / scale, gridContextualWidth / scale, this.getViewSize(gridContextualWidth), this._grid.footerRow ? this._grid.footerRow.getContextualWidth() / scale : 0);
                    }, RowLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return -1;
                    }, RowLayoutManager;
                })(DimensionLayoutManager);
                internal.RowLayoutManager = RowLayoutManager;
                var DashboardRowLayoutManager = (function(_super) {
                    function DashboardRowLayoutManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(DashboardRowLayoutManager, _super), DashboardRowLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return this.getHeaderWidth(headerIndex);
                    }, DashboardRowLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                        return !1;
                    }, DashboardRowLayoutManager.prototype._calculateSize = function(item) {
                        return item.calculateSize();
                    }, DashboardRowLayoutManager.prototype.getHeaderWidth = function(headerIndex) {
                        return 0 !== headerIndex || this.owner.binder.hasRowGroups() ? this.owner.getEstimatedTextWidth(void 0) : 0;
                    }, DashboardRowLayoutManager;
                })(RowLayoutManager);
                internal.DashboardRowLayoutManager = DashboardRowLayoutManager;
                var CanvasRowLayoutManager = (function(_super) {
                    function CanvasRowLayoutManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(CanvasRowLayoutManager, _super), CanvasRowLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return this.owner.getEstimatedTextWidth(label);
                    }, CanvasRowLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                        return !powerbi.Double.equalWithPrecision(this.dimension.scrollOffset, 0, DimensionLayoutManager._scrollOffsetPrecision) || this.getRealizedItemsCount() - this._gridOffset < this.dimension.getItemsCount() && this._contextualWidthToFill > 0 || powerbi.Double.greaterWithPrecision(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision);
                    }, CanvasRowLayoutManager.prototype._calculateSize = function(item) {
                        return item.calculateSize();
                    }, CanvasRowLayoutManager;
                })(RowLayoutManager);
                internal.CanvasRowLayoutManager = CanvasRowLayoutManager;
                var TablixLayoutManager = (function() {
                    function TablixLayoutManager(binder, grid, columnLayoutManager, rowLayoutManager) {
                        this._allowHeaderResize = !0, this._binder = binder, this._grid = grid, this._columnLayoutManager = columnLayoutManager, 
                        this._rowLayoutManager = rowLayoutManager, this._columnWidthsToPersist = [];
                    }
                    return TablixLayoutManager.prototype.initialize = function(owner) {
                        this._owner = owner, this._container = owner.container, this._gridHost = owner.contentHost, 
                        this._footersHost = owner.footerHost, this._grid.initialize(owner, this._gridHost, this._footersHost);
                    }, Object.defineProperty(TablixLayoutManager.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixLayoutManager.prototype, "binder", {
                        get: function() {
                            return this._binder;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixLayoutManager.prototype, "columnWidthsToPersist", {
                        get: function() {
                            return this._columnWidthsToPersist;
                        },
                        set: function(columnWidths) {
                            this._columnWidthsToPersist = columnWidths;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixLayoutManager.prototype.getTablixClassName = function() {
                        return null;
                    }, TablixLayoutManager.prototype.getLayoutKind = function() {
                        return null;
                    }, TablixLayoutManager.prototype.getOrCreateColumnHeader = function(item, items, rowIndex, columnIndex) {
                        var hierarchyNav = this.owner.hierarchyNavigator, row = this._grid.getOrCreateRow(rowIndex), column = this._grid.getOrCreateColumn(columnIndex + this._columnLayoutManager._gridOffset), isLeaf = hierarchyNav.isLeaf(item), cell = row.getOrCreateColumnHeader(column, this._columnLayoutManager.isScrollableHeader(item, items, columnIndex), isLeaf), rowIdx = hierarchyNav.getLevel(item);
                        cell.position.row.index = cell.position.row.indexInSiblings = rowIdx, cell.position.row.isFirst = 0 === rowIdx, 
                        cell.position.row.isLast = isLeaf;
                        var colIdx = hierarchyNav.getIndex(item);
                        return cell.position.column.index = cell.position.column.indexInSiblings = colIdx, 
                        cell.position.column.isFirst = hierarchyNav.areAllParentsFirst(item, items), cell.position.column.isLast = hierarchyNav.areAllParentsLast(item, items), 
                        this.enableCellHorizontalResize(isLeaf, cell), cell;
                    }, TablixLayoutManager.prototype.getOrCreateRowHeader = function(item, items, rowIndex, columnIndex) {
                        var hierarchyNav = this.owner.hierarchyNavigator, row = this._grid.getOrCreateRow(rowIndex + this._rowLayoutManager._gridOffset), column = this._grid.getOrCreateColumn(columnIndex), isLeaf = hierarchyNav.isLeaf(item), scrollable = this._rowLayoutManager.isScrollableHeader(item, items, rowIndex);
                        0 === row.getRealizedCellCount() && this.alignRowHeaderCells(item, row);
                        var cell = row.getOrCreateRowHeader(column, scrollable, hierarchyNav.isLeaf(item)), rowIdx = hierarchyNav.getIndex(item);
                        cell.position.row.index = cell.position.row.indexInSiblings = rowIdx, cell.position.row.isFirst = hierarchyNav.areAllParentsFirst(item, items), 
                        cell.position.row.isLast = hierarchyNav.areAllParentsLast(item, items);
                        var colIdx = hierarchyNav.getLevel(item);
                        return cell.position.column.index = cell.position.column.indexInSiblings = colIdx, 
                        cell.position.column.isFirst = 0 === colIdx, cell.position.column.isLast = isLeaf, 
                        cell.enableHorizontalResize(!1, this._columnLayoutManager), cell;
                    }, TablixLayoutManager.prototype.getOrCreateCornerCell = function(item, rowLevel, columnLevel) {
                        var row = this._grid.getOrCreateRow(columnLevel), column = this._grid.getOrCreateColumn(rowLevel), columnDepth = this._columnLayoutManager.dimension.getDepth(), isLeaf = columnLevel === columnDepth - 1, cell = row.getOrCreateCornerCell(column), rowIdx = columnLevel;
                        cell.position.row.index = cell.position.row.indexInSiblings = rowIdx, cell.position.row.isFirst = 0 === rowIdx, 
                        cell.position.row.isLast = isLeaf;
                        var colIdx = rowLevel;
                        return cell.position.column.index = cell.position.column.indexInSiblings = colIdx, 
                        cell.position.column.isFirst = 0 === colIdx, cell.position.column.isLast = colIdx === this._rowLayoutManager.dimension.getDepth() - 1, 
                        this.enableCellHorizontalResize(isLeaf, cell), cell;
                    }, TablixLayoutManager.prototype.getOrCreateBodyCell = function(cellItem, rowItem, rowItems, rowIndex, columnIndex) {
                        var scrollable, row = this._grid.getOrCreateRow(rowIndex + this._rowLayoutManager._gridOffset), column = this._grid.getOrCreateColumn(columnIndex + this._columnLayoutManager._gridOffset);
                        scrollable = 0 === row._realizedBodyCells.length && 0 !== this._owner.columnDimension.getFractionScrollOffset() || this._rowLayoutManager.isScrollableHeader(rowItem, rowItems, rowIndex);
                        var cell = row.getOrCreateBodyCell(column, scrollable);
                        return cell.position = cellItem.position, cell.enableHorizontalResize(!1, this._columnLayoutManager), 
                        cell;
                    }, TablixLayoutManager.prototype.getOrCreateFooterBodyCell = function(cellItem, columnIndex) {
                        var scrollable, row = this._grid.getOrCreateFootersRow(), column = this._grid.getOrCreateColumn(columnIndex + this._columnLayoutManager._gridOffset);
                        scrollable = 0 === row._realizedBodyCells.length && 0 !== this._owner.columnDimension.getFractionScrollOffset();
                        var cell = row.getOrCreateFooterBodyCell(column, scrollable);
                        return cell.position = cellItem.position, cell.enableHorizontalResize(!1, this._columnLayoutManager), 
                        cell;
                    }, TablixLayoutManager.prototype.getOrCreateFooterRowHeader = function(item, items) {
                        var row = this._grid.getOrCreateFootersRow(), column = this._grid.getOrCreateColumn(0), cell = row.getOrCreateFooterRowHeader(column);
                        return cell.position = void 0, cell.enableHorizontalResize(!1, this._columnLayoutManager), 
                        cell;
                    }, TablixLayoutManager.prototype.getVisibleWidth = function() {
                        return -1;
                    }, TablixLayoutManager.prototype.getVisibleHeight = function() {
                        return -1;
                    }, TablixLayoutManager.prototype.updateColumnCount = function(rowDimension, columnDimension) {}, 
                    TablixLayoutManager.prototype.updateViewport = function(viewport) {}, TablixLayoutManager.prototype.getEstimatedRowHeight = function() {
                        return -1;
                    }, TablixLayoutManager.prototype.getCellWidth = function(cell) {
                        return -1;
                    }, TablixLayoutManager.prototype.getContentWidth = function(cell) {
                        return -1;
                    }, TablixLayoutManager.prototype.adjustContentSize = function(hasImage) {}, TablixLayoutManager.prototype.alignRowHeaderCells = function(item, currentRow) {
                        var index = currentRow.getRowHeaderLeafIndex();
                        if (index !== -1) {
                            var rowDimension = this._owner.rowDimension, leaf = rowDimension.getFirstVisibleChildLeaf(item);
                            this.owner.hierarchyNavigator.headerItemEquals(leaf, currentRow.getAllocatedCellAt(index).item) && currentRow.moveCellsBy(this.owner.hierarchyNavigator.getLevel(leaf) - this.owner.hierarchyNavigator.getLevel(item) - index);
                        }
                    }, Object.defineProperty(TablixLayoutManager.prototype, "grid", {
                        get: function() {
                            return this._grid;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixLayoutManager.prototype, "rowLayoutManager", {
                        get: function() {
                            return this._rowLayoutManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TablixLayoutManager.prototype, "columnLayoutManager", {
                        get: function() {
                            return this._columnLayoutManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TablixLayoutManager.prototype.showEmptySpaceHeader = function() {
                        return !1;
                    }, TablixLayoutManager.prototype.onStartRenderingSession = function(scrollingDimension, parentElement, clear) {
                        if (this.showEmptySpaceHeader()) {
                            var cell = this._grid.emptySpaceHeaderCell;
                            cell && this._binder.unbindEmptySpaceHeaderCell(cell), cell = this._grid.emptySpaceFooterCell, 
                            cell && this._binder.unbindEmptySpaceFooterCell(cell), this._grid.HideEmptySpaceCells();
                        }
                        this._scrollingDimension = scrollingDimension, this._scrollingDimension && this._scrollingDimension.layoutManager.startScrollingSession(), 
                        this._rowLayoutManager.onStartRenderingSession(), this._columnLayoutManager.onStartRenderingSession(), 
                        this._grid.onStartRenderingSession(clear);
                        var measureEnabled = this._columnLayoutManager.measureEnabled || this._rowLayoutManager.measureEnabled;
                        measureEnabled && this.measureSampleText(parentElement);
                    }, TablixLayoutManager.prototype.onEndRenderingSession = function() {
                        if (this._rowLayoutManager.onEndRenderingSession(), this._columnLayoutManager.onEndRenderingSession(), 
                        this._scrollingDimension && this._scrollingDimension.layoutManager.endScrollingSession(), 
                        this._scrollingDimension = null, this.showEmptySpaceHeader()) {
                            var emptySpace = this._columnLayoutManager.contextualWidthToFill - this._columnLayoutManager.getGridContextualWidth();
                            if (emptySpace > 0) {
                                this._grid.ShowEmptySpaceCells(this._owner.columnDimension.getDepth(), emptySpace);
                                var cell = this._grid.emptySpaceHeaderCell;
                                cell && this._binder.bindEmptySpaceHeaderCell(cell), cell = this._grid.emptySpaceFooterCell, 
                                cell && this._binder.bindEmptySpaceFooterCell(cell);
                            }
                        }
                    }, TablixLayoutManager.prototype.onStartRenderingIteration = function(clear) {
                        this._rowLayoutManager.onStartRenderingIteration(clear, this.getVisibleHeight()), 
                        this._columnLayoutManager.onStartRenderingIteration(clear, this.getVisibleWidth()), 
                        this._grid.onStartRenderingIteration();
                    }, TablixLayoutManager.prototype.onEndRenderingIteration = function() {
                        return this._grid.onEndRenderingIteration(), this._columnLayoutManager.calculateSizes(), 
                        this._rowLayoutManager.calculateSizes(), this._columnLayoutManager.fixSizes(), this._rowLayoutManager.fixSizes(), 
                        this._columnLayoutManager.updateItemToResizeState(this._grid.realizedColumns), this._columnLayoutManager.applyScrolling(), 
                        this._rowLayoutManager.applyScrolling(), this._columnLayoutManager.onEndRenderingIteration(), 
                        this._rowLayoutManager.onEndRenderingIteration(), this._columnLayoutManager.done && this._rowLayoutManager.done;
                    }, TablixLayoutManager.prototype.onCornerCellRealized = function(item, cell) {
                        var columnLeaf = this.owner.hierarchyNavigator.isColumnHierarchyLeaf(item), rowLeaf = this.owner.hierarchyNavigator.isRowHierarchyLeaf(item);
                        columnLeaf && cell._column.OnLeafRealized(this._owner.hierarchyNavigator), this._columnLayoutManager.onCornerCellRealized(item, cell, columnLeaf), 
                        this._rowLayoutManager.onCornerCellRealized(item, cell, rowLeaf);
                    }, TablixLayoutManager.prototype.onRowHeaderRealized = function(item, cell) {
                        var hierarchyNavigator = this._owner.hierarchyNavigator, leaf = hierarchyNavigator.isLeaf(item), tablixCell = cell;
                        tablixCell.colSpan > 1 && tablixCell.setContainerWidth(-1), this._rowLayoutManager.onHeaderRealized(item, cell, leaf);
                    }, TablixLayoutManager.prototype.onRowHeaderFooterRealized = function(item, cell) {}, 
                    TablixLayoutManager.prototype.onColumnHeaderRealized = function(item, cell) {
                        var hierarchyNavigator = this._owner.hierarchyNavigator, leaf = hierarchyNavigator.isLeaf(item);
                        leaf && cell._column.OnLeafRealized(this._owner.hierarchyNavigator), this._columnLayoutManager.onHeaderRealized(item, cell, leaf);
                    }, TablixLayoutManager.prototype.onBodyCellRealized = function(item, cell) {}, TablixLayoutManager.prototype.onBodyCellFooterRealized = function(item, cell) {}, 
                    TablixLayoutManager.prototype.setAllowHeaderResize = function(value) {
                        this._allowHeaderResize = value;
                    }, TablixLayoutManager.prototype.enableCellHorizontalResize = function(isLeaf, cell) {
                        var enableCellHorizontalResize = isLeaf && this._allowHeaderResize;
                        cell.enableHorizontalResize(enableCellHorizontalResize, this._columnLayoutManager);
                    }, TablixLayoutManager.prototype.getEstimatedTextWidth = function(label) {
                        return -1;
                    }, TablixLayoutManager.prototype.measureSampleText = function(parentElement) {}, 
                    TablixLayoutManager;
                })();
                internal.TablixLayoutManager = TablixLayoutManager;
                var DashboardTablixLayoutManager = (function(_super) {
                    function DashboardTablixLayoutManager(binder, sizeComputationManager, grid, rowRealizationManager, columnRealizationManager) {
                        var _this = this, dashboardColumnLayoutManager = new DashboardColumnLayoutManager(null, grid, columnRealizationManager), dashboardRowLayoutManager = new DashboardRowLayoutManager(null, grid, rowRealizationManager);
                        return _this = _super.call(this, binder, grid, dashboardColumnLayoutManager, dashboardRowLayoutManager) || this, 
                        dashboardColumnLayoutManager.owner = _this, dashboardRowLayoutManager.owner = _this, 
                        _this._sizeComputationManager = sizeComputationManager, _this;
                    }
                    return __extends(DashboardTablixLayoutManager, _super), DashboardTablixLayoutManager.createLayoutManager = function(binder) {
                        var sizeComputationManager = new SizeComputationManager();
                        return new DashboardTablixLayoutManager(binder, sizeComputationManager, new internal.TablixGrid(new internal.DashboardTablixGridPresenter(sizeComputationManager)), new internal.RowRealizationManager(binder), new internal.ColumnRealizationManager(binder));
                    }, DashboardTablixLayoutManager.prototype.getTablixClassName = function() {
                        return "tablixDashboard";
                    }, DashboardTablixLayoutManager.prototype.getLayoutKind = function() {
                        return 1;
                    }, DashboardTablixLayoutManager.prototype.showEmptySpaceHeader = function() {
                        return !1;
                    }, DashboardTablixLayoutManager.prototype.measureSampleText = function(parentElement) {
                        var textProperties = powerbi.TextMeasurementService.getSvgMeasurementProperties(parentElement);
                        this._characterHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(textProperties), 
                        this._sizeComputationManager.updateRowHeight(this._characterHeight);
                        var actualTextSize = PixelConverter.toPoint(parseFloat(textProperties.fontSize)), scalingFactor = actualTextSize / controls.TablixDefaultTextSize;
                        this._sizeComputationManager.updateScalingFactor(powerbi.Double.toIncrement(scalingFactor, .05));
                    }, DashboardTablixLayoutManager.prototype.getVisibleWidth = function() {
                        return this._sizeComputationManager.visibleWidth;
                    }, DashboardTablixLayoutManager.prototype.getVisibleHeight = function() {
                        return this._sizeComputationManager.visibleHeight;
                    }, DashboardTablixLayoutManager.prototype.getCellWidth = function(cell) {
                        return this._sizeComputationManager.cellWidth;
                    }, DashboardTablixLayoutManager.prototype.getContentWidth = function(cell) {
                        return this._sizeComputationManager.contentWidth;
                    }, DashboardTablixLayoutManager.prototype.getEstimatedTextWidth = function(label) {
                        return this._sizeComputationManager.contentWidth;
                    }, DashboardTablixLayoutManager.prototype.adjustContentSize = function(hasImage) {
                        this._sizeComputationManager.hasImageContent = hasImage;
                    }, DashboardTablixLayoutManager.prototype.updateColumnCount = function(rowDimension, columnDimension) {
                        var rowDimensionDepth = rowDimension ? rowDimension.getDepth() : 0, columnInstances = columnDimension ? columnDimension.getItemsCount() : 0, totalColumnCount = rowDimensionDepth + columnInstances;
                        this.binder.hasRowGroups() || totalColumnCount--, this._sizeComputationManager.updateColumnCount(totalColumnCount);
                    }, DashboardTablixLayoutManager.prototype.updateViewport = function(viewport) {
                        this._sizeComputationManager.updateViewport(viewport);
                    }, DashboardTablixLayoutManager.prototype.getEstimatedRowHeight = function() {
                        return this._characterHeight;
                    }, DashboardTablixLayoutManager;
                })(TablixLayoutManager);
                internal.DashboardTablixLayoutManager = DashboardTablixLayoutManager;
                var CanvasTablixLayoutManager = (function(_super) {
                    function CanvasTablixLayoutManager(binder, grid, rowRealizationManager, columnRealizationManager) {
                        var _this = this, canvasColumnLayoutManager = new CanvasColumnLayoutManager(null, grid, columnRealizationManager), canvasRowLayoutManager = new CanvasRowLayoutManager(null, grid, rowRealizationManager);
                        return _this = _super.call(this, binder, grid, canvasColumnLayoutManager, canvasRowLayoutManager) || this, 
                        canvasColumnLayoutManager.owner = _this, canvasRowLayoutManager.owner = _this, _this;
                    }
                    return __extends(CanvasTablixLayoutManager, _super), CanvasTablixLayoutManager.createLayoutManager = function(binder, columnWidthManager) {
                        return new CanvasTablixLayoutManager(binder, new internal.TablixGrid(new controls.internal.CanvasTablixGridPresenter(columnWidthManager)), new internal.RowRealizationManager(binder), new internal.ColumnRealizationManager(binder));
                    }, CanvasTablixLayoutManager.prototype.getTablixClassName = function() {
                        return "tablixCanvas";
                    }, CanvasTablixLayoutManager.prototype.getLayoutKind = function() {
                        return 0;
                    }, CanvasTablixLayoutManager.prototype.measureSampleText = function(parentElement) {
                        var textDiv = controls.internal.TablixUtils.createDiv();
                        textDiv.style.cssFloat = "left", textDiv.style.whiteSpace = "nowrap", textDiv.style.overflow = "hidden", 
                        textDiv.style.lineHeight = "normal", parentElement.appendChild(textDiv);
                        var textNode = document.createTextNode("a");
                        textDiv.appendChild(textNode), this.characterWidth = controls.HTMLElementUtils.getElementWidth(textDiv), 
                        this.characterHeight = controls.HTMLElementUtils.getElementHeight(textDiv), textDiv.removeChild(textNode), 
                        parentElement.removeChild(textDiv);
                    }, CanvasTablixLayoutManager.prototype.showEmptySpaceHeader = function() {
                        return !this._columnLayoutManager.fillProportionally;
                    }, CanvasTablixLayoutManager.prototype.getVisibleWidth = function() {
                        return this._columnLayoutManager.measureEnabled ? this._owner.autoSizeWidth && this._owner.maxWidth ? this._owner.maxWidth : controls.HTMLElementUtils.getElementWidth(this._container) : -1;
                    }, CanvasTablixLayoutManager.prototype.getVisibleHeight = function() {
                        return this._rowLayoutManager.measureEnabled ? this._owner.autoSizeHeight && this._owner.maxHeight ? this._owner.maxHeight : controls.HTMLElementUtils.getElementHeight(this._container) : -1;
                    }, CanvasTablixLayoutManager.prototype.getCellWidth = function(cell) {
                        return cell.containerWidth;
                    }, CanvasTablixLayoutManager.prototype.getContentWidth = function(cell) {
                        return cell.contentWidth;
                    }, CanvasTablixLayoutManager.prototype.getEstimatedTextWidth = function(text) {
                        return text ? text.length * this.characterWidth : 0;
                    }, CanvasTablixLayoutManager.prototype.updateColumnCount = function(rowDimension, columnDimension) {}, 
                    CanvasTablixLayoutManager.prototype.updateViewport = function(viewport) {}, CanvasTablixLayoutManager.prototype.getEstimatedRowHeight = function() {
                        return this.characterHeight;
                    }, CanvasTablixLayoutManager;
                })(TablixLayoutManager);
                internal.CanvasTablixLayoutManager = CanvasTablixLayoutManager;
            })(internal = controls.internal || (controls.internal = {}));
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var HTMLElementUtils;
            !(function(HTMLElementUtils) {
                function clearChildren(element) {
                    if (element) for (;element.hasChildNodes(); ) element.removeChild(element.firstChild);
                }
                function setElementTop(element, top) {
                    element.style.top = top + "px";
                }
                function setElementLeft(element, left) {
                    element.style.left = left + "px";
                }
                function setElementHeight(element, height) {
                    HTMLElementUtils.isAutoSize(height) ? element.style.height = "" : element.style.height = height + "px";
                }
                function setElementWidth(element, width) {
                    HTMLElementUtils.isAutoSize(width) ? element.style.width = "" : element.style.width = width + "px";
                }
                function getElementWidth(element) {
                    return element.offsetWidth;
                }
                function getElementHeight(element) {
                    return element.offsetHeight;
                }
                function isAutoSize(size) {
                    return size === -1;
                }
                function getAccumulatedScale(element) {
                    for (var scale = 1; element; ) scale *= HTMLElementUtils.getScale(element), element = element.parentElement;
                    return scale;
                }
                function getScale(element) {
                    element = $(element);
                    var str = element.css("-webkit-transform") || element.css("-moz-transform") || element.css("-ms-transform") || element.css("-o-transform") || element.css("transform");
                    return str && (str.match(/\d*\.\d*/) && Number(str.match(/\d*\.\d*/)[0]) || str.match(/\d+/) && Number(str.match(/\d+/)[0])) || 1;
                }
                function getRelativeMouseCoordinates(element, mouseEvent) {
                    var rect = element.getBoundingClientRect(), scale = HTMLElementUtils.getAccumulatedScale(element);
                    return {
                        x: (mouseEvent.pageX - rect.left) / scale,
                        y: (mouseEvent.pageY - rect.top) / scale
                    };
                }
                HTMLElementUtils.clearChildren = clearChildren, HTMLElementUtils.setElementTop = setElementTop, 
                HTMLElementUtils.setElementLeft = setElementLeft, HTMLElementUtils.setElementHeight = setElementHeight, 
                HTMLElementUtils.setElementWidth = setElementWidth, HTMLElementUtils.getElementWidth = getElementWidth, 
                HTMLElementUtils.getElementHeight = getElementHeight, HTMLElementUtils.isAutoSize = isAutoSize, 
                HTMLElementUtils.getAccumulatedScale = getAccumulatedScale, HTMLElementUtils.getScale = getScale, 
                HTMLElementUtils.getRelativeMouseCoordinates = getRelativeMouseCoordinates;
            })(HTMLElementUtils = controls.HTMLElementUtils || (controls.HTMLElementUtils = {}));
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {})), (function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var internal;
            !(function(internal) {
                var TablixObjects, DomFactory = InJs.DomFactory, DataViewRoleWildCard = powerbi.data.DataViewRoleWildcard, DataViewMatrixUtils = powerbi.data.DataViewMatrixUtils, FontSize = powerbi.visuals.Units.FontSize, UrlScheme = jsCommon.UrlUtils.UrlScheme, UrlUtils = jsCommon.UrlUtils;
                !(function(TablixObjects) {
                    function getMetadadataObjects(dataview) {
                        return dataview && dataview.metadata ? dataview.metadata.objects : null;
                    }
                    function enumerateObjectRepetition(enumeration, dataView, tablixType, enableDataBars) {
                        var columns, selectorData = [];
                        switch (tablixType) {
                          case controls.TablixType.Table:
                          case controls.TablixType.TableEx:
                            columns = getTableColumnMetadata(dataView), selectorData = [ DataViewRoleWildCard.fromRoles([ "Values" ]) ];
                            break;

                          case controls.TablixType.Matrix:
                          case controls.TablixType.PivotTable:
                            columns = getMatrixValuesColumnMetadata(dataView), selectorData = [ DataViewRoleWildCard.fromRoles([ "Rows", "Columns" ]) ];
                            break;

                          default:
                            return;
                        }
                        if (columns) {
                            for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                                var column = columns_1[_i];
                                if (column.isMeasure && column.type.numeric) {
                                    var backColorScalesRepetition = {
                                        containerName: column.displayName,
                                        selector: {
                                            data: selectorData,
                                            metadata: column.queryName
                                        },
                                        objects: (_a = {}, _a[TablixObjects.ObjectValues] = {
                                            formattingProperties: [ TablixObjects.PropValuesBackColor.propertyName ]
                                        }, _a)
                                    };
                                    if (enumeration.push(backColorScalesRepetition), tablixType === controls.TablixType.PivotTable || tablixType === controls.TablixType.TableEx) {
                                        var fontColorScalesRepetition = {
                                            containerName: column.displayName,
                                            selector: {
                                                data: selectorData,
                                                metadata: column.queryName
                                            },
                                            objects: (_b = {}, _b[TablixObjects.ObjectValues] = {
                                                formattingProperties: [ TablixObjects.PropValuesFontColor.propertyName ]
                                            }, _b)
                                        };
                                        enumeration.push(fontColorScalesRepetition);
                                    }
                                    if (enableDataBars && (tablixType === controls.TablixType.PivotTable || tablixType === controls.TablixType.TableEx)) {
                                        var dataBarsRepetition = {
                                            containerName: column.displayName,
                                            selector: {
                                                metadata: column.queryName
                                            },
                                            objects: (_c = {}, _c[TablixObjects.ObjectColumnFormatting] = {
                                                formattingProperties: [ TablixObjects.PropColumnFormattingDataBars.propertyName ]
                                            }, _c)
                                        };
                                        enumeration.push(dataBarsRepetition);
                                    }
                                }
                            }
                            var _a, _b, _c;
                        }
                    }
                    function enumerateObjectInstances(options, enumeration, dataView, tablixType) {
                        var objects = getMetadadataObjects(dataView), totalsShown = !0;
                        switch (totalsShown = tablixType === controls.TablixType.Table ? shouldShowTableTotalsOption(dataView) && TablixObjects.PropGeneralTableTotals.getValue(objects) : shouldShowColumnSubtotalsOption(dataView) && TablixObjects.PropGeneralMatrixColumnSubtotals.getValue(objects) || shouldShowRowSubtotalsOption(dataView) && TablixObjects.PropGeneralMatrixRowSubtotals.getValue(objects), 
                        options.objectName) {
                          case TablixObjects.ObjectGeneral:
                            enumerateGeneralOptions(enumeration, objects, tablixType, dataView);
                            break;

                          case TablixObjects.ObjectGrid:
                            enumerateGridOptions(enumeration, objects, tablixType);
                            break;

                          case TablixObjects.ObjectColumnHeaders:
                            enumerateColumnHeadersOptions(enumeration, objects, tablixType);
                            break;

                          case TablixObjects.ObjectRowHeaders:
                            enumerateRowHeadersOptions(enumeration, objects, tablixType);
                            break;

                          case TablixObjects.ObjectValues:
                            enumerateValuesOptions(enumeration, objects, tablixType);
                            break;

                          case TablixObjects.ObjectTotal:
                            tablixType === controls.TablixType.TableEx ? enumerateTotalOptions(enumeration, objects, controls.TablixType.TableEx) : totalsShown && (tablixType === controls.TablixType.Table ? enumerateTotalOptions(enumeration, objects, controls.TablixType.TableEx) : enumerateGrandTotalOptions(enumeration, objects, tablixType));
                            break;

                          case TablixObjects.ObjectSubTotals:
                            (totalsShown || tablixType === controls.TablixType.PivotTable) && enumerateSubTotalsOptions(enumeration, objects, tablixType, dataView);
                            break;

                          case TablixObjects.ObjectColumnFormatting:
                            enumerateColumnFormattingOptions(enumeration, getColumnsMetadata(dataView, tablixType), tablixType);
                        }
                    }
                    function getColumnsMetadata(dataView, tablixType) {
                        switch (tablixType) {
                          case controls.TablixType.Table:
                          case controls.TablixType.TableEx:
                            return getTableColumnMetadata(dataView);

                          case controls.TablixType.Matrix:
                          case controls.TablixType.PivotTable:
                            return getMatrixValuesColumnMetadata(dataView);

                          default:
                            return;
                        }
                    }
                    function getTableColumnMetadata(dataView) {
                        if (dataView && dataView.table && !_.isEmpty(dataView.table.columns)) return dataView.table.columns;
                    }
                    function getMatrixValuesColumnMetadata(dataView) {
                        if (dataView && dataView.matrix && !_.isEmpty(dataView.matrix.valueSources)) return dataView.matrix.valueSources;
                    }
                    function createVisualObjectInstance(objectName, selector, displayName) {
                        void 0 === selector && (selector = null);
                        var instance = {
                            selector: selector,
                            objectName: objectName,
                            properties: {}
                        };
                        return null != displayName && (instance.displayName = displayName), instance;
                    }
                    function enumerateGeneralOptions(enumeration, objects, tablixType, dataView) {
                        var instance = createVisualObjectInstance(TablixObjects.ObjectGeneral);
                        switch (tablixType) {
                          case controls.TablixType.Table:
                            TablixObjects.PropGeneralAutoSizeColumns.setInstanceProperty(instance, objects), 
                            TablixObjects.PropGeneralTextSize.setInstanceProperty(instance, objects), shouldShowTableTotalsOption(dataView) && TablixObjects.PropGeneralTableTotals.setInstanceProperty(instance, objects);
                            break;

                          case controls.TablixType.Matrix:
                            TablixObjects.PropGeneralAutoSizeColumns.setInstanceProperty(instance, objects), 
                            TablixObjects.PropGeneralTextSize.setInstanceProperty(instance, objects), shouldShowRowSubtotalsOption(dataView) && TablixObjects.PropGeneralMatrixRowSubtotals.setInstanceProperty(instance, objects), 
                            shouldShowColumnSubtotalsOption(dataView) && TablixObjects.PropGeneralMatrixColumnSubtotals.setInstanceProperty(instance, objects);
                        }
                        enumeration.pushInstance(instance);
                    }
                    function enumerateGridOptions(enumeration, objects, tablixType) {
                        var instance = createVisualObjectInstance(TablixObjects.ObjectGrid), verticalGridEnabled = TablixObjects.PropGridVertical.getValue(objects);
                        TablixObjects.PropGridVertical.setInstanceProperty(instance, objects), verticalGridEnabled && (TablixObjects.PropGridVerticalColor.setInstanceProperty(instance, objects), 
                        TablixObjects.PropGridVerticalWeight.setInstanceProperty(instance, objects));
                        var isTable = tablixType === controls.TablixType.Table || tablixType === controls.TablixType.TableEx, horizontalGridEnabled = (isTable ? TablixObjects.PropGridHorizontalTable : TablixObjects.PropGridHorizontalMatrix).getValue(objects);
                        (isTable ? TablixObjects.PropGridHorizontalTable : TablixObjects.PropGridHorizontalMatrix).setInstanceProperty(instance, objects), 
                        horizontalGridEnabled && (TablixObjects.PropGridHorizontalColor.setInstanceProperty(instance, objects), 
                        TablixObjects.PropGridHorizontalWeight.setInstanceProperty(instance, objects)), 
                        TablixObjects.PropGridRowPadding.setInstanceProperty(instance, objects), TablixObjects.PropGridOutlineColor.setInstanceProperty(instance, objects), 
                        TablixObjects.PropGridOutlineWeight.setInstanceProperty(instance, objects), tablixType !== controls.TablixType.PivotTable && tablixType !== controls.TablixType.TableEx || TablixObjects.PropGridPivotTableTextSize.setInstanceProperty(instance, objects), 
                        TablixObjects.PropGridImageHeight.setInstanceProperty(instance, objects), enumeration.pushInstance(instance);
                    }
                    function enumerateColumnHeadersOptions(enumeration, objects, tablixType) {
                        var instance = createVisualObjectInstance(TablixObjects.ObjectColumnHeaders);
                        TablixObjects.PropColumnsFontColor.setInstanceProperty(instance, objects), TablixObjects.PropColumnsBackColor.setInstanceProperty(instance, objects), 
                        TablixObjects.PropColumnsOutline.setInstanceProperty(instance, objects), tablixType !== controls.TablixType.PivotTable && tablixType !== controls.TablixType.TableEx || (TablixObjects.PropColumnPivotTableAutoSizeColumns.setInstanceProperty(instance, objects), 
                        TablixObjects.PropColumnsFontFamily.setInstanceProperty(instance, objects), TablixObjects.PropColumnsFontSize.setInstanceProperty(instance, objects)), 
                        tablixType === controls.TablixType.PivotTable && TablixObjects.PropColumnsUrlIcon.setInstanceProperty(instance, objects), 
                        tablixType !== controls.TablixType.Table && tablixType !== controls.TablixType.TableEx && tablixType !== controls.TablixType.PivotTable || TablixObjects.PropColumnsWordWrap.setInstanceProperty(instance, objects), 
                        enumeration.pushInstance(instance);
                    }
                    function enumerateRowHeadersOptions(enumeration, objects, tablixType) {
                        var instance = createVisualObjectInstance(TablixObjects.ObjectRowHeaders);
                        if (TablixObjects.PropRowsFontColor.setInstanceProperty(instance, objects), TablixObjects.PropRowsBackColor.setInstanceProperty(instance, objects), 
                        TablixObjects.PropRowsOutline.setInstanceProperty(instance, objects), tablixType === controls.TablixType.PivotTable) {
                            var steppedLayout = TablixObjects.PropRowsSteppedLayout.setInstanceProperty(instance, objects);
                            steppedLayout && TablixObjects.PropRowsSteppedLayoutIndentation.setInstanceProperty(instance, objects), 
                            TablixObjects.PropRowsUrlIcon.setInstanceProperty(instance, objects);
                        }
                        tablixType !== controls.TablixType.Matrix && tablixType !== controls.TablixType.PivotTable || TablixObjects.PropRowsWordWrap.setInstanceProperty(instance, objects), 
                        tablixType !== controls.TablixType.PivotTable && tablixType !== controls.TablixType.TableEx || (TablixObjects.PropRowsFontFamily.setInstanceProperty(instance, objects), 
                        TablixObjects.PropRowsFontSize.setInstanceProperty(instance, objects)), enumeration.pushInstance(instance);
                    }
                    function enumerateValuesOptions(enumeration, objects, tablixType) {
                        var instance = createVisualObjectInstance(TablixObjects.ObjectValues);
                        TablixObjects.PropValuesFontColorPrimary.setInstanceProperty(instance, objects), 
                        TablixObjects.PropValuesBackColorPrimary.setInstanceProperty(instance, objects), 
                        TablixObjects.PropValuesFontColorSecondary.setInstanceProperty(instance, objects), 
                        TablixObjects.PropValuesBackColorSecondary.setInstanceProperty(instance, objects), 
                        tablixType === controls.TablixType.PivotTable && (TablixObjects.PropValuesBandedRowHeaders.setInstanceProperty(instance, objects), 
                        TablixObjects.PropValuesOnRow.setInstanceProperty(instance, objects)), TablixObjects.PropValuesOutline.setInstanceProperty(instance, objects), 
                        tablixType !== controls.TablixType.Table && tablixType !== controls.TablixType.TableEx && tablixType !== controls.TablixType.PivotTable || TablixObjects.PropValuesUrlIcon.setInstanceProperty(instance, objects), 
                        tablixType !== controls.TablixType.PivotTable && tablixType !== controls.TablixType.TableEx || (TablixObjects.PropValuesWordWrap.setInstanceProperty(instance, objects), 
                        TablixObjects.PropValuesFontFamily.setInstanceProperty(instance, objects), TablixObjects.PropValuesFontSize.setInstanceProperty(instance, objects)), 
                        enumeration.pushInstance(instance);
                    }
                    function enumerateTotalOptions(enumeration, objects, tablixType) {
                        var showProperties, instance = createVisualObjectInstance(TablixObjects.ObjectTotal);
                        showProperties = tablixType !== controls.TablixType.TableEx || TablixObjects.PropTotalTableExTotals.setInstanceProperty(instance, objects), 
                        showProperties && (TablixObjects.PropTotalFontColor.setInstanceProperty(instance, objects), 
                        TablixObjects.PropTotalBackColor.setInstanceProperty(instance, objects), TablixObjects.PropTotalOutline.setInstanceProperty(instance, objects), 
                        tablixType !== controls.TablixType.PivotTable && tablixType !== controls.TablixType.TableEx || (TablixObjects.PropTotalFontFamily.setInstanceProperty(instance, objects), 
                        TablixObjects.PropTotalFontSize.setInstanceProperty(instance, objects))), enumeration.pushInstance(instance);
                    }
                    function enumerateGrandTotalOptions(enumeration, objects, tablixType) {
                        var instance = createVisualObjectInstance(TablixObjects.ObjectTotal);
                        TablixObjects.PropGrandTotalFontColor.setInstanceProperty(instance, objects), TablixObjects.PropGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                        TablixObjects.PropGrandTotalBackColor.setInstanceProperty(instance, objects), TablixObjects.PropGrandTotalApplyToHeaders.setInstanceProperty(instance, objects), 
                        tablixType !== controls.TablixType.PivotTable && tablixType !== controls.TablixType.TableEx || (TablixObjects.PropGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                        TablixObjects.PropGrandTotalFontSize.setInstanceProperty(instance, objects)), enumeration.pushInstance(instance);
                    }
                    function enumerateSubTotalsOptions(enumeration, objects, tablixType, dataView) {
                        var instance = createVisualObjectInstance(TablixObjects.ObjectSubTotals), rowSubtotalsEnabled = !1, columnSubtotalsEnabled = !1;
                        if (tablixType === controls.TablixType.PivotTable && (shouldShowRowSubtotalsOption(dataView) && (rowSubtotalsEnabled = TablixObjects.PropSubTotalsPivotTableRowSubtotals.setInstanceProperty(instance, objects)), 
                        shouldShowColumnSubtotalsOption(dataView) && (columnSubtotalsEnabled = TablixObjects.PropSubTotalsPivotTableColumnSubtotals.setInstanceProperty(instance, objects))), 
                        TablixObjects.PropSubTotalsFontColor.setInstanceProperty(instance, objects), TablixObjects.PropSubTotalsFontFamily.setInstanceProperty(instance, objects), 
                        TablixObjects.PropSubTotalsBackColor.setInstanceProperty(instance, objects), tablixType === controls.TablixType.PivotTable && (TablixObjects.PropSubTotalsFontFamily.setInstanceProperty(instance, objects), 
                        TablixObjects.PropSubTotalsFontSize.setInstanceProperty(instance, objects), TablixObjects.PropSubTotalsApplyToHeaders.setInstanceProperty(instance, objects)), 
                        enumeration.pushInstance(instance), rowSubtotalsEnabled) {
                            instance = createVisualObjectInstance(TablixObjects.ObjectSubTotals), TablixObjects.PropSubTotalsPivotTableRowSubtotalsPosition.setInstanceProperty(instance, objects), 
                            enumeration.pushInstance(instance), instance = createVisualObjectInstance(TablixObjects.ObjectSubTotals);
                            var perLevel = TablixObjects.PropSubTotalsPivotTableRowSubtotalsPerLevel.setInstanceProperty(instance, objects);
                            enumeration.pushInstance(instance, !1), perLevel && enumeratePerLevelSubtotals(enumeration, dataView.matrix.rows.levels);
                        }
                        if (columnSubtotalsEnabled) {
                            instance = createVisualObjectInstance(TablixObjects.ObjectSubTotals);
                            var perLevel = TablixObjects.PropSubTotalsPivotTableColumnSubtotalsPerLevel.setInstanceProperty(instance, objects);
                            enumeration.pushInstance(instance, !1), perLevel && enumeratePerLevelSubtotals(enumeration, dataView.matrix.columns.levels);
                        }
                    }
                    function enumeratePerLevelSubtotals(enumeration, hierarchyLevels) {
                        for (var _i = 0, hierarchyLevels_1 = hierarchyLevels; _i < hierarchyLevels_1.length; _i++) for (var level = hierarchyLevels_1[_i], _a = 0, _b = level.sources; _a < _b.length; _a++) {
                            var source = _b[_a];
                            if (!source.isMeasure) {
                                var instance = createVisualObjectInstance(TablixObjects.ObjectSubTotals, {
                                    metadata: source.queryName
                                }, source.displayName);
                                TablixObjects.PropSubTotalsPivotTableLevelSubtotalEnabled.setInstanceProperty(instance, source.objects), 
                                enumeration.pushInstance(instance, !1);
                            }
                        }
                    }
                    function enumerateColumnFormattingOptions(enumeration, columns, tablixType) {
                        if (!_.isEmpty(columns)) for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
                            var column = columns_2[_i];
                            enumeration.pushContainer({
                                displayName: column.displayName
                            });
                            var objects = column && column.objects, instance = createVisualObjectInstance(TablixObjects.ObjectColumnFormatting, {
                                metadata: column.queryName
                            });
                            TablixObjects.PropColumnFormattingFontColor.setInstanceProperty(instance, objects), 
                            TablixObjects.PropColumnFormattingBackColor.setInstanceProperty(instance, objects), 
                            TablixObjects.PropColumnFormattingStyleHeader.setInstanceProperty(instance, objects), 
                            TablixObjects.PropColumnFormattingStyleValues.setInstanceProperty(instance, objects), 
                            tablixType !== controls.TablixType.Matrix && tablixType !== controls.TablixType.PivotTable || TablixObjects.PropColumnFormattingStyleSubtotals.setInstanceProperty(instance, objects), 
                            TablixObjects.PropColumnFormattingStyleTotal.setInstanceProperty(instance, objects), 
                            enumeration.pushInstance(instance), enumeration.popContainer();
                        }
                    }
                    function getTableObjects(dataView) {
                        var objects = getMetadadataObjects(dataView), generalTextSizePt = TablixObjects.PropGeneralTextSize.getValue(objects), generalTextSize = null != generalTextSizePt ? FontSize.createFromPt(+generalTextSizePt) : void 0, formattingProperties = {
                            general: {
                                autoSizeColumnWidth: TablixObjects.PropGeneralAutoSizeColumns.getValue(objects),
                                textSize: generalTextSize,
                                totals: TablixObjects.PropGeneralTableTotals.getValue(objects)
                            }
                        };
                        formattingProperties.grid = {
                            gridVertical: TablixObjects.PropGridVertical.getValue(objects),
                            gridVerticalColor: TablixObjects.PropGridVerticalColor.getValue(objects),
                            gridVerticalWeight: TablixObjects.PropGridVerticalWeight.getValue(objects),
                            gridHorizontal: TablixObjects.PropGridHorizontalTable.getValue(objects),
                            gridHorizontalColor: TablixObjects.PropGridHorizontalColor.getValue(objects),
                            gridHorizontalWeight: TablixObjects.PropGridHorizontalWeight.getValue(objects),
                            outlineColor: TablixObjects.PropGridOutlineColor.getValue(objects),
                            outlineWeight: TablixObjects.PropGridOutlineWeight.getValue(objects),
                            rowPadding: TablixObjects.PropGridRowPadding.getValue(objects),
                            imageHeight: TablixObjects.PropGridImageHeight.getValue(objects)
                        }, formattingProperties.columnHeaders = {
                            fontColor: TablixObjects.PropColumnsFontColor.getValue(objects),
                            backColor: TablixObjects.PropColumnsBackColor.getValue(objects),
                            outline: TablixObjects.PropColumnsOutline.getValue(objects),
                            wordWrap: TablixObjects.PropColumnsWordWrap.getValue(objects)
                        }, formattingProperties.values = {
                            fontColorPrimary: TablixObjects.PropValuesFontColorPrimary.getValue(objects),
                            backColorPrimary: TablixObjects.PropValuesBackColorPrimary.getValue(objects),
                            fontColorSecondary: TablixObjects.PropValuesFontColorSecondary.getValue(objects),
                            backColorSecondary: TablixObjects.PropValuesBackColorSecondary.getValue(objects),
                            outline: TablixObjects.PropValuesOutline.getValue(objects),
                            urlIcon: TablixObjects.PropValuesUrlIcon.getValue(objects)
                        }, formattingProperties.total = {
                            fontColor: TablixObjects.PropTotalFontColor.getValue(objects),
                            backColor: TablixObjects.PropTotalBackColor.getValue(objects),
                            outline: TablixObjects.PropTotalOutline.getValue(objects)
                        }, formattingProperties.columnFormatting = {};
                        var columns = getTableColumnMetadata(dataView);
                        if (columns) for (var _i = 0, columns_3 = columns; _i < columns_3.length; _i++) {
                            var column = columns_3[_i], objects_1 = column && column.objects;
                            formattingProperties.columnFormatting[column.queryName] = {
                                fontColor: TablixObjects.PropColumnFormattingFontColor.getValue(objects_1),
                                backColor: TablixObjects.PropColumnFormattingBackColor.getValue(objects_1),
                                styleHeader: TablixObjects.PropColumnFormattingStyleHeader.getValue(objects_1),
                                styleValues: TablixObjects.PropColumnFormattingStyleValues.getValue(objects_1),
                                styleTotal: TablixObjects.PropColumnFormattingStyleTotal.getValue(objects_1)
                            };
                        }
                        return formattingProperties;
                    }
                    function getMatrixObjects(dataView) {
                        var objects = getMetadadataObjects(dataView), generalTextSizePt = TablixObjects.PropGeneralTextSize.getValue(objects), generalTextSize = null != generalTextSizePt ? FontSize.createFromPt(+generalTextSizePt) : void 0, formattingProperties = {
                            general: {
                                autoSizeColumnWidth: TablixObjects.PropGeneralAutoSizeColumns.getValue(objects),
                                textSize: generalTextSize,
                                rowSubtotals: TablixObjects.PropGeneralMatrixRowSubtotals.getValue(objects),
                                columnSubtotals: TablixObjects.PropGeneralMatrixColumnSubtotals.getValue(objects)
                            }
                        };
                        formattingProperties.grid = {
                            gridVertical: TablixObjects.PropGridVertical.getValue(objects),
                            gridVerticalColor: TablixObjects.PropGridVerticalColor.getValue(objects),
                            gridVerticalWeight: TablixObjects.PropGridVerticalWeight.getValue(objects),
                            gridHorizontal: TablixObjects.PropGridHorizontalMatrix.getValue(objects),
                            gridHorizontalColor: TablixObjects.PropGridHorizontalColor.getValue(objects),
                            gridHorizontalWeight: TablixObjects.PropGridHorizontalWeight.getValue(objects),
                            outlineColor: TablixObjects.PropGridOutlineColor.getValue(objects),
                            outlineWeight: TablixObjects.PropGridOutlineWeight.getValue(objects),
                            rowPadding: TablixObjects.PropGridRowPadding.getValue(objects),
                            imageHeight: TablixObjects.PropGridImageHeight.getValue(objects)
                        }, formattingProperties.columnHeaders = {
                            fontColor: TablixObjects.PropColumnsFontColor.getValue(objects),
                            backColor: TablixObjects.PropColumnsBackColor.getValue(objects),
                            outline: TablixObjects.PropColumnsOutline.getValue(objects)
                        }, formattingProperties.rowHeaders = {
                            fontColor: TablixObjects.PropRowsFontColor.getValue(objects),
                            backColor: TablixObjects.PropRowsBackColor.getValue(objects),
                            outline: TablixObjects.PropRowsOutline.getValue(objects),
                            wordWrap: TablixObjects.PropRowsWordWrap.getValue(objects)
                        }, formattingProperties.values = {
                            fontColorPrimary: TablixObjects.PropValuesFontColorPrimary.getValue(objects),
                            backColorPrimary: TablixObjects.PropValuesBackColorPrimary.getValue(objects),
                            fontColorSecondary: TablixObjects.PropValuesFontColorSecondary.getValue(objects),
                            backColorSecondary: TablixObjects.PropValuesBackColorSecondary.getValue(objects),
                            outline: TablixObjects.PropValuesOutline.getValue(objects)
                        }, formattingProperties.grandTotal = {
                            fontColor: TablixObjects.PropGrandTotalFontColor.getValue(objects),
                            backColor: TablixObjects.PropGrandTotalBackColor.getValue(objects),
                            applyToHeaders: TablixObjects.PropGrandTotalApplyToHeaders.getValue(objects)
                        }, formattingProperties.subtotals = {
                            fontColor: TablixObjects.PropSubTotalsFontColor.getValue(objects),
                            backColor: TablixObjects.PropSubTotalsBackColor.getValue(objects)
                        }, formattingProperties.columnFormatting = {};
                        var columns = getMatrixValuesColumnMetadata(dataView);
                        if (columns) for (var _i = 0, columns_4 = columns; _i < columns_4.length; _i++) {
                            var column = columns_4[_i], objects_2 = column && column.objects;
                            formattingProperties.columnFormatting[column.queryName] = {
                                fontColor: TablixObjects.PropColumnFormattingFontColor.getValue(objects_2),
                                backColor: TablixObjects.PropColumnFormattingBackColor.getValue(objects_2),
                                styleHeader: TablixObjects.PropColumnFormattingStyleHeader.getValue(objects_2),
                                styleValues: TablixObjects.PropColumnFormattingStyleValues.getValue(objects_2),
                                styleTotal: TablixObjects.PropColumnFormattingStyleTotal.getValue(objects_2),
                                styleSubTotals: TablixObjects.PropColumnFormattingStyleSubtotals.getValue(objects_2)
                            };
                        }
                        return formattingProperties;
                    }
                    function getPivotTableObjects(dataView) {
                        var objects = getMetadadataObjects(dataView), generalFontSizePt = TablixObjects.PropGridPivotTableTextSize.getValue(objects), generalFontSize = null != generalFontSizePt ? FontSize.createFromPt(+generalFontSizePt) : void 0, columnHeaderFontSizePt = TablixObjects.PropColumnsFontSize.getValue(objects), columnHeaderFontSize = null != columnHeaderFontSizePt ? FontSize.createFromPt(+columnHeaderFontSizePt) : void 0, rowHeaderFontSizePt = TablixObjects.PropRowsFontSize.getValue(objects), rowHeaderFontSize = null != rowHeaderFontSizePt ? FontSize.createFromPt(+rowHeaderFontSizePt) : void 0, valuesFontSizePt = TablixObjects.PropValuesFontSize.getValue(objects), valuesFontSize = null != valuesFontSizePt ? FontSize.createFromPt(+valuesFontSizePt) : void 0, grandTotalFontSizePt = TablixObjects.PropGrandTotalFontSize.getValue(objects), grandTotalFontSize = null != grandTotalFontSizePt ? FontSize.createFromPt(+grandTotalFontSizePt) : void 0, subtotalsFontSizePt = TablixObjects.PropSubTotalsFontSize.getValue(objects), subtotalsFontSize = null != subtotalsFontSizePt ? FontSize.createFromPt(+subtotalsFontSizePt) : void 0, formattingProperties = {
                            general: {
                                autoSizeColumnWidth: TablixObjects.PropColumnPivotTableAutoSizeColumns.getValue(objects),
                                textSize: generalFontSize,
                                rowSubtotals: TablixObjects.PropSubTotalsPivotTableRowSubtotals.getValue(objects),
                                columnSubtotals: TablixObjects.PropSubTotalsPivotTableColumnSubtotals.getValue(objects)
                            },
                            grid: {
                                gridVertical: TablixObjects.PropGridVertical.getValue(objects),
                                gridVerticalColor: TablixObjects.PropGridVerticalColor.getValue(objects),
                                gridVerticalWeight: TablixObjects.PropGridVerticalWeight.getValue(objects),
                                gridHorizontal: TablixObjects.PropGridHorizontalMatrix.getValue(objects),
                                gridHorizontalColor: TablixObjects.PropGridHorizontalColor.getValue(objects),
                                gridHorizontalWeight: TablixObjects.PropGridHorizontalWeight.getValue(objects),
                                outlineColor: TablixObjects.PropGridOutlineColor.getValue(objects),
                                outlineWeight: TablixObjects.PropGridOutlineWeight.getValue(objects),
                                rowPadding: TablixObjects.PropGridRowPadding.getValue(objects),
                                imageHeight: TablixObjects.PropGridImageHeight.getValue(objects)
                            },
                            columnHeaders: {
                                fontColor: TablixObjects.PropColumnsFontColor.getValue(objects),
                                fontFamily: TablixObjects.PropColumnsFontFamily.getValue(objects),
                                fontSize: columnHeaderFontSize,
                                backColor: TablixObjects.PropColumnsBackColor.getValue(objects),
                                outline: TablixObjects.PropColumnsOutline.getValue(objects),
                                urlIcon: TablixObjects.PropColumnsUrlIcon.getValue(objects),
                                wordWrap: TablixObjects.PropColumnsWordWrap.getValue(objects)
                            },
                            rowHeaders: {
                                fontColor: TablixObjects.PropRowsFontColor.getValue(objects),
                                fontFamily: TablixObjects.PropRowsFontFamily.getValue(objects),
                                fontSize: rowHeaderFontSize,
                                backColor: TablixObjects.PropRowsBackColor.getValue(objects),
                                outline: TablixObjects.PropRowsOutline.getValue(objects),
                                steppedLayout: TablixObjects.PropRowsSteppedLayout.getValue(objects),
                                steppedLayoutIndentation: TablixObjects.PropRowsSteppedLayoutIndentation.getValue(objects),
                                urlIcon: TablixObjects.PropRowsUrlIcon.getValue(objects),
                                wordWrap: TablixObjects.PropRowsWordWrap.getValue(objects)
                            },
                            values: {
                                fontFamily: TablixObjects.PropValuesFontFamily.getValue(objects),
                                fontSize: valuesFontSize,
                                fontColorPrimary: TablixObjects.PropValuesFontColorPrimary.getValue(objects),
                                backColorPrimary: TablixObjects.PropValuesBackColorPrimary.getValue(objects),
                                fontColorSecondary: TablixObjects.PropValuesFontColorSecondary.getValue(objects),
                                backColorSecondary: TablixObjects.PropValuesBackColorSecondary.getValue(objects),
                                bandedRowHeaders: TablixObjects.PropValuesBandedRowHeaders.getValue(objects),
                                outline: TablixObjects.PropValuesOutline.getValue(objects),
                                urlIcon: TablixObjects.PropValuesUrlIcon.getValue(objects),
                                wordWrap: TablixObjects.PropValuesWordWrap.getValue(objects),
                                valuesOnRow: TablixObjects.PropValuesOnRow.getValue(objects)
                            },
                            grandTotal: {
                                fontColor: TablixObjects.PropGrandTotalFontColor.getValue(objects),
                                fontFamily: TablixObjects.PropGrandTotalFontFamily.getValue(objects),
                                fontSize: grandTotalFontSize,
                                backColor: TablixObjects.PropGrandTotalBackColor.getValue(objects),
                                applyToHeaders: TablixObjects.PropGrandTotalApplyToHeaders.getValue(objects)
                            },
                            subtotals: {
                                fontColor: TablixObjects.PropSubTotalsFontColor.getValue(objects),
                                fontFamily: TablixObjects.PropSubTotalsFontFamily.getValue(objects),
                                fontSize: subtotalsFontSize,
                                backColor: TablixObjects.PropSubTotalsBackColor.getValue(objects),
                                applyToHeaders: TablixObjects.PropSubTotalsApplyToHeaders.getValue(objects),
                                rowSubtotalsPosition: TablixObjects.PropSubTotalsPivotTableRowSubtotalsPosition.getValue(objects)
                            }
                        };
                        formattingProperties.columnFormatting = {};
                        var columns = getMatrixValuesColumnMetadata(dataView);
                        if (columns) for (var _i = 0, columns_5 = columns; _i < columns_5.length; _i++) {
                            var column = columns_5[_i], objects_3 = column && column.objects;
                            formattingProperties.columnFormatting[column.queryName] = {
                                fontColor: TablixObjects.PropColumnFormattingFontColor.getValue(objects_3),
                                backColor: TablixObjects.PropColumnFormattingBackColor.getValue(objects_3),
                                styleHeader: TablixObjects.PropColumnFormattingStyleHeader.getValue(objects_3),
                                styleValues: TablixObjects.PropColumnFormattingStyleValues.getValue(objects_3),
                                styleTotal: TablixObjects.PropColumnFormattingStyleTotal.getValue(objects_3),
                                styleSubTotals: TablixObjects.PropColumnFormattingStyleSubtotals.getValue(objects_3),
                                dataBarsSettings: TablixObjects.PropColumnFormattingDataBars.getValue(objects_3)
                            };
                        }
                        return formattingProperties;
                    }
                    function getTableExObjects(dataView) {
                        var objects = getMetadadataObjects(dataView), generalTextSizePt = TablixObjects.PropGridPivotTableTextSize.getValue(objects), generalTextSize = null != generalTextSizePt ? FontSize.createFromPt(+generalTextSizePt) : void 0, columnHeaderFontSizePt = TablixObjects.PropColumnsFontSize.getValue(objects), columnHeaderFontSize = null != columnHeaderFontSizePt ? FontSize.createFromPt(+columnHeaderFontSizePt) : void 0, valuesFontSizePt = TablixObjects.PropValuesFontSize.getValue(objects), valuesFontSize = null != valuesFontSizePt ? FontSize.createFromPt(+valuesFontSizePt) : void 0, totalFontSizePt = TablixObjects.PropTotalFontSize.getValue(objects), totalFontSize = null != totalFontSizePt ? FontSize.createFromPt(+totalFontSizePt) : void 0, formattingProperties = {
                            general: {
                                autoSizeColumnWidth: TablixObjects.PropColumnPivotTableAutoSizeColumns.getValue(objects),
                                textSize: generalTextSize,
                                totals: TablixObjects.PropTotalTableExTotals.getValue(objects)
                            }
                        };
                        formattingProperties.grid = {
                            gridVertical: TablixObjects.PropGridVertical.getValue(objects),
                            gridVerticalColor: TablixObjects.PropGridVerticalColor.getValue(objects),
                            gridVerticalWeight: TablixObjects.PropGridVerticalWeight.getValue(objects),
                            gridHorizontal: TablixObjects.PropGridHorizontalTable.getValue(objects),
                            gridHorizontalColor: TablixObjects.PropGridHorizontalColor.getValue(objects),
                            gridHorizontalWeight: TablixObjects.PropGridHorizontalWeight.getValue(objects),
                            outlineColor: TablixObjects.PropGridOutlineColor.getValue(objects),
                            outlineWeight: TablixObjects.PropGridOutlineWeight.getValue(objects),
                            rowPadding: TablixObjects.PropGridRowPadding.getValue(objects),
                            imageHeight: TablixObjects.PropGridImageHeight.getValue(objects)
                        }, formattingProperties.columnHeaders = {
                            fontColor: TablixObjects.PropColumnsFontColor.getValue(objects),
                            fontFamily: TablixObjects.PropColumnsFontFamily.getValue(objects),
                            fontSize: columnHeaderFontSize,
                            backColor: TablixObjects.PropColumnsBackColor.getValue(objects),
                            outline: TablixObjects.PropColumnsOutline.getValue(objects),
                            wordWrap: TablixObjects.PropColumnsWordWrap.getValue(objects)
                        }, formattingProperties.values = {
                            fontFamily: TablixObjects.PropValuesFontFamily.getValue(objects),
                            fontSize: valuesFontSize,
                            fontColorPrimary: TablixObjects.PropValuesFontColorPrimary.getValue(objects),
                            backColorPrimary: TablixObjects.PropValuesBackColorPrimary.getValue(objects),
                            fontColorSecondary: TablixObjects.PropValuesFontColorSecondary.getValue(objects),
                            backColorSecondary: TablixObjects.PropValuesBackColorSecondary.getValue(objects),
                            outline: TablixObjects.PropValuesOutline.getValue(objects),
                            urlIcon: TablixObjects.PropValuesUrlIcon.getValue(objects),
                            wordWrap: TablixObjects.PropValuesWordWrap.getValue(objects)
                        }, formattingProperties.total = {
                            fontFamily: TablixObjects.PropTotalFontFamily.getValue(objects),
                            fontSize: totalFontSize,
                            fontColor: TablixObjects.PropTotalFontColor.getValue(objects),
                            backColor: TablixObjects.PropTotalBackColor.getValue(objects),
                            outline: TablixObjects.PropTotalOutline.getValue(objects)
                        }, formattingProperties.columnFormatting = {};
                        var columns = getTableColumnMetadata(dataView);
                        if (columns) for (var _i = 0, columns_6 = columns; _i < columns_6.length; _i++) {
                            var column = columns_6[_i], objects_4 = column && column.objects;
                            formattingProperties.columnFormatting[column.queryName] = {
                                fontColor: TablixObjects.PropColumnFormattingFontColor.getValue(objects_4),
                                backColor: TablixObjects.PropColumnFormattingBackColor.getValue(objects_4),
                                styleHeader: TablixObjects.PropColumnFormattingStyleHeader.getValue(objects_4),
                                styleValues: TablixObjects.PropColumnFormattingStyleValues.getValue(objects_4),
                                styleTotal: TablixObjects.PropColumnFormattingStyleTotal.getValue(objects_4),
                                dataBarsSettings: TablixObjects.PropColumnFormattingDataBars.getValue(objects_4)
                            };
                        }
                        return formattingProperties;
                    }
                    function getTextSizeInPx(fontSize) {
                        return jsCommon.PixelConverter.toString(fontSize.px);
                    }
                    function shouldShowTableTotalsOption(dataView) {
                        if (dataView && dataView.table && !_.isEmpty(dataView.table.columns)) {
                            var columns = dataView.table.columns;
                            if (_.some(columns, (function(column) {
                                return column.discourageAggregationAcrossGroups;
                            }))) return !1;
                        }
                        return !0;
                    }
                    function shouldShowRowSubtotalsOption(dataView) {
                        return !(!dataView || DataViewMatrixUtils.getRowGroupingLevelsCount(dataView.matrix) < 1) && !isDiscourageAggregationAcrossGroups(dataView.matrix.rows.levels);
                    }
                    function shouldShowColumnSubtotalsOption(dataView) {
                        if (!dataView || !dataView.matrix || DataViewMatrixUtils.getColumnGroupingLevelsCount(dataView.matrix.columns) < 1) return !1;
                        var levels = dataView.matrix.columns.levels;
                        return dataView.matrix.valueSources.length > 1 && (levels = _.initial(levels)), 
                        !isDiscourageAggregationAcrossGroups(levels);
                    }
                    function isDiscourageAggregationAcrossGroups(levels) {
                        var lastLevel = _.last(levels);
                        return lastLevel && _.some(lastLevel.sources, (function(source) {
                            return source.discourageAggregationAcrossGroups;
                        }));
                    }
                    TablixObjects.ObjectGeneral = "general", TablixObjects.ObjectGrid = "grid", TablixObjects.ObjectColumnHeaders = "columnHeaders", 
                    TablixObjects.ObjectRowHeaders = "rowHeaders", TablixObjects.ObjectValues = "values", 
                    TablixObjects.ObjectTotal = "total", TablixObjects.ObjectSubTotals = "subTotals", 
                    TablixObjects.ObjectColumnFormatting = "columnFormatting", TablixObjects.ObjectColumnWidth = "columnWidth";
                    var TablixProperty = (function() {
                        function TablixProperty(objectName, propertyName, defaultValue, getterFuntion, fallbackProperties) {
                            this.objectName = objectName, this.propertyName = propertyName, this.defaultValue = defaultValue, 
                            this.fallbackProperties = fallbackProperties, this.getterFuntion = getterFuntion || powerbi.DataViewObjects.getValue;
                        }
                        return TablixProperty.prototype.getValue = function(objects) {
                            var value = this.getterFuntion(objects, this, this.defaultValue);
                            if (void 0 !== value) return value;
                            if (!_.isEmpty(this.fallbackProperties)) for (var _i = 0, _a = this.fallbackProperties; _i < _a.length; _i++) {
                                var property = _a[_i];
                                if (value = property.getValue(objects), void 0 !== value) return value;
                            }
                        }, TablixProperty.prototype.setInstanceProperty = function(instance, objects) {
                            var value = this.getValue(objects);
                            return instance && instance.properties && (instance.properties[this.propertyName] = value), 
                            value;
                        }, TablixProperty;
                    })();
                    TablixObjects.TablixProperty = TablixProperty, TablixObjects.PropColumnFormatString = new TablixProperty(TablixObjects.ObjectGeneral, "formatString", (void 0)), 
                    TablixObjects.PropGeneralAutoSizeColumns = new TablixProperty(TablixObjects.ObjectGeneral, "autoSizeColumnWidth", (!0)), 
                    TablixObjects.PropGeneralTextSize = new TablixProperty(TablixObjects.ObjectGeneral, "textSize", 8), 
                    TablixObjects.PropGeneralTableTotals = new TablixProperty(TablixObjects.ObjectGeneral, "totals", (!0)), 
                    TablixObjects.PropGeneralMatrixRowSubtotals = new TablixProperty(TablixObjects.ObjectGeneral, "rowSubtotals", (!0)), 
                    TablixObjects.PropGeneralMatrixColumnSubtotals = new TablixProperty(TablixObjects.ObjectGeneral, "columnSubtotals", (!0)), 
                    TablixObjects.PropGridVertical = new TablixProperty(TablixObjects.ObjectGrid, "gridVertical", (!1)), 
                    TablixObjects.PropGridVerticalColor = new TablixProperty(TablixObjects.ObjectGrid, "gridVerticalColor", "#E8E8E8", powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropGridVerticalWeight = new TablixProperty(TablixObjects.ObjectGrid, "gridVerticalWeight", 1), 
                    TablixObjects.PropGridHorizontalTable = new TablixProperty(TablixObjects.ObjectGrid, "gridHorizontal", (!0)), 
                    TablixObjects.PropGridHorizontalMatrix = new TablixProperty(TablixObjects.ObjectGrid, "gridHorizontal", (!1)), 
                    TablixObjects.PropGridHorizontalColor = new TablixProperty(TablixObjects.ObjectGrid, "gridHorizontalColor", "#E8E8E8", powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropGridHorizontalWeight = new TablixProperty(TablixObjects.ObjectGrid, "gridHorizontalWeight", 1), 
                    TablixObjects.PropGridRowPadding = new TablixProperty(TablixObjects.ObjectGrid, "rowPadding", 0), 
                    TablixObjects.PropGridOutlineColor = new TablixProperty(TablixObjects.ObjectGrid, "outlineColor", "#CCC", powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropGridOutlineWeight = new TablixProperty(TablixObjects.ObjectGrid, "outlineWeight", 1), 
                    TablixObjects.PropGridImageHeight = new TablixProperty(TablixObjects.ObjectGrid, "imageHeight", 75), 
                    TablixObjects.PropGridPivotTableTextSize = new TablixProperty(TablixObjects.ObjectGrid, "textSize", 8), 
                    TablixObjects.PropColumnsFontColor = new TablixProperty(TablixObjects.ObjectColumnHeaders, "fontColor", "#666", powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropColumnsFontFamily = new TablixProperty(TablixObjects.ObjectColumnHeaders, "fontFamily", visuals.Font.Family.regular.css), 
                    TablixObjects.PropColumnsFontSize = new TablixProperty(TablixObjects.ObjectColumnHeaders, "fontSize", (void 0), null, [ TablixObjects.PropGridPivotTableTextSize ]), 
                    TablixObjects.PropColumnsBackColor = new TablixProperty(TablixObjects.ObjectColumnHeaders, "backColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropColumnsOutline = new TablixProperty(TablixObjects.ObjectColumnHeaders, "outline", "BottomOnly"), 
                    TablixObjects.PropColumnPivotTableAutoSizeColumns = new TablixProperty(TablixObjects.ObjectColumnHeaders, "autoSizeColumnWidth", (!0)), 
                    TablixObjects.PropColumnsWordWrap = new TablixProperty(TablixObjects.ObjectColumnHeaders, "wordWrap", (!1)), 
                    TablixObjects.PropColumnsUrlIcon = new TablixProperty(TablixObjects.ObjectColumnHeaders, "urlIcon", (!1)), 
                    TablixObjects.PropRowsFontColor = new TablixProperty(TablixObjects.ObjectRowHeaders, "fontColor", "#666", powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropRowsFontFamily = new TablixProperty(TablixObjects.ObjectRowHeaders, "fontFamily", visuals.Font.Family.regular.css), 
                    TablixObjects.PropRowsFontSize = new TablixProperty(TablixObjects.ObjectRowHeaders, "fontSize", (void 0), null, [ TablixObjects.PropGridPivotTableTextSize ]), 
                    TablixObjects.PropRowsBackColor = new TablixProperty(TablixObjects.ObjectRowHeaders, "backColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropRowsOutline = new TablixProperty(TablixObjects.ObjectRowHeaders, "outline", "RightOnly"), 
                    TablixObjects.PropRowsSteppedLayout = new TablixProperty(TablixObjects.ObjectRowHeaders, "stepped", (!0)), 
                    TablixObjects.PropRowsSteppedLayoutIndentation = new TablixProperty(TablixObjects.ObjectRowHeaders, "steppedLayoutIndentation", 10), 
                    TablixObjects.PropRowsWordWrap = new TablixProperty(TablixObjects.ObjectRowHeaders, "wordWrap", (!1)), 
                    TablixObjects.PropRowsUrlIcon = new TablixProperty(TablixObjects.ObjectRowHeaders, "urlIcon", (!1)), 
                    TablixObjects.PropValuesBackColor = new TablixProperty(TablixObjects.ObjectValues, "backColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropValuesFontColor = new TablixProperty(TablixObjects.ObjectValues, "fontColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropValuesFontFamily = new TablixProperty(TablixObjects.ObjectValues, "fontFamily", visuals.Font.Family.regular.css), 
                    TablixObjects.PropValuesFontSize = new TablixProperty(TablixObjects.ObjectValues, "fontSize", (void 0), null, [ TablixObjects.PropGridPivotTableTextSize ]), 
                    TablixObjects.PropValuesFontColorPrimary = new TablixProperty(TablixObjects.ObjectValues, "fontColorPrimary", "#333", powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropValuesBackColorPrimary = new TablixProperty(TablixObjects.ObjectValues, "backColorPrimary", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropValuesFontColorSecondary = new TablixProperty(TablixObjects.ObjectValues, "fontColorSecondary", "#333", powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropValuesBackColorSecondary = new TablixProperty(TablixObjects.ObjectValues, "backColorSecondary", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropValuesBandedRowHeaders = new TablixProperty(TablixObjects.ObjectValues, "bandedRowHeaders", (!0)), 
                    TablixObjects.PropValuesOutline = new TablixProperty(TablixObjects.ObjectValues, "outline", "None"), 
                    TablixObjects.PropValuesUrlIcon = new TablixProperty(TablixObjects.ObjectValues, "urlIcon", (!1)), 
                    TablixObjects.PropValuesWordWrap = new TablixProperty(TablixObjects.ObjectValues, "wordWrap", (!1)), 
                    TablixObjects.PropValuesOnRow = new TablixProperty(TablixObjects.ObjectValues, "valuesOnRow", (!1), powerbi.DataViewObjects.getValue), 
                    TablixObjects.PropTotalTableExTotals = new TablixProperty(TablixObjects.ObjectTotal, "totals", (!0)), 
                    TablixObjects.PropTotalFontColor = new TablixProperty(TablixObjects.ObjectTotal, "fontColor", "#333", powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropTotalFontFamily = new TablixProperty(TablixObjects.ObjectTotal, "fontFamily", (void 0), null, [ TablixObjects.PropValuesFontFamily ]), 
                    TablixObjects.PropTotalFontSize = new TablixProperty(TablixObjects.ObjectTotal, "fontSize", (void 0), null, [ TablixObjects.PropValuesFontSize ]), 
                    TablixObjects.PropTotalBackColor = new TablixProperty(TablixObjects.ObjectTotal, "backColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropTotalOutline = new TablixProperty(TablixObjects.ObjectTotal, "outline", "TopOnly"), 
                    TablixObjects.PropSubTotalsFontColor = new TablixProperty(TablixObjects.ObjectSubTotals, "fontColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropSubTotalsFontFamily = new TablixProperty(TablixObjects.ObjectSubTotals, "fontFamily", (void 0), null, [ TablixObjects.PropValuesFontFamily ]), 
                    TablixObjects.PropSubTotalsFontSize = new TablixProperty(TablixObjects.ObjectSubTotals, "fontSize", (void 0), null, [ TablixObjects.PropValuesFontSize ]), 
                    TablixObjects.PropSubTotalsBackColor = new TablixProperty(TablixObjects.ObjectSubTotals, "backColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropSubTotalsPivotTableRowSubtotals = new TablixProperty(TablixObjects.ObjectSubTotals, "rowSubtotals", (!0)), 
                    TablixObjects.PropSubTotalsPivotTableRowSubtotalsPosition = new TablixProperty(TablixObjects.ObjectSubTotals, "rowSubtotalsPosition", (void 0), function(objects, propertyId, defaultValue) {
                        var value = powerbi.DataViewObjects.getValue(objects, propertyId, defaultValue);
                        return null != value ? value : TablixObjects.PropRowsSteppedLayout.getValue(objects) ? visuals.rowSubtotalPosition.top : visuals.rowSubtotalPosition.bottom;
                    }), TablixObjects.PropSubTotalsPivotTableRowSubtotalsPerLevel = new TablixProperty(TablixObjects.ObjectSubTotals, "perRowLevel", (!1)), 
                    TablixObjects.PropSubTotalsPivotTableColumnSubtotals = new TablixProperty(TablixObjects.ObjectSubTotals, "columnSubtotals", (!0)), 
                    TablixObjects.PropSubTotalsPivotTableColumnSubtotalsPerLevel = new TablixProperty(TablixObjects.ObjectSubTotals, "perColumnLevel", (!1)), 
                    TablixObjects.PropSubTotalsPivotTableLevelSubtotalEnabled = new TablixProperty(TablixObjects.ObjectSubTotals, "levelSubtotalEnabled", (!0)), 
                    TablixObjects.PropSubTotalsApplyToHeaders = new TablixProperty(TablixObjects.ObjectSubTotals, "applyToHeaders", (!1)), 
                    TablixObjects.PropGrandTotalFontColor = new TablixProperty(TablixObjects.ObjectTotal, "fontColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropGrandTotalFontFamily = new TablixProperty(TablixObjects.ObjectTotal, "fontFamily", (void 0), null, [ TablixObjects.PropSubTotalsFontFamily ]), 
                    TablixObjects.PropGrandTotalFontSize = new TablixProperty(TablixObjects.ObjectTotal, "fontSize", (void 0), null, [ TablixObjects.PropSubTotalsFontSize ]), 
                    TablixObjects.PropGrandTotalBackColor = new TablixProperty(TablixObjects.ObjectTotal, "backColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropGrandTotalApplyToHeaders = new TablixProperty(TablixObjects.ObjectTotal, "applyToHeaders", (!1)), 
                    TablixObjects.PropColumnFormattingFontColor = new TablixProperty(TablixObjects.ObjectColumnFormatting, "fontColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropColumnFormattingBackColor = new TablixProperty(TablixObjects.ObjectColumnFormatting, "backColor", (void 0), powerbi.DataViewObjects.getFillColor), 
                    TablixObjects.PropColumnFormattingStyleHeader = new TablixProperty(TablixObjects.ObjectColumnFormatting, "styleHeader", (!1)), 
                    TablixObjects.PropColumnFormattingStyleValues = new TablixProperty(TablixObjects.ObjectColumnFormatting, "styleValues", (!0)), 
                    TablixObjects.PropColumnFormattingStyleSubtotals = new TablixProperty(TablixObjects.ObjectColumnFormatting, "styleSubtotals", (!0)), 
                    TablixObjects.PropColumnFormattingStyleTotal = new TablixProperty(TablixObjects.ObjectColumnFormatting, "styleTotal", (!1)), 
                    TablixObjects.PropColumnFormattingDataBars = new TablixProperty(TablixObjects.ObjectColumnFormatting, "dataBars", (void 0)), 
                    TablixObjects.PropColumnWidthValue = new TablixProperty(TablixObjects.ObjectColumnWidth, "value", (void 0)), 
                    TablixObjects.getMetadadataObjects = getMetadadataObjects, TablixObjects.enumerateObjectRepetition = enumerateObjectRepetition, 
                    TablixObjects.enumerateObjectInstances = enumerateObjectInstances, TablixObjects.enumerateGeneralOptions = enumerateGeneralOptions, 
                    TablixObjects.enumerateGridOptions = enumerateGridOptions, TablixObjects.enumerateColumnHeadersOptions = enumerateColumnHeadersOptions, 
                    TablixObjects.enumerateRowHeadersOptions = enumerateRowHeadersOptions, TablixObjects.enumerateValuesOptions = enumerateValuesOptions, 
                    TablixObjects.enumerateTotalOptions = enumerateTotalOptions, TablixObjects.enumerateGrandTotalOptions = enumerateGrandTotalOptions, 
                    TablixObjects.enumerateSubTotalsOptions = enumerateSubTotalsOptions, TablixObjects.enumerateColumnFormattingOptions = enumerateColumnFormattingOptions, 
                    TablixObjects.getTableObjects = getTableObjects, TablixObjects.getMatrixObjects = getMatrixObjects, 
                    TablixObjects.getPivotTableObjects = getPivotTableObjects, TablixObjects.getTableExObjects = getTableExObjects, 
                    TablixObjects.getTextSizeInPx = getTextSizeInPx, TablixObjects.shouldShowColumnSubtotalsOption = shouldShowColumnSubtotalsOption, 
                    TablixObjects.isDiscourageAggregationAcrossGroups = isDiscourageAggregationAcrossGroups;
                })(TablixObjects = internal.TablixObjects || (internal.TablixObjects = {}));
                var TablixUtils;
                !(function(TablixUtils) {
                    function createTable() {
                        return document.createElement("table");
                    }
                    function createDiv() {
                        var div = document.createElement("div");
                        return div.className = TablixUtils.CssClassTablixDiv, div;
                    }
                    function resetCellCssClass(cell) {
                        cell.extension.contentElement.className = TablixUtils.CssClassTablixDiv + " " + TablixUtils.CssClassContentElement, 
                        cell.extension.contentHost.className = TablixUtils.CssClassTablixDiv + " " + TablixUtils.CssClassContentHost;
                    }
                    function addCellCssClass(cell, style) {
                        cell.extension.contentHost.className += " " + style;
                    }
                    function clearCellStyle(cell) {
                        cell.extension.contentHost.className = "", cell.extension.contentHost.style.cssText = "";
                    }
                    function clearCellTextAndTooltip(cell) {
                        cell.extension.contentHost.textContent = "", cell.extension.contentHost.removeAttribute("title"), 
                        cell.contentHeight = cell.contentWidth = 0, controls.HTMLElementUtils.clearChildren(cell.extension.contentHost);
                    }
                    function setCellTextAndTooltip(text, elementText, elementTooltip) {
                        TablixUtils.setCellText(text, elementText), TablixUtils.setCellTooltip(text, elementTooltip || elementText);
                    }
                    function setCellText(text, element) {
                        element.textContent = visuals.TextUtil.replaceSpaceWithNBSP(text);
                    }
                    function setCellTooltip(text, element) {
                        element.title = text;
                    }
                    function appendDiv(container, text) {
                        var div = createDiv();
                        return container.appendChild(div), text && (div.textContent = text), div;
                    }
                    function isValidSortClick(e) {
                        var colHeader = e.target, x = e.offsetX;
                        return x >= 0 && x < colHeader.offsetWidth - internal.TablixResizer.resizeHandleSize;
                    }
                    function appendATagToBodyCell(value, cellElement, urlIconName) {
                        var atag = null;
                        0 === cellElement.childElementCount ? (atag = document.createElement("a"), cellElement.appendChild(atag)) : atag = cellElement.children[0], 
                        atag.href = value, atag.target = "_blank", atag.rel = "noopener noreferrer", atag.title = value, 
                        null != urlIconName ? (atag.className = TablixUtils.CssClassValueURLIcon + " " + urlIconName, 
                        $(cellElement).addClass(TablixUtils.CssClassValueURLIconContainer)) : atag.innerText = value;
                    }
                    function appendImgTagToBodyCell(value, cellElement, imageHeight) {
                        var imgContainer = TablixUtils.createDiv(), imgTag = document.createElement("img");
                        imgContainer.style.height = imageHeight + "px", imgContainer.style.width = "100%", 
                        imgContainer.style.textAlign = "center", imgTag.src = value, imgTag.style.maxHeight = "100%", 
                        imgTag.style.maxWidth = "100%", imgContainer.appendChild(imgTag), cellElement.appendChild(imgContainer), 
                        cellElement.title = value;
                    }
                    function createKpiDom(kpi, kpiValue) {
                        var className = visuals.KpiUtil.getClassForKpi(kpi, kpiValue) || "";
                        return DomFactory.div().addClass(className).css({
                            display: "inline-block",
                            "vertical-align": "bottom",
                            margin: "0"
                        });
                    }
                    function getUrlScheme(metadata, content) {
                        return visuals.converterHelper.isWebUrlColumn(metadata) ? UrlUtils.getUrlScheme(content) : UrlScheme.NONE;
                    }
                    function getUrlIconName(scheme) {
                        switch (scheme) {
                          case UrlScheme.file:
                          case UrlScheme.ftp:
                            return "page2";

                          case UrlScheme.mailto:
                            return "mail";

                          case UrlScheme.news:
                            return "link";

                          case UrlScheme.telnet:
                            return "pc1";

                          case UrlScheme.http:
                          case UrlScheme.https:
                            return "link";

                          default:
                            return null;
                        }
                    }
                    function isValidImage(header, metadata, content) {
                        return isImage(header, metadata) && UrlUtils.isValidImageUrl(content);
                    }
                    function isImage(header, metadata) {
                        return visuals.converterHelper.isImageUrlColumn(metadata) && !header.isSubtotal;
                    }
                    function isValidStatusGraphic(kpi, kpiValue) {
                        return !(!kpi || void 0 === kpiValue) && !!visuals.KpiUtil.getClassForKpi(kpi, kpiValue);
                    }
                    function getCustomSortEventArgs(queryName, sortDirection) {
                        var sortDescriptors = [ {
                            queryName: queryName,
                            sortDirection: sortDirection
                        } ];
                        return {
                            sortDescriptors: sortDescriptors
                        };
                    }
                    function reverseSort(sortDirection) {
                        return 2 === sortDirection ? 1 : 2;
                    }
                    function addSortIconToColumnHeader(itemSort, cellDiv) {
                        var colHeaderContainer = TablixUtils.createDiv();
                        itemSort ? (colHeaderContainer.appendChild(createSortIcon(itemSort, !0)), colHeaderContainer.appendChild(createSortIcon(reverseSort(itemSort), !1))) : colHeaderContainer.appendChild(createSortIcon(2, !1));
                        var colHeaderTitle = TablixUtils.createDiv();
                        return colHeaderContainer.appendChild(colHeaderTitle), cellDiv.appendChild(colHeaderContainer), 
                        colHeaderTitle;
                    }
                    function createSortIcon(sort, isSorted) {
                        var imgSort = document.createElement("i");
                        return imgSort.className = SortIconContainerClassName + " " + (isSorted ? "sorted" : "future") + " " + (1 === sort ? "powervisuals-glyph caret-up" : "powervisuals-glyph caret-down"), 
                        imgSort;
                    }
                    function checkSortIconExists(cell) {
                        for (var i = 0, len = cell.extension.contentElement.childElementCount; i < len; i++) {
                            var element = cell.extension.contentElement.children.item(i);
                            if (element.classList.contains(SortIconContainerClassName)) return !0;
                        }
                        return !1;
                    }
                    function removeSortIcons(cell) {
                        checkSortIconExists(cell) && $(cell.extension.contentElement).find("." + SortIconContainerClassName).remove();
                    }
                    TablixUtils.PreferredLoadMoreThreshold = .8, TablixUtils.TotalLabel = "TableTotalLabel", 
                    TablixUtils.CssClassTablixDiv = "tablixDiv", TablixUtils.CssClassContentElement = "tablixCellContentElement", 
                    TablixUtils.CssClassContentHost = "tablixCellContentHost", TablixUtils.CssClassWrappingContainer = "tablixWrappingContainer", 
                    TablixUtils.CssClassTablixHeader = "tablixHeader", TablixUtils.CssClassTablixColumnHeaderLeaf = "tablixColumnHeaderLeaf", 
                    TablixUtils.CssClassTablixValueNumeric = "tablixValueNumeric", TablixUtils.CssClassTablixValueTotal = "tablixValueTotal", 
                    TablixUtils.CssClassValueURLIcon = "powervisuals-glyph tablixUrlIconGlyph", TablixUtils.CssClassValueURLIconContainer = "tablixValueUrlIcon", 
                    TablixUtils.CssClassMatrixRowHeaderLeaf = "matrixRowHeaderLeaf", TablixUtils.CssClassMatrixRowHeaderSubTotal = "matrixRowHeaderSubTotal", 
                    TablixUtils.CssClassTableFooter = "tableFooterCell", TablixUtils.CssClassTableBodyCell = "tableBodyCell", 
                    TablixUtils.CssClassTableBodyCellBottom = "tableBodyCellBottom", TablixUtils.CssClassPivotTableCell = "tablixCell", 
                    TablixUtils.StringNonBreakingSpace = "&nbsp;", TablixUtils.UnitOfMeasurement = "px";
                    var SortIconContainerClassName = "tablixSortIconContainer";
                    TablixUtils.CellPaddingLeft = 10, TablixUtils.CellPaddingRight = 5, TablixUtils.CellPaddingLeftMatrixTotal = 5, 
                    TablixUtils.SortIconPadding = 5, TablixUtils.ImageDefaultAspectRatio = 1, TablixUtils.FontFamilyCell = visuals.Font.Family.regular.css, 
                    TablixUtils.FontFamilyHeader = visuals.Font.Family.regular.css, TablixUtils.FontFamilyTotal = visuals.Font.Family.bold.css, 
                    TablixUtils.FontFamilyGlyphs = visuals.Font.Family.glyphs.css, TablixUtils.FontColorCells = "#333", 
                    TablixUtils.FontColorHeaders = "#666", TablixUtils.WordWrappingMaxLines = Number.POSITIVE_INFINITY, 
                    TablixUtils.SortIconFontSizeRatio = .71;
                    var EdgeType;
                    !(function(EdgeType) {
                        EdgeType[EdgeType.Outline = 0] = "Outline", EdgeType[EdgeType.Gridline = 1] = "Gridline";
                    })(EdgeType = TablixUtils.EdgeType || (TablixUtils.EdgeType = {}));
                    var EdgeSettings = (function() {
                        function EdgeSettings(weight, color) {
                            this.applyParams(!0, weight, color);
                        }
                        return EdgeSettings.prototype.applyParams = function(shown, weight, color, type) {
                            shown ? (this.weight = null == weight ? 0 : weight, this.color = null == color ? "black" : color, 
                            this.type = null == type ? EdgeType.Gridline : type) : (this.weight = 0, this.color = "black", 
                            this.type = EdgeType.Gridline);
                        }, EdgeSettings.prototype.getCSS = function() {
                            var css = [];
                            return _.isNumber(this.weight) && (css.push(this.weight + TablixUtils.UnitOfMeasurement), 
                            this.color && css.push(this.color), css.push("solid")), css.join(" ");
                        }, EdgeSettings.prototype.getPriority = function(edges) {
                            return this === edges.top || this === edges.bottom ? this.type === EdgeType.Outline ? 2 : 0 : this === edges.right || this === edges.left ? this.type === EdgeType.Outline ? 3 : 1 : -1;
                        }, EdgeSettings.prototype.getShadowCss = function(edges) {
                            var output = "inset ";
                            if (this === edges.left) output += this.weight + TablixUtils.UnitOfMeasurement + " 0"; else if (this === edges.right) output += "-" + this.weight + TablixUtils.UnitOfMeasurement + " 0"; else if (this === edges.top) output += "0 " + this.weight + TablixUtils.UnitOfMeasurement; else {
                                if (this !== edges.bottom) return "";
                                output += "0 -" + this.weight + TablixUtils.UnitOfMeasurement;
                            }
                            return output + " 0 0 " + this.color;
                        }, EdgeSettings;
                    })();
                    TablixUtils.EdgeSettings = EdgeSettings;
                    var CellStyle = (function() {
                        function CellStyle(leftPadding, rightPadding) {
                            void 0 === leftPadding && (leftPadding = TablixUtils.CellPaddingLeft), void 0 === rightPadding && (rightPadding = TablixUtils.CellPaddingRight), 
                            this.borders = {}, this.paddings = {
                                top: 0,
                                left: leftPadding,
                                bottom: 0,
                                right: rightPadding
                            }, this.fontColor = "", this.fontFamily = "", this.backColor = "";
                        }
                        return CellStyle.prototype.applyStyle = function(cell) {
                            var div = cell.extension.contentHost, style = div.style, fontAttributeValue = this.buildFontAttributeValue();
                            null != fontAttributeValue ? style.font = fontAttributeValue : (style.fontFamily = this.fontFamily, 
                            style.fontSize = this.fontSize ? jsCommon.PixelConverter.toString(this.fontSize.px) : void 0, 
                            style.fontWeight = this.fontWeight), style.color = this.fontColor, style.backgroundColor = this.backColor, 
                            style.boxShadow = this.getBoxShadow(), style.border = "none", style.paddingTop = this.getPaddingTop(), 
                            style.paddingRight = this.getPaddingRight(), style.paddingBottom = this.getPaddingBottom(), 
                            style.paddingLeft = this.getPaddingLeft();
                        }, CellStyle.prototype.getPaddingTop = function() {
                            return (null == this.paddings.top ? 0 : this.paddings.top) + (null == this.borders.top ? 0 : this.borders.top.weight) + TablixUtils.UnitOfMeasurement;
                        }, CellStyle.prototype.getPaddingBottom = function() {
                            return (null == this.paddings.bottom ? 0 : this.paddings.bottom) + (null == this.borders.bottom ? 0 : this.borders.bottom.weight) + TablixUtils.UnitOfMeasurement;
                        }, CellStyle.prototype.getPaddingRight = function() {
                            return (null == this.paddings.right ? TablixUtils.CellPaddingRight : this.paddings.right) + (null == this.borders.right ? 0 : this.borders.right.weight) + TablixUtils.UnitOfMeasurement;
                        }, CellStyle.prototype.getPaddingLeft = function() {
                            return (null == this.paddings.left ? TablixUtils.CellPaddingLeft : this.paddings.left) + (null == this.borders.left ? 0 : this.borders.left.weight) + TablixUtils.UnitOfMeasurement;
                        }, CellStyle.prototype.getBoxShadow = function() {
                            var _this = this, edges = [ this.borders.top, this.borders.right, this.borders.bottom, this.borders.left ];
                            return edges = _.sortBy(edges, (function(e) {
                                return e ? e.getPriority(_this.borders) : -1;
                            })).reverse(), _.map(edges, (function(e) {
                                if (e) return e.getShadowCss(_this.borders);
                            })).join(", ");
                        }, CellStyle.prototype.getAttributes = function() {
                            var style = {
                                "padding-top": this.getPaddingTop(),
                                "padding-right": this.getPaddingRight(),
                                "padding-bottom": this.getPaddingBottom(),
                                "padding-left": this.getPaddingLeft()
                            }, fontAttributeValue = this.buildFontAttributeValue();
                            null != fontAttributeValue ? style.font = fontAttributeValue : (_.isEmpty(this.fontFamily) || (style["font-family"] = this.fontFamily), 
                            null != this.fontSize && (style["font-size"] = jsCommon.PixelConverter.toString(this.fontSize.px)), 
                            null != this.fontWeight && (style["font-weight"] = this.fontWeight)), _.isEmpty(this.fontColor) || (style.color = this.fontColor), 
                            _.isEmpty(this.backColor) || (style["background-color"] = this.backColor);
                            var boxShadow = this.getBoxShadow();
                            return _.isEmpty(boxShadow) || (style["box-shadow"] = boxShadow), style;
                        }, CellStyle.prototype.getExtraTop = function() {
                            var extra = 0;
                            return this.paddings.top && (extra += this.paddings.top), this.borders.top && (extra += this.borders.top.weight), 
                            extra;
                        }, CellStyle.prototype.getExtraBottom = function() {
                            var extra = 0;
                            return this.paddings.bottom && (extra += this.paddings.bottom), this.borders.bottom && (extra += this.borders.bottom.weight), 
                            extra;
                        }, CellStyle.prototype.getExtraRight = function() {
                            var extra = 0;
                            return this.paddings.right && (extra += this.paddings.right), this.borders.right && (extra += this.borders.right.weight), 
                            extra;
                        }, CellStyle.prototype.getExtraLeft = function() {
                            var extra = 0;
                            return this.paddings.left && (extra += this.paddings.left), this.borders.left && (extra += this.borders.left.weight), 
                            extra;
                        }, CellStyle.prototype.buildFontAttributeValue = function() {
                            var hasFontFamily = !_.isEmpty(this.fontFamily), hasFontSize = null != this.fontSize, hasFontWeight = null != this.fontWeight;
                            return hasFontFamily && hasFontSize ? (hasFontWeight ? this.fontWeight + " " : "") + (jsCommon.PixelConverter.toString(this.fontSize.px) + " " + this.fontFamily) : null;
                        }, CellStyle;
                    })();
                    TablixUtils.CellStyle = CellStyle;
                    var DimensionPosition = (function() {
                        function DimensionPosition() {}
                        return DimensionPosition;
                    })();
                    TablixUtils.DimensionPosition = DimensionPosition;
                    var CellPosition = (function() {
                        function CellPosition() {
                            this.row = new DimensionPosition(), this.column = new DimensionPosition();
                        }
                        return CellPosition.prototype.isMatch = function(position) {
                            return this.column.index === position.column.index && this.row.index === position.row.index;
                        }, CellPosition;
                    })();
                    TablixUtils.CellPosition = CellPosition;
                    var TablixVisualCell = (function() {
                        function TablixVisualCell(dataPoint, objects, isRowSubTotal, isColumnSubTotal, isRowGrandTotal, isColumnGrandTotal, columnMetadata, formatter, nullsAreBlank) {
                            this.dataPoint = dataPoint, this.objects = objects, this.isRowSubTotal = isRowSubTotal, 
                            this.isColumnSubTotal = isColumnSubTotal, this.isRowGrandTotal = isRowGrandTotal, 
                            this.isColumnGrandTotal = isColumnGrandTotal, this.columnMetadata = columnMetadata, 
                            this.formatter = formatter, this.nullsAreBlank = nullsAreBlank, this.position = new TablixUtils.CellPosition();
                        }
                        return Object.defineProperty(TablixVisualCell.prototype, "isTotal", {
                            get: function() {
                                return this.isSubtotal || this.isGrandTotal;
                            },
                            enumerable: !0,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isSubtotal", {
                            get: function() {
                                return this.isColumnSubTotal || this.isRowSubTotal;
                            },
                            enumerable: !0,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isGrandTotal", {
                            get: function() {
                                return this.isColumnGrandTotal || this.isRowGrandTotal;
                            },
                            enumerable: !0,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "textContent", {
                            get: function() {
                                return this.formatter ? this.formatter(this.dataPoint, this.objects, this.columnMetadata, TablixObjects.PropColumnFormatString, this.nullsAreBlank) : null != this.dataPoint ? this.dataPoint : "";
                            },
                            enumerable: !0,
                            configurable: !0
                        }), TablixVisualCell.prototype.isKpi = function() {
                            return this.columnMetadata && isValidStatusGraphic(this.columnMetadata.kpi, this.textContent);
                        }, Object.defineProperty(TablixVisualCell.prototype, "kpiContent", {
                            get: function() {
                                if (this.isKpi()) return createKpiDom(this.columnMetadata.kpi, this.textContent);
                            },
                            enumerable: !0,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isNumeric", {
                            get: function() {
                                if (this.columnMetadata) return this.columnMetadata.type.numeric && !this.columnMetadata.kpi;
                            },
                            enumerable: !0,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isUrl", {
                            get: function() {
                                if (this.columnMetadata) return visuals.converterHelper.isWebUrlColumn(this.columnMetadata);
                            },
                            enumerable: !0,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isImage", {
                            get: function() {
                                if (this.columnMetadata) return visuals.converterHelper.isImageUrlColumn(this.columnMetadata);
                            },
                            enumerable: !0,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isValidUrl", {
                            get: function() {
                                return TablixUtils.getUrlScheme(this.columnMetadata, this.textContent) !== UrlScheme.NONE;
                            },
                            enumerable: !0,
                            configurable: !0
                        }), TablixVisualCell.prototype.isMatch = function(item) {
                            return this.position.isMatch(item.position) && this.backColor === item.backColor;
                        }, TablixVisualCell;
                    })();
                    TablixUtils.TablixVisualCell = TablixVisualCell, TablixUtils.createTable = createTable, 
                    TablixUtils.createDiv = createDiv, TablixUtils.resetCellCssClass = resetCellCssClass, 
                    TablixUtils.addCellCssClass = addCellCssClass, TablixUtils.clearCellStyle = clearCellStyle, 
                    TablixUtils.clearCellTextAndTooltip = clearCellTextAndTooltip, TablixUtils.setCellTextAndTooltip = setCellTextAndTooltip, 
                    TablixUtils.setCellText = setCellText, TablixUtils.setCellTooltip = setCellTooltip, 
                    TablixUtils.appendDiv = appendDiv, TablixUtils.isValidSortClick = isValidSortClick, 
                    TablixUtils.appendATagToBodyCell = appendATagToBodyCell, TablixUtils.appendImgTagToBodyCell = appendImgTagToBodyCell, 
                    TablixUtils.createKpiDom = createKpiDom, TablixUtils.getUrlScheme = getUrlScheme, 
                    TablixUtils.getUrlIconName = getUrlIconName, TablixUtils.isValidImage = isValidImage, 
                    TablixUtils.isImage = isImage, TablixUtils.isValidStatusGraphic = isValidStatusGraphic, 
                    TablixUtils.getCustomSortEventArgs = getCustomSortEventArgs, TablixUtils.reverseSort = reverseSort, 
                    TablixUtils.addSortIconToColumnHeader = addSortIconToColumnHeader, TablixUtils.removeSortIcons = removeSortIcons;
                })(TablixUtils = internal.TablixUtils || (internal.TablixUtils = {}));
            })(internal = controls.internal || (controls.internal = {}));
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {})), (function(powerbi) {
    var visuals;
    !(function(visuals) {
        var PivotTableOptions;
        !(function(PivotTableOptions) {
            function createDashboardConstructorOptions() {
                return {
                    scrolling: {
                        enabled: !1
                    },
                    selection: {
                        enabled: !1
                    },
                    sorting: {
                        enabled: !1,
                        showActiveSortIcon: !0
                    },
                    columnResizing: {
                        enabled: !1
                    },
                    interactivityIndicatorEnabled: !1
                };
            }
            function createDefaultConstructorOptions() {
                return {
                    scrolling: {
                        enabled: !0
                    },
                    selection: {
                        enabled: !0
                    },
                    sorting: {
                        enabled: !0,
                        showActiveSortIcon: !0
                    },
                    columnResizing: {
                        enabled: !0
                    },
                    interactivityIndicatorEnabled: !0
                };
            }
            function createMobileConstructorOptions() {
                return {
                    scrolling: {
                        enabled: !0
                    },
                    selection: {
                        enabled: !0
                    },
                    sorting: {
                        enabled: !0,
                        showActiveSortIcon: !0
                    },
                    columnResizing: {
                        enabled: !0
                    },
                    interactivityIndicatorEnabled: !1
                };
            }
            PivotTableOptions.createDashboardConstructorOptions = createDashboardConstructorOptions, 
            PivotTableOptions.createDefaultConstructorOptions = createDefaultConstructorOptions, 
            PivotTableOptions.createMobileConstructorOptions = createMobileConstructorOptions;
        })(PivotTableOptions = visuals.PivotTableOptions || (visuals.PivotTableOptions = {}));
        var TableExOptions;
        !(function(TableExOptions) {
            function createDashboardConstructorOptions() {
                return {
                    scrolling: {
                        enabled: !1
                    },
                    selection: {
                        enabled: !1
                    },
                    sorting: {
                        enabled: !1,
                        showActiveSortIcon: !0
                    },
                    columnResizing: {
                        enabled: !1
                    },
                    interactivityIndicatorEnabled: !1
                };
            }
            function createDefaultConstructorOptions() {
                return {
                    scrolling: {
                        enabled: !0
                    },
                    selection: {
                        enabled: !0
                    },
                    sorting: {
                        enabled: !0,
                        showActiveSortIcon: !0
                    },
                    columnResizing: {
                        enabled: !0
                    },
                    interactivityIndicatorEnabled: !0
                };
            }
            function createMobileConstructorOptions() {
                return {
                    scrolling: {
                        enabled: !0
                    },
                    selection: {
                        enabled: !0
                    },
                    sorting: {
                        enabled: !0,
                        showActiveSortIcon: !0
                    },
                    columnResizing: {
                        enabled: !0
                    },
                    interactivityIndicatorEnabled: !1
                };
            }
            TableExOptions.createDashboardConstructorOptions = createDashboardConstructorOptions, 
            TableExOptions.createDefaultConstructorOptions = createDefaultConstructorOptions, 
            TableExOptions.createMobileConstructorOptions = createMobileConstructorOptions;
        })(TableExOptions = visuals.TableExOptions || (visuals.TableExOptions = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            controls.TablixDefaultTextSize = jsCommon.TextSizeDefaults.TextSizeMin;
            var TablixControl = (function() {
                function TablixControl(hierarchyNavigator, layoutManager, binder, parentDomElement, options) {
                    var _this = this;
                    this.scrollBarElementWidth = 9, this.options = options;
                    var isInteractive = options.interactive;
                    this.isTouchEnabled = isInteractive && options.enableTouchSupport, this.mainDiv = controls.internal.TablixUtils.createDiv(), 
                    this.mainDiv.classList.add(TablixControl.TablixTableAreaClassName), this.footerDiv = controls.internal.TablixUtils.createDiv(), 
                    this.footerDiv.classList.add(TablixControl.TablixFooterClassName), this.gridDimensions = {}, 
                    this.containerElement = controls.internal.TablixUtils.createDiv(), this.className = layoutManager.getTablixClassName(), 
                    this.autoSizeWidth = !1, this.autoSizeHeight = !1, this.fontFamily = controls.internal.TablixUtils.FontFamilyCell, 
                    this.fontColor = controls.internal.TablixUtils.FontColorCells, this.fontSize = options.fontSize, 
                    parentDomElement.className = TablixControl.TablixContainerClassName, parentDomElement.appendChild(this.containerElement), 
                    this.containerElement.addEventListener("wheel", (function(e) {
                        _this.onWheel(e);
                    })), this.containerElement.appendChild(this.mainDiv), this.containerElement.appendChild(this.footerDiv), 
                    this.isTouchEnabled && (this.InitializeTouchSupport(), this.bindTouchEvents()), 
                    this.controlLayoutManager = layoutManager, this.controlLayoutManager.initialize(this), 
                    this.hierarchyTablixNavigator = hierarchyNavigator, this.binder = binder, this.columnDim = new controls.TablixColumnDimension(this), 
                    this.rowDim = new controls.TablixRowDimension(this), this.columnDim._otherDimension = this.rowDimension, 
                    this.rowDim._otherDimension = this.columnDimension, this.InitializeScrollbars(), 
                    isInteractive || (this.scrollbarWidth = 0), this.updateHorizontalPosition(), this.updateVerticalPosition(), 
                    this.updateFooterVisibility(), this.lastRenderingArgs = {};
                }
                return TablixControl.prototype.InitializeTouchSupport = function() {
                    this.isTouchEventsBound = !1, this.touchManager = new controls.TouchUtils.TouchManager(), 
                    this.touchInterpreter = new controls.TouchUtils.TouchEventInterpreter(this.touchManager), 
                    this.footerTouchInterpreter = new controls.TouchUtils.TouchEventInterpreter(this.touchManager), 
                    this.columnTouchDelegate = new controls.ColumnTouchDelegate(new controls.TouchUtils.Rectangle()), 
                    this.rowTouchDelegate = new controls.RowTouchDelegate(new controls.TouchUtils.Rectangle()), 
                    this.bodyTouchDelegate = new controls.BodyTouchDelegate(new controls.TouchUtils.Rectangle()), 
                    this.footerTouchDelegate = new controls.ColumnTouchDelegate(new controls.TouchUtils.Rectangle()), 
                    this.columnTouchDelegate.setHandler(this, this.onTouchEvent), this.rowTouchDelegate.setHandler(this, this.onTouchEvent), 
                    this.bodyTouchDelegate.setHandler(this, this.onTouchEvent), this.footerTouchDelegate.setHandler(this, this.onTouchEvent), 
                    this.touchManager.addTouchRegion(this.columnTouchDelegate.dimension, this.columnTouchDelegate, this.columnTouchDelegate), 
                    this.touchManager.addTouchRegion(this.rowTouchDelegate.dimension, this.rowTouchDelegate, this.rowTouchDelegate), 
                    this.touchManager.addTouchRegion(this.bodyTouchDelegate.dimension, this.bodyTouchDelegate, this.bodyTouchDelegate), 
                    this.touchManager.addTouchRegion(this.footerTouchDelegate.dimension, this.footerTouchDelegate, this.footerTouchDelegate);
                }, TablixControl.prototype.unBindTouchEvents = function() {
                    this.isTouchEventsBound && (this.touchInterpreter.clearAllTouchEvents(), this.footerTouchInterpreter.clearAllTouchEvents(), 
                    this.isTouchEventsBound = !1);
                }, TablixControl.prototype.bindTouchEvents = function() {
                    this.isTouchEventsBound || (this.touchInterpreter.initTouch(this.mainDiv, null), 
                    this.footerTouchInterpreter.initTouch(this.footerDiv, this.mainDiv), this.isTouchEventsBound = !0);
                }, TablixControl.prototype.InitializeScrollbars = function() {
                    this.rowDim._initializeScrollbar(this.containerElement, null, this.options.layoutKind);
                    var rowDimensionScrollbarStyle = this.rowDim.scrollbar.element.style;
                    rowDimensionScrollbarStyle.position = "absolute", rowDimensionScrollbarStyle.top = "0" + TablixControl.UnitOfMeasurement, 
                    rowDimensionScrollbarStyle.right = "0" + TablixControl.UnitOfMeasurement, this.rowDim.scrollbar.width = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                    this.rowDim.scrollbar.show(!0), this.columnDim._initializeScrollbar(this.containerElement, null, this.options.layoutKind);
                    var columnDimensionScrollbarStyle = this.columnDim.scrollbar.element.style;
                    columnDimensionScrollbarStyle.position = "absolute", columnDimensionScrollbarStyle.left = "0" + TablixControl.UnitOfMeasurement, 
                    columnDimensionScrollbarStyle.bottom = "0" + TablixControl.UnitOfMeasurement, this.columnDim.scrollbar.height = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                    this.columnDim.scrollbar.show(!1);
                }, TablixControl.prototype.toggleTouchBindings = function(touchBindingEnabled) {
                    this.isTouchEnabled && (touchBindingEnabled ? this.bindTouchEvents() : this.unBindTouchEvents());
                }, Object.defineProperty(TablixControl.prototype, "container", {
                    get: function() {
                        return this.containerElement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "contentHost", {
                    get: function() {
                        return this.mainDiv;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "footerHost", {
                    get: function() {
                        return this.footerDiv;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "className", {
                    set: function(value) {
                        this.containerElement.className = value;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "hierarchyNavigator", {
                    get: function() {
                        return this.hierarchyTablixNavigator;
                    },
                    enumerable: !0,
                    configurable: !0
                }), TablixControl.prototype.getBinder = function() {
                    return this.binder;
                }, Object.defineProperty(TablixControl.prototype, "autoSizeWidth", {
                    get: function() {
                        return this._autoSizeWidth;
                    },
                    set: function(value) {
                        this._autoSizeWidth = value, value || (this.containerElement.style.minWidth = this.containerElement.style.maxWidth = "none");
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "autoSizeHeight", {
                    get: function() {
                        return this._autoSizeHeight;
                    },
                    set: function(value) {
                        value || (this.containerElement.style.minHeight = this.containerElement.style.maxHeight = "none");
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "maxWidth", {
                    get: function() {
                        return this.maximumWidth;
                    },
                    set: function(value) {
                        this.maximumWidth = value, this.containerElement.style.maxWidth = this.maximumWidth + TablixControl.UnitOfMeasurement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "viewport", {
                    get: function() {
                        return this.viewPort;
                    },
                    set: function(value) {
                        this.viewPort = value, this.containerElement.style.width = this.viewPort.width + TablixControl.UnitOfMeasurement, 
                        this.containerElement.style.height = this.viewPort.height + TablixControl.UnitOfMeasurement, 
                        this.rowDim.scrollbar.invalidateArrange(), this.columnDim.scrollbar.invalidateArrange(), 
                        this.controlLayoutManager.updateViewport(this.viewPort);
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "maxHeight", {
                    get: function() {
                        return this.maximumHeight;
                    },
                    set: function(value) {
                        this.maximumHeight = value, this.containerElement.style.maxHeight = this.maximumHeight + TablixControl.UnitOfMeasurement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "minWidth", {
                    get: function() {
                        return this.minimumWidth;
                    },
                    set: function(value) {
                        this.minimumWidth = value, this.containerElement.style.minWidth = this.minimumWidth + TablixControl.UnitOfMeasurement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "minHeight", {
                    get: function() {
                        return this.minimumHeight;
                    },
                    set: function(value) {
                        this.minimumHeight = value, this.containerElement.style.minHeight = this.minimumHeight + TablixControl.UnitOfMeasurement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "fontSize", {
                    get: function() {
                        return this.textFontSize;
                    },
                    set: function(value) {
                        this.textFontSize = value ? value : TablixControl.DefaultFontSize, this.containerElement.style.fontSize = this.textFontSize;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "fontFamily", {
                    get: function() {
                        return this.textFontFamily;
                    },
                    set: function(value) {
                        this.textFontFamily = value, this.containerElement.style.fontFamily = value;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "fontColor", {
                    get: function() {
                        return this.textFontColor;
                    },
                    set: function(value) {
                        this.textFontColor = value, this.containerElement.style.color = value;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "scrollbarWidth", {
                    set: function(value) {
                        this.scrollBarElementWidth = value, this.rowDim.scrollbar.width = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                        this.columnDim.scrollbar.height = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), TablixControl.prototype.getIsTouchEventsBound = function() {
                    return !!this.isTouchEventsBound;
                }, TablixControl.prototype.updateModels = function(resetScrollOffsets, rowModel, columnModel) {
                    this.rowDim.model = rowModel, this.rowDim.modelDepth = this.hierarchyNavigator.getRowHierarchyDepth(), 
                    this.columnDim.model = columnModel, this.columnDim.modelDepth = this.hierarchyNavigator.getColumnHierarchyDepth(), 
                    resetScrollOffsets && (this.rowDim.scrollOffset = 0, this.columnDim.scrollOffset = 0), 
                    this.layoutManager.updateColumnCount(this.rowDim, this.columnDim);
                }, TablixControl.prototype.updateColumnDimensions = function(rowHierarchyWidth, columnHierarchyWidth, count) {
                    var gridDimensions = this.gridDimensions;
                    gridDimensions.columnCount = count, gridDimensions.rowHierarchyWidth = rowHierarchyWidth, 
                    gridDimensions.columnHierarchyWidth = columnHierarchyWidth;
                }, TablixControl.prototype.updateRowDimensions = function(columnHierarchyHeight, rowHierarchyHeight, rowHierarchyContentHeight, count, footerHeight) {
                    var gridDimensions = this.gridDimensions;
                    gridDimensions.rowCount = count, gridDimensions.rowHierarchyHeight = rowHierarchyHeight, 
                    gridDimensions.rowHierarchyContentHeight = rowHierarchyContentHeight, gridDimensions.columnHierarchyHeight = columnHierarchyHeight, 
                    gridDimensions.footerHeight = footerHeight;
                }, TablixControl.prototype.updateTouchDimensions = function() {
                    var gridDimensions = this.gridDimensions;
                    this.columnTouchDelegate.resize(gridDimensions.rowHierarchyWidth, 0, gridDimensions.columnHierarchyWidth, gridDimensions.columnHierarchyHeight), 
                    this.columnTouchDelegate.setScrollDensity(gridDimensions.columnCount / gridDimensions.columnHierarchyWidth), 
                    this.rowTouchDelegate.resize(0, gridDimensions.columnHierarchyHeight, gridDimensions.rowHierarchyWidth, gridDimensions.rowHierarchyHeight), 
                    this.rowTouchDelegate.setScrollDensity(gridDimensions.rowCount / gridDimensions.rowHierarchyHeight), 
                    this.bodyTouchDelegate.resize(gridDimensions.rowHierarchyWidth, gridDimensions.columnHierarchyHeight, gridDimensions.columnHierarchyWidth, gridDimensions.rowHierarchyHeight), 
                    this.bodyTouchDelegate.setScrollDensity(gridDimensions.columnCount / gridDimensions.columnHierarchyWidth, gridDimensions.rowCount / gridDimensions.rowHierarchyHeight), 
                    this.footerTouchDelegate.resize(gridDimensions.rowHierarchyWidth, gridDimensions.columnHierarchyHeight + gridDimensions.rowHierarchyHeight, gridDimensions.columnHierarchyWidth, gridDimensions.footerHeight), 
                    this.footerTouchDelegate.setScrollDensity(gridDimensions.columnCount / gridDimensions.columnHierarchyWidth);
                }, TablixControl.prototype.onWheel = function(e) {
                    this.determineDimensionToScroll(e, (function(dimension, delta) {
                        dimension.scrollbar.onMouseWheel(-1 * delta);
                    })), 0 === this.options.layoutKind && e.preventDefault();
                }, TablixControl.prototype.determineDimensionToScroll = function(e, scrollCallback) {
                    this.rowDim.scrollbar.visible ? (e.deltaY && scrollCallback(this.rowDim, e.deltaY), 
                    e.deltaX && this.columnDim.scrollbar.visible && scrollCallback(this.columnDim, e.deltaX)) : this.columnDim.scrollbar.visible && (e.deltaX ? scrollCallback(this.columnDim, e.deltaX) : e.deltaY && scrollCallback(this.columnDim, e.deltaY));
                }, Object.defineProperty(TablixControl.prototype, "layoutManager", {
                    get: function() {
                        return this.controlLayoutManager;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "columnDimension", {
                    get: function() {
                        return this.columnDim;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "rowDimension", {
                    get: function() {
                        return this.rowDim;
                    },
                    enumerable: !0,
                    configurable: !0
                }), TablixControl.prototype.refresh = function(clear) {
                    this.render(clear, null);
                }, TablixControl.prototype._onScrollAsync = function(dimension) {
                    var _this = this;
                    requestAnimationFrame((function() {
                        _this.performPendingScroll(dimension);
                    }));
                }, TablixControl.prototype.performPendingScroll = function(dimension) {
                    this.render(!1, dimension);
                }, TablixControl.prototype.updateHorizontalPosition = function() {
                    this.rowDim.scrollbar.visible ? (this.columnDim.scrollbar.element.style.right = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                    this.footerDiv.style.right = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                    this.mainDiv.style.right = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement) : (this.columnDim.scrollbar.element.style.right = "0" + TablixControl.UnitOfMeasurement, 
                    this.mainDiv.style.right = "0" + TablixControl.UnitOfMeasurement, this.footerDiv.style.right = "0" + TablixControl.UnitOfMeasurement);
                }, TablixControl.prototype.updateFooterVisibility = function() {
                    (this.rowDim.hasFooter() ? "block" !== this.footerDiv.style.display : "none" !== this.footerDiv.style.display) && (this.rowDim.hasFooter() ? this.footerDiv.style.display = "block" : this.footerDiv.style.display = "none");
                }, TablixControl.prototype.updateVerticalPosition = function() {
                    var hasVerticalScrollbar = this.rowDim.scrollbar.visible, isDashboardTile = 1 === this.controlLayoutManager.getLayoutKind(), showFooter = hasVerticalScrollbar || isDashboardTile;
                    if (showFooter) {
                        var mainBottom = this.footerDiv.offsetHeight, footerBottom = 0, verticalScrollbarBottom = 0, hasHorizontalScrollbar = this.columnDim.scrollbar.visible;
                        hasHorizontalScrollbar && (mainBottom += this.scrollBarElementWidth, footerBottom += this.scrollBarElementWidth, 
                        verticalScrollbarBottom = this.scrollBarElementWidth), this.mainDiv.style.bottom = mainBottom + TablixControl.UnitOfMeasurement, 
                        this.rowDim.scrollbar.element.style.bottom = verticalScrollbarBottom + TablixControl.UnitOfMeasurement, 
                        this.footerDiv.style.bottom = footerBottom + TablixControl.UnitOfMeasurement, this.footerDiv.style.removeProperty("top");
                    } else this.footerDiv.style.top = this.gridDimensions.rowHierarchyContentHeight + TablixControl.UnitOfMeasurement, 
                    this.footerDiv.style.removeProperty("bottom"), this.mainDiv.style.removeProperty("bottom");
                }, TablixControl.prototype.alreadyRendered = function(scrollingDimension) {
                    return scrollingDimension === this.lastRenderingArgs.scrollingDimension && this.rowDimension.scrollOffset === this.lastRenderingArgs.rowScrollOffset && this.columnDimension.scrollOffset === this.lastRenderingArgs.columnScrollOffset;
                }, TablixControl.prototype.render = function(clear, scrollingDimension) {
                    if (this.columnDim.makeScrollOffsetValid(), this.rowDim.makeScrollOffsetValid(), 
                    clear || null === scrollingDimension) this.lastRenderingArgs = {}; else if (this.alreadyRendered(scrollingDimension)) return;
                    var done = !1;
                    this.renderIterationCount = 0, this.controlLayoutManager.onStartRenderingSession(scrollingDimension, this.mainDiv, clear);
                    var binder = this.binder;
                    binder.onStartRenderingSession();
                    for (var priorFooterHeight = this.gridDimensions.footerHeight, priorRowHierarchyHeight = this.gridDimensions.rowHierarchyHeight, priorRowHierarchyContentHeight = this.gridDimensions.rowHierarchyContentHeight; !done && this.renderIterationCount < TablixControl.MaxRenderIterationCount; ) {
                        var hScrollbarVisibility = this.columnDim.scrollbar.visible, vScrollbarVisibility = this.rowDim.scrollbar.visible;
                        this.columnDim._onStartRenderingIteration(), this.rowDim._onStartRenderingIteration(), 
                        this.controlLayoutManager.onStartRenderingIteration(clear), this.renderCorner(), 
                        this.columnDim._render(), this.rowDim._render(), done = this.controlLayoutManager.onEndRenderingIteration(), 
                        this.columnDim._onEndRenderingIteration(), this.rowDim._onEndRenderingIteration(), 
                        hScrollbarVisibility !== this.columnDim.scrollbar.visible && this.updateVerticalPosition(), 
                        vScrollbarVisibility !== this.rowDim.scrollbar.visible && this.updateHorizontalPosition(), 
                        this.renderIterationCount++;
                    }
                    this.controlLayoutManager.onEndRenderingSession(), binder.onEndRenderingSession(), 
                    this.isTouchEnabled && this.updateTouchDimensions(), this.lastRenderingArgs.rowScrollOffset = this.rowDimension.scrollOffset, 
                    this.lastRenderingArgs.columnScrollOffset = this.columnDimension.scrollOffset, this.updateContainerDimensions();
                    var lastRenderingArgs = this.lastRenderingArgs;
                    lastRenderingArgs.rowScrollOffset = this.rowDimension.scrollOffset, lastRenderingArgs.columnScrollOffset = this.columnDimension.scrollOffset, 
                    lastRenderingArgs.scrollingDimension = scrollingDimension, priorFooterHeight === this.gridDimensions.footerHeight && priorRowHierarchyHeight === this.gridDimensions.rowHierarchyHeight && priorRowHierarchyContentHeight === this.gridDimensions.rowHierarchyContentHeight || this.updateVerticalPosition(), 
                    this.options.interactive && (this.columnDim.scrollbar.refresh(), this.rowDim.scrollbar.refresh());
                }, TablixControl.prototype.updateContainerDimensions = function() {
                    var gridDimensions = this.gridDimensions;
                    if (this._autoSizeWidth) {
                        var vScrollBarWidth = this.rowDim.scrollbar.visible ? this.scrollBarElementWidth : 0;
                        this.containerElement.style.width = gridDimensions.rowHierarchyWidth + gridDimensions.columnHierarchyWidth + vScrollBarWidth + TablixControl.UnitOfMeasurement;
                    }
                    if (this._autoSizeHeight) {
                        var hScrollBarHeight = this.columnDim.scrollbar.visible ? this.scrollBarElementWidth : 0;
                        this.containerElement.style.height = gridDimensions.columnHierarchyHeight + gridDimensions.rowHierarchyHeight + gridDimensions.footerHeight + hScrollBarHeight + TablixControl.UnitOfMeasurement;
                    }
                }, TablixControl.prototype.cornerCellMatch = function(item, cell) {
                    var previousItem = cell.item;
                    return 0 === cell.type && previousItem && this.hierarchyTablixNavigator.cornerCellItemEquals(item, previousItem);
                }, TablixControl.prototype.renderCorner = function() {
                    for (var columnDepth = this.columnDim.getDepth(), rowDepth = this.rowDim.getDepth(), i = 0; i < columnDepth; i++) for (var j = 0; j < rowDepth; j++) {
                        var item = this.hierarchyTablixNavigator.getCorner(j, i), cell = this.controlLayoutManager.getOrCreateCornerCell(item, j, i), match = this.cornerCellMatch(item, cell);
                        match || (this._unbindCell(cell), cell.type = 0, cell.item = item, this.binder.bindCornerCell(item, cell)), 
                        this.controlLayoutManager.onCornerCellRealized(item, cell);
                    }
                }, TablixControl.prototype._unbindCell = function(cell) {
                    switch (cell.type) {
                      case 3:
                        this.binder.unbindBodyCell(cell.item, cell);
                        break;

                      case 2:
                        this.binder.unbindColumnHeader(cell.item, cell);
                        break;

                      case 1:
                        this.binder.unbindRowHeader(cell.item, cell);
                        break;

                      case 0:
                        this.binder.unbindCornerCell(cell.item, cell);
                    }
                    cell.item = null, cell.type = null;
                }, TablixControl.prototype.onTouchEvent = function(args) {
                    var colShift, rowShift, that;
                    args && args.length > 0 && "columnDim" in args[0] && "rowDim" in args[0] && (that = args[0], 
                    colShift = that.columnDim.scrollbar.visible ? args[1] : 0, rowShift = that.rowDim.scrollbar.visible ? args[2] : 0, 
                    that.columnDim.scrollbar.viewMin = Math.max(0, that.columnDim.scrollbar.viewMin + colShift), 
                    that.columnDim.scrollOffset = Math.max(0, that.columnDim.scrollOffset + colShift), 
                    that.rowDim.scrollbar.viewMin = Math.max(0, that.rowDim.scrollbar.viewMin + rowShift), 
                    that.rowDim.scrollOffset = Math.max(0, that.rowDim.scrollOffset + rowShift), 0 === colShift ? that._onScrollAsync(that.rowDim) : 0 === rowShift ? that._onScrollAsync(that.columnDim) : that._onScrollAsync(null));
                }, TablixControl.UnitOfMeasurement = "px", TablixControl.TablixContainerClassName = "tablixContainer", 
                TablixControl.TablixTableAreaClassName = "tablixTableArea", TablixControl.TablixFooterClassName = "tableFooterArea", 
                TablixControl.DefaultFontSize = jsCommon.PixelConverter.fromPoint(controls.TablixDefaultTextSize), 
                TablixControl.MaxRenderIterationCount = 10, TablixControl;
            })();
            controls.TablixControl = TablixControl;
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var TablixDimension = (function() {
                function TablixDimension(tablixControl) {
                    this._scrollStep = .1, this._owner = tablixControl, this._hierarchyNavigator = tablixControl.hierarchyNavigator, 
                    this._binder = tablixControl.getBinder(), this._tablixLayoutManager = tablixControl.layoutManager, 
                    this.scrollOffset = 0;
                }
                return TablixDimension.prototype._onStartRenderingIteration = function() {
                    this.updateScrollPosition();
                }, TablixDimension.prototype._onEndRenderingIteration = function() {}, TablixDimension.prototype.getValidScrollOffset = function(scrollOffset) {
                    return Math.min(Math.max(scrollOffset, 0), Math.max(this.getItemsCount() - this._scrollStep, 0));
                }, TablixDimension.prototype.makeScrollOffsetValid = function() {
                    this.scrollOffset = this.getValidScrollOffset(this.scrollOffset);
                }, TablixDimension.prototype.getIntegerScrollOffset = function() {
                    return Math.floor(this.scrollOffset);
                }, TablixDimension.prototype.getFractionScrollOffset = function() {
                    return this.scrollOffset - this.getIntegerScrollOffset();
                }, Object.defineProperty(TablixDimension.prototype, "scrollbar", {
                    get: function() {
                        return this._scrollbar;
                    },
                    enumerable: !0,
                    configurable: !0
                }), TablixDimension.prototype.getFirstVisibleItem = function(level) {
                    return this._scrollItems[level];
                }, TablixDimension.prototype.getFirstVisibleChild = function(item) {
                    return this._hierarchyNavigator.getAt(this._hierarchyNavigator.getChildren(item), this.getFirstVisibleChildIndex(item));
                }, TablixDimension.prototype.getFirstVisibleChildIndex = function(item) {
                    var firstVisibleIndex, startItem = this.getFirstVisibleItem(this._hierarchyNavigator.getLevel(item) + 1);
                    return firstVisibleIndex = void 0 === startItem || void 0 !== startItem && this._hierarchyNavigator.getParent(startItem) !== item ? 0 : this._hierarchyNavigator.getIndex(startItem);
                }, TablixDimension.prototype._initializeScrollbar = function(parentElement, touchDiv, layoutKind) {
                    var _this = this;
                    this._scrollbar = this._createScrollbar(parentElement, layoutKind), this._scrollbar._onscroll.push((function(e) {
                        return _this.onScroll();
                    })), touchDiv && (this.scrollbar.initTouch(touchDiv, !0), touchDiv.style.setProperty("-ms-touch-action", "pinch-zoom"));
                }, TablixDimension.prototype.getItemsCount = function() {
                    return this.model ? this._hierarchyNavigator.getLeafCount(this.model) : 0;
                }, TablixDimension.prototype.getDepth = function() {
                    return this.modelDepth;
                }, TablixDimension.prototype.onScroll = function() {
                    this.scrollOffset = this._scrollbar.viewMin, this._owner._onScrollAsync(this);
                }, Object.defineProperty(TablixDimension.prototype, "otherDimension", {
                    get: function() {
                        return this._otherDimension;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(TablixDimension.prototype, "layoutManager", {
                    get: function() {
                        return this._layoutManager;
                    },
                    enumerable: !0,
                    configurable: !0
                }), TablixDimension.prototype._createScrollbar = function(parentElement, layoutKind) {
                    return null;
                }, TablixDimension.prototype.updateScrollPosition = function() {
                    if (this._scrollItems = [], this.model) {
                        var firstVisibleScrollIndex = this.getIntegerScrollOffset(), firstVisible = this._hierarchyNavigator.getLeafAt(this.model, firstVisibleScrollIndex);
                        if (firstVisible) {
                            this._firstVisibleScrollIndex = firstVisibleScrollIndex;
                            do this._scrollItems[this._hierarchyNavigator.getLevel(firstVisible)] = firstVisible, 
                            firstVisible = this._hierarchyNavigator.getParent(firstVisible); while (null !== firstVisible);
                        }
                    }
                }, TablixDimension;
            })();
            controls.TablixDimension = TablixDimension;
            var TablixRowDimension = (function(_super) {
                function TablixRowDimension(tablixControl) {
                    var _this = _super.call(this, tablixControl) || this;
                    return _this._layoutManager = _this._tablixLayoutManager.rowLayoutManager, _this._footer = null, 
                    _this;
                }
                return __extends(TablixRowDimension, _super), TablixRowDimension.prototype.setFooter = function(footerHeader) {
                    this._footer = footerHeader, this._owner.updateFooterVisibility();
                }, TablixRowDimension.prototype.hasFooter = function() {
                    return null !== this._footer;
                }, TablixRowDimension.prototype._render = function() {
                    var firstVisibleRowItem = this.getFirstVisibleItem(0);
                    this.hasFooter() && (this.addFooterRowHeader(this._footer), this.addFooterBodyCells(this._footer)), 
                    void 0 !== firstVisibleRowItem && this.addNodes(this.model, 0, this.getDepth(), this._hierarchyNavigator.getIndex(firstVisibleRowItem));
                }, TablixRowDimension.prototype._createScrollbar = function(parentElement, layoutKind) {
                    return new controls.VerticalScrollbar(parentElement, layoutKind);
                }, TablixRowDimension.prototype.addNodes = function(items, rowIndex, depth, firstVisibleIndex) {
                    for (var count = this._hierarchyNavigator.getCount(items), i = firstVisibleIndex; i < count; i++) {
                        if (!this._layoutManager.needsToRealize) return;
                        var item = this._hierarchyNavigator.getAt(items, i), cell = this.addNode(item, items, rowIndex, depth);
                        rowIndex += cell.rowSpan;
                    }
                }, TablixRowDimension.prototype.getFirstVisibleChildLeaf = function(item) {
                    for (var leaf = item; !this._hierarchyNavigator.isLeaf(leaf); ) leaf = this.getFirstVisibleChild(leaf);
                    return leaf;
                }, TablixRowDimension.prototype.bindRowHeader = function(item, cell) {
                    this._binder.bindRowHeader(item, cell);
                }, TablixRowDimension.prototype.addNode = function(item, items, rowIndex, depth) {
                    var previousCount, rowHeaderCell = this._tablixLayoutManager.getOrCreateRowHeader(item, items, rowIndex, this._hierarchyNavigator.getLevel(item)), match = this.rowHeaderMatch(item, rowHeaderCell);
                    return match || (this._owner._unbindCell(rowHeaderCell), rowHeaderCell.type = 1, 
                    rowHeaderCell.item = item), this._hierarchyNavigator.isLeaf(item) ? (rowHeaderCell.colSpan = depth - this._hierarchyNavigator.getLevel(item), 
                    rowHeaderCell.rowSpan = 1, match || this.bindRowHeader(item, rowHeaderCell), this._tablixLayoutManager.onRowHeaderRealized(item, rowHeaderCell), 
                    this.addBodyCells(item, items, rowIndex)) : (previousCount = this._layoutManager.getRealizedItemsCount(), 
                    this.addNodes(this._hierarchyNavigator.getChildren(item), rowIndex, depth, this.getFirstVisibleChildIndex(item)), 
                    rowHeaderCell.colSpan = 1, rowHeaderCell.rowSpan = this._layoutManager.getRealizedItemsCount() - previousCount + 1, 
                    match || this.bindRowHeader(item, rowHeaderCell), this._tablixLayoutManager.onRowHeaderRealized(item, rowHeaderCell)), 
                    rowHeaderCell;
                }, TablixRowDimension.prototype.rowHeaderMatch = function(item, cell) {
                    var previousItem = cell.item;
                    return 1 === cell.type && previousItem && this._hierarchyNavigator.headerItemEquals(item, previousItem);
                }, TablixRowDimension.prototype.addBodyCells = function(item, items, rowIndex) {
                    for (var firstVisibleColumnIndex = this._otherDimension.getIntegerScrollOffset(), columnCount = this._otherDimension._layoutManager.getRealizedItemsCount() - this.getDepth(), hierarchyNavigator = this._hierarchyNavigator, otherModel = this._otherDimension.model, layoutManager = this._tablixLayoutManager, i = 0; i < columnCount; i++) {
                        var cellItem = hierarchyNavigator.getIntersection(item, hierarchyNavigator.getLeafAt(otherModel, firstVisibleColumnIndex + i)), cell = layoutManager.getOrCreateBodyCell(cellItem, item, items, rowIndex, i);
                        this.bindBodyCell(cellItem, cell), layoutManager.onBodyCellRealized(cellItem, cell);
                    }
                }, TablixRowDimension.prototype.bindBodyCell = function(item, cell) {
                    var match = this.bodyCelMatch(item, cell);
                    match || (this._owner._unbindCell(cell), cell.type = 3, cell.item = item, this._binder.bindBodyCell(item, cell));
                }, TablixRowDimension.prototype.addFooterRowHeader = function(item) {
                    var cell = this._tablixLayoutManager.getOrCreateFooterRowHeader(item, this.model);
                    cell.colSpan = this.getDepth();
                    var match = this.rowHeaderMatch(item, cell);
                    match || (this._owner._unbindCell(cell), cell.type = 1, cell.item = item, this.bindRowHeader(item, cell), 
                    this._tablixLayoutManager.onRowHeaderFooterRealized(item, cell));
                }, TablixRowDimension.prototype.addFooterBodyCells = function(rowItem) {
                    for (var firstVisibleColumnIndex = this._otherDimension.getIntegerScrollOffset(), columnCount = this._otherDimension.layoutManager.getRealizedItemsCount() - this.getDepth(), layoutManager = this._tablixLayoutManager, i = 0; i < columnCount; i++) {
                        var columnItem = this._hierarchyNavigator.getLeafAt(this._otherDimension.model, firstVisibleColumnIndex + i), item = this._hierarchyNavigator.getIntersection(rowItem, columnItem), cell = layoutManager.getOrCreateFooterBodyCell(item, i);
                        this.bindBodyCell(item, cell), layoutManager.onBodyCellFooterRealized(item, cell);
                    }
                }, TablixRowDimension.prototype.bodyCelMatch = function(item, cell) {
                    var previousItem = cell.item;
                    return 3 === cell.type && previousItem && this._hierarchyNavigator.bodyCellItemEquals(item, previousItem);
                }, TablixRowDimension;
            })(TablixDimension);
            controls.TablixRowDimension = TablixRowDimension;
            var TablixColumnDimension = (function(_super) {
                function TablixColumnDimension(tablixControl) {
                    var _this = _super.call(this, tablixControl) || this;
                    return _this._layoutManager = _this._tablixLayoutManager.columnLayoutManager, _this;
                }
                return __extends(TablixColumnDimension, _super), TablixColumnDimension.prototype._render = function() {
                    var firstVisibleColumnItem = this.getFirstVisibleItem(0);
                    void 0 !== firstVisibleColumnItem && this.addNodes(this.model, 0, this.getDepth(), this._hierarchyNavigator.getIndex(firstVisibleColumnItem));
                }, TablixColumnDimension.prototype._createScrollbar = function(parentElement, layoutKind) {
                    var scrollbar = new controls.HorizontalScrollbar(parentElement, layoutKind);
                    return scrollbar.smallIncrement = .2, scrollbar;
                }, TablixColumnDimension.prototype.addNodes = function(items, columnIndex, depth, firstVisibleIndex) {
                    for (var count = this._hierarchyNavigator.getCount(items), i = firstVisibleIndex; i < count; i++) {
                        if (!this._layoutManager.needsToRealize) return;
                        var cell = this.addNode(this._hierarchyNavigator.getAt(items, i), items, columnIndex, depth);
                        columnIndex += cell.colSpan;
                    }
                }, TablixColumnDimension.prototype.addNode = function(item, items, columnIndex, depth) {
                    var cell = this._tablixLayoutManager.getOrCreateColumnHeader(item, items, this._hierarchyNavigator.getLevel(item), columnIndex), match = this.columnHeaderMatch(item, cell);
                    if (match || (this._owner._unbindCell(cell), cell.type = 2, cell.item = item), this._hierarchyNavigator.isLeaf(item)) cell.rowSpan = depth - this._hierarchyNavigator.getLevel(item); else {
                        var previousCount = this._layoutManager.getRealizedItemsCount();
                        this.addNodes(this._hierarchyNavigator.getChildren(item), columnIndex, depth, this.getFirstVisibleChildIndex(item));
                        var childrenLevelDifference = this._hierarchyNavigator.getChildrenLevelDifference(item);
                        childrenLevelDifference === 1 / 0 ? cell.rowSpan = 1 : cell.rowSpan = childrenLevelDifference, 
                        cell.colSpan = this._layoutManager.getRealizedItemsCount() - previousCount + 1;
                    }
                    return match || this._binder.bindColumnHeader(item, cell), this._tablixLayoutManager.onColumnHeaderRealized(item, cell), 
                    cell;
                }, TablixColumnDimension.prototype.columnHeaderMatch = function(item, cell) {
                    var previousItem = cell.item;
                    return !this._owner.wordWrapColumnHeaders && 2 === cell.type && previousItem && this._hierarchyNavigator.headerItemEquals(item, previousItem);
                }, TablixColumnDimension;
            })(TablixDimension);
            controls.TablixColumnDimension = TablixColumnDimension;
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var ColumnTouchDelegate = (function() {
                function ColumnTouchDelegate(region) {
                    this.dim = region, this.averageSize = 1, this.handlers = null, this.tablixControl = null;
                }
                return Object.defineProperty(ColumnTouchDelegate.prototype, "dimension", {
                    get: function() {
                        return this.dim;
                    },
                    enumerable: !0,
                    configurable: !0
                }), ColumnTouchDelegate.prototype.setScrollDensity = function(xRatio) {
                    this.averageSize = xRatio;
                }, ColumnTouchDelegate.prototype.resize = function(x, y, width, height) {
                    this.dim.x = x, this.dim.y = y, this.dim.width = width, this.dim.height = height;
                }, ColumnTouchDelegate.prototype.getPixelToItem = function(x, y, dx, dy, down) {
                    return new controls.TouchUtils.TouchEvent(x * this.averageSize, 0, down, -dx * this.averageSize, 0);
                }, ColumnTouchDelegate.prototype.touchEvent = function(e) {
                    var args = [];
                    args[0] = this.tablixControl, args[1] = e.dx, args[2] = e.dy, this.handlers && controls.fire([ this.handlers ], args);
                }, ColumnTouchDelegate.prototype.setHandler = function(tablixObj, handlerCall) {
                    this.handlers = handlerCall, this.tablixControl = tablixObj;
                }, ColumnTouchDelegate;
            })();
            controls.ColumnTouchDelegate = ColumnTouchDelegate;
            var RowTouchDelegate = (function() {
                function RowTouchDelegate(region) {
                    this.dim = region, this.averageSize = 30, this.handlers = null, this.tablixControl = null;
                }
                return Object.defineProperty(RowTouchDelegate.prototype, "dimension", {
                    get: function() {
                        return this.dim;
                    },
                    enumerable: !0,
                    configurable: !0
                }), RowTouchDelegate.prototype.setScrollDensity = function(yRatio) {
                    this.averageSize = yRatio;
                }, RowTouchDelegate.prototype.resize = function(x, y, width, height) {
                    this.dim.x = x, this.dim.y = y, this.dim.width = width, this.dim.height = height;
                }, RowTouchDelegate.prototype.getPixelToItem = function(x, y, dx, dy, down) {
                    var event = new controls.TouchUtils.TouchEvent(0, y * this.averageSize, down, 0, -dy * this.averageSize);
                    return event;
                }, RowTouchDelegate.prototype.touchEvent = function(e) {
                    var args = [];
                    args[0] = this.tablixControl, args[1] = e.dx, args[2] = e.dy, this.handlers && controls.fire([ this.handlers ], args);
                }, RowTouchDelegate.prototype.setHandler = function(tablixObj, handlerCall) {
                    this.handlers = handlerCall, this.tablixControl = tablixObj;
                }, RowTouchDelegate;
            })();
            controls.RowTouchDelegate = RowTouchDelegate;
            var BodyTouchDelegate = (function() {
                function BodyTouchDelegate(region) {
                    this.dim = region, this.averageSizeX = BodyTouchDelegate.DefaultAverageSizeX, this.averageSizeY = BodyTouchDelegate.DefaultAverageSizeY, 
                    this.handlers = null, this.tablixControl = null;
                }
                return Object.defineProperty(BodyTouchDelegate.prototype, "dimension", {
                    get: function() {
                        return this.dim;
                    },
                    enumerable: !0,
                    configurable: !0
                }), BodyTouchDelegate.prototype.setScrollDensity = function(xRatio, yRatio) {
                    this.averageSizeX = xRatio, this.averageSizeY = yRatio;
                }, BodyTouchDelegate.prototype.resize = function(x, y, width, height) {
                    var dimension = this.dim;
                    dimension.x = x, dimension.y = y, dimension.width = width, dimension.height = height;
                }, BodyTouchDelegate.prototype.getPixelToItem = function(x, y, dx, dy, down) {
                    return new controls.TouchUtils.TouchEvent(x * this.averageSizeX, y * this.averageSizeY, down, -dx * this.averageSizeX, -dy * this.averageSizeY);
                }, BodyTouchDelegate.prototype.touchEvent = function(e) {
                    var args = [ this.tablixControl, e.dx, e.dy ];
                    this.handlers && controls.fire([ this.handlers ], args);
                }, BodyTouchDelegate.prototype.setHandler = function(tablixObj, handlerCall) {
                    this.handlers = handlerCall, this.tablixControl = tablixObj;
                }, BodyTouchDelegate.DefaultAverageSizeX = 30, BodyTouchDelegate.DefaultAverageSizeY = 30, 
                BodyTouchDelegate;
            })();
            controls.BodyTouchDelegate = BodyTouchDelegate;
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var TouchUtils;
            !(function(TouchUtils) {
                var Point = (function() {
                    function Point(x, y) {
                        this.x = x || 0, this.y = y || 0;
                    }
                    return Point.prototype.offset = function(offsetX, offsetY) {
                        this.x += offsetX, this.y += offsetY;
                    }, Point;
                })();
                TouchUtils.Point = Point;
                var Rectangle = (function(_super) {
                    function Rectangle(x, y, width, height) {
                        var _this = _super.call(this, x, y) || this;
                        return _this.width = width || 0, _this.height = height || 0, _this;
                    }
                    return __extends(Rectangle, _super), Object.defineProperty(Rectangle.prototype, "point", {
                        get: function() {
                            return new Point(this.x, this.y);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Rectangle.prototype.contains = function(p) {
                        return Rectangle.contains(this, p);
                    }, Rectangle.contains = function(rect, p) {
                        return !(!p || Rectangle.isEmpty(rect)) && (rect.x <= p.x && p.x < rect.x + rect.width && rect.y <= p.y && p.y < rect.y + rect.height);
                    }, Rectangle.isEmpty = function(rect) {
                        return !(void 0 !== rect && rect.width >= 0 && rect.height >= 0);
                    }, Rectangle;
                })(Point);
                TouchUtils.Rectangle = Rectangle;
                var MouseButton;
                !(function(MouseButton) {
                    MouseButton[MouseButton.NoClick = 0] = "NoClick", MouseButton[MouseButton.LeftClick = 1] = "LeftClick", 
                    MouseButton[MouseButton.RightClick = 2] = "RightClick", MouseButton[MouseButton.CenterClick = 3] = "CenterClick";
                })(MouseButton = TouchUtils.MouseButton || (TouchUtils.MouseButton = {}));
                var TouchEvent = (function() {
                    function TouchEvent(x, y, isMouseDown, dx, dy) {
                        this._x = x, this._y = y, this.isMouseButtonDown = isMouseDown, this._dx = dx || 0, 
                        this._dy = dy || 0;
                    }
                    return Object.defineProperty(TouchEvent.prototype, "x", {
                        get: function() {
                            return this._x;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TouchEvent.prototype, "y", {
                        get: function() {
                            return this._y;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TouchEvent.prototype, "dx", {
                        get: function() {
                            return this._dx;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TouchEvent.prototype, "dy", {
                        get: function() {
                            return this._dy;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(TouchEvent.prototype, "isMouseDown", {
                        get: function() {
                            return this.isMouseButtonDown;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TouchEvent;
                })();
                TouchUtils.TouchEvent = TouchEvent;
                var TouchManager = (function() {
                    function TouchManager() {
                        this.touchList = [], this.swipeDirection = 2, this.matchingDirectionCount = 0, this.lockThreshold = !0, 
                        this.scrollThreshold = !0, this.lastTouchEvent = new TouchEvent(0, 0, (!1));
                    }
                    return Object.defineProperty(TouchManager.prototype, "lastEvent", {
                        get: function() {
                            return this.lastTouchEvent;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), TouchManager.prototype.addTouchRegion = function(region, handler, converter) {
                        var item = {
                            lastPoint: new TouchEvent(0, 0, (!1)),
                            handler: handler,
                            region: region,
                            converter: converter
                        };
                        this.touchList = this.touchList.concat([ item ]);
                    }, TouchManager.prototype.upAllTouches = function() {
                        var eventPoint, length;
                        length = this.touchList.length;
                        for (var i = 0; i < length; i++) this.touchList[i].lastPoint.isMouseDown && (eventPoint = this.touchList[i].converter.getPixelToItem(this.touchList[i].lastPoint.x, this.touchList[i].lastPoint.y, 0, 0, !1), 
                        this.touchList[i].handler.touchEvent(eventPoint)), this.touchList[i].lastPoint = new TouchEvent(this.touchList[i].lastPoint.x, this.touchList[i].lastPoint.y, (!1));
                        this.lastTouchEvent = new TouchEvent(0, 0, (!1));
                    }, TouchManager.prototype.touchEvent = function(e) {
                        var list, length, x = 0, y = 0, dx = 0, dy = 0, angle = 0, eventPoint = null;
                        list = this._getActive(), !this.lastTouchEvent.isMouseDown && e.isMouseDown && (list = this._findRegions(e)), 
                        dx = this.lastTouchEvent.x - e.x, dy = this.lastTouchEvent.y - e.y, this.lastTouchEvent = new TouchEvent(e.x, e.y, e.isMouseDown, dx, dy), 
                        length = list.length;
                        for (var i = 0; i < length; i++) x = e.x - list[i].region.point.x, y = e.y - list[i].region.point.y, 
                        list[i].lastPoint.isMouseDown && e.isMouseDown ? (dx = x - list[i].lastPoint.x, 
                        dy = y - list[i].lastPoint.y, angle = Math.abs(180 / Math.PI * Math.atan(dy / dx)), 
                        this.scrollThreshold && (this.lockThreshold && this.matchingDirectionCount > 5 ? 1 === this.swipeDirection ? dy = 0 : 0 === this.swipeDirection && (dx = 0) : angle < 20 ? (dy = 0, 
                        1 === this.swipeDirection ? this.matchingDirectionCount++ : (this.matchingDirectionCount = 1, 
                        this.swipeDirection = 1)) : (angle = Math.abs(180 / Math.PI * Math.atan(dx / dy)), 
                        angle < 20 ? (dx = 0, 0 === this.swipeDirection ? this.matchingDirectionCount++ : (this.matchingDirectionCount = 1, 
                        this.swipeDirection = 0)) : 2 === this.swipeDirection ? this.matchingDirectionCount++ : (this.swipeDirection = 2, 
                        this.matchingDirectionCount = 1)))) : (dx = 0, dy = 0, this.swipeDirection = 2, 
                        this.matchingDirectionCount = 0), list[i].lastPoint = new TouchEvent(x, y, e.isMouseDown, dx, dy), 
                        eventPoint = list[i].converter.getPixelToItem(x, y, dx, dy, e.isMouseDown), list[i].handler.touchEvent(eventPoint);
                    }, TouchManager.prototype._findRegions = function(e) {
                        var length, list = [];
                        length = this.touchList.length;
                        for (var i = 0; i < length; i++) this.touchList[i].region.contains(new Point(e.x, e.y)) && (list = list.concat([ this.touchList[i] ]));
                        return list;
                    }, TouchManager.prototype._getActive = function() {
                        var length, list = [];
                        length = this.touchList.length;
                        for (var i = 0; i < length; i++) this.touchList[i].lastPoint.isMouseDown && (list = list.concat([ this.touchList[i] ]));
                        return list;
                    }, TouchManager;
                })();
                TouchUtils.TouchManager = TouchManager;
                var MinDistanceForSwipe = 80, MaxTimeForSwipe = 600, TouchEventInterpreter = (function() {
                    function TouchEventInterpreter(manager) {
                        this.manager = manager, this.touchPanel = null, this.scale = 1, this.documentCallbacksWrapper = null, 
                        this.panelCallbacksWrapper = null, this.sliding = !1;
                    }
                    return TouchEventInterpreter.prototype.initTouch = function(panel, touchReferencePoint) {
                        panel.style.setProperty("-ms-touch-action", "pinch-zoom"), this.touchReferencePoint = touchReferencePoint, 
                        this.touchPanel = panel, this.startTouchPanelEvents();
                    }, TouchEventInterpreter.prototype.startTouchPanelEvents = function() {
                        var _this = this;
                        "ontouchmove" in this.touchPanel && (this.panelCallbacksWrapper = {
                            startCallback: function(e) {
                                return _this.onTouchStart(e);
                            },
                            endCallback: function(e) {
                                return _this.onTouchEnd(e);
                            }
                        }, this.touchPanel.addEventListener("touchstart", this.panelCallbacksWrapper.startCallback), 
                        this.touchPanel.addEventListener("touchend", this.panelCallbacksWrapper.endCallback));
                    }, TouchEventInterpreter.prototype.clearTouchPanelEvents = function() {
                        null !== this.panelCallbacksWrapper && ("ontouchmove" in this.touchPanel && (this.touchPanel.removeEventListener("touchstart", this.panelCallbacksWrapper.startCallback), 
                        this.touchPanel.removeEventListener("touchend", this.panelCallbacksWrapper.endCallback)), 
                        this.panelCallbacksWrapper = null);
                    }, TouchEventInterpreter.prototype.getXYByClient = function(pageX, pageY, rect) {
                        var x = rect.left, y = rect.top;
                        void 0 !== window.scrollX && (x += window.scrollX, y += window.scrollY);
                        var point = new Point(0, 0);
                        return point.offset(pageX - x, pageY - y), point;
                    }, TouchEventInterpreter.prototype.onTouchStart = function(e) {
                        if (1 === e.touches.length) {
                            e.cancelBubble = !0;
                            var mouseEvent = e.touches[0];
                            this.touchStartTime = new Date().getTime(), this.touchStartPageY = mouseEvent.pageY, 
                            this.onTouchMouseDown(mouseEvent);
                        }
                    }, TouchEventInterpreter.prototype.onTouchMove = function(e) {
                        if (1 === e.touches.length) {
                            e.preventDefault && e.preventDefault();
                            var mouseEvent = e.touches[0];
                            this.touchLastPageY = mouseEvent.pageY, this.touchLastPageX = mouseEvent.pageX, 
                            this.sliding || this.onTouchMouseMove(mouseEvent);
                        }
                    }, TouchEventInterpreter.prototype.onTouchEnd = function(e) {
                        this.clearTouchDocumentEvents();
                        var swipeInfo = this.getSwipeInfo();
                        this.didUserSwipe(swipeInfo) ? this.startSlideAffect(swipeInfo) : this.sliding || this.upAllTouches();
                    }, TouchEventInterpreter.prototype.onTouchMouseDown = function(e) {
                        this.scale = controls.HTMLElementUtils.getAccumulatedScale(this.touchPanel), document.getSelection().removeAllRanges(), 
                        this.rect = (this.touchReferencePoint ? this.touchReferencePoint : this.touchPanel).getBoundingClientRect(), 
                        this.startTouchDocumentEvents();
                    }, TouchEventInterpreter.prototype.startTouchDocumentEvents = function() {
                        var _this = this;
                        "ontouchmove" in this.touchPanel && (this.documentCallbacksWrapper = {
                            moveCallback: function(e) {
                                return _this.onTouchMove(e);
                            },
                            endCallback: function(e) {
                                return _this.onTouchEnd(e);
                            }
                        }, document.addEventListener("touchend", this.documentCallbacksWrapper.endCallback), 
                        document.addEventListener("touchmove", this.documentCallbacksWrapper.moveCallback)), 
                        "setCapture" in this.touchPanel && this.touchPanel.setCapture();
                    }, TouchEventInterpreter.prototype.onTouchMouseMove = function(e) {
                        var event, point, rect = this.rect, validMouseDragEvent = null !== rect && e.which !== MouseButton.NoClick;
                        validMouseDragEvent && !this.sliding && (point = this.getXYByClient(e.pageX, e.pageY, rect), 
                        event = new TouchEvent(point.x / this.scale, point.y / this.scale, validMouseDragEvent), 
                        this.manager.touchEvent(event), e.preventDefault ? e.preventDefault() : "returnValue" in e && (e.returnValue = !1));
                    }, TouchEventInterpreter.prototype.getSwipeInfo = function() {
                        var touchEndTime = new Date().getTime(), touchTime = touchEndTime - this.touchStartTime, touchDist = this.touchLastPageY - this.touchStartPageY, touchDirection = touchDist < 0 ? -1 : 1;
                        return {
                            direction: touchDirection,
                            distance: touchDist,
                            endTime: touchEndTime,
                            time: touchTime
                        };
                    }, TouchEventInterpreter.prototype.didUserSwipe = function(swipeInfo) {
                        return swipeInfo.time < MaxTimeForSwipe && swipeInfo.distance * swipeInfo.direction > MinDistanceForSwipe;
                    }, TouchEventInterpreter.prototype.startSlideAffect = function(swipeInfo) {
                        var _this = this;
                        if (!this.sliding && null !== this.rect) {
                            this.sliding = !0;
                            var point = this.getXYByClient(this.touchLastPageX, this.touchLastPageY, this.rect);
                            this.slide(point, 300, swipeInfo), requestAnimationFrame((function() {
                                _this.didUserChangeDirection(swipeInfo) || _this.slide(point, 200, swipeInfo), _this.clearSlide();
                            }));
                        }
                    }, TouchEventInterpreter.prototype.didUserChangeDirection = function(swipeInfo) {
                        if (this.touchStartTime <= swipeInfo.endTime) return !1;
                        var updatedDist = this.touchLastPageY - this.touchStartPageY, updatedDirection = updatedDist < 0 ? -1 : 1;
                        return updatedDirection !== swipeInfo.direction;
                    }, TouchEventInterpreter.prototype.slide = function(point, slideDist, swipeInfo) {
                        var updatedDist = this.touchStartTime > swipeInfo.endTime ? this.touchLastPageY - this.touchStartPageY : 0;
                        point.y += slideDist * swipeInfo.direction + updatedDist;
                        var event = new TouchEvent(point.x / this.scale, point.y / this.scale, (!0));
                        this.manager.touchEvent(event);
                    }, TouchEventInterpreter.prototype.clearSlide = function() {
                        this.sliding = !1, this.upAllTouches();
                    }, TouchEventInterpreter.prototype.upAllTouches = function() {
                        null === this.documentCallbacksWrapper && (this.rect = null, this.manager.upAllTouches());
                    }, TouchEventInterpreter.prototype.clearTouchDocumentEvents = function() {
                        "releaseCapture" in this.touchPanel && this.touchPanel.releaseCapture(), null !== this.documentCallbacksWrapper && ("ontouchmove" in this.touchPanel && (document.removeEventListener("touchmove", this.documentCallbacksWrapper.moveCallback), 
                        document.removeEventListener("touchend", this.documentCallbacksWrapper.endCallback)), 
                        this.documentCallbacksWrapper = null);
                    }, TouchEventInterpreter.prototype.clearAllTouchEvents = function() {
                        this.clearTouchDocumentEvents(), this.clearTouchPanelEvents();
                    }, TouchEventInterpreter;
                })();
                TouchUtils.TouchEventInterpreter = TouchEventInterpreter;
            })(TouchUtils = controls.TouchUtils || (controls.TouchUtils = {}));
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var TablixType;
            !(function(TablixType) {
                TablixType[TablixType.Matrix = 0] = "Matrix", TablixType[TablixType.Table = 1] = "Table", 
                TablixType[TablixType.PivotTable = 2] = "PivotTable", TablixType[TablixType.TableEx = 3] = "TableEx";
            })(TablixType = controls.TablixType || (controls.TablixType = {}));
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var PropAutoSizeWidth = controls.internal.TablixObjects.PropGeneralAutoSizeColumns, getMetadataObjects = controls.internal.TablixObjects.getMetadadataObjects, TablixColumnWidthManager = (function() {
                function TablixColumnWidthManager(dataView, isMatrix, hostPersistCallBack, matrixLeafNodes) {
                    this.columnWidthObjects = {}, this.isMatrix = isMatrix, this.updateDataView(dataView, matrixLeafNodes), 
                    this.hostPersistCallBack = hostPersistCallBack, this.visualObjectInstancesToPersist = {
                        merge: [],
                        remove: []
                    };
                }
                return TablixColumnWidthManager.prototype.updateDataView = function(dataView, matrixLeafNodes) {
                    this.previousDataView = this.currentDataView, this.previousDataView ? this.previousAutoColumnSizePropertyValue = PropAutoSizeWidth.getValue(getMetadataObjects(this.previousDataView)) : this.previousAutoColumnSizePropertyValue = void 0, 
                    this.currentDataView = dataView, this.currentDataView ? this.currentAutoColumnSizePropertyValue = PropAutoSizeWidth.getValue(getMetadataObjects(this.currentDataView)) : this.currentAutoColumnSizePropertyValue = void 0, 
                    this.matrixLeafNodes = matrixLeafNodes, this.updateColumnsMetadata(), this.updateTablixColumnWidths();
                }, TablixColumnWidthManager.prototype.updateColumnsMetadata = function() {
                    this.columnWidthObjects = {}, this.isMatrix ? this.updateMatrixColumnsMetadata() : this.updateTableColumnsMetadata();
                }, TablixColumnWidthManager.prototype.updateTableColumnsMetadata = function() {
                    if (this.currentDataView && this.currentDataView.table) for (var columnMetaData = this.currentDataView.table.columns, i = 0, len = columnMetaData.length; i < len; i++) {
                        var queryName = columnMetaData[i].queryName;
                        queryName && (this.columnWidthObjects[queryName] = {
                            queryName: queryName,
                            width: void 0,
                            isFixed: !1
                        });
                    }
                }, TablixColumnWidthManager.prototype.updateMatrixColumnsMetadata = function() {
                    if (this.currentDataView && this.currentDataView.matrix && this.currentDataView.matrix.rows) for (var i = 0, len = this.currentDataView.matrix.rows.levels.length; i < len; i++) {
                        var rowGroup = this.currentDataView.matrix.rows.levels[i];
                        if (1 === rowGroup.sources.length) {
                            var queryName = rowGroup.sources[0].queryName;
                            queryName && (this.columnWidthObjects[queryName] = {
                                queryName: queryName,
                                width: void 0,
                                isFixed: !1
                            });
                        }
                    }
                    if (this.matrixLeafNodes) for (var i = 0, len = this.matrixLeafNodes.length; i < len; i++) {
                        var queryName = this.matrixLeafNodes[i].queryName;
                        queryName && (this.columnWidthObjects[queryName] = {
                            queryName: queryName,
                            width: void 0,
                            isFixed: !1
                        });
                    }
                }, TablixColumnWidthManager.prototype.updateTablixColumnWidths = function() {
                    var columnMetaData = this.currentDataView && this.currentDataView.metadata && this.currentDataView.metadata.columns;
                    if (columnMetaData) {
                        if (this.shouldClearAllColumnWidths()) return void this.autoSizeAllColumns();
                        this.deserializeColumnsWidth(columnMetaData);
                    }
                }, TablixColumnWidthManager.prototype.autoSizeAllColumns = function() {
                    for (var queryName in this.columnWidthObjects) this.visualObjectInstancesToPersist.remove.push(this.generateColumnWidthObjectToPersist(queryName, void 0));
                    this.callHostToPersist();
                }, TablixColumnWidthManager.prototype.deserializeColumnsWidth = function(columnsMetadata) {
                    for (var colObj in this.columnWidthObjects) this.columnWidthObjects[colObj].isFixed = !this.currentAutoColumnSizePropertyValue, 
                    this.columnWidthObjects[colObj].width = void 0;
                    for (var i = 0, len = columnsMetadata.length; i < len; i++) {
                        var column = columnsMetadata[i], queryName = column.queryName, width = powerbi.DataViewObjects.getValue(column.objects, TablixColumnWidthManager.columnWidthProp);
                        this.columnWidthObjects.hasOwnProperty(queryName) && null != width && (this.columnWidthObjects[queryName].width = width, 
                        this.columnWidthObjects[queryName].isFixed = !0);
                    }
                }, TablixColumnWidthManager.prototype.shouldClearAllColumnWidths = function() {
                    return null != this.previousDataView && this.previousAutoColumnSizePropertyValue === !1 && null != this.currentDataView && this.currentAutoColumnSizePropertyValue === !0;
                }, TablixColumnWidthManager.getColumnQueryName = function(column) {
                    var headerCell = column.getTablixCell();
                    switch (headerCell.type) {
                      case 0:
                        if (null == headerCell.item || null == headerCell.item.metadata) return;
                        return headerCell.item.metadata.queryName;

                      case 2:
                        return headerCell.item.queryName;

                      default:
                        return;
                    }
                }, TablixColumnWidthManager.prototype.getColumnWidthObjects = function() {
                    return this.columnWidthObjects;
                }, TablixColumnWidthManager.prototype.getFixedColumnWidthObjects = function() {
                    var fixedOnly = {};
                    for (var queryName in this.columnWidthObjects) {
                        var obj = this.columnWidthObjects[queryName];
                        obj.isFixed && (fixedOnly[queryName] = obj);
                    }
                    return fixedOnly;
                }, TablixColumnWidthManager.prototype.getPersistedColumnWidth = function(queryName) {
                    var obj = this.columnWidthObjects[queryName];
                    return obj && obj.width;
                }, TablixColumnWidthManager.prototype.callHostToPersist = function() {
                    this.hostPersistCallBack && this.hostPersistCallBack(this.visualObjectInstancesToPersist), 
                    this.visualObjectInstancesToPersist = {
                        merge: [],
                        remove: []
                    };
                }, TablixColumnWidthManager.prototype.onColumnWidthChanged = function(queryName, width) {
                    if (null != queryName && null != this.columnWidthObjects[queryName]) {
                        var resizedColumn = this.columnWidthObjects[queryName];
                        width === -1 ? (resizedColumn.width = void 0, resizedColumn.isFixed = !this.currentAutoColumnSizePropertyValue, 
                        this.visualObjectInstancesToPersist.remove.push(this.generateColumnWidthObjectToPersist(resizedColumn.queryName, void 0)), 
                        this.callHostToPersist()) : (resizedColumn.width = width, resizedColumn.isFixed = !0, 
                        this.visualObjectInstancesToPersist.merge.push(this.generateColumnWidthObjectToPersist(queryName, width)), 
                        this.callHostToPersist());
                    }
                }, TablixColumnWidthManager.prototype.onColumnsRendered = function(renderedColumns) {
                    for (var maxWidths = {}, i = 0, len = renderedColumns.length; i < len; i++) {
                        var queryName = renderedColumns[i].queryName, newWidth = renderedColumns[i].width;
                        null == maxWidths[queryName] ? maxWidths[queryName] = {
                            queryName: queryName,
                            width: newWidth,
                            isFixed: !1
                        } : newWidth > maxWidths[queryName].width && (maxWidths[queryName].width = newWidth);
                    }
                    var widthChanged = !1;
                    for (var queryName in this.columnWidthObjects) if (maxWidths[queryName]) {
                        var colWidthObj = this.columnWidthObjects[queryName];
                        colWidthObj.isFixed && null == colWidthObj.width && (colWidthObj.width = maxWidths[queryName].width, 
                        this.visualObjectInstancesToPersist.merge.push(this.generateColumnWidthObjectToPersist(queryName, colWidthObj.width)), 
                        widthChanged = !0);
                    }
                    return widthChanged && this.callHostToPersist(), widthChanged;
                }, TablixColumnWidthManager.prototype.generateColumnWidthObjectToPersist = function(queryName, width) {
                    return {
                        selector: {
                            metadata: queryName
                        },
                        objectName: "general",
                        properties: {
                            columnWidth: width
                        }
                    };
                }, TablixColumnWidthManager.columnWidthProp = {
                    objectName: "general",
                    propertyName: "columnWidth"
                }, TablixColumnWidthManager;
            })();
            controls.TablixColumnWidthManager = TablixColumnWidthManager;
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var controls;
        !(function(controls) {
            var ScrollingMode, createClassAndSelector = jsCommon.CssConstants.createClassAndSelector;
            !(function(ScrollingMode) {
                ScrollingMode[ScrollingMode.None = 0] = "None", ScrollingMode[ScrollingMode.DraggingThumb = 1] = "DraggingThumb", 
                ScrollingMode[ScrollingMode.BackgroundClicked = 2] = "BackgroundClicked", ScrollingMode[ScrollingMode.InitialPagingDelay = 3] = "InitialPagingDelay", 
                ScrollingMode[ScrollingMode.Paging = 4] = "Paging";
            })(ScrollingMode || (ScrollingMode = {}));
            var SvgScrollbar = (function() {
                function SvgScrollbar(options) {
                    this.scrollingMode = ScrollingMode.None, this.brush = d3.svg.brush(), this.brushWidth = options.scrollbarWidth, 
                    this.brushContextAdditionalClass = options.scrollbarClass, this.updateBrushRadius(options.scrollbarRadius);
                }
                return SvgScrollbar.prototype.updateBrushRadius = function(radius) {
                    this.brushRadius = null != radius ? radius : SvgScrollbar.defaultBrushRadius;
                }, SvgScrollbar.prototype.updateScrollbarOptions = function(options) {
                    this.brushWidth = options.scrollbarWidth, this.updateBrushRadius(options.scrollbarRadius);
                    var brushClass = options.scrollbarClass, oldClassName = this.brushContextAdditionalClass;
                    this.brushContextAdditionalClass = brushClass, this.brushGraphicsContext && oldClassName !== brushClass && this.brushGraphicsContext.classed(oldClassName, !1).classed(brushClass, !!brushClass);
                }, SvgScrollbar.prototype.init = function(element) {
                    this.element = element;
                }, SvgScrollbar.prototype.remove = function() {
                    this.element.selectAll(SvgScrollbar.Brush.selector).remove(), this.brush.on(SvgScrollbar.events.brushStart, null).on(SvgScrollbar.events.brush, null).on(SvgScrollbar.events.brushEnd, null), 
                    this.brushGraphicsContext = void 0, null != this.timeoutId && (clearTimeout(this.timeoutId), 
                    this.timeoutId = null);
                }, SvgScrollbar.prototype.getExtent = function() {
                    var extent = this.brush.extent();
                    return {
                        start: extent[0],
                        end: extent[1]
                    };
                }, SvgScrollbar.prototype.setExtent = function(extent) {
                    var extentLength;
                    null == extent.start || null == extent.end ? (extentLength = this.getExtentLength(), 
                    null == extent.start ? extent.start = extent.end - extentLength : extent.end = extent.start + extentLength) : extentLength = extent.end - extent.start;
                    var oldStart = this.getExtent().start;
                    extent = SvgScrollbar.clampExtent(extent, this.scrollBarLength, extentLength), this.scrollingMode !== ScrollingMode.None && (this.offset = extent.start - oldStart, 
                    this.previousBrushExtent = extent), this.brush.extent([ extent.start, extent.end ]);
                }, SvgScrollbar.prototype.getExtentLength = function() {
                    var extent = this.getExtent();
                    return extent.end - extent.start;
                }, SvgScrollbar.prototype.setExtentLength = function(extentLength) {
                    var extent = this.getExtent();
                    extent.end = extent.start + extentLength, this.setExtent(extent);
                }, SvgScrollbar.prototype.setScale = function(scale) {
                    this.isHorizontal ? this.brush.x(scale) : this.brush.y(scale);
                }, SvgScrollbar.prototype.setOrientation = function(isHorizontal) {
                    this.isHorizontal = isHorizontal;
                }, SvgScrollbar.prototype.render = function(scrollbarX, scrollbarY, onRefreshVisualCallback) {
                    var _this = this;
                    this.brushGraphicsContext || (this.brushGraphicsContext = this.element.append("g").classed(SvgScrollbar.Brush.class, !0).classed(this.brushContextAdditionalClass, !!this.brushContextAdditionalClass)), 
                    this.onRefreshVisualCallback = onRefreshVisualCallback, this.brush.on(SvgScrollbar.events.brushStart, (function() {
                        _this.previousBrushExtent = _this.getExtent();
                    })).on(SvgScrollbar.events.brush, (function() {
                        var newExtent = _this.getExtent();
                        _this.scrollingMode === ScrollingMode.None && (newExtent.start < 0 && 0 === newExtent.end ? newExtent.start = 0 : newExtent.start === _this.scrollBarLength && newExtent.end > _this.scrollBarLength && (newExtent.end = _this.scrollBarLength), 
                        _this.scrollingMode = SvgScrollbar.isBackgroundClickExtent(newExtent) ? ScrollingMode.BackgroundClicked : ScrollingMode.DraggingThumb, 
                        _this.startBrushExtent = newExtent), null != _this.offset && (newExtent.start += _this.offset, 
                        newExtent.end += _this.offset);
                        var extentLength = _this.getExtentLength();
                        switch (newExtent = SvgScrollbar.clampExtent(newExtent, _this.scrollBarLength, extentLength), 
                        _this.pointerPosition = _this.getPointerPosition(), _this.scrollingMode) {
                          case ScrollingMode.DraggingThumb:
                            _this.refreshVisual();
                            break;

                          case ScrollingMode.BackgroundClicked:
                            if (SvgScrollbar.CenterOnBackgroundClick) {
                                var halfWidth = extentLength / 2;
                                newExtent.start = _this.pointerPosition - halfWidth, newExtent.end = _this.pointerPosition + halfWidth, 
                                _this.refreshVisual();
                            } else {
                                var increasing = newExtent.start > _this.previousBrushExtent.start;
                                newExtent = SvgScrollbar.stepExtent(_this.previousBrushExtent, increasing), _this.refreshVisual(), 
                                _this.scrollingMode = ScrollingMode.InitialPagingDelay, _this.setStepTimeout(increasing, newExtent);
                            }
                            break;

                          case ScrollingMode.InitialPagingDelay:
                          case ScrollingMode.Paging:
                            newExtent = _this.previousBrushExtent;
                        }
                        _this.setExtent(newExtent), _this.refreshExtent(), _this.previousBrushExtent = newExtent;
                    })).on(SvgScrollbar.events.brushEnd, (function() {
                        _this.setExtent(_this.previousBrushExtent), _this.refreshExtent(), _this.previousBrushExtent = null, 
                        _this.startBrushExtent = null, _this.pointerPosition = null, _this.scrollingMode = ScrollingMode.None, 
                        _this.offset = null, null != _this.timeoutId && (window.clearTimeout(_this.timeoutId), 
                        _this.timeoutId = null);
                    }));
                    var brushContext = this.brushGraphicsContext.attr({
                        transform: visuals.SVGUtil.translate(scrollbarX, scrollbarY),
                        "drag-resize-disabled": "true"
                    }).call(this.brush);
                    brushContext.selectAll(".resize").remove();
                    var rectAttributes = {
                        rx: this.brushRadius,
                        ry: this.brushRadius
                    };
                    this.isHorizontal ? rectAttributes.height = this.brushWidth : rectAttributes.width = this.brushWidth, 
                    brushContext.selectAll("rect").attr(rectAttributes);
                }, SvgScrollbar.prototype.shouldContinueStepping = function(scrollBarLength, extent) {
                    var overlaps = this.pointerPosition >= extent.start && this.pointerPosition <= extent.end;
                    return 0 !== extent.start && extent.end !== scrollBarLength && !overlaps;
                }, SvgScrollbar.prototype.getPointerPosition = function() {
                    var extent = this.getExtent();
                    return SvgScrollbar.isBackgroundClickExtent(this.startBrushExtent) ? extent.start < this.startBrushExtent.start ? extent.start : extent.end : (extent.end - extent.start) / 2;
                }, SvgScrollbar.prototype.refreshExtent = function() {
                    var extent = this.getExtent(), extentLength = this.getExtentLength(), rectElement = this.brushGraphicsContext.select(".extent");
                    this.isHorizontal ? rectElement.attr({
                        width: extentLength,
                        x: extent.start
                    }) : rectElement.attr({
                        height: extentLength,
                        y: extent.start
                    });
                }, SvgScrollbar.prototype.refreshVisual = function() {
                    this.onRefreshVisualCallback && window.requestAnimationFrame(this.onRefreshVisualCallback);
                }, SvgScrollbar.prototype.refreshExtentAndVisual = function() {
                    this.refreshExtent(), this.refreshVisual();
                }, SvgScrollbar.prototype.setStepTimeout = function(increasing, extent) {
                    var _this = this;
                    if (this.shouldContinueStepping(this.scrollBarLength, extent)) {
                        var delay = this.scrollingMode === ScrollingMode.InitialPagingDelay ? SvgScrollbar.InitialPagingDelayMS : SvgScrollbar.PagingDelayMS;
                        this.timeoutId = _.delay((function() {
                            _this.onPagingTimeoutExpired(increasing);
                        }), delay);
                    }
                }, SvgScrollbar.isBackgroundClickExtent = function(extent) {
                    return extent.start === extent.end;
                }, SvgScrollbar.stepExtent = function(extent, increasing) {
                    var length = extent.end - extent.start;
                    return extent.start = increasing ? extent.start + length : extent.start - length, 
                    extent.end = increasing ? extent.end + length : extent.end - length, extent;
                }, SvgScrollbar.prototype.onPagingTimeoutExpired = function(increasing) {
                    this.scrollingMode !== ScrollingMode.Paging && (this.scrollingMode = ScrollingMode.Paging);
                    var extent = this.getExtent(), newExtent = SvgScrollbar.stepExtent(extent, increasing);
                    this.setExtent(newExtent), this.refreshExtentAndVisual(), this.previousBrushExtent = extent, 
                    this.setStepTimeout(increasing, newExtent);
                }, SvgScrollbar.clampExtent = function(extent, scrollBarLength, extentLength) {
                    return extent.start < 0 && (extent.start = 0, extent.end = extentLength), extent.end > scrollBarLength && (extent.end = scrollBarLength, 
                    extent.start = scrollBarLength - extentLength), extent;
                }, SvgScrollbar.InitialPagingDelayMS = 500, SvgScrollbar.PagingDelayMS = 50, SvgScrollbar.defaultBrushRadius = 0, 
                SvgScrollbar.CenterOnBackgroundClick = !1, SvgScrollbar.events = {
                    brushStart: "brushstart",
                    brush: "brush",
                    brushEnd: "brushend"
                }, SvgScrollbar.Brush = createClassAndSelector("brush"), SvgScrollbar;
            })();
            controls.SvgScrollbar = SvgScrollbar;
        })(controls = visuals.controls || (visuals.controls = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var CartesianPluginMethods;
        !(function(CartesianPluginMethods) {
            function getAdditionalTelemetry(dataView) {
                var telemetry = {}, categoryColumn = dataView && dataView.categorical && _.first(dataView.categorical.categories);
                return categoryColumn && (telemetry.axisType = visuals.ScalarUtils.shouldDrawScalar(dataView.metadata.objects, visuals.columnChartProps.categoryAxis.axisType, categoryColumn.source.type, void 0, visuals.CartesianHelper.hasCategoryHierarchy(dataView)) ? "scalar" : "categorical"), 
                telemetry;
            }
            CartesianPluginMethods.getAdditionalTelemetry = getAdditionalTelemetry;
        })(CartesianPluginMethods = visuals.CartesianPluginMethods || (visuals.CartesianPluginMethods = {}));
        var ColumnChartPluginMethods;
        !(function(ColumnChartPluginMethods) {
            function customizeQuery(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping && dataViewMapping.categorical && dataViewMapping.categorical.categories) {
                    if (dataViewMapping.categorical.dataVolume = 4, visuals.ScalarUtils.mappingSupportsScalarAxis(dataViewMapping)) {
                        var dataViewCategories = dataViewMapping.categorical.categories;
                        dataViewCategories.dataReductionAlgorithm = {
                            sample: {}
                        };
                        var values = dataViewMapping.categorical.values;
                        values && values.group && (values.group.dataReductionAlgorithm = {
                            top: {}
                        });
                    } else visuals.CartesianHelper.expandCategoryWindow([ dataViewMapping ]);
                    visuals.CartesianHelper.requestFilteredToUniqueValue(options.dataViewMappings);
                    var sortableRoles = getSortableRoles(options);
                    visuals.CartesianHelper.applyHierarchicalSorts(options.dataViewMappings, sortableRoles);
                }
            }
            function getSortableRoles(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (!dataViewMapping || !dataViewMapping.categorical || !dataViewMapping.categorical.categories) return null;
                var dataViewCategories = dataViewMapping.categorical.categories, forIn = dataViewCategories.for.in, categoryItems = forIn.items, activeProjections = forIn.activeItems, categoricalSortableRoles = [ "Category", "Y", "Tooltips" ], continuousSortableRoles = [];
                if (!_.isEmpty(categoryItems)) {
                    var objects = void 0;
                    dataViewMapping.metadata && (objects = dataViewMapping.metadata.objects);
                    var categoryType = void 0;
                    if (_.isEmpty(activeProjections)) categoryType = categoryItems[0].type; else if (1 === activeProjections.length) {
                        var item = _.find(categoryItems, (function(item) {
                            return item.queryName === activeProjections[0];
                        }));
                        categoryType = item.type;
                    } else if (activeProjections.length > 1) return categoricalSortableRoles;
                    return visuals.ScalarUtils.canHaveScalarAxis(objects, visuals.lineChartProps.categoryAxis.axisType, categoryType) ? continuousSortableRoles : categoricalSortableRoles;
                }
                return null;
            }
            ColumnChartPluginMethods.customizeQuery = customizeQuery, ColumnChartPluginMethods.getSortableRoles = getSortableRoles;
        })(ColumnChartPluginMethods = visuals.ColumnChartPluginMethods || (visuals.ColumnChartPluginMethods = {}));
        var ComboChartPluginMethods;
        !(function(ComboChartPluginMethods) {
            function customizeQuery(options) {
                var columnMapping = !_.isEmpty(options.dataViewMappings) && options.dataViewMappings[0];
                if (columnMapping) {
                    var columnValuesMapping = columnMapping.categorical && columnMapping.categorical.values, seriesSelect = columnValuesMapping.group && !_.isEmpty(columnValuesMapping.group.select) && columnValuesMapping.group.select[0];
                    _.isEmpty(seriesSelect.for.in.items) && (columnValuesMapping.group.by.items = void 0);
                }
                var isScalar = visuals.ScalarUtils.mappingSupportsScalarAxis(columnMapping);
                if (columnMapping && columnMapping.categorical && (columnMapping.categorical.dataVolume = 4, 
                isScalar)) {
                    var dataViewCategories = columnMapping.categorical.categories;
                    dataViewCategories.dataReductionAlgorithm = {
                        sample: {}
                    };
                    var values = columnMapping.categorical.values;
                    values && values.group && (values.group.dataReductionAlgorithm = {
                        top: {}
                    });
                }
                var lineMapping = options.dataViewMappings.length > 1 && options.dataViewMappings[1];
                if (lineMapping && lineMapping.categorical && (lineMapping.categorical.dataVolume = 4, 
                isScalar)) {
                    var dataViewCategories = lineMapping.categorical.categories;
                    dataViewCategories.dataReductionAlgorithm = {
                        sample: {}
                    };
                    var values = lineMapping.categorical.values;
                    values && values.group && (values.group.dataReductionAlgorithm = {
                        top: {}
                    });
                }
                isScalar || visuals.CartesianHelper.expandCategoryWindow(options.dataViewMappings), 
                visuals.CartesianHelper.requestFilteredToUniqueValue(options.dataViewMappings);
                var sortableRoles = getSortableRoles(options);
                visuals.CartesianHelper.applyHierarchicalSorts(options.dataViewMappings, sortableRoles);
            }
            function getSortableRoles(options) {
                if (options && options.dataViewMappings.length > 0) {
                    var dataViewMapping = options.dataViewMappings[0];
                    if (!visuals.ScalarUtils.mappingSupportsScalarAxis(dataViewMapping)) return [ "Category", "Y", "Y2", "Tooltips" ];
                }
                return null;
            }
            ComboChartPluginMethods.customizeQuery = customizeQuery, ComboChartPluginMethods.getSortableRoles = getSortableRoles;
        })(ComboChartPluginMethods = visuals.ComboChartPluginMethods || (visuals.ComboChartPluginMethods = {}));
        var LineChartPluginMethods;
        !(function(LineChartPluginMethods) {
            function customizeQuery(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping && dataViewMapping.categorical && dataViewMapping.categorical.categories) {
                    dataViewMapping.categorical.dataVolume = 4;
                    var dataViewCategories = dataViewMapping.categorical.categories, requestScalarKeys = !1;
                    if (visuals.ScalarUtils.scalarAxisTypeAllowed(dataViewMapping.metadata.objects, visuals.lineChartProps.categoryAxis.axisType)) {
                        requestScalarKeys = ScalarKeyUtils.hasScalarKeys(dataViewMapping.categorical);
                        var forecastMapping_1 = _.find(options.dataViewMappings, (function(dataViewMapping) {
                            return dataViewMapping.usage && dataViewMapping.usage.forecast;
                        }));
                        CompiledDataViewMapping.visitCategoricalCategories(dataViewCategories, {
                            visitRole: function(role) {
                                for (var roleItems = role.items, _loop_4 = function(i, iLen) {
                                    var item = roleItems[i], scalarKeyInfo = item.scalarKeyInfo;
                                    if (scalarKeyInfo && scalarKeyInfo.hasScalarKey) return scalarKeyInfo.scalarKeyMinProperty = visuals.cartesianChartProps.scalarKey.scalarKeyMin, 
                                    forecastMapping_1 && CompiledDataViewMapping.visitCategoricalCategories(forecastMapping_1.categorical.categories, {
                                        visitRole: function(role) {
                                            role.items[i].scalarKeyInfo || (role.items[i].scalarKeyInfo = {}), role.items[i].scalarKeyInfo.scalarKeyMinProperty = visuals.cartesianChartProps.scalarKey.scalarKeyMin;
                                        }
                                    }), "break";
                                }, i = 0, iLen = _.size(roleItems); i < iLen; i++) {
                                    var state_1 = _loop_4(i, iLen);
                                    if ("break" === state_1) break;
                                }
                            }
                        });
                    }
                    if (!requestScalarKeys && !visuals.ScalarUtils.mappingSupportsScalarAxis(dataViewMapping)) {
                        _.remove(options.dataViewMappings, (function(dataViewMapping) {
                            return dataViewMapping.usage && dataViewMapping.usage.forecast;
                        })), visuals.LineChartDataReduction.applyWindow(dataViewMapping);
                        var dataViewMappingArray = [ dataViewMapping ];
                        visuals.CartesianHelper.expandCategoryWindow(dataViewMappingArray);
                        var sortableRoles = getSortableRoles(options);
                        visuals.CartesianHelper.applyHierarchicalSorts(dataViewMappingArray, sortableRoles);
                    }
                    visuals.CartesianHelper.requestFilteredToUniqueValue(options.dataViewMappings);
                }
            }
            function getSortableRoles(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (!dataViewMapping || !dataViewMapping.categorical || !dataViewMapping.categorical.categories) return null;
                var dataViewCategories = dataViewMapping.categorical.categories, forIn = dataViewCategories.for.in, categoryItems = forIn.items, activeProjections = forIn.activeItems, categoricalSortableRoles = [ "Category", "Y", "Tooltips" ], continuousSortableRoles = [];
                if (!_.isEmpty(categoryItems)) {
                    var objects = void 0;
                    if (dataViewMapping.metadata && (objects = dataViewMapping.metadata.objects), ScalarKeyUtils.hasScalarKeys(dataViewMapping.categorical) && visuals.ScalarUtils.scalarAxisTypeAllowed(objects, visuals.lineChartProps.categoryAxis.axisType)) return continuousSortableRoles;
                    var type = void 0;
                    if (_.isEmpty(activeProjections)) type = categoryItems[0].type; else if (1 === activeProjections.length) {
                        var item = _.find(categoryItems, (function(item) {
                            return item.queryName === activeProjections[0];
                        }));
                        type = item.type;
                    } else if (activeProjections.length > 1) return categoricalSortableRoles;
                    return visuals.ScalarUtils.canHaveScalarAxis(objects, visuals.lineChartProps.categoryAxis.axisType, type) ? continuousSortableRoles : categoricalSortableRoles;
                }
                return null;
            }
            var CompiledDataViewMapping = powerbi.data.CompiledDataViewMapping, ScalarKeyUtils = powerbi.data.ScalarKeyUtils;
            LineChartPluginMethods.customizeQuery = customizeQuery, LineChartPluginMethods.getSortableRoles = getSortableRoles;
        })(LineChartPluginMethods = visuals.LineChartPluginMethods || (visuals.LineChartPluginMethods = {}));
        var MapPluginMethods;
        !(function(MapPluginMethods) {
            function customizeQuery(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping.categorical) {
                    var categories = dataViewMapping.categorical.categories;
                    if (categories.select) {
                        var values = dataViewMapping.categorical.values, roleBind = values.group.select[0];
                        _.isEmpty(roleBind.bind.to.items) && (categories.dataReductionAlgorithm = {
                            sample: {}
                        });
                    }
                }
            }
            MapPluginMethods.customizeQuery = customizeQuery;
        })(MapPluginMethods = visuals.MapPluginMethods || (visuals.MapPluginMethods = {}));
        var MatrixPluginMethods;
        !(function(MatrixPluginMethods) {
            function customizeQuery(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping && dataViewMapping.matrix && dataViewMapping.metadata) {
                    var dataViewMatrix = dataViewMapping.matrix;
                    _.isEmpty(dataViewMatrix.columns.for.in.items) || (dataViewMatrix.rows.dataReductionAlgorithm.window.count = 100);
                    var objects = dataViewMapping.metadata.objects;
                    dataViewMatrix.rows.for.in.subtotalType = TablixObjects.PropGeneralMatrixRowSubtotals.getValue(objects) ? 2 : 0, 
                    dataViewMatrix.columns.for.in.subtotalType = TablixObjects.PropGeneralMatrixColumnSubtotals.getValue(objects) ? 2 : 0;
                }
            }
            function getSortableRoles() {
                return [ "Rows", "Values" ];
            }
            var TablixObjects = powerbi.visuals.controls.internal.TablixObjects;
            MatrixPluginMethods.customizeQuery = customizeQuery, MatrixPluginMethods.getSortableRoles = getSortableRoles;
        })(MatrixPluginMethods = visuals.MatrixPluginMethods || (visuals.MatrixPluginMethods = {}));
        var MultiRowCardPluginMethods;
        !(function(MultiRowCardPluginMethods) {
            function getSortableRoles(options) {
                if (options && options.dataViewMappings && !_.isEmpty(options.dataViewMappings)) for (var _i = 0, _a = options.dataViewMappings; _i < _a.length; _i++) {
                    var dataViewMapping = _a[_i];
                    if (dataViewMapping.table) {
                        var rows = dataViewMapping.table.rows;
                        if (rows && rows.for && rows.for.in && rows.for.in.items) return [ ValuesRole ];
                    }
                }
            }
            var ValuesRole = "Values";
            MultiRowCardPluginMethods.getSortableRoles = getSortableRoles;
        })(MultiRowCardPluginMethods = visuals.MultiRowCardPluginMethods || (visuals.MultiRowCardPluginMethods = {}));
        var PivotTablePluginMethods;
        !(function(PivotTablePluginMethods) {
            function customizeQuery(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping && dataViewMapping.matrix && dataViewMapping.metadata) {
                    var dataViewMatrix = dataViewMapping.matrix;
                    _.isEmpty(dataViewMatrix.columns.for.in.items) || (dataViewMatrix.rows.dataReductionAlgorithm.window.count = 100), 
                    customizeRowSubtotals(dataViewMapping, dataViewMatrix), customizeColumnSubtotals(dataViewMapping, dataViewMatrix);
                }
            }
            function customizeRowSubtotals(dataViewMapping, dataViewMatrix) {
                var objects = dataViewMapping.metadata.objects, columns = dataViewMapping.metadata.columns, projections = dataViewMatrix.rows.for.in.items, totalsEnabled = TablixObjects.PropSubTotalsPivotTableRowSubtotals.getValue(objects), subtotalType = TablixObjects.PropSubTotalsPivotTableRowSubtotalsPosition.getValue(objects) === visuals.rowSubtotalPosition.top ? 1 : 2, perLevel = TablixObjects.PropSubTotalsPivotTableRowSubtotalsPerLevel.getValue(objects);
                if (!_.isEmpty(projections)) for (var _loop_5 = function(i, len) {
                    var projection = projections[i], column = _.find(columns, (function(c) {
                        return c.queryName === projection.queryName;
                    }));
                    if (!column) return "continue";
                    var levelTotalEnabled = TablixObjects.PropSubTotalsPivotTableLevelSubtotalEnabled.getValue(column.objects);
                    !totalsEnabled || perLevel && !levelTotalEnabled ? projection.subtotalType = 0 : 0 === i && TablixObjects.PropRowsSteppedLayout.getValue(objects) ? projection.subtotalType = 1 : projection.subtotalType = subtotalType;
                }, i = 0, len = projections.length; i < len; i++) _loop_5(i, len);
            }
            function customizeColumnSubtotals(dataViewMapping, dataViewMatrix) {
                var objects = dataViewMapping.metadata.objects, columns = dataViewMapping.metadata.columns, projections = dataViewMatrix.columns.for.in.items, totalsEnabled = TablixObjects.PropSubTotalsPivotTableColumnSubtotals.getValue(objects), perLevel = TablixObjects.PropSubTotalsPivotTableColumnSubtotalsPerLevel.getValue(objects);
                if (!_.isEmpty(projections)) for (var _loop_6 = function(projection) {
                    var column = _.find(columns, (function(c) {
                        return c.queryName === projection.queryName;
                    }));
                    if (!column) return "continue";
                    var levelTotalEnabled = TablixObjects.PropSubTotalsPivotTableLevelSubtotalEnabled.getValue(column.objects);
                    !totalsEnabled || perLevel && !levelTotalEnabled ? projection.subtotalType = 0 : projection.subtotalType = 2;
                }, _i = 0, projections_1 = projections; _i < projections_1.length; _i++) {
                    var projection = projections_1[_i];
                    _loop_6(projection);
                }
            }
            function getSortableRoles() {
                return [ "Rows", "Values" ];
            }
            var TablixObjects = powerbi.visuals.controls.internal.TablixObjects;
            PivotTablePluginMethods.customizeQuery = customizeQuery, PivotTablePluginMethods.getSortableRoles = getSortableRoles;
        })(PivotTablePluginMethods = visuals.PivotTablePluginMethods || (visuals.PivotTablePluginMethods = {}));
        var ScatterChartPluginMethods;
        !(function(ScatterChartPluginMethods) {
            function customizeQuery(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping && dataViewMapping.matrix && dataViewMapping.metadata) {
                    var dataViewMatrix = dataViewMapping.matrix, objects = dataViewMapping.metadata.objects, showRatioLine = powerbi.DataViewObjects.getValue(objects, visuals.scatterChartProps.ratioLine.show, visuals.CartesianHelper.DefaultScatterRatioLineSettings.show);
                    if (showRatioLine) {
                        var selectMapping = dataViewMatrix.rows;
                        if (selectMapping && !_.isEmpty(selectMapping.select)) for (var _i = 0, _a = selectMapping.select; _i < _a.length; _i++) {
                            var select = _a[_i], mappings = [ select ], compositeMapping = select;
                            compositeMapping.composite && (mappings = compositeMapping.composite);
                            for (var _b = 0, mappings_1 = mappings; _b < mappings_1.length; _b++) {
                                var mapping = mappings_1[_b], bindMapping = mapping;
                                bindMapping.bind && (bindMapping.bind.to.subtotalType = 2);
                                var forMapping_1 = mapping;
                                forMapping_1.for && (forMapping_1.for.in.subtotalType = 2);
                            }
                        }
                        var forMapping = dataViewMatrix.columns;
                        forMapping && (forMapping.for.in.subtotalType = 2);
                    }
                    var dataReductionAlgorithm = dataViewMatrix.rows.dataReductionAlgorithm, dataVolumeCount = powerbi.DataViewObjects.getValue(objects, visuals.scatterChartProps.general.dataVolume, null);
                    if (dataReductionAlgorithm && dataReductionAlgorithm.overlappingPointsSample) {
                        var categoryAxis = powerbi.DataViewObjects.getValue(objects, visuals.cartesianChartProps.categoryAxis.axisScale), valueAxis = powerbi.DataViewObjects.getValue(objects, visuals.cartesianChartProps.valueAxis.axisScale);
                        categoryAxis === visuals.axisScale.log && (dataReductionAlgorithm.overlappingPointsSample.x.transform = 1), 
                        valueAxis === visuals.axisScale.log && (dataReductionAlgorithm.overlappingPointsSample.y.transform = 1), 
                        null != dataVolumeCount && (dataReductionAlgorithm.overlappingPointsSample.count = dataVolumeCount);
                    } else dataReductionAlgorithm && dataReductionAlgorithm.sample && null != dataVolumeCount && (dataReductionAlgorithm.sample.count = dataVolumeCount);
                }
            }
            function getAdditionalTelemetry(dataView) {
                var telemetry = {
                    hasSize: DataRoleHelper.hasRoleInDataView(dataView, "Size"),
                    hasPlayAxis: DataRoleHelper.hasRoleInDataView(dataView, "Play")
                };
                return telemetry;
            }
            var DataRoleHelper = powerbi.data.DataRoleHelper;
            ScatterChartPluginMethods.customizeQuery = customizeQuery, ScatterChartPluginMethods.getAdditionalTelemetry = getAdditionalTelemetry;
        })(ScatterChartPluginMethods = visuals.ScatterChartPluginMethods || (visuals.ScatterChartPluginMethods = {}));
        var SlicerPluginMethods;
        !(function(SlicerPluginMethods) {
            function getSortableRoles(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping && dataViewMapping.metadata) {
                    var metaDataColumns = dataViewMapping.metadata.columns, parameter = metaDataColumns && metaDataColumns[0] && metaDataColumns[0].parameter;
                    if (shouldRequestMinMax(dataViewMapping) || parameter) {
                        var mode = getSlicerMode(dataViewMapping.metadata.objects);
                        if (null === mode || visuals.slicerMode.isRangeSlicerMode(mode) || mode === visuals.slicerMode.relative) return null;
                    }
                }
                return [ visuals.slicerRoles.value ];
            }
            function customizeQuery(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping && dataViewMapping.metadata) {
                    var mode = getSlicerMode(dataViewMapping.metadata.objects);
                    if (mode === visuals.slicerMode.single || null === mode && powerbi.DataViewMapping.getParameterColumns(dataViewMapping).length > 0) {
                        var categories = dataViewMapping.categorical && dataViewMapping.categorical.categories;
                        return void (categories && (categories.dataReductionAlgorithm = {
                            sample: {}
                        }));
                    }
                    if ((null === mode || visuals.slicerMode.slicerModeSupportsMinMax(mode)) && shouldRequestMinMax(dataViewMapping)) {
                        var items = dataViewMapping.categorical.categories.for.in.items;
                        dataViewMapping.categorical.categories = null, dataViewMapping.categorical.values = {
                            bind: {
                                to: {
                                    role: visuals.slicerRoles.value,
                                    aggregates: {
                                        min: !0,
                                        max: !0
                                    },
                                    items: items
                                }
                            }
                        };
                    }
                }
            }
            function getSlicerMode(objects) {
                var mode = null;
                return objects && (mode = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.data.mode, mode)), 
                mode;
            }
            function shouldRequestMinMax(dataViewMapping) {
                if (dataViewMapping && dataViewMapping.categorical && dataViewMapping.categorical.categories && dataViewMapping.metadata) {
                    var metaDataColumns = dataViewMapping.metadata.columns, parameter = metaDataColumns && metaDataColumns[0] && metaDataColumns[0].parameter, items = dataViewMapping.categorical.categories.for.in.items, mode = getSlicerMode(dataViewMapping.metadata.objects);
                    if (!_.isEmpty(items)) {
                        var item = items[0];
                        if (item.type && item.type.dateTime) return !0;
                        if (item.type && item.type.numeric && (visuals.slicerMode.slicerModeSupportsMinMax(mode) || null === mode && !parameter)) return !0;
                    }
                }
                return !1;
            }
            function isCrossFilteredByDefault(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (!dataViewMapping || !dataViewMapping.metadata) return !1;
                var mode = getSlicerMode(dataViewMapping.metadata.objects);
                return null == mode ? shouldRequestMinMax(dataViewMapping) : visuals.slicerMode.isRangeSlicerMode(mode);
            }
            SlicerPluginMethods.getSortableRoles = getSortableRoles, SlicerPluginMethods.customizeQuery = customizeQuery, 
            SlicerPluginMethods.shouldRequestMinMax = shouldRequestMinMax, SlicerPluginMethods.isCrossFilteredByDefault = isCrossFilteredByDefault;
        })(SlicerPluginMethods = visuals.SlicerPluginMethods || (visuals.SlicerPluginMethods = {}));
        var TableExPluginMethods;
        !(function(TableExPluginMethods) {
            function customizeQuery(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping && dataViewMapping.table && dataViewMapping.metadata) {
                    var dataViewTableRows = dataViewMapping.table.rows, objects = dataViewMapping.metadata.objects;
                    dataViewTableRows.for.in.subtotalType = TablixObjects.PropTotalTableExTotals.getValue(objects) ? 1 : 0;
                }
            }
            function getSortableRoles() {
                return [ "Values" ];
            }
            var TablixObjects = powerbi.visuals.controls.internal.TablixObjects;
            TableExPluginMethods.customizeQuery = customizeQuery, TableExPluginMethods.getSortableRoles = getSortableRoles;
        })(TableExPluginMethods = visuals.TableExPluginMethods || (visuals.TableExPluginMethods = {}));
        var TablePluginMethods;
        !(function(TablePluginMethods) {
            function customizeQuery(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping && dataViewMapping.table && dataViewMapping.metadata) {
                    var dataViewTableRows = dataViewMapping.table.rows, objects = dataViewMapping.metadata.objects;
                    dataViewTableRows.for.in.subtotalType = TablixObjects.PropGeneralTableTotals.getValue(objects) ? 1 : 0;
                }
            }
            function getSortableRoles() {
                return [ "Values" ];
            }
            var TablixObjects = powerbi.visuals.controls.internal.TablixObjects;
            TablePluginMethods.customizeQuery = customizeQuery, TablePluginMethods.getSortableRoles = getSortableRoles;
        })(TablePluginMethods = visuals.TablePluginMethods || (visuals.TablePluginMethods = {}));
        var WaterfallChartPluginMethods;
        !(function(WaterfallChartPluginMethods) {
            function customizeQuery(options) {
                var dataViewMapping = options.dataViewMappings[0];
                if (dataViewMapping && dataViewMapping.matrix) {
                    var dataViewMatrix = dataViewMapping.matrix;
                    dataViewMatrix.columns && dataViewMatrix.columns.for && dataViewMatrix.columns.for.in && (dataViewMatrix.columns.for.in.subtotalType = 1);
                }
            }
            function getSortableRoles() {
                return [ "Category", "Y", "Tooltips" ];
            }
            WaterfallChartPluginMethods.customizeQuery = customizeQuery, WaterfallChartPluginMethods.getSortableRoles = getSortableRoles;
        })(WaterfallChartPluginMethods = visuals.WaterfallChartPluginMethods || (visuals.WaterfallChartPluginMethods = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var AxisViewModel;
        !(function(AxisViewModel) {
            function createAxisLabel(styleString, label, unitType) {
                return styleString ? styleString === visuals.axisStyle.showBoth ? label + " (" + unitType + ")" : styleString === visuals.axisStyle.showUnitOnly ? unitType : label : label;
            }
            AxisViewModel.createAxisLabel = createAxisLabel;
        })(AxisViewModel = visuals.AxisViewModel || (visuals.AxisViewModel = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var AxisDataModel, FontSize = visuals.Units.FontSize;
        !(function(AxisDataModel) {
            function toColorFill(color) {
                return {
                    solid: {
                        color: color
                    }
                };
            }
            var AxesData = (function() {
                function AxesData(valueAxisProperties, categoryAxisProperties, isYCategorical, isValueAxisDisabled, isScatter) {
                    this.AxisDataDefaults = {
                        show: !0,
                        position: visuals.yAxisPosition.left,
                        alignZeros: !1,
                        showAxisTitle: !1,
                        start: void 0,
                        end: void 0,
                        axisType: void 0,
                        axisScale: visuals.DEFAULT_AXIS_SCALE_TYPE,
                        axisStyle: visuals.axisStyle.showTitleOnly,
                        labelDisplayUnits: 0,
                        labelPrecision: visuals.dataLabelUtils.defaultLabelPrecision,
                        titleText: void 0,
                        preferredCategoryWidth: visuals.CartesianHelper.MinOrdinalRectThickness,
                        concatenateLabels: visuals.CartesianHelper.DefaultConcatenateLabelsValue,
                        labelFontProperties: {
                            color: visuals.DEFAULT_AXIS_COLOR,
                            family: visuals.CartesianHelper.DefaultAxisFontFamily,
                            size: FontSize.createFromPx(visuals.CartesianHelper.DefaultAxisFontSizeInPx),
                            style: void 0,
                            variant: void 0,
                            weight: void 0,
                            whiteSpace: void 0
                        },
                        titleFontProperties: void 0,
                        axisLabel: void 0,
                        gridlineShow: void 0,
                        gridlineColor: visuals.CartesianAxes.gridlineDefaultColor,
                        gridlineStyle: visuals.lineStyle.solid,
                        gridlineThickness: 1
                    }, this.isCategoryAxisSet = !!categoryAxisProperties, this.isValueAxisSet = !!valueAxisProperties, 
                    this.isValueAxisDisabled = isValueAxisDisabled;
                    var xProperties = isYCategorical ? valueAxisProperties : categoryAxisProperties, yProperties = isYCategorical ? categoryAxisProperties : valueAxisProperties, y2Properties = valueAxisProperties, xDefaults = _.clone(this.AxisDataDefaults);
                    xDefaults.gridlineShow = isYCategorical || isScatter;
                    var yDefaults = _.clone(this.AxisDataDefaults);
                    yDefaults.gridlineShow = !isYCategorical, this.x = AxesData.createSingleAxisFromObject(xProperties, xDefaults), 
                    this.y = AxesData.createSingleAxisFromObject(yProperties, yDefaults), this.categoryAxis = isYCategorical ? this.y : this.x, 
                    this.valueAxis = isYCategorical ? this.x : this.y;
                    var y2Defaults = _.clone(this.AxisDataDefaults);
                    y2Defaults.show = void 0, y2Defaults.position = visuals.yAxisPosition.right, y2Defaults.labelFontProperties = isYCategorical ? this.x.labelFontProperties : this.y.labelFontProperties, 
                    this.y2 = AxesData.createSingleAxisFromObject(y2Properties, y2Defaults, !0), isValueAxisDisabled && (this.valueAxis.show = !1);
                }
                return AxesData.createDefault = function() {
                    return new AxesData((void 0), (void 0), (!1), (!1), (!1));
                }, AxesData.createSingleAxisFromObject = function(properties, defaults, isSecond) {
                    var getValue = powerbi.DataViewObject.getValue, getFillColorByPropertyName = powerbi.DataViewObject.getFillColorByPropertyName, getPropName = isSecond ? function(prop) {
                        return _.camelCase("sec " + prop.propertyName);
                    } : function(prop) {
                        return prop.propertyName;
                    }, axisProps = visuals.cartesianChartProps.valueAxis, show = getValue(properties, getPropName(axisProps.show), defaults.show), alignZeros = getValue(properties, getPropName(axisProps.alignZeros), defaults.alignZeros), showAxisTitle = getValue(properties, getPropName(axisProps.showAxisTitle), defaults.showAxisTitle), start = getValue(properties, getPropName(axisProps.start), defaults.start), end = getValue(properties, getPropName(axisProps.end), defaults.end), position = getValue(properties, getPropName(axisProps.position), defaults.position), axisType = getValue(properties, getPropName(axisProps.axisType), defaults.axisType), axisScale = getValue(properties, getPropName(axisProps.axisScale), defaults.axisScale), axisStyle = getValue(properties, getPropName(axisProps.axisStyle), defaults.axisStyle), labelDisplayUnits = getValue(properties, getPropName(axisProps.labelDisplayUnits), defaults.labelDisplayUnits), labelPrecision = getValue(properties, getPropName(axisProps.labelPrecision), defaults.labelPrecision);
                    (!labelPrecision || labelPrecision < 0) && (labelPrecision = defaults.labelPrecision);
                    var titleText = getValue(properties, getPropName(axisProps.titleText), defaults.titleText), preferredCategoryWidth = getValue(properties, getPropName(axisProps.preferredCategoryWidth), defaults.preferredCategoryWidth), concatenateLabels = getValue(properties, getPropName(axisProps.concatenateLabels), defaults.concatenateLabels), axisLabel = getValue(properties, getPropName(axisProps.axisLabel)), gridlineShow = getValue(properties, getPropName(axisProps.gridlineShow), defaults.gridlineShow || concatenateLabels === !1), gridlineColor = getFillColorByPropertyName(properties, getPropName(axisProps.gridlineColor), defaults.gridlineColor), gridlineThickness = getValue(properties, getPropName(axisProps.gridlineThickness), defaults.gridlineThickness), gridlineStyle = getValue(properties, getPropName(axisProps.gridlineStyle), defaults.gridlineStyle), names = {
                        family: getPropName(axisProps.fontFamily),
                        size: getPropName(axisProps.fontSize),
                        color: getPropName(axisProps.labelColor),
                        sizeInPixels: !0
                    }, labelFontProperties = visuals.FontProperties.createFromDataViewObject(properties, names, defaults.labelFontProperties);
                    names.family = getPropName(axisProps.titleFontFamily), names.size = getPropName(axisProps.titleFontSize), 
                    names.color = getPropName(axisProps.titleColor);
                    var titleFontProperties = visuals.FontProperties.createFromDataViewObject(properties, names, labelFontProperties), result = {
                        show: show,
                        alignZeros: alignZeros,
                        showAxisTitle: showAxisTitle,
                        start: start,
                        end: end,
                        position: position,
                        axisType: axisType,
                        axisScale: axisScale,
                        axisStyle: axisStyle,
                        labelDisplayUnits: labelDisplayUnits,
                        labelPrecision: labelPrecision,
                        titleText: titleText,
                        preferredCategoryWidth: preferredCategoryWidth,
                        concatenateLabels: concatenateLabels,
                        labelFontProperties: labelFontProperties,
                        titleFontProperties: titleFontProperties,
                        axisLabel: axisLabel,
                        gridlineShow: gridlineShow,
                        gridlineColor: gridlineColor,
                        gridlineThickness: gridlineThickness,
                        gridlineStyle: gridlineStyle
                    };
                    return result;
                }, AxesData;
            })();
            AxisDataModel.AxesData = AxesData, AxisDataModel.toColorFill = toColorFill;
        })(AxisDataModel = visuals.AxisDataModel || (visuals.AxisDataModel = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        function hasMultipleYAxes(layers) {
            return layers.length > 1;
        }
        function tryMergeYDomains(layers, visualOptions) {
            var noMerge = {
                domain: void 0,
                merged: !1,
                tickCount: void 0
            };
            if (layers.length < 2) return noMerge;
            var y1props = layers[0].calculateAxesProperties(visualOptions)[1], y2props = layers[1].calculateAxesProperties(visualOptions)[1], firstYDomain = y1props.scale.domain(), secondYDomain = y2props.scale.domain();
            y1props.values && y1props.values.length > 0 && y2props.values && y2props.values.length > 0 && (noMerge.tickCount = Math.max(y1props.values.length, y2props.values.length));
            var min = Math.min(firstYDomain[0], secondYDomain[0]), max = Math.max(firstYDomain[1], secondYDomain[1]);
            if (visualOptions.forceMerge) return {
                domain: [ min, max ],
                merged: !0,
                tickCount: noMerge.tickCount
            };
            if (firstYDomain[0] > secondYDomain[1] || firstYDomain[1] < secondYDomain[0]) return noMerge;
            var range = max - min;
            if (0 === range) return noMerge;
            var maxOfMin = Math.max(firstYDomain[0], secondYDomain[0]), minOfMax = Math.min(firstYDomain[1], secondYDomain[1]), overlapRatio = Math.abs((minOfMax - maxOfMin) / range);
            return overlapRatio < COMBOCHART_DOMAIN_OVERLAP_TRESHOLD_PERCENTAGE ? noMerge : {
                domain: [ min, max ],
                merged: !0,
                tickCount: noMerge.tickCount
            };
        }
        function getPositiveAndNegativeDomainRatios(domain) {
            return {
                pos: (domain[1] - 0) / (domain[1] - domain[0]),
                neg: (0 - domain[0]) / (domain[1] - domain[0])
            };
        }
        function alignZeros(domain1, domain2, bufferMultiplier) {
            var d1Out = domain1.slice(), d2Out = domain2.slice();
            if (bufferMultiplier) {
                var d1Range = domain1[1] - domain1[0], d2Range = domain2[1] - domain2[0];
                d1Out[0] = d1Out[0] - d1Range * bufferMultiplier, d1Out[1] = d1Out[1] + d1Range * bufferMultiplier, 
                d2Out[0] = d2Out[0] - d2Range * bufferMultiplier, d2Out[1] = d2Out[1] + d2Range * bufferMultiplier;
            }
            if (domain1[0] >= 0 && domain2[0] >= 0) d1Out[0] = 0, d2Out[0] = 0; else if (domain1[1] <= 0 && domain2[1] <= 0) d1Out[1] = 0, 
            d2Out[1] = 0; else {
                var d1Ratios = getPositiveAndNegativeDomainRatios(d1Out), d2Ratios = getPositiveAndNegativeDomainRatios(d2Out);
                if (d1Ratios.pos < d1Ratios.neg && d2Ratios.pos < d2Ratios.neg) d1Ratios.pos < d2Ratios.pos ? d1Out[1] = -(d2Ratios.pos * d1Out[0]) / (1 - d2Ratios.pos) : d2Out[1] = -(d1Ratios.pos * d2Out[0]) / (1 - d1Ratios.pos); else if (d1Ratios.pos > d1Ratios.neg && d2Ratios.pos > d2Ratios.neg) d1Ratios.neg < d2Ratios.neg ? d1Out[0] = -(d2Ratios.neg * d1Out[1]) / (1 - d2Ratios.neg) : d2Out[0] = -(d1Ratios.neg * d2Out[1]) / (1 - d1Ratios.neg); else {
                    var d1AbsMax = Math.max(Math.abs(d1Out[0]), Math.abs(d1Out[1])), d2AbsMax = Math.max(Math.abs(d2Out[0]), Math.abs(d2Out[1]));
                    d1Out = [ -d1AbsMax, d1AbsMax ], d2Out = [ -d2AbsMax, d2AbsMax ];
                }
            }
            return [ d1Out, d2Out ];
        }
        var AxesData = visuals.AxisDataModel.AxesData, FontSize = visuals.Units.FontSize, createClassAndSelector = jsCommon.CssConstants.createClassAndSelector, COMBOCHART_DOMAIN_OVERLAP_TRESHOLD_PERCENTAGE = .1, COMBOCHART_ALIGN_ZERO_DOMAIN_EXTENT_BUFFER = .05, SvgCartesianAxes = (function() {
            function SvgCartesianAxes(axes) {
                this.axes = axes, this.axesData = AxesData.createDefault();
            }
            return SvgCartesianAxes.prototype.getScrollableRegion = function() {
                return this.axisGraphicsContextScrollable;
            }, SvgCartesianAxes.prototype.getLabelsRegion = function() {
                return this.labelRegion;
            }, SvgCartesianAxes.prototype.getLabelBackground = function() {
                return this.labelBackgroundRegion;
            }, SvgCartesianAxes.prototype.update = function(axesData) {
                this.axesData = axesData;
            }, SvgCartesianAxes.prototype.init = function(svg) {
                var axisGraphicsContext = this.axisGraphicsContext = svg.append("g").classed(SvgCartesianAxes.AxisGraphicsContext.class, !0);
                this.svgScrollable = svg.append("svg").classed("svgScrollable", !0).style("overflow", "hidden");
                var axisGraphicsContextScrollable = this.axisGraphicsContextScrollable = this.svgScrollable.append("g").classed(SvgCartesianAxes.AxisGraphicsContext.class, !0);
                this.labelBackgroundRegion = this.svgScrollable.append("g").classed(visuals.LabelUtils.labelBackgroundGraphicsContextClass.class, !0), 
                this.labelRegion = this.svgScrollable.append("g").classed(visuals.LabelUtils.labelGraphicsContextClass.class, !0);
                var scrollY = this.axes.isYAxisCategorical;
                scrollY ? (this.y1AxisGraphicsContext = axisGraphicsContextScrollable.append("g").attr("class", "y axis"), 
                this.y2AxisGraphicsContext = axisGraphicsContextScrollable.append("g").attr("class", "y axis"), 
                this.xAxisGraphicsContext = axisGraphicsContext.append("g").attr("class", "x axis")) : (this.y1AxisGraphicsContext = axisGraphicsContext.append("g").attr("class", "y axis"), 
                this.y2AxisGraphicsContext = axisGraphicsContext.append("g").attr("class", "y axis"), 
                this.xAxisGraphicsContext = axisGraphicsContextScrollable.append("g").attr("class", "x axis"));
            }, SvgCartesianAxes.updateTickTooltips = function(axisSelection, axisProps) {
                var tickValues = axisProps.axis.tickValues(), tickFormatter = SvgCartesianAxes.getTickFormatter(axisProps.axis);
                axisSelection.selectAll("text").each((function(datum) {
                    var textElement = d3.select(this), tickIndex = tickValues.indexOf(datum);
                    tickIndex < 0 || textElement.append("title").text(tickFormatter(datum));
                }));
            }, SvgCartesianAxes.getTickFormatter = function(axis) {
                return axis.tickFormat() || SvgCartesianAxes.defaultTickFormat;
            }, SvgCartesianAxes.defaultTickFormat = function(datum) {
                return "" + datum;
            }, SvgCartesianAxes.prototype.renderXAxis = function(renderProperties) {
                var xAxisGraphicsElement = renderProperties.graphicsElement, axesLayout = renderProperties.layout, fontProperties = renderProperties.fontProperties, axisProps = renderProperties.axisProps, duration = renderProperties.duration, easing = renderProperties.easing, xLabelColor = renderProperties.labelColor, isStacked = renderProperties.isStacked, height = renderProperties.height, gridlineOptions = renderProperties.gridlineOptions, margin = axesLayout.margin, shouldAnimate = !!duration && renderProperties.animate;
                if (axisProps.axis.orient("bottom"), !axisProps.willLabelsFit && visuals.AxisHelper.isOrdinalScale(axisProps.scale) && axisProps.axis.tickPadding(SvgCartesianAxes.TickPaddingRotatedX), 
                shouldAnimate ? xAxisGraphicsElement.transition().duration(duration).ease(easing).call(axisProps.axis) : xAxisGraphicsElement.call(axisProps.axis), 
                xAxisGraphicsElement.call(SvgCartesianAxes.darkenZeroLine, !visuals.AxisHelper.isOrdinalScale(axisProps.axis.scale())).call(SvgCartesianAxes.setAxisLabelColor, xLabelColor).call(SvgCartesianAxes.styleGridlines, gridlineOptions), 
                isStacked) {
                    var stackedAxisProps = axisProps;
                    SvgCartesianAxes.removeUnwantedLines(xAxisGraphicsElement, stackedAxisProps), _.isEmpty(axisProps.xLabelMaxWidths) ? xAxisGraphicsElement.selectAll("g.tick").selectAll("line").remove() : (SvgCartesianAxes.centerHierarchyTicks(xAxisGraphicsElement, stackedAxisProps), 
                    SvgCartesianAxes.styleHierarchyTicks(xAxisGraphicsElement, stackedAxisProps, gridlineOptions));
                }
                var xAxisTextNodes = xAxisGraphicsElement.selectAll("text"), axisTextProperties = visuals.FontProperties.toTextProperties(fontProperties);
                xAxisTextNodes.style(visuals.FontProperties.toSVGStyle(fontProperties)), axisProps.willLabelsWordBreak ? xAxisTextNodes.call(visuals.AxisHelper.LabelLayoutStrategy.wordBreak, axisProps, height) : xAxisTextNodes.call(visuals.AxisHelper.LabelLayoutStrategy.rotate, {
                    textTruncator: powerbi.TextMeasurementService.getTailoredTextOrDefault,
                    textProperties: axisTextProperties,
                    needRotate: !axisProps.willLabelsFit && visuals.AxisHelper.isOrdinalScale(axisProps.scale),
                    needEllipsis: !0,
                    axisProperties: axisProps,
                    margin: margin,
                    scrollbarVisible: axesLayout.isXScrollBarVisible || axesLayout.isYScrollBarVisible || !axisProps.willLabelsFit && !!isStacked,
                    firstVisibleNode: renderProperties.firstVisibleNode,
                    rotationPadding: visuals.CartesianHelper.TickLabelPadding,
                    height: height
                }), SvgCartesianAxes.updateTickTooltips(xAxisGraphicsElement, axisProps);
            }, SvgCartesianAxes.prototype.renderHierarchicalAxis = function(xAxisGraphicsElement, axesLayout, duration, fontProperties, easing, labelColor, animate, gridlineOptions) {
                var axes = axesLayout.axes, tickLabelMargins = axesLayout.tickLabelMargins;
                this.axisGraphicsContextScrollable.selectAll(".x.axis > .tick").remove();
                var contextLevels = xAxisGraphicsElement.selectAll(".stack").data(axes.xStack);
                contextLevels.enter().append("g").classed({
                    showLinesOnAxis: gridlineOptions.show,
                    hideLinesOnAxis: !gridlineOptions.show,
                    stack: !0
                }), contextLevels.exit().remove();
                var xStackLength = axes.xStack.length, leafHeight = CartesianAxes.getLeafHeight(tickLabelMargins.xMax, tickLabelMargins.stackHeight, xStackLength), defaultOrSmaller = fontProperties.size.px <= visuals.CartesianHelper.DefaultAxisFontSizeInPx, renderLeafHeight = defaultOrSmaller ? axesLayout.marginLimits.bottom : leafHeight, cartesianAxes = this;
                contextLevels.each((function(axisProps, stackLevel) {
                    var transformY = 0, isLeaf = 0 === stackLevel;
                    isLeaf || (transformY = leafHeight + (stackLevel - 1) * tickLabelMargins.stackHeight);
                    var childAxisElement = d3.select(this);
                    childAxisElement.attr("transform", visuals.SVGUtil.translate(0, transformY));
                    var nodeDepth = xStackLength - stackLevel, firstVisibleIndex = axisProps.scale.domain()[0], firstVisibleNode = visuals.HierarchyNodeHelpers.getNodeAtCategoryIndexForDepth(axisProps.rootNode, firstVisibleIndex, nodeDepth), renderXAxisProperties = {
                        graphicsElement: childAxisElement,
                        axisProps: axisProps,
                        layout: axesLayout,
                        labelColor: labelColor,
                        duration: duration,
                        easing: easing,
                        fontProperties: fontProperties,
                        isStacked: !0,
                        firstVisibleNode: firstVisibleNode,
                        height: isLeaf ? renderLeafHeight : tickLabelMargins.stackHeight,
                        animate: animate,
                        gridlineOptions: gridlineOptions
                    };
                    cartesianAxes.renderXAxis(renderXAxisProperties);
                }));
            }, SvgCartesianAxes.prototype.removeHierarchicalAxis = function(xAxisGraphicsElement) {
                xAxisGraphicsElement.selectAll(".stack").remove();
            }, SvgCartesianAxes.prototype.renderYAxis = function(axesLayout, duration, fontProperties, easing, yLabelColor, animate, gridlineOptions) {
                var marginLimits = axesLayout.marginLimits, plotArea = axesLayout.plotArea, axes = axesLayout.axes, tickLabelMargins = axesLayout.tickLabelMargins, leftRightMarginLimit = marginLimits.left, showY1OnRight = this.axes.shouldShowY1OnRight(), shouldAnimate = !!duration && animate, y1TickPadding = showY1OnRight ? axesLayout.tickPadding.right : axesLayout.tickPadding.left;
                axes.y1.axis.tickSize(-plotArea.width).tickPadding(y1TickPadding).orient(this.axes.getYAxisOrientation().toLowerCase());
                var y1AxisGraphicsElement = this.y1AxisGraphicsContext;
                shouldAnimate ? y1AxisGraphicsElement.transition().duration(duration).ease(easing).call(axes.y1.axis) : y1AxisGraphicsElement.call(axes.y1.axis), 
                y1AxisGraphicsElement.style(visuals.FontProperties.toSVGStyle(fontProperties)).call(SvgCartesianAxes.darkenZeroLine, !visuals.AxisHelper.isOrdinalScale(axes.y1.axis.scale())).call(SvgCartesianAxes.setAxisLabelColor, yLabelColor).call(SvgCartesianAxes.styleGridlines, gridlineOptions);
                var y1AxisTextNodes = y1AxisGraphicsElement.selectAll("text"), shouldClip = showY1OnRight ? tickLabelMargins.yRight >= leftRightMarginLimit : tickLabelMargins.yLeft >= leftRightMarginLimit;
                shouldClip && y1AxisTextNodes.call(visuals.AxisHelper.LabelLayoutStrategy.clip, leftRightMarginLimit - y1TickPadding, powerbi.TextMeasurementService.svgEllipsis), 
                SvgCartesianAxes.updateTickTooltips(y1AxisGraphicsElement, axes.y1);
            }, SvgCartesianAxes.prototype.removeYAxis = function() {
                this.y1AxisGraphicsContext.selectAll("*").remove();
            }, SvgCartesianAxes.prototype.renderY2Axis = function(axesLayout, duration, fontProperties, easing, y2LabelColor, animate, gridlineOptions) {
                var marginLimits = axesLayout.marginLimits, axes = axesLayout.axes, tickLabelMargins = axesLayout.tickLabelMargins, leftRightMarginLimit = marginLimits.left, showY1OnRight = this.axes.shouldShowY1OnRight(), y2TickPadding = showY1OnRight ? axesLayout.tickPadding.left : axesLayout.tickPadding.right;
                axes.y2.axis.tickSize(SvgCartesianAxes.Y2TickSize).tickPadding(y2TickPadding).orient(showY1OnRight ? visuals.yAxisPosition.left.toLowerCase() : visuals.yAxisPosition.right.toLowerCase());
                var y2AxisGraphicsElement = this.y2AxisGraphicsContext, shouldAnimate = !!duration && animate;
                shouldAnimate ? y2AxisGraphicsElement.transition().duration(duration).ease(easing).call(axes.y2.axis) : y2AxisGraphicsElement.call(axes.y2.axis), 
                y2AxisGraphicsElement.style(visuals.FontProperties.toSVGStyle(fontProperties)).call(SvgCartesianAxes.darkenZeroLine, !visuals.AxisHelper.isOrdinalScale(axes.y2.axis.scale())).call(SvgCartesianAxes.setAxisLabelColor, y2LabelColor).call(SvgCartesianAxes.styleGridlines, gridlineOptions);
                var shouldClip = showY1OnRight ? tickLabelMargins.yLeft >= leftRightMarginLimit : tickLabelMargins.yRight >= leftRightMarginLimit;
                shouldClip && y2AxisGraphicsElement.selectAll("text").call(visuals.AxisHelper.LabelLayoutStrategy.clip, leftRightMarginLimit - y2TickPadding, powerbi.TextMeasurementService.svgEllipsis), 
                SvgCartesianAxes.updateTickTooltips(y2AxisGraphicsElement, axes.y2);
            }, SvgCartesianAxes.prototype.removeY2Axis = function() {
                this.y2AxisGraphicsContext.selectAll("*").remove();
            }, SvgCartesianAxes.prototype.renderAxes = function(arg1, duration, axisFontSize, easing) {
                void 0 === easing && (easing = "cubic-in-out");
                var axesLayout, axesFontProperties, options = arg1, animateCategoryAxis = !1, animateValueAxis = !1;
                options.axesLayout ? (axesLayout = options.axesLayout, duration = options.duration, 
                axesFontProperties = options.axesFontProperties, animateCategoryAxis = options.animateCategoryAxis, 
                animateValueAxis = options.animateValueAxis, easing = options.easing || easing) : (axesLayout = arg1, 
                axisFontSize && (axesFontProperties = {
                    x: {
                        tickLabels: {
                            family: visuals.CartesianHelper.AxisFontFamily,
                            size: FontSize.createFromPx(axisFontSize.x)
                        },
                        title: {
                            family: visuals.CartesianHelper.AxisFontFamily,
                            size: FontSize.createFromPx(axisFontSize.xTitle)
                        }
                    },
                    y: {
                        tickLabels: {
                            family: visuals.CartesianHelper.AxisFontFamily,
                            size: FontSize.createFromPx(axisFontSize.y)
                        },
                        title: {
                            family: visuals.CartesianHelper.AxisFontFamily,
                            size: FontSize.createFromPx(axisFontSize.yTitle)
                        }
                    },
                    y2: {
                        tickLabels: {
                            family: visuals.CartesianHelper.AxisFontFamily,
                            size: FontSize.createFromPx(axisFontSize.y2)
                        },
                        title: {
                            family: visuals.CartesianHelper.AxisFontFamily,
                            size: FontSize.createFromPx(axisFontSize.y2Title)
                        }
                    }
                }));
                var xLabelColor, yLabelColor, y2LabelColor, viewport = axesLayout.viewport, margin = axesLayout.margin, axes = axesLayout.axes, axisLabels = axesLayout.axisLabels, hideXAxisTitle = null == axisLabels.x, xAxisData = this.axesData && this.axesData.x, yAxisData = this.axesData && this.axesData.y, y2AxisData = this.axesData && this.axesData.y2;
                if (axesLayout.shouldRenderAxis.x) {
                    xLabelColor = visuals.AxisDataModel.toColorFill(xAxisData.labelFontProperties.color);
                    var gridlineOptions = {
                        show: xAxisData.gridlineShow,
                        color: visuals.AxisDataModel.toColorFill(xAxisData.gridlineColor),
                        thickness: xAxisData.gridlineThickness,
                        style: xAxisData.gridlineStyle
                    }, xAxisGraphicsElement = this.xAxisGraphicsContext;
                    if (_.isEmpty(axes.xStack)) {
                        this.removeHierarchicalAxis(xAxisGraphicsElement);
                        var defaultOrSmaller = axesFontProperties.x.tickLabels.size.px <= visuals.CartesianHelper.DefaultAxisFontSizeInPx, height = defaultOrSmaller ? axesLayout.marginLimits.bottom : margin.bottom;
                        if (!defaultOrSmaller && !hideXAxisTitle) {
                            var axisTitleHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(visuals.FontProperties.toTextProperties(axesFontProperties.x.tickLabels)), xTitleReservedSpace = axisTitleHeight + CartesianAxes.XAxisLabelPadding;
                            height -= xTitleReservedSpace;
                        }
                        var isCategoryAxis = axes.x.isCategoryAxis, animate = animateCategoryAxis && isCategoryAxis || animateValueAxis && !isCategoryAxis, renderXAxisProperties = {
                            graphicsElement: xAxisGraphicsElement,
                            axisProps: axes.x,
                            layout: axesLayout,
                            labelColor: xLabelColor,
                            duration: duration,
                            easing: easing,
                            fontProperties: axesFontProperties.x.tickLabels,
                            isStacked: !1,
                            height: height,
                            animate: animate,
                            gridlineOptions: gridlineOptions
                        };
                        this.renderXAxis(renderXAxisProperties);
                    } else this.renderHierarchicalAxis(xAxisGraphicsElement, axesLayout, duration, axesFontProperties.x.tickLabels, easing, xLabelColor, animateCategoryAxis, gridlineOptions);
                } else this.xAxisGraphicsContext.selectAll("*").remove();
                if (axesLayout.shouldRenderAxis.y) {
                    yLabelColor = visuals.AxisDataModel.toColorFill(yAxisData.labelFontProperties.color);
                    var gridlineOptions = {
                        show: yAxisData.gridlineShow,
                        color: visuals.AxisDataModel.toColorFill(yAxisData.gridlineColor),
                        thickness: yAxisData.gridlineThickness,
                        style: yAxisData.gridlineStyle
                    }, y1IsCategoryAxis = axes.y1.isCategoryAxis, animateY1 = animateCategoryAxis && y1IsCategoryAxis || animateValueAxis && !y1IsCategoryAxis;
                    if (this.renderYAxis(axesLayout, duration, axesFontProperties.y.tickLabels, easing, yLabelColor, animateY1, gridlineOptions), 
                    axes.y2 && y2AxisData.show !== !1) {
                        y2LabelColor = visuals.AxisDataModel.toColorFill(y2AxisData.labelFontProperties.color);
                        var y2IsCategoryAxis = axes.y2.isCategoryAxis, animateY2 = animateCategoryAxis && y2IsCategoryAxis || animateValueAxis && !y2IsCategoryAxis;
                        this.renderY2Axis(axesLayout, duration, axesFontProperties.y2.tickLabels, easing, y2LabelColor, animateY2, gridlineOptions);
                    } else this.removeY2Axis();
                } else this.removeYAxis(), this.removeY2Axis();
                var chartHasAxisLabels = null != axisLabels.x || null != axisLabels.y || null != axisLabels.y2;
                if (chartHasAxisLabels) {
                    var hideYAxisTitle = null == axisLabels.y, hideY2AxisTitle = null == axisLabels.y2, xTitleColor = void 0, yTitleColor = void 0, y2TitleColor = void 0;
                    xTitleColor = visuals.AxisDataModel.toColorFill(xAxisData.titleFontProperties.color), 
                    yTitleColor = visuals.AxisDataModel.toColorFill(yAxisData.titleFontProperties.color), 
                    y2TitleColor = visuals.AxisDataModel.toColorFill(y2AxisData.titleFontProperties.color);
                    var renderAxisOptions = {
                        axisLabels: axisLabels,
                        viewport: viewport,
                        margin: margin,
                        hideXAxisTitle: hideXAxisTitle,
                        hideYAxisTitle: hideYAxisTitle,
                        hideY2AxisTitle: hideY2AxisTitle,
                        xLabelColor: xTitleColor,
                        yLabelColor: yTitleColor,
                        y2LabelColor: y2TitleColor,
                        axesFontProperties: axesFontProperties
                    };
                    this.renderAxesTitles(renderAxisOptions);
                } else this.axisGraphicsContext.selectAll(".xAxisLabel").remove(), this.axisGraphicsContext.selectAll(".yAxisLabel").remove();
                this.translateAxes(axesLayout);
            }, SvgCartesianAxes.prototype.renderAxesTitles = function(options) {
                this.axisGraphicsContext.selectAll(".xAxisLabel").remove(), this.axisGraphicsContext.selectAll(".yAxisLabel").remove();
                var margin = options.margin, plotAreaWidth = options.viewport.width - (margin.left + margin.right), viewportBottom = options.viewport.height - margin.top, showOnRight = this.axes.shouldShowY1OnRight(), axesFontProperties = options.axesFontProperties, axisLabels = options.axisLabels;
                if (!options.hideXAxisTitle) {
                    var titleFontProperties = axesFontProperties.x.title, titleText = axisLabels.x, axisTextProperties = visuals.FontProperties.toTextProperties(titleFontProperties, titleText), baselineDelta_1 = powerbi.TextMeasurementService.estimateSvgTextBaselineDelta(axisTextProperties), xAxisLabel = this.axisGraphicsContext.append("text").style("text-anchor", "middle").style(visuals.FontProperties.toSVGStyle(titleFontProperties)).text(titleText).call((function(text) {
                        text.each((function() {
                            var text = d3.select(this);
                            text.attr({
                                class: "xAxisLabel",
                                transform: visuals.SVGUtil.translate(plotAreaWidth / 2, viewportBottom - CartesianAxes.XAxisLabelPadding - baselineDelta_1)
                            });
                        }));
                    }));
                    xAxisLabel.style("fill", options.xLabelColor ? options.xLabelColor.solid.color : null), 
                    xAxisLabel.call(visuals.AxisHelper.LabelLayoutStrategy.clip, plotAreaWidth, powerbi.TextMeasurementService.svgEllipsis).call(visuals.tooltipUtils.tooltipUpdate, [ options.axisLabels.x ]);
                }
                if (!options.hideYAxisTitle) {
                    var titleFontProperties = axesFontProperties.y.title, titleText = axisLabels.y, axisTextProperties = visuals.FontProperties.toTextProperties(titleFontProperties, titleText), textHeight_1 = powerbi.TextMeasurementService.estimateSvgTextHeight(axisTextProperties), yAxisLabel = this.axisGraphicsContext.append("text").style("text-anchor", "middle").style(visuals.FontProperties.toSVGStyle(titleFontProperties)).text(titleText).call((function(text) {
                        text.each((function() {
                            var text = d3.select(this);
                            text.attr({
                                class: "yAxisLabel",
                                transform: "rotate(-90)",
                                y: showOnRight ? plotAreaWidth + margin.right - textHeight_1 - CartesianAxes.YAxisLabelPadding : -margin.left + CartesianAxes.YAxisLabelPadding,
                                x: -((viewportBottom - margin.bottom) / 2),
                                dy: "1em"
                            });
                        }));
                    }));
                    yAxisLabel.style("fill", options.yLabelColor ? options.yLabelColor.solid.color : null), 
                    yAxisLabel.call(visuals.AxisHelper.LabelLayoutStrategy.clip, viewportBottom - margin.bottom, powerbi.TextMeasurementService.svgEllipsis).call(visuals.tooltipUtils.tooltipUpdate, [ options.axisLabels.y ]);
                }
                if (!options.hideY2AxisTitle && options.axisLabels.y2) {
                    var titleFontProperties = axesFontProperties.y2.title, titleText = axisLabels.y2, axisTextProperties = visuals.FontProperties.toTextProperties(titleFontProperties, titleText), textHeight_2 = powerbi.TextMeasurementService.estimateSvgTextHeight(axisTextProperties), y2AxisLabel = this.axisGraphicsContext.append("text").style("text-anchor", "middle").style(visuals.FontProperties.toSVGStyle(titleFontProperties)).text(titleText).call((function(text) {
                        text.each((function() {
                            var text = d3.select(this);
                            text.attr({
                                class: "yAxisLabel",
                                transform: "rotate(-90)",
                                y: showOnRight ? -margin.left + CartesianAxes.YAxisLabelPadding : plotAreaWidth + margin.right - textHeight_2 - CartesianAxes.YAxisLabelPadding,
                                x: -((viewportBottom - margin.bottom) / 2),
                                dy: "1em"
                            });
                        }));
                    }));
                    y2AxisLabel.style("fill", options.y2LabelColor ? options.y2LabelColor.solid.color : null), 
                    y2AxisLabel.call(visuals.AxisHelper.LabelLayoutStrategy.clip, viewportBottom - margin.bottom, powerbi.TextMeasurementService.svgEllipsis).call(visuals.tooltipUtils.tooltipUpdate, [ options.axisLabels.y2 ]);
                }
            }, SvgCartesianAxes.prototype.translateAxes = function(axesLayout) {
                var viewport = axesLayout.viewport, margin = axesLayout.margin, width = viewport.width - (margin.left + margin.right), height = viewport.height - (margin.top + margin.bottom), showY1OnRight = this.axes.shouldShowY1OnRight();
                this.xAxisGraphicsContext.attr("transform", visuals.SVGUtil.translate(0, height)), 
                this.y1AxisGraphicsContext.attr("transform", visuals.SVGUtil.translate(showY1OnRight ? width : 0, 0)), 
                this.y2AxisGraphicsContext.attr("transform", visuals.SVGUtil.translate(showY1OnRight ? 0 : width, 0)), 
                this.svgScrollable.attr({
                    x: 0,
                    width: viewport.width,
                    height: viewport.height
                }), this.axisGraphicsContext.attr("transform", visuals.SVGUtil.translate(margin.left, margin.top)), 
                this.axisGraphicsContextScrollable.attr("transform", visuals.SVGUtil.translate(margin.left, margin.top)), 
                this.labelRegion.attr("transform", visuals.SVGUtil.translate(margin.left, margin.top)), 
                this.labelBackgroundRegion.attr("transform", visuals.SVGUtil.translate(margin.left, margin.top)), 
                axesLayout.isXScrollBarVisible ? (this.svgScrollable.attr({
                    x: margin.left
                }), this.axisGraphicsContextScrollable.attr("transform", visuals.SVGUtil.translate(0, margin.top)), 
                this.labelRegion.attr("transform", visuals.SVGUtil.translate(0, margin.top)), this.labelBackgroundRegion.attr("transform", visuals.SVGUtil.translate(0, margin.top)), 
                this.svgScrollable.attr("width", width)) : axesLayout.isYScrollBarVisible && this.svgScrollable.attr("height", height + margin.top);
            }, SvgCartesianAxes.darkenZeroLine = function(g, canDarken) {
                if (g.selectAll("g.tick line").classed("zero-line", !1), canDarken) {
                    var zeroTick = g.selectAll("g.tick").filter((function(data) {
                        return 0 === data;
                    })).node();
                    zeroTick && d3.select(zeroTick).select("line").classed("zero-line", !0);
                }
            }, SvgCartesianAxes.styleGridlines = function(g, gridlineOptions) {
                g.classed({
                    showLinesOnAxis: gridlineOptions.show,
                    hideLinesOnAxis: !gridlineOptions.show
                }), g.selectAll("g.tick line").style({
                    stroke: gridlineOptions.color.solid.color,
                    "stroke-width": gridlineOptions.thickness,
                    "stroke-dasharray": visuals.LineStyle.getStrokeDashArrayFromLineStyle(gridlineOptions.style)
                });
            }, SvgCartesianAxes.setAxisLabelColor = function(g, fill) {
                g.selectAll("g.tick text").style("fill", fill ? fill.solid.color : null);
            }, SvgCartesianAxes.removeUnwantedLines = function(g, axisProps) {
                g.selectAll("g.tick").filter((function(d) {
                    return axisProps.adjustedValues[d] === CartesianAxes.hierarchyPlaceholder;
                })).selectAll("line").remove();
            }, SvgCartesianAxes.centerHierarchyTicks = function(g, axisProps) {
                g.selectAll("g.tick").filter((function(d) {
                    return axisProps.adjustedValues[d] !== CartesianAxes.hierarchyPlaceholder;
                })).each((function(datum) {
                    var tick = d3.select(this), currentTransform = tick.attr("transform"), parsedTranslate = visuals.SVGUtil.parseTranslateTransform(currentTransform);
                    if (parsedTranslate && +parsedTranslate.x > 0) {
                        var xAdjustment = +parsedTranslate.x + axisProps.xLabelMaxWidths[datum] / 2 - axisProps.categoryThickness / 2 + visuals.CartesianHelper.TickLabelPadding;
                        tick.attr("transform", visuals.SVGUtil.translate(xAdjustment, +parsedTranslate.y));
                    }
                }));
            }, SvgCartesianAxes.styleHierarchyTicks = function(g, axisProps, gridlineOptions) {
                var lines = g.selectAll("g.tick").filter((function(d) {
                    return axisProps.adjustedValues[d] !== CartesianAxes.hierarchyPlaceholder;
                })).selectAll("line").data((function(d) {
                    return axisProps.lineStyleInfo[d];
                }));
                lines.enter().append("line"), lines.attr("x1", (function(line) {
                    return line.x1;
                })).attr("y1", (function(line) {
                    return line.y1;
                })).attr("x2", (function(line) {
                    return line.x2;
                })).attr("y2", (function(line) {
                    return line.y2;
                })).style({
                    stroke: gridlineOptions.color.solid.color,
                    "stroke-width": gridlineOptions.thickness,
                    "stroke-dasharray": visuals.LineStyle.getStrokeDashArrayFromLineStyle(gridlineOptions.style)
                }), lines.exit().remove();
            }, SvgCartesianAxes.AxisPadding = {
                left: 10,
                right: 10,
                top: 0,
                bottom: 13
            }, SvgCartesianAxes.AxisGraphicsContext = createClassAndSelector("axisGraphicsContext"), 
            SvgCartesianAxes.TickPaddingRotatedX = 5, SvgCartesianAxes.Y2TickSize = -6, SvgCartesianAxes;
        })();
        visuals.SvgCartesianAxes = SvgCartesianAxes;
        var CartesianAxes = (function() {
            function CartesianAxes(isScrollable, scrollbarWidth, trimOrdinalDataOnOverflow) {
                this.scrollbarWidth = scrollbarWidth, this.isScrollable = isScrollable, this.maxMarginFactor = CartesianAxes.MaxMarginFactor, 
                this.trimOrdinalDataOnOverflow = trimOrdinalDataOnOverflow, this.axesData = AxesData.createDefault();
            }
            return CartesianAxes.prototype.init = function(options) {
                this.isYAxisCategorical = options.isYAxisCategorical, null != options.maxMarginFactor && (this.maxMarginFactor = options.maxMarginFactor);
            }, CartesianAxes.prototype.shouldShowY1OnRight = function() {
                return this.axesData.y.position === visuals.yAxisPosition.right;
            }, CartesianAxes.prototype.hasCategoryAxis = function() {
                var axes = this.layout && this.layout.axes;
                return !!axes && (this.isYAxisCategorical ? axes.y1 && null != axes.y1.axis : axes.x && null != axes.x.axis);
            }, CartesianAxes.prototype.isCategoryAxisDateTime = function() {
                var axes = this.layout && this.layout.axes;
                if (!axes) return !1;
                var categoryAxis = this.isYAxisCategorical ? axes.y1 : axes.x;
                return categoryAxis.axisType.dateTime;
            }, CartesianAxes.getLeafHeight = function(availableSpace, stackHeight, numStacks) {
                return availableSpace - stackHeight * (numStacks - 1) + visuals.AxisHelper.stackedAxisPadding + 1;
            }, CartesianAxes.prototype.hasY2Axis = function() {
                return this.layout && null != this.layout.axes.y2;
            }, CartesianAxes.prototype.getYAxisOrientation = function() {
                return this.axesData.y.position;
            }, CartesianAxes.prototype.update = function(categories, axesData, categoricalAxisRenderMode, scrollbarWidth) {
                this.categories = categories, this.axesData = axesData, this.updateScrollbarWidthIfNeeded(scrollbarWidth), 
                this.isHierarchicalCategoryAxis = 3 === categoricalAxisRenderMode;
            }, CartesianAxes.prototype.updateResize = function(axesData, scrollbarWidth) {
                this.axesData = axesData, this.updateScrollbarWidthIfNeeded(scrollbarWidth);
            }, CartesianAxes.prototype.addWarnings = function(warningBuilder) {
                var axes = this.layout && this.layout.axes;
                if (axes && (axes.x && axes.x.hasDisallowedZeroInDomain || axes.y1 && axes.y1.hasDisallowedZeroInDomain || axes.y2 && axes.y2.hasDisallowedZeroInDomain) && warningBuilder.add(new visuals.ZeroValueWarning()), 
                this.alignZerosWithCustomDomainWarning) {
                    var alignZeroObjectWarning = {
                        selector: null,
                        warnings: [ new visuals.AlignZerosWithCustomDomainWarning() ]
                    };
                    warningBuilder.addForVisualObject("valueAxis", alignZeroObjectWarning);
                }
            }, CartesianAxes.prototype.getScrollbarWidth = function() {
                return this.scrollbarWidth;
            }, CartesianAxes.prototype.updateScrollbarWidthIfNeeded = function(scrollbarWidth) {
                null != scrollbarWidth && (this.scrollbarWidth = scrollbarWidth);
            }, CartesianAxes.prototype.calculateAxes = function(layers, viewport, margin, playAxisControlLayout, axesFontProperties, scrollbarVisible, existingAxisProperties, showAxisTitles, ensureXDomain, ensureYDomain, tickLabelMargins, shouldRenderAxis) {
                var outerPaddingRatio = CartesianAxes.shouldRenderAnyAxis(shouldRenderAxis) ? visuals.CartesianHelper.DefaultOuterPaddingRatio : 0, innerPaddingRatio = layers[0].getInnerPaddingRatio ? layers[0].getInnerPaddingRatio() : visuals.DefaultInnerPaddingRatio, result = {
                    x: null,
                    y1: null
                }, forceMerge = this.axesData.isValueAxisSet && this.axesData.y2.show === !1, preventNiceBoth = !CartesianAxes.shouldRenderAnyAxis(shouldRenderAxis), layer1visualOptions = {
                    viewport: viewport,
                    margin: margin,
                    forcedXDomain: visuals.AxisHelper.applyCustomizedDomain([ this.axesData.categoryAxis.start, this.axesData.categoryAxis.end ], null),
                    forcedYDomain: this.axesData.isValueAxisSet ? visuals.AxisHelper.applyCustomizedDomain([ this.axesData.valueAxis.start, this.axesData.valueAxis.end ], null) : void 0,
                    forceMerge: forceMerge,
                    trimOrdinalDataOnOverflow: this.trimOrdinalDataOnOverflow,
                    outerPaddingRatio: outerPaddingRatio,
                    innerPaddingRatio: innerPaddingRatio,
                    categoryAxisScaleType: this.axesData.categoryAxis.axisScale,
                    valueAxisScaleType: this.axesData.valueAxis.axisScale,
                    categoryAxisDisplayUnits: this.axesData.categoryAxis.labelDisplayUnits,
                    valueAxisDisplayUnits: this.axesData.valueAxis.labelDisplayUnits,
                    categoryAxisPrecision: this.axesData.categoryAxis.labelPrecision,
                    valueAxisPrecision: this.axesData.valueAxis.labelPrecision,
                    playAxisControlLayout: playAxisControlLayout,
                    ensureXDomain: ensureXDomain,
                    ensureYDomain: ensureYDomain
                };
                layer1visualOptions.preventNiceX = preventNiceBoth || !_.isEmpty(layer1visualOptions.forcedXDomain);
                var showY2 = this.axesData.isValueAxisSet && this.axesData.y2.show, shouldAlignZeros = this.axesData.isValueAxisSet && this.axesData.y.alignZeros, skipMerge = !forceMerge && (showY2 === !0 || void 0 === showY2 && (shouldAlignZeros || layer1visualOptions.forcedYDomain)), yAxisWillMerge = !1;
                if (hasMultipleYAxes(layers) && !skipMerge) {
                    var mergeResult = tryMergeYDomains(layers, layer1visualOptions);
                    yAxisWillMerge = mergeResult.merged, yAxisWillMerge ? layer1visualOptions.forcedYDomain = visuals.AxisHelper.applyCustomizedDomain([ this.axesData.valueAxis.start, this.axesData.valueAxis.end ], mergeResult.domain) : layer1visualOptions.forcedTickCount = mergeResult.tickCount;
                }
                var y2AxisIsVisible = 2 === layers.length && !yAxisWillMerge && showY2 !== !1;
                shouldAlignZeros = shouldAlignZeros && y2AxisIsVisible;
                var layer2visualOptions = powerbi.Prototype.inherit(layer1visualOptions);
                if (y2AxisIsVisible) if (layer2visualOptions.valueAxisScaleType = this.axesData.y2.axisScale, 
                layer2visualOptions.valueAxisDisplayUnits = this.axesData.y2.labelDisplayUnits, 
                layer2visualOptions.valueAxisPrecision = this.axesData.y2.labelPrecision, shouldAlignZeros) {
                    var layer1domain = layers[0].getValueDomain(layer1visualOptions, !0);
                    layer2visualOptions.forcedYDomain = this.axesData.isValueAxisSet && visuals.AxisHelper.applyCustomizedDomain([ this.axesData.y2.start, this.axesData.y2.end ], null);
                    var layer2domain = layers[1].getValueDomain(layer2visualOptions, !0), alignedDomains = alignZeros(layer1domain, layer2domain, COMBOCHART_ALIGN_ZERO_DOMAIN_EXTENT_BUFFER);
                    result.alignZerosWithCustomDomainWarning = this.addStartEndWarnings([ layer1visualOptions.forcedYDomain, layer2visualOptions.forcedYDomain ], alignedDomains), 
                    result.alignZerosWithCustomDomainWarning || (layer1visualOptions.forcedYDomain = alignedDomains[0], 
                    layer2visualOptions.forcedYDomain = alignedDomains[1]);
                } else yAxisWillMerge || (layer2visualOptions.forcedYDomain = this.axesData.isValueAxisSet && visuals.AxisHelper.applyCustomizedDomain([ this.axesData.y2.start, this.axesData.y2.end ], null));
                layer1visualOptions.preventNiceY = preventNiceBoth || !_.isEmpty(layer1visualOptions.forcedYDomain), 
                layer2visualOptions.preventNiceY = preventNiceBoth || !_.isEmpty(layer2visualOptions.forcedYDomain);
                for (var visualOptionsArr = [ layer1visualOptions, layer2visualOptions ], layerNumber = 0, len = layers.length; layerNumber < len; layerNumber++) {
                    var currentlayer = layers[layerNumber], currentVisualOptions = visualOptionsArr[layerNumber], axes = currentlayer.calculateAxesProperties(currentVisualOptions);
                    0 === layerNumber ? (result.x = axes[0], result.y1 = axes[1]) : axes && !result.y2 && (result.x.usingDefaultDomain || _.isEmpty(result.x.dataDomain) ? (result.x = axes[0], 
                    result.y1 = axes[1]) : (currentlayer.overrideXScale(result.x), yAxisWillMerge || axes[1].usingDefaultDomain || _.isEmpty(axes[1].values) || (result.y2 = axes[1])));
                    var axisTextProperties = visuals.FontProperties.toTextProperties(axesFontProperties.x.tickLabels);
                    if (existingAxisProperties && existingAxisProperties.x) result.x.willLabelsFit = existingAxisProperties.x.willLabelsFit, 
                    result.x.willLabelsWordBreak = existingAxisProperties.x.willLabelsWordBreak; else {
                        var width = viewport.width - (margin.left + margin.right);
                        result.x.willLabelsFit = visuals.AxisHelper.LabelLayoutStrategy.willLabelsFit(result.x, width, powerbi.TextMeasurementService.measureSvgTextWidth, axisTextProperties), 
                        result.x.willLabelsWordBreak = !result.x.willLabelsFit && !scrollbarVisible && visuals.AxisHelper.LabelLayoutStrategy.willLabelsWordBreak(result.x, margin, width, powerbi.TextMeasurementService.measureSvgTextWidth, powerbi.TextMeasurementService.estimateSvgTextHeight, powerbi.TextMeasurementService.getTailoredTextOrDefault, axisTextProperties);
                    }
                    if (this.isHierarchicalCategoryAxis) {
                        var hierarchyAxisProperties = result.x;
                        hierarchyAxisProperties.isHierarchical = !0, hierarchyAxisProperties.rootNode = visuals.HierarchyNodeHelpers.Builder.build(this.categories), 
                        hierarchyAxisProperties.numLevels = this.categories.length, tickLabelMargins && (result.xStack = CartesianAxes.createStackedAxis(this.categories, result.x, tickLabelMargins.stackHeight, tickLabelMargins.xMax));
                    }
                }
                return this.overrideAxisTitles(result), !showAxisTitles.x && result.x && (result.x.axisLabel = null), 
                !showAxisTitles.y && result.y1 && (result.y1.axisLabel = null), !showAxisTitles.y2 && result.y2 && (result.y2.axisLabel = null), 
                this.addUnitTypeToAxisLabels(result), result;
            }, CartesianAxes.createStackedAxis = function(categories, axis, stackHeight, bottomMargin) {
                if (!_.isEmpty(categories)) {
                    for (var stackLength = categories.length, leafHeight = CartesianAxes.getLeafHeight(bottomMargin, stackHeight, stackLength), stack = [], singleCategoryWidth = visuals.AxisHelper.getCategoryThickness(axis.scale), levelIdentitySubsetExprs = [], _loop_7 = function(columnIndex) {
                        var isLeafLevel = columnIndex === stackLength - 1, levelIndex = stackLength - columnIndex - 1, levelCategory = categories[columnIndex];
                        isLeafLevel || levelIdentitySubsetExprs.push.apply(levelIdentitySubsetExprs, levelCategory.source.identityExprs);
                        for (var newValues = [], newValuesMaxWidth = [], lineStyleInfoArray = [], categorySpanCount = 0, lastValueLevelIdentity = void 0, levelCategoryValuesLength = levelCategory.values.length, valueIndex = 0; valueIndex < levelCategoryValuesLength; valueIndex++) {
                            var valueLevelIdentity = isLeafLevel ? levelCategory.identity[valueIndex] : CartesianAxes.getSpecificIdentityFromCompositeIdentity(levelCategory, valueIndex, levelIdentitySubsetExprs), levelValue = levelCategory.values[valueIndex], formattedLevelValue = visuals.converterHelper.formatFromMetadataColumn(levelValue, levelCategory.source, visuals.columnChartProps.general.formatString);
                            if (!isLeafLevel && lastValueLevelIdentity && powerbi.DataViewScopeIdentity.equals(lastValueLevelIdentity, valueLevelIdentity)) newValues[valueIndex] = CartesianAxes.hierarchyPlaceholder, 
                            categorySpanCount++; else {
                                if (categorySpanCount > 0 && !isLeafLevel) {
                                    var adjustedIndex = valueIndex - categorySpanCount;
                                    newValuesMaxWidth[adjustedIndex] = CartesianAxes.getMaxCategoryWidth(categorySpanCount, singleCategoryWidth), 
                                    lineStyleInfoArray[adjustedIndex] = CartesianAxes.getHierarchyLineStyleInfo({
                                        levelIndex: levelIndex,
                                        stackHeight: stackHeight,
                                        leafHeight: leafHeight,
                                        categorySpanCount: categorySpanCount,
                                        categoryWidth: singleCategoryWidth
                                    });
                                }
                                categorySpanCount = 1, newValues[valueIndex] = formattedLevelValue;
                            }
                            lastValueLevelIdentity = valueLevelIdentity;
                        }
                        if (categorySpanCount > 0 && !isLeafLevel) {
                            var adjustedIndex = levelCategoryValuesLength - categorySpanCount;
                            newValuesMaxWidth[adjustedIndex] = CartesianAxes.getMaxCategoryWidth(categorySpanCount, singleCategoryWidth), 
                            lineStyleInfoArray[adjustedIndex] = CartesianAxes.getHierarchyLineStyleInfo({
                                levelIndex: levelIndex,
                                stackHeight: stackHeight,
                                leafHeight: leafHeight,
                                categorySpanCount: categorySpanCount,
                                categoryWidth: singleCategoryWidth
                            });
                        }
                        var newAxisProps = powerbi.Prototype.inherit(axis);
                        newAxisProps.isStacked = !0, newAxisProps.adjustedValues = newValues, newAxisProps.axis = visuals.AxisHelper.createStackedAxis({
                            axis: newAxisProps.axis,
                            scale: newAxisProps.scale,
                            tickFormat: function(valueIndex) {
                                return newValues[valueIndex] !== CartesianAxes.hierarchyPlaceholder ? newValues[valueIndex] : null;
                            }
                        }), newAxisProps.categoryThickness = singleCategoryWidth, newAxisProps.levelIndex = levelIndex, 
                        newAxisProps.lineStyleInfo = lineStyleInfoArray, newAxisProps.values = newValues, 
                        newAxisProps.xLabelMaxWidths = newValuesMaxWidth, isLeafLevel ? newAxisProps.levelSize = leafHeight : (newAxisProps.levelSize = stackHeight, 
                        newAxisProps.willLabelsFit = !0, newAxisProps.willLabelsWordBreak = !1), stack.unshift(newAxisProps);
                    }, columnIndex = 0; columnIndex < stackLength; columnIndex++) _loop_7(columnIndex);
                    return stack;
                }
            }, CartesianAxes.shouldRenderAnyAxis = function(shouldRenderAxis) {
                return shouldRenderAxis && (shouldRenderAxis.x || shouldRenderAxis.y);
            }, CartesianAxes.getSpecificIdentityFromCompositeIdentity = function(column, valueIndex, groupIdentityFields) {
                var columnIdentities = column.identity, identity = columnIdentities[valueIndex], identitySubsetExpr = powerbi.data.ScopeIdentityExtractor.getSubset(identity.expr, groupIdentityFields), valueGroupIdentity = powerbi.data.createDataViewScopeIdentity(identitySubsetExpr);
                return valueGroupIdentity;
            }, CartesianAxes.getCategorySpanSize = function(categorySpanCount, categoryWidth) {
                return categorySpanCount * categoryWidth;
            }, CartesianAxes.getMaxCategoryWidth = function(categorySpanCount, categoryWidth) {
                var categorySpanSize = CartesianAxes.getCategorySpanSize(categorySpanCount, categoryWidth);
                return categorySpanSize - 2 * visuals.CartesianHelper.TickLabelPadding;
            }, CartesianAxes.getHierarchyLineStyleInfo = function(options) {
                var categorySpanSize = CartesianAxes.getCategorySpanSize(options.categorySpanCount, options.categoryWidth);
                return CartesianAxes.createHierarchyLineStyleInfo(options.levelIndex, options.stackHeight, options.leafHeight, categorySpanSize);
            }, CartesianAxes.createHierarchyLineStyleInfo = function(levelIndex, stackHeight, leafHeight, maxWidth) {
                if (0 !== levelIndex) {
                    var outInfo = [], lineStyleInfoLeft = {
                        x1: -maxWidth / 2,
                        y1: stackHeight,
                        x2: -maxWidth / 2,
                        y2: 1 === levelIndex ? -leafHeight : 0
                    }, lineStyleInfoRight = {
                        x1: maxWidth / 2,
                        y1: stackHeight,
                        x2: maxWidth / 2,
                        y2: 1 === levelIndex ? -leafHeight : 0
                    };
                    if (outInfo.push(lineStyleInfoLeft), outInfo.push(lineStyleInfoRight), levelIndex > 1) {
                        var lineStyleInfoTop = {
                            x1: -maxWidth / 2,
                            y1: 0,
                            x2: maxWidth / 2,
                            y2: 0
                        };
                        outInfo.push(lineStyleInfoTop);
                    }
                    return outInfo;
                }
            }, CartesianAxes.prototype.negotiateAxes = function(layers, parentViewport, padding, playAxisControlLayout, showAxisTitles, shouldRenderAxis, axesFontProperties, interactivityRightMargin, ensureXDomain, ensureYDomain) {
                var margin = powerbi.Prototype.inherit(CartesianAxes.MinimumMargin), viewport = powerbi.Prototype.inherit(parentViewport), leftRightMarginLimit = viewport.width * this.maxMarginFactor, bottomMarginLimit = Math.max(CartesianAxes.MinimumMargin.bottom, Math.ceil(viewport.height * this.maxMarginFactor)), marginLimits = {
                    left: leftRightMarginLimit,
                    right: leftRightMarginLimit,
                    top: 0,
                    bottom: bottomMarginLimit
                }, axes = this.calculateAxes(layers, viewport, margin, playAxisControlLayout, axesFontProperties, !1, null, showAxisTitles, ensureXDomain, ensureYDomain, void 0, shouldRenderAxis), willRenderAxis = {
                    x: shouldRenderAxis.x && axes.x && !_.isEmpty(axes.x.values),
                    y: shouldRenderAxis.y && axes.y1 && !_.isEmpty(axes.y1.values),
                    y2: shouldRenderAxis.y2 && axes.y2 && !_.isEmpty(axes.y2.values)
                }, showY1OnRight = this.shouldShowY1OnRight(), numHierarchyLevels = visuals.AxisHelper.isHierarchical(axes.x) ? axes.x.numLevels : void 0, plotArea = {
                    width: viewport.width - (margin.left + margin.right),
                    height: viewport.height - (margin.top + margin.bottom)
                }, isScalar = !1;
                _.isEmpty(layers) || layers[0].getVisualCategoryAxisIsScalar && (isScalar = layers[0].getVisualCategoryAxisIsScalar());
                var tickLabelMargins;
                tickLabelMargins = visuals.AxisHelper.getTickLabelMargins({
                    plotArea: plotArea,
                    yMarginLimit: marginLimits.left,
                    textWidthMeasurer: powerbi.TextMeasurementService.measureSvgTextWidth,
                    textHeightMeasurer: powerbi.TextMeasurementService.estimateSvgTextHeight,
                    axes: axes,
                    bottomMarginLimit: marginLimits.bottom,
                    axesFontProperties: axesFontProperties,
                    scrollbarVisible: !1,
                    showOnRight: showY1OnRight,
                    renderXAxis: willRenderAxis.x,
                    renderY1Axis: willRenderAxis.y,
                    renderY2Axis: willRenderAxis.y2,
                    numHierarchyLevels: numHierarchyLevels
                }), margin = this.updateAxisMargins(axes, tickLabelMargins, padding, showY1OnRight, isScalar ? 0 : interactivityRightMargin, showAxisTitles, willRenderAxis, axesFontProperties);
                var previousTickCountY1 = axes.y1 && axes.y1.values.length, previousTickCountY2 = axes.y2 && axes.y2.values.length, previousWillFitX = axes.x && axes.x.willLabelsFit, previousWillBreakX = axes.x && axes.x.willLabelsWordBreak, previousXLabelMaxWidth = axes.x && axes.x.xLabelMaxWidth, previousCategoryThickness = axes.x && axes.x.categoryThickness;
                axes = this.calculateAxes(layers, viewport, margin, playAxisControlLayout, axesFontProperties, !1, null, showAxisTitles, ensureXDomain, ensureYDomain, tickLabelMargins, willRenderAxis), 
                plotArea.width = viewport.width - (margin.left + margin.right), plotArea.height = viewport.height - (margin.top + margin.bottom);
                var preferredPlotArea = this.getPreferredPlotArea(axes, layers, isScalar), rotateXTickLabels90 = !this.willAllCategoriesFitInPlotArea(plotArea, preferredPlotArea), allDone = !(axes.y1 && axes.y1.values.length !== previousTickCountY1 || axes.y2 && axes.y2.values.length !== previousTickCountY2 || axes.x && axes.x.willLabelsFit !== previousWillFitX || axes.x && axes.x.willLabelsWordBreak !== previousWillBreakX || axes.x && axes.x.xLabelMaxWidth !== previousXLabelMaxWidth || rotateXTickLabels90 || this.isHierarchicalCategoryAxis || axes.x && axes.x.categoryThickness !== previousCategoryThickness), isXScrollBarVisible = !1, isYScrollBarVisible = !1;
                if (!allDone) {
                    tickLabelMargins = visuals.AxisHelper.getTickLabelMargins({
                        plotArea: plotArea,
                        yMarginLimit: marginLimits.left,
                        textWidthMeasurer: powerbi.TextMeasurementService.measureSvgTextWidth,
                        textHeightMeasurer: powerbi.TextMeasurementService.estimateSvgTextHeight,
                        axes: axes,
                        bottomMarginLimit: marginLimits.bottom,
                        axesFontProperties: axesFontProperties,
                        scrollbarVisible: rotateXTickLabels90,
                        showOnRight: showY1OnRight,
                        renderXAxis: willRenderAxis.x,
                        renderY1Axis: willRenderAxis.y,
                        renderY2Axis: willRenderAxis.y2,
                        numHierarchyLevels: numHierarchyLevels
                    }), margin = this.updateAxisMargins(axes, tickLabelMargins, padding, showY1OnRight, isScalar ? 0 : interactivityRightMargin, showAxisTitles, willRenderAxis, axesFontProperties), 
                    axes = this.calculateAxes(layers, viewport, margin, playAxisControlLayout, axesFontProperties, rotateXTickLabels90, axes, showAxisTitles, ensureXDomain, ensureYDomain, tickLabelMargins, willRenderAxis), 
                    plotArea.width = viewport.width - (margin.left + margin.right), plotArea.height = viewport.height - (margin.top + margin.bottom), 
                    preferredPlotArea = this.getPreferredPlotArea(axes, layers, isScalar);
                    var willScroll = !this.willAllCategoriesFitInPlotArea(plotArea, preferredPlotArea);
                    willScroll && (axes.x.isCategoryAxis && (isXScrollBarVisible = !0, viewport.height -= this.scrollbarWidth), 
                    axes.y1.isCategoryAxis && (isYScrollBarVisible = !0, viewport.width -= this.scrollbarWidth), 
                    margin = this.updateAxisMargins(axes, tickLabelMargins, padding, showY1OnRight, isScalar ? 0 : interactivityRightMargin, showAxisTitles, willRenderAxis, axesFontProperties, isXScrollBarVisible, isYScrollBarVisible), 
                    axes = this.calculateAxes(layers, viewport, margin, playAxisControlLayout, axesFontProperties, !0, axes, showAxisTitles, ensureXDomain, ensureYDomain, tickLabelMargins, willRenderAxis), 
                    plotArea.width = viewport.width - (margin.left + margin.right), plotArea.height = viewport.height - (margin.top + margin.bottom), 
                    preferredPlotArea = this.getPreferredPlotArea(axes, layers, isScalar));
                }
                var xAxisLabel = showAxisTitles.x && axes.x ? axes.x.axisLabel : null, yAxisLabel = showAxisTitles.y && axes.y1 ? axes.y1.axisLabel : null, y2AxisLabel = showAxisTitles.y2 && axes.y2 ? axes.y2.axisLabel : null, axisLabels = {
                    x: xAxisLabel,
                    y: yAxisLabel,
                    y2: y2AxisLabel
                };
                return this.layout = {
                    axes: axes,
                    axisLabels: axisLabels,
                    margin: margin,
                    marginLimits: marginLimits,
                    viewport: viewport,
                    plotArea: plotArea,
                    preferredPlotArea: preferredPlotArea,
                    tickLabelMargins: tickLabelMargins,
                    tickPadding: padding,
                    rotateXTickLabels90: rotateXTickLabels90,
                    shouldRenderAxis: willRenderAxis,
                    isXScrollBarVisible: isXScrollBarVisible,
                    isYScrollBarVisible: isYScrollBarVisible
                }, this.alignZerosWithCustomDomainWarning = axes.alignZerosWithCustomDomainWarning, 
                this.layout;
            }, CartesianAxes.prototype.getPreferredPlotArea = function(axes, layers, isScalar) {
                var preferredPlotArea;
                if (!isScalar && this.isScrollable && !_.isEmpty(layers) && layers[0].getPreferredPlotArea) {
                    var categoryThickness = axes.x.isCategoryAxis ? axes.x.categoryThickness : axes.y1.categoryThickness, categoryCount = axes.x.isCategoryAxis ? axes.x.dataDomain.length : axes.y1.dataDomain.length;
                    preferredPlotArea = layers[0].getPreferredPlotArea(isScalar, categoryCount, categoryThickness);
                }
                return preferredPlotArea;
            }, CartesianAxes.prototype.willAllCategoriesFitInPlotArea = function(plotArea, preferredPlotArea) {
                return !(!this.isYAxisCategorical && preferredPlotArea && powerbi.Double.greaterWithPrecision(preferredPlotArea.width, plotArea.width)) && !(this.isYAxisCategorical && preferredPlotArea && powerbi.Double.greaterWithPrecision(preferredPlotArea.height, plotArea.height));
            }, CartesianAxes.prototype.updateAxisMargins = function(axes, tickLabelMargins, padding, showY1OnRight, interactivityRightMargin, showAxisTitles, willRenderAxis, axesFontProperties, isXScrollBarVisible, isYScrollBarVisible) {
                var maxY1Padding = showY1OnRight ? tickLabelMargins.yRight : tickLabelMargins.yLeft, maxY2Padding = showY1OnRight ? tickLabelMargins.yLeft : tickLabelMargins.yRight, maxXAxisBottom = tickLabelMargins.xMax;
                willRenderAxis.y && (maxY1Padding += showY1OnRight ? padding.right : padding.left), 
                willRenderAxis.y2 && (maxY2Padding += showY1OnRight ? padding.left : padding.right), 
                willRenderAxis.x && (maxXAxisBottom += padding.bottom);
                var axisTitles = {
                    x: axes.x.axisLabel,
                    y: axes.y1.axisLabel,
                    y2: axes.y2 ? axes.y2.axisLabel : null
                };
                if (null != axisTitles.x && showAxisTitles.x) {
                    var titleTextHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(visuals.FontProperties.toTextProperties(axesFontProperties.x.title));
                    maxXAxisBottom += titleTextHeight + CartesianAxes.XAxisLabelPadding;
                }
                if (null != axisTitles.y && showAxisTitles.y) {
                    var titleTextHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(visuals.FontProperties.toTextProperties(axesFontProperties.y.title));
                    maxY1Padding += titleTextHeight + CartesianAxes.YAxisLabelPadding;
                }
                if (null != axisTitles.y2 && showAxisTitles.y2) {
                    var titleTextHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(visuals.FontProperties.toTextProperties(axesFontProperties.y2.title));
                    maxY2Padding += titleTextHeight + CartesianAxes.YAxisLabelPadding;
                }
                var rightMargin = (showY1OnRight ? maxY1Padding : maxY2Padding) + interactivityRightMargin;
                rightMargin = isYScrollBarVisible ? Math.max(rightMargin, CartesianAxes.MinimumAxisMarginFromScrollbar) : rightMargin;
                var bottomMargin = maxXAxisBottom;
                bottomMargin = isXScrollBarVisible ? Math.max(bottomMargin, CartesianAxes.MinimumAxisMarginFromScrollbar) : bottomMargin;
                var minMargins = CartesianAxes.MinimumMargin, margin = {
                    top: Math.max(tickLabelMargins.yTop, minMargins.top),
                    left: showY1OnRight ? maxY2Padding : maxY1Padding,
                    right: rightMargin,
                    bottom: bottomMargin
                };
                return margin;
            }, CartesianAxes.prototype.isLogScaleAllowed = function(axisType) {
                var axes = this.layout && this.layout.axes;
                if (!axes) return !1;
                switch (axisType) {
                  case 0:
                    return axes.x.isLogScaleAllowed;

                  case 1:
                    return axes.y1.isLogScaleAllowed;

                  case 2:
                    return axes.y2 && axes.y2.isLogScaleAllowed;
                }
            }, CartesianAxes.prototype.axesHaveTicks = function(viewport) {
                if (!this.layout) return !1;
                var margin = this.layout.margin, width = viewport.width - (margin.left + margin.right), height = viewport.height - (margin.top + margin.bottom);
                return 0 !== visuals.AxisHelper.getRecommendedNumberOfTicksForXAxis(width) || 0 !== visuals.AxisHelper.getRecommendedNumberOfTicksForYAxis(height);
            }, CartesianAxes.prototype.overrideAxisTitles = function(axes) {
                axes && (axes.x && this.axesData.x.titleText && (axes.x.axisLabel = this.axesData.x.titleText), 
                axes.y1 && this.axesData.y.titleText && (axes.y1.axisLabel = this.axesData.y.titleText), 
                axes.y2 && this.axesData.y2.titleText && (axes.y2.axisLabel = this.axesData.y2.titleText));
            }, CartesianAxes.prototype.addUnitTypeToAxisLabels = function(axes) {
                var unitType = CartesianAxes.getUnitType(axes.x.formatter);
                if (axes.x.isCategoryAxis ? this.categoryAxisHasUnitType = null != unitType : this.valueAxisHasUnitType = null != unitType, 
                axes.x.axisLabel && unitType && (axes.x.axisLabel = visuals.AxisViewModel.createAxisLabel(this.axesData.x.axisStyle, axes.x.axisLabel, unitType)), 
                unitType = CartesianAxes.getUnitType(axes.y1.formatter), axes.y1.isCategoryAxis ? this.categoryAxisHasUnitType = null != unitType : this.valueAxisHasUnitType = null != unitType, 
                axes.y1.axisLabel && unitType && (axes.y1.axisLabel = visuals.AxisViewModel.createAxisLabel(this.axesData.y.axisStyle, axes.y1.axisLabel, unitType)), 
                axes.y2) {
                    var unitType_1 = CartesianAxes.getUnitType(axes.y2.formatter);
                    this.secondaryValueAxisHasUnitType = null != unitType_1, axes.y2.axisLabel && unitType_1 && (axes.y2.axisLabel = visuals.AxisViewModel.createAxisLabel(this.axesData.y2.axisStyle, axes.y2.axisLabel, unitType_1));
                }
            }, CartesianAxes.prototype.addStartEndWarnings = function(forcedYDomains, alignZeroDomains) {
                if (forcedYDomains && 2 === forcedYDomains.length) {
                    if (forcedYDomains[0] && 2 === forcedYDomains[0].length && alignZeroDomains[0] && 2 === alignZeroDomains[0].length) return !0;
                    if (forcedYDomains[1] && 2 === forcedYDomains[1].length && alignZeroDomains[1] && 2 === alignZeroDomains[1].length) return !0;
                }
                return !1;
            }, CartesianAxes.getUnitType = function(formatter) {
                if (formatter && formatter.displayUnit && formatter.displayUnit.value > 1) return formatter.displayUnit.title;
            }, CartesianAxes.hierarchyPlaceholder = {
                placeholder: !0
            }, CartesianAxes.gridlineDefaultColor = "#e9e9e9", CartesianAxes.YAxisLabelPadding = 5, 
            CartesianAxes.XAxisLabelPadding = 3, CartesianAxes.MaxMarginFactor = .25, CartesianAxes.MinimumMargin = {
                left: 1,
                right: 1,
                top: 8,
                bottom: 25
            }, CartesianAxes.MinimumAxisMarginFromScrollbar = 5, CartesianAxes;
        })();
        visuals.CartesianAxes = CartesianAxes;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var CompiledDataViewMapping = powerbi.data.CompiledDataViewMapping;
        visuals.DEFAULT_AXIS_SCALE_TYPE = visuals.axisScale.linear, visuals.DEFAULT_AXIS_COLOR = "#777", 
        visuals.DEFAULT_FONT_FAMILY = visuals.Font.Family.regular.css, visuals.DefaultInnerPaddingRatio = .2;
        var CartesianHelper;
        !(function(CartesianHelper) {
            function getBubblePixelAreaSizeRange(plotArea, minSizeRange, maxSizeRange) {
                var ratio = 1;
                if (plotArea.height > 0 && plotArea.width > 0) {
                    var minSize = Math.min(plotArea.height, plotArea.width);
                    ratio = minSize * minSize / AreaOf300By300Chart;
                }
                var minRange = Math.round(minSizeRange * ratio), maxRange = Math.round(maxSizeRange * ratio);
                return {
                    minRange: minRange,
                    maxRange: maxRange,
                    delta: maxRange - minRange
                };
            }
            function getBubbleRadius(radiusData, sizeRange, plotArea, multiplier) {
                var actualSizeDataRange = null, bubblePixelAreaSizeRange = null, measureSize = radiusData.sizeMeasure;
                if (!measureSize && null == radiusData.value) return BubbleRadius * multiplier;
                var minSize = sizeRange.min ? sizeRange.min : 0, maxSize = sizeRange.max ? sizeRange.max : 0, min = Math.min(minSize, 0), max = Math.max(maxSize, 0);
                actualSizeDataRange = {
                    minRange: min,
                    maxRange: max,
                    delta: max - min
                }, bubblePixelAreaSizeRange = getBubblePixelAreaSizeRange(plotArea, MinSizeRange, MaxSizeRange);
                var sizeValue = measureSize && measureSize.values[radiusData.index] || radiusData.value;
                return null != sizeValue ? projectSizeToPixels(sizeValue, actualSizeDataRange, bubblePixelAreaSizeRange) / 2 * multiplier : BubbleRadius * multiplier;
            }
            function projectSizeToPixels(size, actualSizeDataRange, bubblePixelAreaSizeRange) {
                var projectedSize = 0;
                if (actualSizeDataRange) {
                    if (projectedSize = bubblePixelAreaSizeRange.maxRange, 0 !== actualSizeDataRange.delta) {
                        var value = Math.min(Math.max(size, actualSizeDataRange.minRange), actualSizeDataRange.maxRange);
                        projectedSize = project(value, actualSizeDataRange, bubblePixelAreaSizeRange);
                    }
                    projectedSize = 2 * Math.sqrt(projectedSize / Math.PI);
                }
                return Math.round(projectedSize);
            }
            function project(value, actualSizeDataRange, bubblePixelAreaSizeRange) {
                if (0 === actualSizeDataRange.delta || 0 === bubblePixelAreaSizeRange.delta) return rangeContains(actualSizeDataRange, value) ? bubblePixelAreaSizeRange.minRange : null;
                var relativeX = (value - actualSizeDataRange.minRange) / actualSizeDataRange.delta;
                return bubblePixelAreaSizeRange.minRange + relativeX * bubblePixelAreaSizeRange.delta;
            }
            function rangeContains(range, value) {
                return range.minRange <= value && value <= range.maxRange;
            }
            function getRectTop(scale, pos, value) {
                return value < 0 ? scale(pos) : scale(pos) - (scale(0) - scale(value));
            }
            function getLabelLayoutXYForWaterfall(xAxisProperties, categoryWidth, yAxisProperties, dataDomain) {
                return {
                    x: function(d) {
                        return xAxisProperties.scale(d.categoryIndex) + categoryWidth / 2;
                    },
                    y: function(d) {
                        return getWaterfallLabelYPosition(yAxisProperties.scale, d, dataDomain);
                    }
                };
            }
            function getWaterfallLabelYPosition(scale, d, dataDomain) {
                var yValue = scale(0) - scale(Math.abs(d.value)), yPos = scale(d.position), scaleMinDomain = scale(dataDomain[0]), endPosition = scale(d.position + d.value);
                if (d.value < 0) {
                    var properties = {
                        text: d.labeltext,
                        fontFamily: visuals.dataLabelUtils.LabelTextProperties.fontFamily,
                        fontSize: visuals.dataLabelUtils.LabelTextProperties.fontSize,
                        fontWeight: visuals.dataLabelUtils.LabelTextProperties.fontWeight
                    }, outsideBelowPosition = yPos + yValue + powerbi.TextMeasurementService.estimateSvgTextHeight(properties);
                    if (scaleMinDomain > outsideBelowPosition) return outsideBelowPosition;
                } else {
                    var outsideAbovePosition = yPos - yValue - visuals.dataLabelUtils.labelMargin;
                    if (outsideAbovePosition > 0) return outsideAbovePosition;
                }
                return d.isLabelInside = !0, getWaterfallInsideLabelYPosition(yPos, endPosition, scaleMinDomain);
            }
            function getWaterfallInsideLabelYPosition(startPosition, endPosition, scaleMinDomain) {
                return startPosition = startPosition < 0 ? 0 : startPosition, startPosition = startPosition > scaleMinDomain ? scaleMinDomain : startPosition, 
                endPosition = endPosition < 0 ? 0 : endPosition, endPosition = endPosition > scaleMinDomain ? scaleMinDomain : endPosition, 
                Math.abs(endPosition - startPosition) / 2 + Math.min(startPosition, endPosition);
            }
            function getCategoryAxisProperties(dataViewMetadata, axisTitleOnByDefault) {
                var toReturn = axisTitleOnByDefault ? {
                    showAxisTitle: !0
                } : {};
                if (!dataViewMetadata) return toReturn;
                var objects = dataViewMetadata.objects;
                if (objects) {
                    var categoryAxisObject = objects.categoryAxis;
                    categoryAxisObject && (toReturn = _.clone(categoryAxisObject), toReturn.showAxisTitle = null == categoryAxisObject.showAxisTitle ? axisTitleOnByDefault : categoryAxisObject.showAxisTitle);
                }
                return toReturn;
            }
            function getValueAxisProperties(dataViewMetadata, axisTitleOnByDefault) {
                var toReturn = axisTitleOnByDefault ? {
                    showAxisTitle: !0
                } : {};
                if (!dataViewMetadata) return toReturn;
                var objects = dataViewMetadata.objects;
                if (objects) {
                    var valueAxisObject = objects.valueAxis;
                    valueAxisObject && (toReturn = _.clone(valueAxisObject), toReturn.showAxisTitle = null == valueAxisObject.showAxisTitle ? axisTitleOnByDefault : valueAxisObject.showAxisTitle);
                }
                return toReturn;
            }
            function isScalar(supportsScalar, properties) {
                return !!supportsScalar && (!properties || !properties.axisType || properties.axisType === visuals.axisType.scalar);
            }
            function getPreferredCategoryWidth(xAxisCardProperties) {
                var stringValue = xAxisCardProperties.preferredCategoryWidth;
                return null == stringValue ? void 0 : +stringValue;
            }
            function lookupXValue(data, index, type, isScalar) {
                var isDateTime = visuals.AxisHelper.isDateTime(type);
                if (isScalar) return isDateTime ? new Date(index) : index;
                if (type.text) return data.categories[index];
                if (data && data.series && data.series.length > 0) {
                    var firstSeries = data.series[0];
                    if (firstSeries) {
                        var seriesValues = firstSeries.data;
                        if (seriesValues) {
                            data.hasHighlights && (index = 2 * index);
                            var dataAtIndex = seriesValues[index];
                            if (dataAtIndex) return isDateTime && null != dataAtIndex.categoryValue ? new Date(dataAtIndex.categoryValue) : dataAtIndex.categoryValue;
                        }
                    }
                }
                return index;
            }
            function findMaxCategoryIndex(series) {
                if (_.isEmpty(series)) return 0;
                for (var maxCategoryIndex = 0, _i = 0, series_1 = series; _i < series_1.length; _i++) {
                    var singleSeries = series_1[_i];
                    if (!_.isEmpty(singleSeries.data)) {
                        var lastIndex = singleSeries.data[singleSeries.data.length - 1].categoryIndex;
                        maxCategoryIndex = Math.max(lastIndex, maxCategoryIndex);
                    }
                }
                return maxCategoryIndex;
            }
            function getScalarKeyinfo(categorical, isScalar) {
                var category, scalarKeys, useScalarKeys = !1;
                if (isScalar) {
                    var firstCategory = _.first(categorical.categories);
                    scalarKeys = visuals.ScalarUtils.getScalarKeys(firstCategory), useScalarKeys = isScalar && scalarKeys && !_.isEmpty(scalarKeys.values), 
                    category = useScalarKeys ? firstCategory : _.last(categorical.categories);
                } else category = _.isEmpty(categorical.categories) ? {
                    source: void 0,
                    values: [ visuals.valueFormatter.format(null) ],
                    identity: void 0
                } : _.last(categorical.categories);
                return {
                    category: category,
                    useScalarKeys: useScalarKeys,
                    scalarKeys: scalarKeys
                };
            }
            function hasCategoryHierarchy(dataView) {
                return dataView && dataView.categorical && dataView.categorical.categories && dataView.categorical.categories.length > 1;
            }
            function expandCategoryWindow(mappings) {
                var NoSeriesWindowCount = 1e3;
                if (shouldExpandCategoryWindow(mappings)) for (var _i = 0, mappings_2 = mappings; _i < mappings_2.length; _i++) {
                    var mapping = mappings_2[_i];
                    if (!mapping.categorical) return;
                    var categories = mapping.categorical.categories;
                    if (!categories || !categories.dataReductionAlgorithm || !categories.dataReductionAlgorithm.window) return;
                    categories.dataReductionAlgorithm = {
                        window: {
                            count: NoSeriesWindowCount
                        }
                    };
                }
            }
            function shouldExpandCategoryWindow(mappings) {
                if (_.isEmpty(mappings)) return !1;
                var hasSeries = _.any(mappings, (function(mapping) {
                    var categorical = mapping.categorical;
                    if (!categorical) return !1;
                    var categories = categorical.categories;
                    if (!categories) return !1;
                    var values = categorical.values;
                    return !(!(values && values.group && values.group.by) || _.isEmpty(values.group.by.items));
                }));
                return !hasSeries;
            }
            function requestFilteredToUniqueValue(mappings) {
                for (var _i = 0, mappings_3 = mappings; _i < mappings_3.length; _i++) {
                    var mapping = mappings_3[_i], dataViewCategories = mapping.categorical.categories;
                    powerbi.data.CompiledDataViewMapping.visitCategoricalCategories(dataViewCategories, {
                        visitRole: function(role) {
                            var roleItems = role.items;
                            if (!_.isEmpty(roleItems) && !_.isEmpty(role.activeItems)) for (var filteredRoleItems = _.filter(roleItems, (function(roleItem) {
                                return _.contains(role.activeItems, roleItem.queryName);
                            })), _i = 0, filteredRoleItems_1 = filteredRoleItems; _i < filteredRoleItems_1.length; _i++) {
                                var item = filteredRoleItems_1[_i];
                                item.filteredToUniqueValueProperty = visuals.cartesianChartProps.filters.filteredToUniqueValue;
                            }
                        }
                    });
                }
            }
            function applyHierarchicalSorts(mappings, sortableRoles, sortDirection) {
                void 0 === sortDirection && (sortDirection = 1);
                for (var _loop_8 = function(mapping) {
                    if (!(mapping && mapping.categorical && mapping.categorical.categories && mapping.metadata)) return "continue";
                    var metadataColumns = mapping.metadata.columns, categories = mapping.categorical.categories;
                    return _.any(metadataColumns, (function(metadataColumn) {
                        return void 0 !== metadataColumn.sort;
                    })) ? "continue" : void CompiledDataViewMapping.visitCategoricalCategories(categories, {
                        visitRole: function(role, context) {
                            if (_.contains(sortableRoles, role.role)) {
                                var activeItems = role.activeItems;
                                if (!_.isEmpty(activeItems)) for (var sortIndex = 0, _loop_9 = function(activeProjection) {
                                    var metadataColumn = _.find(metadataColumns, (function(metadataColumn) {
                                        return metadataColumn.queryName === activeProjection;
                                    }));
                                    metadataColumn && (metadataColumn.sort = sortDirection, metadataColumn.sortOrder = sortIndex++);
                                }, _i = 0, activeItems_1 = activeItems; _i < activeItems_1.length; _i++) {
                                    var activeProjection = activeItems_1[_i];
                                    _loop_9(activeProjection);
                                }
                            }
                        }
                    });
                }, _i = 0, mappings_4 = mappings; _i < mappings_4.length; _i++) {
                    var mapping = mappings_4[_i];
                    _loop_8(mapping);
                }
            }
            CartesianHelper.DefaultConcatenateLabelsValue = !0, CartesianHelper.MinOrdinalRectThickness = 20, 
            CartesianHelper.TickLabelPadding = 2, CartesianHelper.DefaultAxisFontFamily = visuals.Font.Family.regular.css, 
            CartesianHelper.DefaultAxisFontSizeInPx = 11, CartesianHelper.AxisFontFamily = visuals.Font.Family.regular.css, 
            CartesianHelper.DefaultOuterPaddingRatio = .4, CartesianHelper.defaultLineStrokeWidth = 2;
            var BubbleRadius = 6, AreaOf300By300Chart = 9e4, MinSizeRange = 200, MaxSizeRange = 3e3;
            CartesianHelper.dataLabelLayoutStartingOffset = 2, CartesianHelper.dataLabelLayoutOffsetIterationDelta = 6, 
            CartesianHelper.dataLabelLayoutMaximumOffset = CartesianHelper.dataLabelLayoutStartingOffset + 2 * CartesianHelper.dataLabelLayoutOffsetIterationDelta, 
            CartesianHelper.DefaultScatterRatioLineSettings = {
                show: !1,
                lineColor: {
                    solid: {
                        color: "#000000"
                    }
                },
                transparency: 0,
                style: visuals.lineStyle.dashed
            }, CartesianHelper.getBubblePixelAreaSizeRange = getBubblePixelAreaSizeRange, CartesianHelper.getBubbleRadius = getBubbleRadius, 
            CartesianHelper.projectSizeToPixels = projectSizeToPixels, CartesianHelper.getRectTop = getRectTop, 
            CartesianHelper.getLabelLayoutXYForWaterfall = getLabelLayoutXYForWaterfall, CartesianHelper.getCategoryAxisProperties = getCategoryAxisProperties, 
            CartesianHelper.getValueAxisProperties = getValueAxisProperties, CartesianHelper.isScalar = isScalar, 
            CartesianHelper.getPreferredCategoryWidth = getPreferredCategoryWidth, CartesianHelper.lookupXValue = lookupXValue, 
            CartesianHelper.findMaxCategoryIndex = findMaxCategoryIndex, CartesianHelper.getScalarKeyinfo = getScalarKeyinfo, 
            CartesianHelper.hasCategoryHierarchy = hasCategoryHierarchy, CartesianHelper.expandCategoryWindow = expandCategoryWindow, 
            CartesianHelper.requestFilteredToUniqueValue = requestFilteredToUniqueValue, CartesianHelper.applyHierarchicalSorts = applyHierarchicalSorts;
        })(CartesianHelper = visuals.CartesianHelper || (visuals.CartesianHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var AxesLayoutUtils;
        !(function(AxesLayoutUtils) {
            function getAxisTickLabelMargins(axisProperties, fontProperties, textWidthMeasurer, textHeightMeasurer) {
                var scale = axisProperties.scale, tickValues = axisProperties.axis.tickValues();
                if (_.isEmpty(tickValues)) return {
                    maxWidth: 0,
                    overflow: {
                        top: 0,
                        bottom: 0
                    }
                };
                var axisStartValue, axisEndValue;
                if (visuals.AxisHelper.isOrdinalScale(scale)) _a = scale.rangeExtent(), axisStartValue = _a[0], 
                axisEndValue = _a[1]; else {
                    var range = scale.range();
                    axisStartValue = _.first(range), axisEndValue = _.last(range);
                }
                var axisTopPosition, axisTopLabelPosition, axisBottomPosition, axisBottomLabelPosition, labels = axisProperties.values;
                axisStartValue < axisEndValue ? (axisTopPosition = axisStartValue, axisTopLabelPosition = scale(_.first(tickValues)), 
                axisBottomPosition = axisEndValue, axisBottomLabelPosition = scale(_.last(tickValues))) : (axisTopPosition = axisEndValue, 
                axisTopLabelPosition = scale(_.last(tickValues)), axisBottomPosition = axisStartValue, 
                axisBottomLabelPosition = scale(_.first(tickValues)));
                for (var textProperties = visuals.FontProperties.toTextProperties(fontProperties, "" + _.first(labels)), textHeight = textHeightMeasurer(textProperties), topOverflow = Math.max(0, -(axisTopLabelPosition - textHeight / 2 - axisTopPosition)), bottomOverflow = Math.max(0, axisBottomLabelPosition + textHeight / 2 - axisBottomPosition), maxWidth = 0, i = 0, len = labels.length; i < len; i++) textProperties.text = "" + labels[i], 
                maxWidth = Math.max(maxWidth, textWidthMeasurer(textProperties));
                return {
                    maxWidth: maxWidth,
                    overflow: {
                        top: topOverflow,
                        bottom: bottomOverflow
                    }
                };
                var _a;
            }
            AxesLayoutUtils.getAxisTickLabelMargins = getAxisTickLabelMargins;
        })(AxesLayoutUtils = visuals.AxesLayoutUtils || (visuals.AxesLayoutUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var ScalarUtils, ScalarKeyUtils = powerbi.data.ScalarKeyUtils;
        !(function(ScalarUtils) {
            function shouldDrawScalar(objects, propertyId, type, scalarKeys, hasCategoryHierarchy) {
                return !(hasCategoryHierarchy && !scalarKeys) && (!!ScalarUtils.scalarKeysAreValid(scalarKeys) || ScalarUtils.canHaveScalarAxis(objects, propertyId, type));
            }
            function canHaveScalarAxis(objects, propertyId, type) {
                return !!typeCanBeScalar(type) && !!scalarAxisTypeAllowed(objects, propertyId);
            }
            function scalarAxisTypeAllowed(objects, propertyId) {
                if (!objects) return !0;
                var axisTypeValue = powerbi.DataViewObjects.getValue(objects, propertyId);
                return null == axisTypeValue || axisTypeValue === visuals.axisType.scalar;
            }
            function typeCanBeScalar(type) {
                return !visuals.AxisHelper.isOrdinal(type);
            }
            function scalarKeysAreValid(scalarKeys) {
                return scalarKeys && !_.isEmpty(scalarKeys.values);
            }
            function getScalarKeys(dataViewCategoryColumn) {
                return ScalarKeyUtils.getScalarKeys(dataViewCategoryColumn, visuals.cartesianChartProps.scalarKey.scalarKeyMin);
            }
            function mappingSupportsScalarAxis(dataViewMapping) {
                if (!dataViewMapping || !dataViewMapping.categorical || !dataViewMapping.categorical.categories) return !1;
                var dataViewCategories = dataViewMapping.categorical.categories, categoryItems = dataViewCategories.for.in.items;
                if (_.isEmpty(categoryItems)) return !1;
                var activeProjections = dataViewCategories.for.in.activeItems, category = categoryItems[0];
                if (!_.isEmpty(activeProjections)) {
                    if (activeProjections.length > 1) return !1;
                    var activeCategoryItem = _.find(categoryItems, (function(categoryItem) {
                        return categoryItem.queryName === activeProjections[0];
                    }));
                    category = activeCategoryItem;
                }
                var categoryType = category.type;
                if (!dataViewMapping.metadata) return !1;
                var objects = dataViewMapping.metadata.objects;
                return !!canHaveScalarAxis(objects, visuals.columnChartProps.categoryAxis.axisType, categoryType);
            }
            ScalarUtils.shouldDrawScalar = shouldDrawScalar, ScalarUtils.canHaveScalarAxis = canHaveScalarAxis, 
            ScalarUtils.scalarAxisTypeAllowed = scalarAxisTypeAllowed, ScalarUtils.typeCanBeScalar = typeCanBeScalar, 
            ScalarUtils.scalarKeysAreValid = scalarKeysAreValid, ScalarUtils.getScalarKeys = getScalarKeys, 
            ScalarUtils.mappingSupportsScalarAxis = mappingSupportsScalarAxis;
        })(ScalarUtils = visuals.ScalarUtils || (visuals.ScalarUtils = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var samples;
        !(function(samples) {
            var SelectionManager = visuals.utility.SelectionManager, HelloIVisual = (function() {
                function HelloIVisual() {}
                return HelloIVisual.converter = function(dataView) {
                    var viewModel = {
                        size: HelloIVisual.getSize(dataView),
                        color: HelloIVisual.getFill(dataView).solid.color,
                        text: HelloIVisual.DefaultText,
                        toolTipInfo: [ {
                            displayName: "Test",
                            value: "1...2....3... can you see me? I am sending random strings to the tooltip"
                        } ],
                        selector: visuals.SelectionId.createNull()
                    }, table = dataView.table;
                    return table ? (viewModel.text = table.rows[0][0], dataView.categorical && (viewModel.selector = dataView.categorical.categories[0].identity ? visuals.SelectionId.createWithId(dataView.categorical.categories[0].identity[0]) : visuals.SelectionId.createNull()), 
                    viewModel) : viewModel;
                }, HelloIVisual.prototype.init = function(options) {
                    this.root = d3.select(options.element.get(0)).append("svg").classed("hello", !0), 
                    this.svgText = this.root.append("text").style("cursor", "pointer").style("stroke", "green").style("stroke-width", "0px").attr("text-anchor", "middle"), 
                    this.selectiionManager = new SelectionManager({
                        hostServices: options.host
                    });
                }, HelloIVisual.prototype.update = function(options) {
                    if (options.dataViews || options.dataViews[0]) {
                        var dataView = this.dataView = options.dataViews[0], viewport = options.viewport, viewModel = HelloIVisual.converter(dataView);
                        this.root.attr({
                            height: viewport.height,
                            width: viewport.width
                        });
                        var textProperties = {
                            fontFamily: "tahoma",
                            fontSize: viewModel.size + "px",
                            text: viewModel.text
                        }, textHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(textProperties), selectionManager = this.selectiionManager;
                        this.svgText.style({
                            fill: viewModel.color,
                            "font-size": textProperties.fontSize,
                            "font-family": textProperties.fontFamily
                        }).attr({
                            y: viewport.height / 2 + textHeight / 3 + "px",
                            x: viewport.width / 2
                        }).text(viewModel.text).on("click", (function() {
                            var _this = this;
                            selectionManager.select(viewModel.selector).then((function(ids) {
                                return d3.select(_this).style("stroke-width", ids.length > 0 ? "2px" : "0px");
                            }));
                        })).data([ viewModel ]), visuals.TooltipManager.addTooltip(this.svgText, (function(tooltipEvent) {
                            return tooltipEvent.data.toolTipInfo;
                        }));
                    }
                }, HelloIVisual.getFill = function(dataView) {
                    if (dataView) {
                        var objects = dataView.metadata.objects;
                        if (objects) {
                            var general = objects.general;
                            if (general) {
                                var fill = general.fill;
                                if (fill) return fill;
                            }
                        }
                    }
                    return {
                        solid: {
                            color: "red"
                        }
                    };
                }, HelloIVisual.getSize = function(dataView) {
                    if (dataView) {
                        var objects = dataView.metadata.objects;
                        if (objects) {
                            var general = objects.general;
                            if (general) {
                                var size = general.size;
                                if (size) return size;
                            }
                        }
                    }
                    return 100;
                }, HelloIVisual.prototype.enumerateObjectInstances = function(options) {
                    var instances = [], dataView = this.dataView;
                    switch (options.objectName) {
                      case "general":
                        var general = {
                            objectName: "general",
                            displayName: "General",
                            selector: null,
                            properties: {
                                fill: HelloIVisual.getFill(dataView),
                                size: HelloIVisual.getSize(dataView)
                            }
                        };
                        instances.push(general);
                    }
                    return instances;
                }, HelloIVisual.prototype.destroy = function() {
                    this.root = null;
                }, HelloIVisual.capabilities = {
                    dataRoles: [ {
                        displayName: "Values",
                        name: "Values",
                        kind: powerbi.VisualDataRoleKind.GroupingOrMeasure
                    } ],
                    dataViewMappings: [ {
                        table: {
                            rows: {
                                for: {
                                    in: "Values"
                                },
                                dataReductionAlgorithm: {
                                    window: {
                                        count: 100
                                    }
                                }
                            },
                            rowCount: {
                                preferred: {
                                    min: 1
                                }
                            }
                        }
                    } ],
                    objects: {
                        general: {
                            displayName: powerbi.data.createDisplayNameGetter("Visual_General"),
                            properties: {
                                fill: {
                                    type: {
                                        fill: {
                                            solid: {
                                                color: !0
                                            }
                                        }
                                    },
                                    displayName: "Fill"
                                },
                                size: {
                                    type: {
                                        numeric: !0
                                    },
                                    displayName: "Size"
                                }
                            }
                        }
                    }
                }, HelloIVisual.DefaultText = "Invalid DV", HelloIVisual;
            })();
            samples.HelloIVisual = HelloIVisual;
        })(samples = visuals.samples || (visuals.samples = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var SelectionManager = visuals.utility.SelectionManager;
        visuals.cheerMeterProps = {
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            }
        };
        var CheerMeter = (function() {
            function CheerMeter() {
                this.isFirstTime = !0;
            }
            return CheerMeter.converter = function(dataView) {
                if (!dataView.categorical || !dataView.categorical.categories) return null;
                var cat = dataView.categorical.categories[0];
                if (!cat) return null;
                var catValues = cat.values;
                if (!catValues || _.isEmpty(dataView.categorical.values)) return null;
                var values = dataView.categorical.values[0].values, objects = dataView.categorical.categories[0].objects, object1 = objects && objects.length > 0 ? objects[0] : void 0, object2 = objects && objects.length > 1 ? objects[1] : void 0, metadataObjects = dataView.metadata.objects, backgroundColor = CheerMeter.DefaultBackgroundColor;
                if (metadataObjects) {
                    var general = metadataObjects.general;
                    if (general) {
                        var fill = general.fill;
                        fill && (backgroundColor = fill.solid.color);
                    }
                }
                var color1 = powerbi.DataViewObjects.getFillColor(object1, visuals.cheerMeterProps.dataPoint.fill, CheerMeter.DefaultFontColor), color2 = powerbi.DataViewObjects.getFillColor(object2, visuals.cheerMeterProps.dataPoint.fill, CheerMeter.DefaultFontColor), idn1 = visuals.SelectionIdBuilder.builder().withCategory(cat, 0).createSelectionId(), idn2 = visuals.SelectionIdBuilder.builder().withCategory(cat, 1).createSelectionId(), data = {
                    teamA: {
                        name: catValues[0],
                        value: values[0],
                        color: color1,
                        identity: idn1
                    },
                    teamB: {
                        name: catValues[1],
                        value: values[1],
                        color: color2,
                        identity: idn2
                    },
                    background: backgroundColor
                };
                return data;
            }, CheerMeter.prototype.init = function(options) {
                this.selectionManager = new SelectionManager({
                    hostServices: options.host
                });
                var svg = this.svg = d3.select(options.element.get(0)).append("svg");
                this.textOne = svg.append("text").style("font-family", CheerMeter.DefaultFontFamily), 
                this.textTwo = svg.append("text").style("font-family", CheerMeter.DefaultFontFamily);
            }, CheerMeter.prototype.update = function(options) {
                if (options.dataViews[0]) {
                    var data = this.data = CheerMeter.converter(options.dataViews[0]);
                    if (data) {
                        var duration = options.suppressAnimations ? 0 : visuals.AnimatorCommon.MinervaAnimationDuration;
                        this.draw(data, duration, options.viewport);
                    }
                }
            }, CheerMeter.prototype.getRecomendedFontProperties = function(text1, text2, parentViewport) {
                for (var i, textProperties = {
                    fontSize: "",
                    fontFamily: CheerMeter.DefaultFontFamily,
                    text: text1 + text2
                }, min = 1, max = 1e3, maxWidth = parentViewport.width, width = 0; min <= max; ) if (i = (min + max) / 2 | 0, 
                textProperties.fontSize = i + "px", width = powerbi.TextMeasurementService.measureSvgTextWidth(textProperties), 
                maxWidth > width) min = i + 1; else {
                    if (!(maxWidth < width)) break;
                    max = i - 1;
                }
                return textProperties.fontSize = i + "px", width = powerbi.TextMeasurementService.measureSvgTextWidth(textProperties), 
                width > maxWidth && (i--, textProperties.fontSize = i + "px"), textProperties;
            }, CheerMeter.prototype.calculateLayout = function(data, viewport) {
                var text1 = data.teamA.name, text2 = data.teamB.name, avaliableViewport = {
                    height: viewport.height,
                    width: viewport.width - CheerMeter.PaddingBetweenText
                }, recomendedFontProperties = this.getRecomendedFontProperties(text1, text2, avaliableViewport);
                recomendedFontProperties.text = text1;
                var width1 = 0 | powerbi.TextMeasurementService.measureSvgTextWidth(recomendedFontProperties);
                recomendedFontProperties.text = text2;
                var width2 = 0 | powerbi.TextMeasurementService.measureSvgTextWidth(recomendedFontProperties), padding = (viewport.width - width1 - width2 - CheerMeter.PaddingBetweenText) / 2 | 0;
                recomendedFontProperties.text = text1 + text2;
                var offsetHeight = 0 | powerbi.TextMeasurementService.measureSvgTextHeight(recomendedFontProperties), max = data.teamA.value + data.teamB.value, availableHeight = viewport.height - offsetHeight, y1 = (max - data.teamA.value) / max * availableHeight + offsetHeight / 2 | 0, y2 = (max - data.teamB.value) / max * availableHeight + offsetHeight / 2 | 0;
                return {
                    x1: padding,
                    x2: padding + width1 + CheerMeter.PaddingBetweenText,
                    y1: y1,
                    y2: y2,
                    fontSize: recomendedFontProperties.fontSize
                };
            }, CheerMeter.prototype.ensureStartState = function(layout, viewport) {
                if (this.isFirstTime) {
                    this.isFirstTime = !1;
                    var startY = viewport.height / 2;
                    this.textOne.attr({
                        x: layout.x1,
                        y: startY
                    }), this.textTwo.attr({
                        x: layout.x2,
                        y: startY
                    });
                }
            }, CheerMeter.prototype.clearSelection = function() {
                var _this = this;
                this.selectionManager.clear().then((function() {
                    _this.clearSelectionUI();
                }));
            }, CheerMeter.prototype.clearSelectionUI = function() {
                this.textOne.style("stroke", "#FFF").style("stroke-width", 0), this.textTwo.style("stroke", "#FFF").style("stroke-width", 0);
            }, CheerMeter.prototype.updateSelectionUI = function(ids) {
                this.textOne.style("stroke", "#FFF").style("stroke-width", SelectionManager.containsSelection(ids, this.data.teamA.identity) ? "2px" : "0px"), 
                this.textTwo.style("stroke", "#FFF").style("stroke-width", SelectionManager.containsSelection(ids, this.data.teamB.identity) ? "2px" : "0px");
            }, CheerMeter.prototype.draw = function(data, duration, viewport) {
                var _this = this, easeName = "back", textOne = this.textOne, textTwo = this.textTwo;
                this.svg.attr({
                    height: viewport.height,
                    width: viewport.width
                }).on("click", (function() {
                    _this.clearSelection();
                })).style("background-color", data.background);
                var layout = this.calculateLayout(data, viewport);
                this.ensureStartState(layout, viewport), textOne.style("font-size", layout.fontSize).style("fill", data.teamA.color).on("click", (function() {
                    _this.selectionManager.select(data.teamA.identity, d3.event.ctrlKey).then((function(ids) {
                        _this.updateSelectionUI(ids);
                    })), d3.event.stopPropagation();
                })).text(data.teamA.name), textTwo.style("font-size", layout.fontSize).style("fill", data.teamB.color).on("click", (function() {
                    _this.selectionManager.select(data.teamB.identity, d3.event.ctrlKey).then((function(ids) {
                        _this.updateSelectionUI(ids);
                    })), d3.event.stopPropagation();
                })).text(data.teamB.name), textOne.transition().duration(duration).ease(easeName).attr({
                    y: layout.y1,
                    x: layout.x1
                }), textTwo.transition().duration(duration).ease(easeName).attr({
                    y: layout.y2,
                    x: layout.x2
                });
            }, CheerMeter.prototype.destroy = function() {
                this.svg = null, this.textOne = this.textTwo = null;
            }, CheerMeter.prototype.enumerateObjectInstances = function(options) {
                var instances = [], data = this.data;
                switch (options.objectName) {
                  case "dataPoint":
                    if (data) for (var teams = [ data.teamA, data.teamB ], _i = 0, teams_1 = teams; _i < teams_1.length; _i++) {
                        var slice = teams_1[_i], color = slice.color, selector = slice.identity, dataPointInstance = {
                            objectName: "dataPoint",
                            displayName: slice.name,
                            selector: selector.getSelector,
                            properties: {
                                fill: {
                                    solid: {
                                        color: color
                                    }
                                }
                            }
                        };
                        instances.push(dataPointInstance);
                    }
                    break;

                  case "general":
                    var general = {
                        objectName: "general",
                        displayName: "General",
                        selector: null,
                        properties: {
                            fill: {
                                solid: {
                                    color: data ? data.background : CheerMeter.DefaultBackgroundColor
                                }
                            }
                        }
                    };
                    instances.push(general);
                }
                return instances;
            }, CheerMeter.capabilities = {
                dataRoles: [ {
                    displayName: "Category",
                    name: "Category",
                    kind: powerbi.VisualDataRoleKind.Grouping
                }, {
                    displayName: "Noise Measure",
                    name: "Y",
                    kind: powerbi.VisualDataRoleKind.Measure
                } ],
                dataViewMappings: [ {
                    categorical: {
                        categories: {
                            for: {
                                in: "Category"
                            }
                        },
                        values: {
                            select: [ {
                                bind: {
                                    to: "Y"
                                }
                            } ]
                        }
                    }
                } ],
                objects: {
                    dataPoint: {
                        displayName: powerbi.data.createDisplayNameGetter("Visual_DataPoint"),
                        description: powerbi.data.createDisplayNameGetter("Visual_DataPointDescription"),
                        properties: {
                            fill: {
                                displayName: powerbi.data.createDisplayNameGetter("Visual_Fill"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            width: {
                                displayName: "",
                                type: {
                                    numeric: !0
                                }
                            }
                        }
                    },
                    general: {
                        displayName: "General",
                        properties: {
                            fill: {
                                displayName: "Background color",
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, CheerMeter.DefaultFontFamily = "cursive", CheerMeter.DefaultFontColor = "rgb(165, 172, 175)", 
            CheerMeter.DefaultBackgroundColor = "#243C18", CheerMeter.PaddingBetweenText = 15, 
            CheerMeter;
        })();
        visuals.CheerMeter = CheerMeter;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var NoMapLocationWarning = (function() {
            function NoMapLocationWarning() {}
            return Object.defineProperty(NoMapLocationWarning.prototype, "code", {
                get: function() {
                    return "NoMapLocation";
                },
                enumerable: !0,
                configurable: !0
            }), NoMapLocationWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "NoMapLocationMessage", titleKey = "NoMapLocationKey", detailKey = "NoMapLocationValue", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(titleKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, NoMapLocationWarning;
        })();
        visuals.NoMapLocationWarning = NoMapLocationWarning;
        var FilledMapWithoutValidGeotagCategoryWarning = (function() {
            function FilledMapWithoutValidGeotagCategoryWarning() {}
            return Object.defineProperty(FilledMapWithoutValidGeotagCategoryWarning.prototype, "code", {
                get: function() {
                    return "NoValidGeotaggedCategory";
                },
                enumerable: !0,
                configurable: !0
            }), FilledMapWithoutValidGeotagCategoryWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "NoValidGeotaggedCategoryMessage", titleKey = "NoValidGeotaggedCategoryKey", detailKey = "NoValidGeotaggedCategoryValue", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(titleKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, FilledMapWithoutValidGeotagCategoryWarning;
        })();
        visuals.FilledMapWithoutValidGeotagCategoryWarning = FilledMapWithoutValidGeotagCategoryWarning;
        var GeometryCulledWarning = (function() {
            function GeometryCulledWarning() {}
            return Object.defineProperty(GeometryCulledWarning.prototype, "code", {
                get: function() {
                    return "GeometryCulledWarning";
                },
                enumerable: !0,
                configurable: !0
            }), GeometryCulledWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "GeometryCulledWarningMessage", titleKey = "GeometryCulledWarningKey", detailKey = "GeometryCulledWarningVal", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(titleKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, GeometryCulledWarning;
        })();
        visuals.GeometryCulledWarning = GeometryCulledWarning;
        var NegativeValuesNotSupportedWarning = (function() {
            function NegativeValuesNotSupportedWarning() {}
            return Object.defineProperty(NegativeValuesNotSupportedWarning.prototype, "code", {
                get: function() {
                    return "NegativeValuesNotSupported";
                },
                enumerable: !0,
                configurable: !0
            }), NegativeValuesNotSupportedWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "VisualWarning_NegativeValues", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: "",
                    detail: ""
                };
                return visualMessage;
            }, NegativeValuesNotSupportedWarning;
        })();
        visuals.NegativeValuesNotSupportedWarning = NegativeValuesNotSupportedWarning;
        var AllNegativeValuesWarning = (function() {
            function AllNegativeValuesWarning() {}
            return Object.defineProperty(AllNegativeValuesWarning.prototype, "code", {
                get: function() {
                    return "AllNegativeValuesNotSupported";
                },
                enumerable: !0,
                configurable: !0
            }), AllNegativeValuesWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "VisualWarning_AllNegativeValues", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: "",
                    detail: ""
                };
                return visualMessage;
            }, AllNegativeValuesWarning;
        })();
        visuals.AllNegativeValuesWarning = AllNegativeValuesWarning;
        var NaNNotSupportedWarning = (function() {
            function NaNNotSupportedWarning() {}
            return Object.defineProperty(NaNNotSupportedWarning.prototype, "code", {
                get: function() {
                    return "NaNNotSupported";
                },
                enumerable: !0,
                configurable: !0
            }), NaNNotSupportedWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "VisualWarning_NanValues", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: "",
                    detail: ""
                };
                return visualMessage;
            }, NaNNotSupportedWarning;
        })();
        visuals.NaNNotSupportedWarning = NaNNotSupportedWarning;
        var InfinityValuesNotSupportedWarning = (function() {
            function InfinityValuesNotSupportedWarning() {}
            return Object.defineProperty(InfinityValuesNotSupportedWarning.prototype, "code", {
                get: function() {
                    return "InfinityValuesNotSupported";
                },
                enumerable: !0,
                configurable: !0
            }), InfinityValuesNotSupportedWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "VisualWarning_InfinityValues", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: "",
                    detail: ""
                };
                return visualMessage;
            }, InfinityValuesNotSupportedWarning;
        })();
        visuals.InfinityValuesNotSupportedWarning = InfinityValuesNotSupportedWarning;
        var ValuesOutOfRangeWarning = (function() {
            function ValuesOutOfRangeWarning() {}
            return Object.defineProperty(ValuesOutOfRangeWarning.prototype, "code", {
                get: function() {
                    return "ValuesOutOfRange";
                },
                enumerable: !0,
                configurable: !0
            }), ValuesOutOfRangeWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "VisualWarning_VisualizationOutOfRange", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: "",
                    detail: ""
                };
                return visualMessage;
            }, ValuesOutOfRangeWarning;
        })();
        visuals.ValuesOutOfRangeWarning = ValuesOutOfRangeWarning;
        var ZeroValueWarning = (function() {
            function ZeroValueWarning() {}
            return Object.defineProperty(ZeroValueWarning.prototype, "code", {
                get: function() {
                    return "ZeroValuesNotSupported";
                },
                enumerable: !0,
                configurable: !0
            }), ZeroValueWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "VisualWarning_ZeroValues", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: "",
                    detail: ""
                };
                return visualMessage;
            }, ZeroValueWarning;
        })();
        visuals.ZeroValueWarning = ZeroValueWarning;
        var AlignZerosWithCustomDomainWarning = (function() {
            function AlignZerosWithCustomDomainWarning() {}
            return Object.defineProperty(AlignZerosWithCustomDomainWarning.prototype, "code", {
                get: function() {
                    return "AlignZerosWithCustomDomain";
                },
                enumerable: !0,
                configurable: !0
            }), AlignZerosWithCustomDomainWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "VisualWarning_AlignZerosWithCustomDomain", titleKey = "VisualWarning_AlignZerosWithCustomDomainTitle", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(titleKey),
                    detail: resourceProvider.get(messageKey)
                };
                return visualMessage;
            }, AlignZerosWithCustomDomainWarning;
        })();
        visuals.AlignZerosWithCustomDomainWarning = AlignZerosWithCustomDomainWarning;
        var VisualKPIDataMissingWarning = (function() {
            function VisualKPIDataMissingWarning() {}
            return Object.defineProperty(VisualKPIDataMissingWarning.prototype, "code", {
                get: function() {
                    return "VisualKPIDataMissing";
                },
                enumerable: !0,
                configurable: !0
            }), VisualKPIDataMissingWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "Visual_KPI_DataMissing", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: "",
                    detail: ""
                };
                return visualMessage;
            }, VisualKPIDataMissingWarning;
        })();
        visuals.VisualKPIDataMissingWarning = VisualKPIDataMissingWarning;
        var ScriptVisualRefreshWarning = (function() {
            function ScriptVisualRefreshWarning() {}
            return Object.defineProperty(ScriptVisualRefreshWarning.prototype, "code", {
                get: function() {
                    return "ScriptVisualNotRefreshed";
                },
                enumerable: !0,
                configurable: !0
            }), ScriptVisualRefreshWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "ScriptVisualRefreshWarningMessage", detailKey = "ScriptVisualRefreshWarningValue", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(messageKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, ScriptVisualRefreshWarning;
        })();
        visuals.ScriptVisualRefreshWarning = ScriptVisualRefreshWarning;
        var DateSlicerNoDataWarning = (function() {
            function DateSlicerNoDataWarning() {}
            return Object.defineProperty(DateSlicerNoDataWarning.prototype, "code", {
                get: function() {
                    return "DateSlicerNoData";
                },
                enumerable: !0,
                configurable: !0
            }), DateSlicerNoDataWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "VisualWarning_DateSlicerNoData", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: "",
                    detail: ""
                };
                return visualMessage;
            }, DateSlicerNoDataWarning;
        })();
        visuals.DateSlicerNoDataWarning = DateSlicerNoDataWarning;
        var DataLabelsNotRenderedWarning = (function() {
            function DataLabelsNotRenderedWarning() {}
            return Object.defineProperty(DataLabelsNotRenderedWarning.prototype, "code", {
                get: function() {
                    return "DataLabelsNotRendered";
                },
                enumerable: !0,
                configurable: !0
            }), DataLabelsNotRenderedWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "DataLabelsNotRenderedMessage", detailKey = "DataLabelsNotRenderedValue", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(messageKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, DataLabelsNotRenderedWarning;
        })();
        visuals.DataLabelsNotRenderedWarning = DataLabelsNotRenderedWarning;
        var LegendFontSizeWarning = (function() {
            function LegendFontSizeWarning() {}
            return Object.defineProperty(LegendFontSizeWarning.prototype, "code", {
                get: function() {
                    return "LegendFontSize";
                },
                enumerable: !0,
                configurable: !0
            }), LegendFontSizeWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "Visual_ResponsiveWarningMessage_LegendFontSize", detailKey = "Visual_ResponsiveWarningValue_LegendFontSize", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(messageKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, LegendFontSizeWarning;
        })();
        visuals.LegendFontSizeWarning = LegendFontSizeWarning;
        var LegendNotRenderedWarning = (function() {
            function LegendNotRenderedWarning() {}
            return Object.defineProperty(LegendNotRenderedWarning.prototype, "code", {
                get: function() {
                    return "LegendNotRendered";
                },
                enumerable: !0,
                configurable: !0
            }), LegendNotRenderedWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "Visual_ResponsiveWarningMessage_LegendNotRendered", detailKey = "Visual_ResponsiveWarningValue_LegendNotRendered", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(messageKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, LegendNotRenderedWarning;
        })();
        visuals.LegendNotRenderedWarning = LegendNotRenderedWarning;
        var LegendLocationWarning = (function() {
            function LegendLocationWarning() {}
            return Object.defineProperty(LegendLocationWarning.prototype, "code", {
                get: function() {
                    return "LegendLocation";
                },
                enumerable: !0,
                configurable: !0
            }), LegendLocationWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "Visual_ResponsiveWarningMessage_LegendLocation", detailKey = "Visual_ResponsiveWarningValue_LegendLocation", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(messageKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, LegendLocationWarning;
        })();
        visuals.LegendLocationWarning = LegendLocationWarning;
        var AxisFontSizeWarning = (function() {
            function AxisFontSizeWarning() {}
            return Object.defineProperty(AxisFontSizeWarning.prototype, "code", {
                get: function() {
                    return "AxisFontSize";
                },
                enumerable: !0,
                configurable: !0
            }), AxisFontSizeWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "Visual_ResponsiveWarningMessage_AxisFontSize", detailKey = "Visual_ResponsiveWarningValue_AxisFontSize", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(messageKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, AxisFontSizeWarning;
        })();
        visuals.AxisFontSizeWarning = AxisFontSizeWarning;
        var AxisAndAxisLabelsNotRenderedWarning = (function() {
            function AxisAndAxisLabelsNotRenderedWarning() {}
            return Object.defineProperty(AxisAndAxisLabelsNotRenderedWarning.prototype, "code", {
                get: function() {
                    return "AxisAndAxisLabelsNotRendered";
                },
                enumerable: !0,
                configurable: !0
            }), AxisAndAxisLabelsNotRenderedWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "Visual_ResponsiveWarningMessage_AxisNotRendered", detailKey = "Visual_ResponsiveWarningValue_AxisNotRendered", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(messageKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, AxisAndAxisLabelsNotRenderedWarning;
        })();
        visuals.AxisAndAxisLabelsNotRenderedWarning = AxisAndAxisLabelsNotRenderedWarning;
        var AxisLabelsNotRenderedWarning = (function() {
            function AxisLabelsNotRenderedWarning() {}
            return Object.defineProperty(AxisLabelsNotRenderedWarning.prototype, "code", {
                get: function() {
                    return "AxisLabelsNotRendered";
                },
                enumerable: !0,
                configurable: !0
            }), AxisLabelsNotRenderedWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "Visual_ResponsiveWarningMessage_AxisLabelNotRendered", detailKey = "Visual_ResponsiveWarningValue_AxisLabelNotRendered", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(messageKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, AxisLabelsNotRenderedWarning;
        })();
        visuals.AxisLabelsNotRenderedWarning = AxisLabelsNotRenderedWarning;
        var NoIdentityExprWarning = (function() {
            function NoIdentityExprWarning() {}
            return Object.defineProperty(NoIdentityExprWarning.prototype, "code", {
                get: function() {
                    return NoIdentityExprWarning.code;
                },
                enumerable: !0,
                configurable: !0
            }), NoIdentityExprWarning.prototype.getMessages = function(resourceProvider) {
                var messageKey = "NoIdentityExprMessage", detailKey = "NoIdentityExprValue", visualMessage = {
                    message: resourceProvider.get(messageKey),
                    title: resourceProvider.get(messageKey),
                    detail: resourceProvider.get(detailKey)
                };
                return visualMessage;
            }, NoIdentityExprWarning.code = "NoIdentityExprWarning", NoIdentityExprWarning;
        })();
        visuals.NoIdentityExprWarning = NoIdentityExprWarning;
        var VisualWarningBuilder = (function() {
            function VisualWarningBuilder() {}
            return VisualWarningBuilder.prototype.add = function() {
                for (var warnings = [], _i = 0; _i < arguments.length; _i++) warnings[_i] = arguments[_i];
                return this.warnings || (this.warnings = []), (_a = this.warnings).push.apply(_a, warnings), 
                this;
                var _a;
            }, VisualWarningBuilder.prototype.addForVisualObject = function(objectName) {
                for (var objectWarnings = [], _i = 1; _i < arguments.length; _i++) objectWarnings[_i - 1] = arguments[_i];
                this.visualObjectWarnings || (this.visualObjectWarnings = {});
                var existingWarnings = this.visualObjectWarnings[objectName] = this.visualObjectWarnings[objectName] || [];
                return existingWarnings.push.apply(existingWarnings, objectWarnings), this;
            }, VisualWarningBuilder.prototype.removeForVisualObject = function(objectName) {
                return this.visualObjectWarnings && (this.visualObjectWarnings[objectName] = void 0), 
                this;
            }, VisualWarningBuilder.prototype.complete = function() {
                if (!_.isEmpty(this.warnings) || null != this.visualObjectWarnings) return {
                    warnings: this.warnings,
                    visualObjectWarnings: this.visualObjectWarnings
                };
            }, VisualWarningBuilder;
        })();
        visuals.VisualWarningBuilder = VisualWarningBuilder;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var Lazy = jsCommon.Lazy, controls = powerbi.visuals.controls, createClassAndSelector = jsCommon.CssConstants.createClassAndSelector, TouchUtils = powerbi.visuals.TouchUtils, PixelConverter = jsCommon.PixelConverter, ContainerClassName = createClassAndSelector("tooltip-container"), ContentContainerClassName = createClassAndSelector("tooltip-content-container"), DataContainerClassName = createClassAndSelector("tooltip-data-container"), ActionsContainerClassName = createClassAndSelector("tooltip-actions-container"), HideActionsContainerClassName = createClassAndSelector("hide-actions"), HideActionButtonClassName = createClassAndSelector("hide-action-button"), GlyphIconClassName = createClassAndSelector("glyphicon"), CloseButtonClassName = createClassAndSelector("close-button"), CloseButtonGlyphClassName = createClassAndSelector("pbi-glyph-close"), DrillUpButtonClassName = createClassAndSelector("drill-up-button"), DrillUpButtonGlyphClassName = createClassAndSelector("pbi-glyph-drillup"), DrillDownButtonClassName = createClassAndSelector("drill-down-button"), DrillDownButtonGlyphClassName = createClassAndSelector("pbi-glyph-drilldowndisabled"), ArrowClassName = createClassAndSelector("arrow"), HideArrowClassName = createClassAndSelector("hide-arrow"), TooltipHeaderClassName = createClassAndSelector("tooltip-header"), TooltipRowClassName = createClassAndSelector("tooltip-row"), TooltipColorCellClassName = createClassAndSelector("tooltip-color-cell"), TooltipTitleCellClassName = createClassAndSelector("tooltip-title-cell"), TooltipValueCellClassName = createClassAndSelector("tooltip-value-cell"), SmallTouchScreenClassName = createClassAndSelector("small-touch-screen"), LargeTouchScreenClassName = createClassAndSelector("large-touch-screen"), tooltipTitleCellMaxWidth = 260, tooltipValueCellMaxWidth = 260, tooltipFontSize = 11, tooltipTitleCellFontFamily = visuals.Font.Family.regularSecondary.css, tooltipValuesCellFontFamily = visuals.Font.Family.regular.css, titleProperties = {
            fontFamily: tooltipTitleCellFontFamily,
            fontSize: PixelConverter.toString(tooltipFontSize)
        }, valueProperties = {
            fontFamily: tooltipValuesCellFontFamily,
            fontSize: PixelConverter.toString(tooltipFontSize)
        }, Ellipsis = "…", SmallTouchScreenThreshold = 540, WideTooltipMargin = 8;
        visuals.DefaultTooltipOptions = {
            opacity: 1,
            animationDuration: 250,
            offsetX: 0,
            offsetY: 0
        }, visuals.TouchOptimizedTooltipOptions = {
            opacity: .87,
            animationDuration: 250,
            offsetY: 30,
            offsetX: 30,
            showActions: !0,
            hideArrow: !0,
            touchOptimized: !0
        };
        var TooltipContainer = (function() {
            function TooltipContainer(rootElement, options) {
                this.isTooltipVisible = !1, this.rootElement = rootElement, this.originalTooltipOptions = $.extend({}, visuals.DefaultTooltipOptions, options), 
                this.tooltipOptions = this.originalTooltipOptions;
            }
            return TooltipContainer.prototype.isVisible = function() {
                return this.isTooltipVisible;
            }, TooltipContainer.prototype.setTestScreenSize = function(width, height) {
                this.customScreenWidth = width, this.customScreenHeight = height;
            }, TooltipContainer.prototype.show = function(tooltipData, clickedArea) {
                this.isTooltipVisible = !0;
                var clickedScreenArea, centerPointOffsetWidth, centerPointOffsetHeight, tooltipPosition;
                this.tooltipContainer || (this.tooltipContainer = this.createTooltipContainer(this.rootElement)), 
                clickedArea && (clickedScreenArea = this.getClickedScreenArea(clickedArea), centerPointOffsetWidth = clickedArea.width >> 1, 
                centerPointOffsetHeight = clickedArea.height >> 1, tooltipPosition = new controls.TouchUtils.Point(clickedArea.left + centerPointOffsetWidth, clickedArea.top + centerPointOffsetHeight)), 
                tooltipData && this.setTooltipData(tooltipData, clickedScreenArea, tooltipPosition), 
                this.tooltipContainer.style("display", "").transition().duration(0).style("opacity", this.tooltipOptions.opacity), 
                clickedArea && this.setPositionAndSize(clickedArea, clickedScreenArea, centerPointOffsetWidth, centerPointOffsetHeight, tooltipPosition);
            }, TooltipContainer.prototype.move = function(tooltipData, clickedArea) {
                var clickedScreenArea, centerPointOffsetWidth, centerPointOffsetHeight, tooltipPosition;
                this.tooltipContainer || (this.tooltipContainer = this.createTooltipContainer(this.rootElement)), 
                clickedScreenArea = this.getClickedScreenArea(clickedArea), centerPointOffsetWidth = clickedArea.width >> 1, 
                centerPointOffsetHeight = clickedArea.height >> 1, tooltipPosition = new controls.TouchUtils.Point(clickedArea.left + centerPointOffsetWidth, clickedArea.top + centerPointOffsetHeight), 
                this.setPositionAndSize(clickedArea, clickedScreenArea, centerPointOffsetWidth, centerPointOffsetHeight, tooltipPosition), 
                tooltipData && this.setTooltipData(tooltipData, clickedScreenArea, tooltipPosition);
            }, TooltipContainer.prototype.hide = function() {
                this.isTooltipVisible && (this.isTooltipVisible = !1, this.tooltipContainer.transition().duration(this.tooltipOptions.animationDuration).style("opacity", 0).each("end", (function() {
                    this.style.display = "none";
                })));
            }, TooltipContainer.prototype.setTooltipAppearanceOptions = function(options) {
                var mergedOptions = $.extend({}, this.originalTooltipOptions, options);
                this.tooltipOptions = mergedOptions, this.tooltipContainer && this.getActionsContainerElement().classed(HideActionsContainerClassName.class, !this.tooltipOptions.showActions);
            }, TooltipContainer.prototype.createTooltipContainer = function(root) {
                var container = d3.select(root).append("div").classed(ContainerClassName.class, !0);
                container.append("div").classed(ArrowClassName.class, !0);
                var contentContainer = container.append("div").classed(ContentContainerClassName.class, !0);
                contentContainer.append("div").classed(DataContainerClassName.class, !0);
                var actionsContainer = contentContainer.append("div").classed(ActionsContainerClassName.class, !0).classed(HideActionsContainerClassName.class, !this.tooltipOptions.showActions);
                return this.fillActionsContainer(actionsContainer), container.style("display", "none"), 
                container;
            }, TooltipContainer.prototype.fillActionsContainer = function(actionsContainer) {
                var _this = this;
                this.addActionButton(actionsContainer, CloseButtonClassName.class, CloseButtonGlyphClassName.class, (function() {
                    _this.hide();
                }));
                var drillUpButton = this.addActionButton(actionsContainer, DrillUpButtonClassName.class, DrillUpButtonGlyphClassName.class, null);
                drillUpButton.classed(HideActionButtonClassName.class, !0);
                var drillDownButton = this.addActionButton(actionsContainer, DrillDownButtonClassName.class, DrillDownButtonGlyphClassName.class, null);
                drillDownButton.classed(HideActionButtonClassName.class, !0);
            }, TooltipContainer.prototype.addActionButton = function(actionsContainer, buttonClass, glyphClass, action) {
                var actionButton = actionsContainer.append("button").classed(buttonClass, !0);
                return actionButton.append("div").classed(GlyphIconClassName.class, !0).classed(glyphClass, !0), 
                actionButton.on("click", action), actionButton;
            }, TooltipContainer.prototype.setTooltipData = function(tooltipData, clickedScreenArea, tooltipPosition) {
                if (!_.isEqual(tooltipData, this.currentContent)) {
                    this.currentContent = tooltipData;
                    var rowsSelector = TooltipRowClassName.selector, dataContainer = this.tooltipContainer.select(DataContainerClassName.selector);
                    if (dataContainer.selectAll(TooltipHeaderClassName.selector).remove(), dataContainer.selectAll(TooltipRowClassName.selector).remove(), 
                    0 !== tooltipData.length) {
                        tooltipData[0].header && dataContainer.append("div").attr("class", TooltipHeaderClassName.class).text(tooltipData[0].header);
                        var tooltipRow = dataContainer.selectAll(rowsSelector).data(tooltipData), newRow = tooltipRow.enter().append("div").attr("class", TooltipRowClassName.class);
                        if (_.any(tooltipData, (function(tooltipItem) {
                            return tooltipItem.color;
                        }))) {
                            var newColorCell = newRow.filter((function(d) {
                                return d.color;
                            })).append("div").attr("class", TooltipColorCellClassName.class);
                            newColorCell.style("max-width", (function(d) {
                                return d.lineStyle ? "31px" : "13px";
                            }));
                            var svg = newColorCell.append("svg");
                            svg.attr({
                                width: function(d) {
                                    return d.lineStyle ? TooltipContainer.IconLineTotalWidth : "100%";
                                },
                                height: "15px"
                            }), svg.append("path").attr({
                                transform: function(d) {
                                    return visuals.SVGUtil.translateAndScale(d.lineStyle ? TooltipContainer.IconLineTotalWidth / 2 : 5, 8, 5 / visuals.Markers.defaultSize);
                                },
                                d: function(d) {
                                    return d.lineStyle ? "M 0 0 M -" + TooltipContainer.IconLineTotalWidth / 2 + " 0 L " + TooltipContainer.IconLineTotalWidth / 2 + " 0" : null;
                                }
                            }).style({
                                stroke: function(d) {
                                    return d.lineColor;
                                },
                                "stroke-opacity": 1,
                                "stroke-width": function(d) {
                                    return 2;
                                },
                                "stroke-dasharray": function(d) {
                                    return d.lineStyle ? visuals.LineStyle.getSrokeDashArrayForLegend(d.lineStyle) : null;
                                }
                            }), svg.append("path").attr({
                                transform: function(d) {
                                    return visuals.SVGUtil.translateAndScale(d.lineStyle ? TooltipContainer.IconLineTotalWidth / 2 : 5, 8, 5 / visuals.Markers.defaultSize);
                                },
                                d: function(d) {
                                    return visuals.Markers.getPath(d.markerShape);
                                }
                            }).style({
                                fill: function(d) {
                                    return d.color;
                                },
                                stroke: function(d) {
                                    return d.color;
                                },
                                "fill-opacity": function(d) {
                                    return null != d.opacity ? d.opacity : 1;
                                },
                                "stroke-opacity": function(d) {
                                    return null != d.opacity ? d.opacity : 1;
                                }
                            });
                        }
                        var newTitleCell = newRow.append("div").attr("class", TooltipTitleCellClassName.class).text((function(d) {
                            return d.displayName;
                        })), newValueCell = newRow.append("div").attr("class", TooltipValueCellClassName.class).text((function(d) {
                            return d.value;
                        }));
                        this.updateTooltipTextLines(tooltipData, newTitleCell, newValueCell, clickedScreenArea, tooltipPosition);
                    }
                }
            }, TooltipContainer.prototype.updateTooltipTextLines = function(tooltipData, newTitleCell, newValueCell, clickedScreenArea, tooltipPosition) {
                var tooltipTotalHeight, tooltipYPosition = tooltipPosition ? tooltipPosition.y : 0;
                switch (clickedScreenArea) {
                  case 0:
                  case 1:
                    tooltipTotalHeight = (this.customScreenHeight || window.innerHeight) - tooltipYPosition;
                    break;

                  case 3:
                  case 2:
                    tooltipTotalHeight = tooltipYPosition;
                }
                for (var rowHeight = Math.max(powerbi.TextMeasurementService.estimateSvgTextHeight(titleProperties), powerbi.TextMeasurementService.estimateSvgTextHeight(valueProperties)), totalAllowedRows = tooltipTotalHeight / rowHeight, totalNeededRows = 0, neededRows = [], allowedRows = [], titleWordsList = [], valueWordsList = [], tooltipContainer = this, index = 0; index < tooltipData.length; index++) {
                    titleWordsList[index] = jsCommon.WordBreaker.splitByWidth(tooltipData[index].displayName, titleProperties, powerbi.TextMeasurementService.measureSvgTextWidth, tooltipTitleCellMaxWidth, totalAllowedRows, null, !1, !0), 
                    valueWordsList[index] = jsCommon.WordBreaker.splitByWidth(tooltipData[index].value, valueProperties, powerbi.TextMeasurementService.measureSvgTextWidth, tooltipValueCellMaxWidth, totalAllowedRows, null, !1, !0);
                    var neededRowForCurrentTooltip = Math.max(titleWordsList[index].length, valueWordsList[index].length);
                    neededRows.push(neededRowForCurrentTooltip), totalNeededRows += neededRowForCurrentTooltip;
                }
                if (totalNeededRows <= totalAllowedRows) allowedRows = neededRows; else for (var remainingRows = totalAllowedRows - tooltipData.length, index = 0; index < tooltipData.length; index++) allowedRows[index] = 1 + Math.round(Math.max(remainingRows, 0) * (neededRows[index] / totalAllowedRows));
                newTitleCell.each((function(_d, index) {
                    tooltipContainer.placeTooltip(this, titleProperties, rowHeight, tooltipTitleCellMaxWidth, allowedRows[index], titleWordsList[index]);
                })), newValueCell.each((function(_d, index) {
                    tooltipContainer.placeTooltip(this, valueProperties, rowHeight, tooltipValueCellMaxWidth, allowedRows[index], valueWordsList[index]);
                }));
            }, TooltipContainer.prototype.placeTooltip = function(element, properties, rowHeight, maxWidth, maxNumLines, words) {
                var node = d3.select(element);
                element.textContent = null, words.length > maxNumLines + 1 ? words[maxNumLines - 1] += words[maxNumLines] + Ellipsis : words.length > maxNumLines && (words[maxNumLines - 1] += words[maxNumLines]);
                for (var i = 0, len = Math.min(words.length, maxNumLines); i < len; i++) properties.text = words[i], 
                node.append("div").attr({
                    x: 0,
                    dy: 0 === i ? 0 : rowHeight
                }).text(powerbi.TextMeasurementService.getTailoredTextOrDefault(properties, maxWidth));
            }, TooltipContainer.prototype.getTooltipContainerBounds = function() {
                var tooltipContainerBounds;
                return "none" === this.tooltipContainer.style("display") ? (this.tooltipContainer.style("display", ""), 
                tooltipContainerBounds = this.tooltipContainer.node().getBoundingClientRect(), this.tooltipContainer.style("display", "none")) : tooltipContainerBounds = this.tooltipContainer.node().getBoundingClientRect(), 
                tooltipContainerBounds;
            }, TooltipContainer.prototype.updateTooltipPosition = function(clickedArea, clickedScreenArea, centerPointOffsetWidth, centerPointOffsetHeight, tooltipPosition) {
                var tooltipContainerBounds = this.getTooltipContainerBounds(), offsetX = 0, offsetY = 0, arrowOffset = this.tooltipOptions.hideArrow ? 0 : 7;
                0 === clickedScreenArea ? (offsetX += 3 * arrowOffset + centerPointOffsetWidth, 
                offsetY -= 2 * arrowOffset + centerPointOffsetHeight) : 1 === clickedScreenArea ? (offsetX -= 2 * arrowOffset + tooltipContainerBounds.width + centerPointOffsetWidth, 
                offsetY -= 2 * arrowOffset + centerPointOffsetHeight) : 3 === clickedScreenArea ? (offsetX += 3 * arrowOffset + centerPointOffsetWidth, 
                offsetY -= tooltipContainerBounds.height - 2 * arrowOffset + centerPointOffsetHeight) : 2 === clickedScreenArea && (offsetX -= 2 * arrowOffset + tooltipContainerBounds.width + centerPointOffsetWidth, 
                offsetY -= tooltipContainerBounds.height - 2 * arrowOffset + centerPointOffsetHeight);
                var optionsOffsetX = 0 === clickedScreenArea || 3 === clickedScreenArea ? this.tooltipOptions.offsetX : -this.tooltipOptions.offsetX, optionsOffsetY = 0 === clickedScreenArea || 1 === clickedScreenArea ? this.tooltipOptions.offsetY : -this.tooltipOptions.offsetY;
                return offsetX += optionsOffsetX, offsetY += optionsOffsetY, tooltipPosition.offset(offsetX, offsetY), 
                tooltipPosition;
            }, TooltipContainer.prototype.setPositionAndSize = function(clickedArea, clickedScreenArea, centerPointOffsetWidth, centerPointOffsetHeight, tooltipPosition) {
                tooltipPosition = this.updateTooltipPosition(clickedArea, clickedScreenArea, centerPointOffsetWidth, centerPointOffsetHeight, tooltipPosition);
                var tooltipRect = this.widenTooltipIfNeeded(tooltipPosition);
                this.setTooltipContainerClass(clickedScreenArea), this.tooltipContainer.style({
                    left: tooltipRect.left + "px",
                    top: tooltipRect.top + "px"
                }), this.getDataContainerElement().style("width", tooltipRect.width ? tooltipRect.width + "px" : ""), 
                this.setArrowPosition(clickedScreenArea);
            }, TooltipContainer.prototype.widenTooltipIfNeeded = function(tooltipPosition) {
                var tooltipRect = {
                    left: tooltipPosition.x,
                    top: tooltipPosition.y,
                    width: void 0,
                    height: void 0
                };
                if (this.isNarrowTouchScreen()) {
                    tooltipRect.left = WideTooltipMargin;
                    var screenWidth = this.getScreenBounds().width;
                    tooltipRect.width = screenWidth - 2 * WideTooltipMargin;
                }
                return tooltipRect;
            }, TooltipContainer.prototype.setTooltipContainerClass = function(clickedScreenArea) {
                var tooltipContainerClassName;
                switch (clickedScreenArea) {
                  case 0:
                  case 3:
                    tooltipContainerClassName = "left";
                    break;

                  case 1:
                  case 2:
                    tooltipContainerClassName = "right";
                }
                this.tooltipContainer.attr("class", ContainerClassName.class).classed(tooltipContainerClassName, !0).classed(SmallTouchScreenClassName.class, this.isSmallTouchScreen()).classed(LargeTouchScreenClassName.class, this.isLargeTouchScreen());
            }, TooltipContainer.prototype.setArrowPosition = function(clickedScreenArea) {
                var arrowClassName, arrow = this.getArrowElement();
                arrowClassName = 0 === clickedScreenArea ? "top left" : 1 === clickedScreenArea ? "top right" : 3 === clickedScreenArea ? "bottom left" : "bottom right", 
                arrow.attr("class", "arrow").classed(arrowClassName, !0).classed(HideArrowClassName.class, this.tooltipOptions.hideArrow);
            }, TooltipContainer.prototype.getClickedScreenArea = function(clickedArea) {
                var screenBounds = this.getScreenBounds(), centerPointOffset = clickedArea.width / 2, centerPoint = new controls.TouchUtils.Point(clickedArea.left + centerPointOffset, clickedArea.top + centerPointOffset), halfWidth = screenBounds.width / 2, halfHeight = screenBounds.height / 2;
                return centerPoint.x < halfWidth && centerPoint.y < halfHeight ? 0 : centerPoint.x >= halfWidth && centerPoint.y < halfHeight ? 1 : centerPoint.x < halfWidth && centerPoint.y >= halfHeight ? 3 : centerPoint.x >= halfWidth && centerPoint.y >= halfHeight ? 2 : void 0;
            }, TooltipContainer.prototype.isNarrowTouchScreen = function() {
                return this.tooltipOptions.touchOptimized && this.getScreenBounds().width <= SmallTouchScreenThreshold;
            }, TooltipContainer.prototype.isSmallTouchScreen = function() {
                if (!this.tooltipOptions.touchOptimized) return !1;
                var screenBounds = this.getScreenBounds();
                return screenBounds.width <= SmallTouchScreenThreshold || screenBounds.height <= SmallTouchScreenThreshold;
            }, TooltipContainer.prototype.isLargeTouchScreen = function() {
                return this.tooltipOptions.touchOptimized && !this.isSmallTouchScreen();
            }, TooltipContainer.prototype.getArrowElement = function() {
                return this.tooltipContainer.select(ArrowClassName.selector);
            }, TooltipContainer.prototype.getActionsContainerElement = function() {
                return this.tooltipContainer.select(ActionsContainerClassName.selector);
            }, TooltipContainer.prototype.getDataContainerElement = function() {
                return this.tooltipContainer.select(DataContainerClassName.selector);
            }, TooltipContainer.prototype.getScreenBounds = function() {
                return {
                    width: this.customScreenWidth || window.innerWidth,
                    height: this.customScreenHeight || window.innerHeight
                };
            }, TooltipContainer.IconLineTotalWidth = 31, TooltipContainer;
        })();
        visuals.TooltipContainer = TooltipContainer;
        var ToolTipComponent = (function() {
            function ToolTipComponent(tooltipOptions) {
                this.tooltipOptions = tooltipOptions, tooltipOptions || (this.tooltipOptions = visuals.DefaultTooltipOptions);
            }
            return ToolTipComponent.prototype.isTooltipComponentVisible = function() {
                return this.tooltipContainer && this.tooltipContainer.isVisible();
            }, ToolTipComponent.prototype.show = function(tooltipData, clickedArea) {
                this.ensureTooltipContainer(), this.tooltipContainer.show(tooltipData, this.convertRect(clickedArea));
            }, ToolTipComponent.prototype.move = function(tooltipData, clickedArea) {
                this.ensureTooltipContainer(), this.tooltipContainer.move(tooltipData, this.convertRect(clickedArea));
            }, ToolTipComponent.prototype.hide = function() {
                this.ensureTooltipContainer(), this.tooltipContainer.hide();
            }, ToolTipComponent.prototype.setTooltipAppearanceOptions = function(options) {
                this.ensureTooltipContainer(), this.tooltipContainer.setTooltipAppearanceOptions(options);
            }, ToolTipComponent.prototype.convertRect = function(rect) {
                return new visuals.Rect(rect.x, rect.y, rect.width, rect.height);
            }, ToolTipComponent.prototype.ensureTooltipContainer = function() {
                if (!this.tooltipContainer) {
                    var root = $(ToolTipComponent.parentContainerSelector).get(0);
                    this.tooltipContainer = new TooltipContainer(root, this.tooltipOptions);
                }
            }, ToolTipComponent.parentContainerSelector = "body", ToolTipComponent.highlightedValueDisplayNameResorceKey = "Tooltip_HighlightedValueDisplayName", 
            ToolTipComponent;
        })();
        visuals.ToolTipComponent = ToolTipComponent;
        var TooltipManager;
        !(function(TooltipManager) {
            function removeTooltips(selection) {
                selection.on(".tooltip", null);
            }
            function addTooltip(selection, getTooltipInfoDelegate, reloadTooltipDataOnMouseMove, onMouseOutDelegate) {
                if (TooltipManager.ShowTooltips) {
                    var rootNode = d3.select(ToolTipComponent.parentContainerSelector).node();
                    selection.on("mouseover.tooltip", (function() {
                        var target = d3.event.target, data = d3.select(target).datum();
                        if (!handleTouchTimeoutId && canDisplayTooltip(d3.event)) {
                            mouseCoordinates = visuals.getCoordinates(rootNode, !0);
                            var elementCoordinates = visuals.getCoordinates(target, !0), tooltipEvent = {
                                data: data,
                                coordinates: mouseCoordinates,
                                elementCoordinates: elementCoordinates,
                                context: target,
                                isTouchEvent: !1
                            };
                            clearTooltipTimeout();
                            var delay = TooltipManager.ToolTipInstance.isTooltipComponentVisible() ? 16 : TooltipManager.tooltipMouseOverDelay;
                            tooltipTimeoutId = showDelayedTooltip(tooltipEvent, getTooltipInfoDelegate, delay);
                        }
                    })), selection.on("mouseout.tooltip", (function() {
                        handleTouchTimeoutId || (clearTooltipTimeout(), tooltipTimeoutId = hideDelayedTooltip()), 
                        onMouseOutDelegate && onMouseOutDelegate();
                    })), selection.on("mousemove.tooltip", (function() {
                        var target = d3.event.target, data = d3.select(target).datum();
                        if (!handleTouchTimeoutId && canDisplayTooltip(d3.event)) {
                            mouseCoordinates = visuals.getCoordinates(rootNode, !0);
                            var elementCoordinates = visuals.getCoordinates(target, !0), tooltipEvent = {
                                data: data,
                                coordinates: mouseCoordinates,
                                elementCoordinates: elementCoordinates,
                                context: target,
                                isTouchEvent: !1
                            };
                            moveTooltipEventHandler(tooltipEvent, getTooltipInfoDelegate, reloadTooltipDataOnMouseMove);
                        }
                    }));
                    var touchStartEventName = TouchUtils.touchStartEventName(), touchMoveEventName = TouchUtils.touchMoveEventName(), touchEndEventName = TouchUtils.touchEndEventName(), isPointerEvent = "pointerdown" === touchStartEventName || "MSPointerDown" === touchStartEventName;
                    GlobalTooltipEventsAttached || (attachGlobalEvents(touchStartEventName), GlobalTooltipEventsAttached = !0), 
                    selection.on(touchStartEventName + ".tooltip", (function() {
                        var target = d3.event.target, data = d3.select(target).datum();
                        hideTooltipEventHandler();
                        var coordinates = visuals.getCoordinates(rootNode, isPointerEvent), elementCoordinates = visuals.getCoordinates(target, isPointerEvent), tooltipEvent = {
                            data: data,
                            coordinates: coordinates,
                            elementCoordinates: elementCoordinates,
                            context: target,
                            isTouchEvent: !0
                        };
                        clearTooltipTimeout(), tooltipTimeoutId = showDelayedTooltip(tooltipEvent, getTooltipInfoDelegate, TooltipManager.tooltipTouchDelay);
                    })), TooltipManager.ShowTouchScreenOptimizedTooltips && selection.on(touchMoveEventName + ".tooltip", (function() {
                        var coordinates = visuals.getCoordinates(rootNode, isPointerEvent), target = document.elementFromPoint(coordinates[0], coordinates[1]), data = d3.select(target).datum(), elementCoordinates = visuals.getCoordinates(target, isPointerEvent), tooltipEvent = {
                            data: data,
                            coordinates: mouseCoordinates,
                            elementCoordinates: elementCoordinates,
                            context: target,
                            isTouchEvent: !0
                        };
                        moveTooltipEventHandler(tooltipEvent, getTooltipInfoDelegate, !0);
                    })), selection.on(touchEndEventName + ".tooltip", (function() {
                        TooltipManager.ShowTouchScreenOptimizedTooltips ? TooltipManager.ToolTipInstance.isTooltipComponentVisible() || clearTooltipTimeout() : (clearTooltipTimeout(), 
                        tooltipTimeoutId = hideDelayedTooltip()), handleTouchTimeoutId && clearTimeout(handleTouchTimeoutId), 
                        handleTouchTimeoutId = setTimeout((function() {
                            handleTouchTimeoutId = 0;
                        }), TooltipManager.handleTouchDelay);
                    }));
                }
            }
            function showDelayedTooltip(tooltipEvent, getTooltipInfoDelegate, delayInMs) {
                return setTimeout((function() {
                    return showTooltipEventHandler(tooltipEvent, getTooltipInfoDelegate);
                }), delayInMs);
            }
            function hideDelayedTooltip() {
                return setTimeout((function() {
                    return hideTooltipEventHandler();
                }), TooltipManager.tooltipMouseOutDelay);
            }
            function setLocalizedStrings(localizationOptions) {
                ToolTipComponent.localizationOptions = localizationOptions;
            }
            function showTooltipEventHandler(tooltipEvent, getTooltipInfoDelegate) {
                var tooltipInfo = tooltipData || getTooltipInfoDelegate(tooltipEvent);
                if (!_.isEmpty(tooltipInfo)) {
                    var isOptimizedTouchEvent = tooltipEvent.isTouchEvent && TooltipManager.ShowTouchScreenOptimizedTooltips;
                    TooltipManager.ToolTipInstance.setTooltipAppearanceOptions(isOptimizedTouchEvent ? visuals.TouchOptimizedTooltipOptions : visuals.DefaultTooltipOptions);
                    var coordinates = mouseCoordinates || tooltipEvent.coordinates, clickedArea = getClickedArea(coordinates[0], coordinates[1], tooltipEvent.isTouchEvent);
                    TooltipManager.ToolTipInstance.show(tooltipInfo, clickedArea);
                }
            }
            function moveTooltipEventHandler(tooltipEvent, getTooltipInfoDelegate, reloadTooltipDataOnMouseMove) {
                tooltipData = void 0, reloadTooltipDataOnMouseMove && (tooltipData = getTooltipInfoDelegate(tooltipEvent));
                var clickedArea = getClickedArea(tooltipEvent.coordinates[0], tooltipEvent.coordinates[1], tooltipEvent.isTouchEvent);
                TooltipManager.ToolTipInstance.move(tooltipData, clickedArea);
            }
            function hideTooltipEventHandler() {
                TooltipManager.ToolTipInstance.hide();
            }
            function clearTooltipTimeout() {
                tooltipTimeoutId && clearTimeout(tooltipTimeoutId);
            }
            function canDisplayTooltip(d3Event) {
                var cadDisplay = !0, mouseEvent = d3Event;
                if (void 0 !== mouseEvent.buttons) {
                    var hasMouseButtonPressed = 0 !== mouseEvent.buttons;
                    cadDisplay = !hasMouseButtonPressed;
                }
                return cadDisplay;
            }
            function attachGlobalEvents(touchStartEventName) {
                d3.select(ToolTipComponent.parentContainerSelector).on(touchStartEventName, (function(d, i) {
                    TooltipManager.ToolTipInstance.hide();
                }));
            }
            function getClickedArea(x, y, isTouchEvent) {
                var width = 0, pointX = x, pointY = y;
                if (isTouchEvent) {
                    width = 12;
                    var offset = width / 2;
                    pointX = Math.max(x - offset, 0), pointY = Math.max(y - offset, 0);
                }
                return new controls.TouchUtils.Rectangle(pointX, pointY, width, width);
            }
            var GlobalTooltipEventsAttached = !1;
            TooltipManager.ShowTooltips = !0, TooltipManager.ShowTouchScreenOptimizedTooltips = !0, 
            TooltipManager.ToolTipInstance = new ToolTipComponent(), TooltipManager.tooltipMouseOverDelay = 350, 
            TooltipManager.tooltipMouseOutDelay = 500, TooltipManager.tooltipTouchDelay = 350, 
            TooltipManager.handleTouchDelay = 1e3;
            var tooltipTimeoutId, mouseCoordinates, tooltipData, handleTouchTimeoutId = 0;
            TooltipManager.removeTooltips = removeTooltips, TooltipManager.addTooltip = addTooltip, 
            TooltipManager.setLocalizedStrings = setLocalizedStrings;
        })(TooltipManager = visuals.TooltipManager || (visuals.TooltipManager = {}));
        var TooltipBuilder;
        !(function(TooltipBuilder) {
            function createTooltipInfo(formatStringProp, dataViewCat, categoryValue, value, categories, seriesData, seriesIndex, categoryIndex, highlightedValue, gradientValueColumn) {
                var categorySource, valuesSource, seriesSource = [];
                seriesIndex = 0 | seriesIndex;
                var categoriesData = dataViewCat ? dataViewCat.categories : categories;
                if (categoriesData && categoriesData.length > 0) if (categoriesData.length > 1) {
                    for (var compositeCategoriesData = [], i = 0, ilen = categoriesData.length; i < ilen; i++) compositeCategoriesData.push(categoriesData[i].source);
                    categorySource = {
                        value: categoryValue,
                        metadata: compositeCategoriesData
                    };
                } else categorySource = {
                    value: categoryValue,
                    metadata: [ categoriesData[0].source ]
                };
                if (dataViewCat && dataViewCat.values) {
                    if (categorySource && categorySource.metadata[0] === dataViewCat.values.source || (valuesSource = dataViewCat.values.source), 
                    dataViewCat.values.length > 0) {
                        var valueColumn = dataViewCat.values[seriesIndex], isAutoGeneratedColumn = !!(valueColumn && valueColumn.source && valueColumn.source.isAutoGeneratedColumn);
                        isAutoGeneratedColumn || seriesSource.push({
                            value: value,
                            highlightedValue: highlightedValue,
                            metadata: valueColumn
                        });
                    }
                    var gradientToolTipData = createGradientToolTipData(gradientValueColumn, categoryIndex);
                    null != gradientToolTipData && seriesSource.push(gradientToolTipData);
                }
                if (seriesData) for (var i = 0, len = seriesData.length; i < len; i++) {
                    var singleSeriesData = seriesData[i];
                    categorySource && categorySource.metadata[0] === singleSeriesData.metadata.source || seriesSource.push({
                        value: singleSeriesData.value,
                        metadata: singleSeriesData.metadata
                    });
                }
                var tooltipInfo = createTooltipData(formatStringProp, categorySource, valuesSource, seriesSource);
                return tooltipInfo;
            }
            function createGradientToolTipData(gradientValueColumn, categoryIndex) {
                return gradientValueColumn ? {
                    value: gradientValueColumn.values[categoryIndex],
                    metadata: {
                        source: gradientValueColumn.source,
                        values: []
                    }
                } : null;
            }
            function createTooltipData(formatStringProp, categoryValue, valuesSource, seriesValues) {
                var items = [];
                if (categoryValue) if (categoryValue.metadata.length > 1) {
                    for (var displayName = "", i = 0, ilen = categoryValue.metadata.length; i < ilen; i++) 0 !== i && (displayName += "/"), 
                    displayName += categoryValue.metadata[i].displayName;
                    var categoryFormattedValue = visuals.converterHelper.formatFromMetadataColumn(categoryValue.value, categoryValue.metadata[0], formatStringProp);
                    items.push({
                        displayName: displayName,
                        value: categoryFormattedValue
                    });
                } else {
                    var categoryFormattedValue = visuals.converterHelper.formatFromMetadataColumn(categoryValue.value, categoryValue.metadata[0], formatStringProp);
                    items.push({
                        displayName: categoryValue.metadata[0].displayName,
                        value: categoryFormattedValue
                    });
                }
                if (valuesSource) {
                    var dynamicValue = void 0;
                    if (seriesValues.length > 0) {
                        var dynamicValueMetadata = seriesValues[0].metadata.source;
                        dynamicValue = visuals.converterHelper.formatFromMetadataColumn(dynamicValueMetadata.groupName, valuesSource, formatStringProp);
                    }
                    items.push({
                        displayName: valuesSource.displayName,
                        value: dynamicValue
                    });
                }
                for (var _i = 0, seriesValues_1 = seriesValues; _i < seriesValues_1.length; _i++) {
                    var seriesData = seriesValues_1[_i];
                    if (seriesData && seriesData.metadata) {
                        var seriesMetadataColumn = seriesData.metadata.source, value = seriesData.value, highlightedValue = seriesData.highlightedValue;
                        if (value || 0 === value) {
                            var formattedValue = visuals.converterHelper.formatFromMetadataColumn(value, seriesMetadataColumn, formatStringProp, !1);
                            items.push({
                                displayName: seriesMetadataColumn.displayName,
                                value: formattedValue
                            });
                        }
                        if (highlightedValue || 0 === highlightedValue) {
                            var formattedHighlightedValue = visuals.converterHelper.formatFromMetadataColumn(highlightedValue, seriesMetadataColumn, formatStringProp, !1), displayName = ToolTipComponent.localizationOptions.highlightedValueDisplayName;
                            items.push({
                                displayName: displayName,
                                value: formattedHighlightedValue
                            });
                        }
                    }
                }
                return items;
            }
            function addTooltipMeasures(reader, tooltipInfo, categoryIndex, seriesIndex, formatStringProp) {
                var tooltipValues = reader.data.getAllValuesForRole("Tooltips", categoryIndex, seriesIndex), displayNames = reader.data.getAllValueDisplayNamesForRole("Tooltips"), columnMetadatas = reader.columns.getAllValueMetadataColumnsForRole("Tooltips", seriesIndex);
                if (tooltipValues) for (var j = 0; j < tooltipValues.length; j++) null != tooltipValues[j] && tooltipInfo.push({
                    displayName: displayNames[j],
                    value: visuals.converterHelper.formatFromMetadataColumn(tooltipValues[j], columnMetadatas[j], formatStringProp, !1)
                });
            }
            TooltipBuilder.createTooltipInfo = createTooltipInfo, TooltipBuilder.createGradientToolTipData = createGradientToolTipData, 
            TooltipBuilder.addTooltipMeasures = addTooltipMeasures;
        })(TooltipBuilder = visuals.TooltipBuilder || (visuals.TooltipBuilder = {}));
        var LazyTooltipBuilder = (function() {
            function LazyTooltipBuilder() {
                this.items = [], this.columns = [];
            }
            return LazyTooltipBuilder.prototype.withColumnValueByIndex = function(column, valueIndex, allowNulls, formatter) {
                if (!column) return this;
                var value = column.values[valueIndex];
                return this.withColumnValue(column.source, value, allowNulls, formatter);
            }, LazyTooltipBuilder.prototype.withColumnValue = function(source, value, allowNulls, formatter) {
                return source && (allowNulls || null != value) ? _.contains(this.columns, source.queryName) ? this : (this.columns.push(source.queryName), 
                this.items.push(new Lazy(function() {
                    return {
                        displayName: source.displayName,
                        value: formatter(value, source)
                    };
                })), this) : this;
            }, LazyTooltipBuilder.prototype.withMultipleColumnAndValues = function(sources, values, allowNulls, formatter) {
                if (!sources) return this;
                if (!allowNulls && _.all(values, (function(value) {
                    return null == value;
                }))) return this;
                var concatenatedQueryName = visuals.DataViewConcatenateUtil.concatenateValues(_.map(sources, (function(source) {
                    return source.queryName;
                })));
                if (_.contains(this.columns, concatenatedQueryName)) return this;
                this.columns.push(concatenatedQueryName);
                var concatenatedDisplayName = visuals.DataViewConcatenateUtil.concatenateValues(_.map(sources, (function(source) {
                    return source.displayName;
                })));
                return this.items.push(new Lazy(function() {
                    var concatenatedValues = visuals.DataViewConcatenateUtil.concatenateValues(_.map(values, (function(value, index) {
                        return formatter(value, sources[index]);
                    })));
                    return {
                        displayName: concatenatedDisplayName,
                        value: concatenatedValues
                    };
                })), this;
            }, LazyTooltipBuilder.prototype.withValue = function(label, value) {
                return this.items.push(new Lazy(function() {
                    return {
                        displayName: label,
                        value: value
                    };
                })), this;
            }, LazyTooltipBuilder.prototype.withLazyValue = function(lazyValue) {
                return this.items.push(lazyValue), this;
            }, LazyTooltipBuilder.prototype.getTooltipItems = function() {
                return _.map(this.items, (function(item) {
                    return item.getValue();
                }));
            }, LazyTooltipBuilder;
        })();
        visuals.LazyTooltipBuilder = LazyTooltipBuilder;
        var CategoricalLazyTooltipBuilder = (function(_super) {
            function CategoricalLazyTooltipBuilder(reader) {
                var _this = _super.call(this) || this;
                return _this.reader = reader, _this;
            }
            return __extends(CategoricalLazyTooltipBuilder, _super), CategoricalLazyTooltipBuilder.prototype.withAllValuesForRole = function(role, categoryIndex, seriesIndex, allowNulls, formatter) {
                var columns = this.reader.getAllValueColumnsForRole(role, seriesIndex);
                if (_.isEmpty(columns)) return this;
                for (var _i = 0, columns_7 = columns; _i < columns_7.length; _i++) {
                    var column = columns_7[_i];
                    this.withColumnValueByIndex(column, categoryIndex, allowNulls, formatter);
                }
                return this;
            }, CategoricalLazyTooltipBuilder;
        })(LazyTooltipBuilder);
        visuals.CategoricalLazyTooltipBuilder = CategoricalLazyTooltipBuilder;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var visualStyles;
        !(function(visualStyles) {
            function create(dataColors) {
                return void 0 === dataColors && (dataColors = new visuals.DataColorPalette()), {
                    titleText: {
                        color: {
                            value: "#333"
                        }
                    },
                    subTitleText: {
                        color: {
                            value: "#919191"
                        }
                    },
                    colorPalette: {
                        foreground: {
                            value: "#333"
                        },
                        background: {
                            value: "#fff"
                        },
                        tableAccent: {
                            value: dataColors.getColorByIndex(0).value
                        },
                        dataColors: dataColors
                    },
                    labelText: {
                        color: {
                            value: "#333"
                        },
                        fontSize: "11px"
                    },
                    isHighContrast: !1
                };
            }
            visualStyles.create = create;
        })(visualStyles = visuals.visualStyles || (visuals.visualStyles = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var BingSocialNews = (function() {
            function BingSocialNews() {}
            return BingSocialNews.prototype.init = function(options) {
                this.currentViewport = options.viewport, this.$el = $(BingSocialNews.baseTemplate), 
                this.newsList = this.$el.find(".bingSocialNewsList"), this.loadingPlaceholder = this.$el.find(".loadingPlaceholder"), 
                this.loadingPlaceholderText = this.$el.find(".loadingPlaceholderText"), this.loadingPlaceholder.height(options.viewport.height), 
                this.loadingPlaceholder.width(options.viewport.width), this.getLocalizedString = options.host.getLocalizedString, 
                this.loadingPlaceholderText.text(this.getLocalizedString("Tile_LoadingText")), options.element.append(this.$el), 
                this.data = [], this.addSizeClasses();
            }, BingSocialNews.prototype.onDataChanged = function(options) {
                var dataViews = options.dataViews;
                if (dataViews.length > 0) {
                    var data_2 = dataViews[0].bingSocial;
                    this.data !== data_2 && (this.data = data_2, this.data.length > 0 ? (this.loadingPlaceholder.hide(), 
                    this.updateInternal()) : this.loadingPlaceholderText.text(this.getLocalizedString("BingSocialTile_NoResults")));
                }
            }, BingSocialNews.prototype.onResizing = function(finalViewport) {
                this.currentViewport.height === finalViewport.height && this.currentViewport.width === finalViewport.width || (this.currentViewport = finalViewport, 
                this.addSizeClasses(), this.data.length || this.loadingPlaceholder.height(finalViewport.height).width(finalViewport.width));
            }, BingSocialNews.prototype.addSizeClasses = function() {
                this.addSizeClass("height"), this.addSizeClass("width");
            }, BingSocialNews.prototype.addSizeClass = function(dimension) {
                var tileDimensions = BingSocialNews.tileDimensions[dimension];
                if (tileDimensions) {
                    var i, size = this.currentViewport[dimension], length = tileDimensions.length;
                    for (i = 2; i <= length; i++) this.$el.removeClass(dimension + i), this.$el.removeClass(dimension + i + "up");
                    for (i = length; i > 1; i--) if (size >= tileDimensions[i - 1]) {
                        this.$el.addClass(dimension + i);
                        break;
                    }
                    for (;i > 1; ) this.$el.addClass(dimension + i + "up"), i--;
                }
            }, BingSocialNews.prototype.updateInternal = function() {
                this.newsList.empty();
                for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                    var articleData = _a[_i], $article = this.fillInArticleTemplate(articleData);
                    this.newsList.append($article);
                }
            }, BingSocialNews.prototype.fillInArticleTemplate = function(articleData) {
                var $article = $(BingSocialNews.listItemTemplate), thumbnailUrl = articleData.image && articleData.image.thumbnail && articleData.image.thumbnail.contentUrl;
                return thumbnailUrl ? ($article.find(".js-storyLink").attr("href", articleData.url), 
                $article.find(".js-newsImage").css("background-image", "url(" + thumbnailUrl + ")"), 
                $article.find(".js-title").html(articleData.name), $article.find(".js-description").html(articleData.description), 
                $article.find(".js-source").text(articleData.provider[0].name), $article) : null;
            }, BingSocialNews.tileDimensions = {
                height: [ 100, 280, 460, 640, 820, 1e3, 1180 ].map((function(x) {
                    return x - 90;
                })),
                width: [ 230, 490, 750, 1010, 1270, 1530, 1790 ].map((function(x) {
                    return x - 130;
                }))
            }, BingSocialNews.baseTemplate = '<div class="bingSocialNews"><div><div class="bingSocialLoadingPlaceholder loadingPlaceholder"><div class="loadingPlaceholderText" ></div></div><ul class="bingSocialNewsList"></ul></div></div>', 
            BingSocialNews.listItemTemplate = '<li><div class="article"><div class="contentRight"><a class="storyLink js-storyLink" target="_blank"><div class="newsImage js-newsImage"></div><span class="title js-title"></span></a><p class="description js-description"></p></div><div class="source js-source"></div></div></li>', 
            BingSocialNews;
        })();
        visuals.BingSocialNews = BingSocialNews;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var BingSocialTweets = (function() {
            function BingSocialTweets() {}
            return BingSocialTweets.prototype.init = function(options) {
                this.currentViewport = options.viewport, this.$el = $(BingSocialTweets.baseTemplate), 
                this.tweetsList = this.$el.find(".bingSocialTweetsList"), this.loadingPlaceholder = this.$el.find(".loadingPlaceholder"), 
                this.loadingPlaceholderText = this.$el.find(".loadingPlaceholderText"), this.loadingPlaceholder.height(options.viewport.height), 
                this.loadingPlaceholder.width(options.viewport.width), this.getLocalizedString = options.host.getLocalizedString, 
                this.loadingPlaceholderText.text(this.getLocalizedString("Tile_LoadingText")), options.element.append(this.$el), 
                this.data = [], this.addSizeClasses();
            }, BingSocialTweets.prototype.onDataChanged = function(options) {
                var dataViews = options.dataViews;
                if (dataViews.length > 0) {
                    var data_3 = dataViews[0].bingSocial;
                    this.data !== data_3 && (this.data = data_3, this.data.length > 0 ? (this.loadingPlaceholder.hide(), 
                    this.updateInternal()) : this.loadingPlaceholderText.text(this.getLocalizedString("BingSocialTile_NoResults")));
                }
            }, BingSocialTweets.prototype.onResizing = function(finalViewport) {
                this.currentViewport.height === finalViewport.height && this.currentViewport.width === finalViewport.width || (this.currentViewport = finalViewport, 
                this.addSizeClasses(), this.data.length || this.loadingPlaceholder.height(finalViewport.height).width(finalViewport.width));
            }, BingSocialTweets.prototype.addSizeClasses = function() {
                this.addSizeClass("height"), this.addSizeClass("width");
            }, BingSocialTweets.prototype.addSizeClass = function(dimension) {
                var tileDimensions = BingSocialTweets.tileDimensions[dimension];
                if (tileDimensions) {
                    var i, size = this.currentViewport[dimension], length = tileDimensions.length;
                    for (i = 2; i <= length; i++) this.$el.removeClass(dimension + i), this.$el.removeClass(dimension + i + "up");
                    for (i = length; i > 1; i--) if (size >= tileDimensions[i - 1]) {
                        this.$el.addClass(dimension + i);
                        break;
                    }
                    for (;i > 1; ) this.$el.addClass(dimension + i + "up"), i--;
                }
            }, BingSocialTweets.prototype.updateInternal = function() {
                this.tweetsList.empty();
                for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                    var tweet = _a[_i], $tweet = this.fillInTweetTemplate(tweet);
                    this.tweetsList.append($tweet);
                }
            }, BingSocialTweets.prototype.fillInTweetTemplate = function(tweet) {
                var $tweet = $(BingSocialTweets.listItemTemplate), twitterBaseUrl = "https://www.twitter.com/", user = tweet.User, escapedIdStr = encodeURIComponent(tweet.IdStr), escapedScreenName = encodeURIComponent(user.ScreenName);
                return $tweet.find(".js-nameLink").attr("href", twitterBaseUrl + escapedScreenName), 
                $tweet.find(".js-avatar").attr("src", user.ProfileImageUrlHttps), $tweet.find(".js-name").text(user.Name), 
                $tweet.find(".js-screenName").text("@" + user.ScreenName), $tweet.find(".js-createdAt").attr("href", twitterBaseUrl + escapedScreenName + "/status/" + escapedIdStr), 
                $tweet.find(".js-createdAt").text(moment(tweet.CreatedAt).fromNow()), $tweet.find(".js-reply").attr("href", twitterBaseUrl + "intent/tweet?in_reply_to=" + escapedIdStr), 
                $tweet.find(".js-retweet").attr("href", twitterBaseUrl + "intent/retweet?tweet_id=" + escapedIdStr), 
                $tweet.find(".js-favorite").attr("href", twitterBaseUrl + "intent/favorite?tweet_id=" + escapedIdStr), 
                $tweet.find(".js-retweetCount").text(tweet.RetweetCount + " Retweets"), BingSocialTweets.augmentLinks($tweet.find(".js-text"), tweet), 
                $tweet;
            }, BingSocialTweets.augmentLinks = function($el, tweet) {
                var entities = tweet.Entities, arr = [ tweet.Text ];
                if (entities) {
                    var hashtags = entities.Hashtags.map((function(h) {
                        return h.Text;
                    }));
                    this.replaceTokens(arr, hashtags, BingSocialTweets.hashtagRegexConstructor, (function(hashtag) {
                        return BingSocialTweets.createAnchorTag("#" + hashtag, "https://www.twitter.com/hashtag/" + encodeURIComponent(hashtag));
                    }));
                    var userMentions = entities.UserMentions.map((function(um) {
                        return um.ScreenName;
                    }));
                    this.replaceTokens(arr, userMentions, BingSocialTweets.userMentionRegexConstructor, (function(screenName) {
                        return BingSocialTweets.createAnchorTag("@" + screenName, "https://www.twitter.com/" + encodeURIComponent(screenName));
                    }));
                    var urls = entities.Urls.map((function(u) {
                        return u.Url;
                    })), media = entities.Media.map((function(m) {
                        return m.Url;
                    }));
                    this.replaceTokens(arr, urls.concat(media), BingSocialTweets.urlRegexConstructor, (function(url) {
                        return BingSocialTweets.createAnchorTag(url, url);
                    }));
                }
                for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
                    var item = arr_1[_i];
                    if ("string" == typeof item) {
                        var $p = $("<p></p>");
                        $p.html(item), $el.append($p);
                    } else $el.append(item);
                }
            }, BingSocialTweets.createAnchorTag = function(displayLink, url) {
                var $a = $('<a target="_blank"></a>');
                return $a.text(displayLink), $a.attr("href", url), $a;
            }, BingSocialTweets.replaceTokens = function(arr, tokens, regexConstructor, replacementCallback) {
                if (tokens.length) {
                    for (var rawToken = tokens.pop(), i = 0; i < arr.length; i++) {
                        var text = arr[i];
                        if ("string" == typeof text) {
                            var tokenRegexString = _.escapeRegExp(rawToken), tokenRegex = regexConstructor(tokenRegexString), newTextArray = text.split(tokenRegex), newTags = [], firstText = newTextArray[0];
                            if ("undefined" != typeof firstText) {
                                "" !== firstText && newTags.push(firstText);
                                for (var j = 1; j < newTextArray.length; j++) j % 2 === 1 ? newTags.push(replacementCallback(newTextArray[j])) : newTags.push(newTextArray[j]);
                                Array.prototype.splice.apply(arr, [ i, 1 ].concat(newTags)), i += newTags.length - 1;
                            }
                        }
                    }
                    return BingSocialTweets.replaceTokens(arr, tokens, regexConstructor, replacementCallback);
                }
            }, BingSocialTweets.hashtagRegexConstructor = function(token) {
                return new RegExp("\\B#(" + token + ")\\b", "ig");
            }, BingSocialTweets.userMentionRegexConstructor = function(token) {
                return new RegExp("\\B@(" + token + ")\\b", "ig");
            }, BingSocialTweets.urlRegexConstructor = function(token) {
                return new RegExp("\\b(" + token + ")\\b", "g");
            }, BingSocialTweets.tileDimensions = {
                height: [ 100, 280, 460, 640, 820 ].map((function(x) {
                    return x - 90;
                })),
                width: [ 230, 490, 750, 1010, 1270 ].map((function(x) {
                    return x - 130;
                }))
            }, BingSocialTweets.baseTemplate = '<div class="bingSocialTweets"><div class="bingSocialLoadingPlaceholder loadingPlaceholder"><div class="loadingPlaceholderText" ></div></div><ul class="bingSocialTweetsList"></ul></div>', 
            BingSocialTweets.listItemTemplate = '<li><div class="tweet"><div class="contentRight"><div class="tweetHeader"><a class="nameLink js-nameLink" target="_blank"><img class="avatar js-avatar" /><span class="name js-name"></span><span class="screenName js-screenName"></span></a><a class="createdAt js-createdAt" target="_blank"></a></div><div class="text js-text"></div></div><div class="tweetFooter"><a class="tweetActionText tweetReply js-reply" target="_blank" title="Reply"></a><a class="tweetActionText tweetRetweet js-retweet" target="_blank" title="Retweet"></a><a class="tweetActionText tweetFavorite js-favorite" target="_blank" title="Favorite"></a><span class="retweetCount js-retweetCount"></span></div></div></li>', 
            BingSocialTweets;
        })();
        visuals.BingSocialTweets = BingSocialTweets;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var plugins;
        !(function(plugins) {
            plugins.animatedNumber = {
                name: "animatedNumber",
                capabilities: visuals.capabilities.animatedNumber,
                create: function(options) {
                    return options.module.createAnimatedNumber();
                },
                module: {
                    javascript: "SingleValueVisuals/animatedNumberModule"
                }
            }, plugins.areaChart = {
                name: "areaChart",
                watermarkKey: "area",
                capabilities: visuals.capabilities.areaChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 1
                    });
                },
                customizeQuery: visuals.LineChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.LineChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.barChart = {
                name: "barChart",
                watermarkKey: "bar",
                capabilities: visuals.capabilities.barChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 6
                    });
                },
                customizeQuery: visuals.ColumnChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.ColumnChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.basicShape = {
                name: "basicShape",
                capabilities: visuals.basicShapeCapabilities,
                module: {
                    javascript: "BasicShapeVisual/basicShape"
                },
                create: function(options) {
                    return new options.module.BasicShape();
                }
            }, plugins.card = {
                name: "card",
                watermarkKey: "card",
                capabilities: visuals.capabilities.card,
                create: function(options) {
                    return options.module.createCard();
                },
                module: {
                    javascript: "SingleValueVisuals/cardModule"
                }
            }, plugins.multiRowCard = {
                name: "multiRowCard",
                watermarkKey: "multiRowCard",
                capabilities: visuals.capabilities.multiRowCard,
                create: function() {
                    return new visuals.MultiRowCard();
                },
                getSortableRoles: visuals.MultiRowCardPluginMethods.getSortableRoles,
                module: {
                    javascript: "multiRowCardVisual"
                }
            }, plugins.clusteredBarChart = {
                name: "clusteredBarChart",
                watermarkKey: "clusteredBar",
                capabilities: visuals.capabilities.clusteredBarChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 5
                    });
                },
                customizeQuery: visuals.ColumnChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.ColumnChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.clusteredColumnChart = {
                name: "clusteredColumnChart",
                watermarkKey: "clusteredColumn",
                capabilities: visuals.capabilities.clusteredColumnChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 3
                    });
                },
                customizeQuery: visuals.ColumnChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.ColumnChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.columnChart = {
                name: "columnChart",
                watermarkKey: "column",
                capabilities: visuals.capabilities.columnChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 4
                    });
                },
                customizeQuery: visuals.ColumnChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.ColumnChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.comboChart = {
                name: "comboChart",
                watermarkKey: "combo",
                capabilities: visuals.capabilities.comboChart,
                customizeQuery: visuals.ComboChartPluginMethods.customizeQuery,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 11
                    });
                },
                getSortableRoles: visuals.ComboChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.dataDotChart = {
                name: "dataDotChart",
                capabilities: visuals.capabilities.dataDotChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 12
                    });
                },
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.dataDotClusteredColumnComboChart = {
                name: "dataDotClusteredColumnComboChart",
                watermarkKey: "combo",
                capabilities: visuals.capabilities.dataDotClusteredColumnComboChart,
                customizeQuery: visuals.ComboChartPluginMethods.customizeQuery,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 16
                    });
                },
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.dataDotStackedColumnComboChart = {
                name: "dataDotStackedColumnComboChart",
                watermarkKey: "combo",
                capabilities: visuals.capabilities.dataDotStackedColumnComboChart,
                customizeQuery: visuals.ComboChartPluginMethods.customizeQuery,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 17
                    });
                },
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            };
            var donutBase = {
                capabilities: visuals.capabilities.donutChart,
                module: {
                    javascript: "donutChartVisuals"
                }
            };
            plugins.donutChart = __assign({}, donutBase, {
                name: "donutChart",
                watermarkKey: "donut",
                create: function() {
                    return new visuals.DonutChart();
                }
            }), plugins.funnel = {
                name: "funnel",
                watermarkKey: "funnel",
                capabilities: visuals.capabilities.funnel,
                create: function() {
                    return new visuals.FunnelChart();
                },
                module: {
                    javascript: "funnelChartVisual"
                }
            }, plugins.gauge = {
                name: "gauge",
                watermarkKey: "gauge",
                capabilities: visuals.capabilities.gauge,
                create: function(options) {
                    return options.module.createGauge();
                },
                module: {
                    javascript: "SingleValueVisuals/gaugeModule"
                }
            }, plugins.hundredPercentStackedBarChart = {
                name: "hundredPercentStackedBarChart",
                watermarkKey: "100stackedbar",
                capabilities: visuals.capabilities.hundredPercentStackedBarChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 7
                    });
                },
                customizeQuery: visuals.ColumnChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.ColumnChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.hundredPercentStackedColumnChart = {
                name: "hundredPercentStackedColumnChart",
                watermarkKey: "100stackedcolumn",
                capabilities: visuals.capabilities.hundredPercentStackedColumnChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 8
                    });
                },
                customizeQuery: visuals.ColumnChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.ColumnChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.image = {
                name: "image",
                capabilities: visuals.capabilities.image,
                create: function() {
                    return new visuals.ImageVisual();
                },
                module: {
                    javascript: "imageVisual"
                }
            }, plugins.lineChart = {
                name: "lineChart",
                watermarkKey: "line",
                capabilities: visuals.capabilities.lineChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 0
                    });
                },
                customizeQuery: visuals.LineChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.LineChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.lineStackedColumnComboChart = {
                name: "lineStackedColumnComboChart",
                watermarkKey: "combo",
                capabilities: visuals.capabilities.lineStackedColumnComboChart,
                customizeQuery: visuals.ComboChartPluginMethods.customizeQuery,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 15
                    });
                },
                getSortableRoles: visuals.ComboChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.lineClusteredColumnComboChart = {
                name: "lineClusteredColumnComboChart",
                watermarkKey: "combo",
                capabilities: visuals.capabilities.lineClusteredColumnComboChart,
                customizeQuery: visuals.ComboChartPluginMethods.customizeQuery,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 14
                    });
                },
                getSortableRoles: visuals.ComboChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.map = {
                name: "map",
                watermarkKey: "map",
                capabilities: visuals.capabilities.map,
                create: function() {
                    return new visuals.Map({
                        filledMap: !1
                    });
                },
                customizeQuery: visuals.MapPluginMethods.customizeQuery,
                module: {
                    javascript: "mapVisuals"
                }
            }, plugins.filledMap = {
                name: "filledMap",
                watermarkKey: "filledMap",
                capabilities: visuals.capabilities.filledMap,
                create: function() {
                    return new visuals.Map({
                        filledMap: !0
                    });
                },
                module: {
                    javascript: "mapVisuals"
                }
            }, plugins.ribbonChart = {
                name: "ribbonChart",
                watermarkKey: "ribbon",
                capabilities: visuals.capabilities.ribbonChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 9
                    });
                },
                customizeQuery: visuals.ColumnChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.ColumnChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.shapeMap = {
                name: "shapeMap",
                watermarkKey: "shapeMap",
                capabilities: visuals.capabilities.shapeMap,
                module: {
                    javascript: "ShapeMapVisual/shapeMap/shapeMap"
                },
                create: function(options) {
                    return new options.module.ShapeMap();
                }
            }, plugins.treemap = {
                name: "treemap",
                watermarkKey: "tree",
                capabilities: visuals.capabilities.treemap,
                module: {
                    javascript: "TreemapVisual/treemap"
                },
                create: function(options) {
                    return new options.module.Treemap();
                }
            }, plugins.sunburst = {
                name: "sunburst",
                watermarkKey: "defaultWatermark",
                capabilities: visuals.capabilities.sunburst,
                module: {
                    javascript: "SunburstVisual/sunburst/sunburst"
                },
                create: function(options) {
                    return new options.module.Sunburst();
                }
            }, plugins.pieChart = __assign({}, donutBase, {
                name: "pieChart",
                watermarkKey: "pie",
                create: function() {
                    return new visuals.DonutChart({
                        sliceWidthRatio: 0
                    });
                }
            }), plugins.realTimeLineChart = {
                name: "realTimeLineChart",
                watermarkKey: "line",
                capabilities: visuals.capabilities.realTimeLineChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 18
                    });
                },
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.scatterChart = {
                name: "scatterChart",
                watermarkKey: "scatterplot",
                capabilities: visuals.capabilities.scatterChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 10
                    });
                },
                customizeQuery: visuals.ScatterChartPluginMethods.customizeQuery,
                getAdditionalTelemetry: visuals.ScatterChartPluginMethods.getAdditionalTelemetry
            }, plugins.stackedAreaChart = {
                name: "stackedAreaChart",
                watermarkKey: "stackedarea",
                capabilities: visuals.capabilities.stackedAreaChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 2
                    });
                },
                customizeQuery: visuals.LineChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.LineChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.table = {
                name: "table",
                watermarkKey: "table",
                capabilities: visuals.capabilities.table,
                create: function() {
                    return new visuals.Table();
                },
                customizeQuery: visuals.TablePluginMethods.customizeQuery,
                getSortableRoles: visuals.TablePluginMethods.getSortableRoles,
                module: {
                    javascript: "pivotTableVisuals"
                }
            }, plugins.matrix = {
                name: "matrix",
                watermarkKey: "matrix",
                capabilities: visuals.capabilities.matrix,
                create: function() {
                    return new visuals.Matrix();
                },
                customizeQuery: visuals.MatrixPluginMethods.customizeQuery,
                getSortableRoles: visuals.MatrixPluginMethods.getSortableRoles,
                module: {
                    javascript: "pivotTableVisuals"
                }
            }, plugins.tableEx = {
                name: "tableEx",
                watermarkKey: "table",
                capabilities: powerbi.visuals.tableExCapabilities,
                create: function() {
                    return new visuals.TableEx();
                },
                customizeQuery: visuals.TableExPluginMethods.customizeQuery,
                getSortableRoles: visuals.TableExPluginMethods.getSortableRoles,
                module: {
                    javascript: "pivotTableVisuals",
                    css: [ "pivotTableVisuals" ]
                }
            }, plugins.pivotTable = {
                name: "pivotTable",
                watermarkKey: "matrix",
                capabilities: powerbi.visuals.pivotTableCapabilities,
                create: function() {
                    return new visuals.PivotTable();
                },
                customizeQuery: visuals.PivotTablePluginMethods.customizeQuery,
                getSortableRoles: visuals.PivotTablePluginMethods.getSortableRoles,
                module: {
                    javascript: "pivotTableVisuals",
                    css: [ "pivotTableVisuals" ]
                }
            }, plugins.accessibleTable = {
                name: "accessibleTable",
                watermarkKey: "matrix",
                capabilities: visuals.capabilities.accessibleTable,
                create: function(options) {
                    return options.module.AccessibleTable();
                },
                module: {
                    javascript: "AccessibleTableVisual/accessibleTable/accessibleTable",
                    css: [ "accessibleTableVisual" ]
                }
            }, plugins.slicer = {
                name: "slicer",
                watermarkKey: "slicer",
                capabilities: visuals.capabilities.slicer,
                create: function() {
                    return new visuals.Slicer();
                },
                customizeQuery: visuals.SlicerPluginMethods.customizeQuery,
                getSortableRoles: visuals.SlicerPluginMethods.getSortableRoles,
                isCrossFilteredByDefault: visuals.SlicerPluginMethods.isCrossFilteredByDefault,
                module: {
                    javascript: "slicerVisual"
                }
            }, plugins.textbox = {
                name: "textbox",
                capabilities: visuals.capabilities.textbox,
                create: function(options) {
                    return options.module.createTextbox();
                },
                module: {
                    javascript: "TextboxVisual/textboxModule"
                }
            }, plugins.waterfallChart = {
                name: "waterfallChart",
                watermarkKey: "waterfall",
                capabilities: visuals.capabilities.waterfallChart,
                module: {
                    javascript: "CartesianVisuals/cartesianModule"
                },
                create: function(options) {
                    return options.module.createCartesianChart({
                        chartType: 13
                    });
                },
                customizeQuery: visuals.WaterfallChartPluginMethods.customizeQuery,
                getSortableRoles: visuals.WaterfallChartPluginMethods.getSortableRoles,
                getAdditionalTelemetry: visuals.CartesianPluginMethods.getAdditionalTelemetry
            }, plugins.cheerMeter = {
                name: "cheerMeter",
                capabilities: visuals.CheerMeter.capabilities,
                create: function() {
                    return new visuals.CheerMeter();
                }
            }, plugins.consoleWriter = {
                name: "consoleWriter",
                capabilities: visuals.samples.consoleWriterCapabilities,
                create: function() {
                    return new visuals.samples.ConsoleWriter();
                }
            }, plugins.helloIVisual = {
                name: "helloIVisual",
                capabilities: visuals.samples.HelloIVisual.capabilities,
                create: function() {
                    return new visuals.samples.HelloIVisual();
                }
            }, plugins.scriptVisual = {
                name: "scriptVisual",
                watermarkKey: "scriptvisual",
                capabilities: visuals.capabilities.scriptVisual,
                module: {
                    javascript: "ScriptVisual/scriptVisual"
                },
                create: function(options) {
                    return new options.module.ScriptVisual();
                }
            }, plugins.kpi = {
                name: "kpi",
                watermarkKey: "kpi",
                capabilities: visuals.capabilities.kpi,
                create: function() {
                    return new visuals.KPIStatusWithHistory();
                },
                module: {
                    javascript: "kpiVisual"
                }
            };
        })(plugins = visuals.plugins || (visuals.plugins = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var plugins;
        !(function(plugins) {
            plugins.bingSocialTweets = {
                name: "bingSocialTweets",
                capabilities: visuals.bingSocialTweetsCapabilities,
                create: function() {
                    return new visuals.BingSocialTweets();
                }
            }, plugins.bingSocialNews = {
                name: "bingSocialNews",
                capabilities: visuals.bingSocialNewsCapabilities,
                create: function() {
                    return new visuals.BingSocialNews();
                }
            }, plugins.heatMap = {
                name: "heatMap",
                capabilities: visuals.capabilities.map,
                create: function() {
                    return new visuals.Map({
                        filledMap: !1
                    });
                }
            };
        })(plugins = visuals.plugins || (visuals.plugins = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var CanvasBackgroundHelper;
        !(function(CanvasBackgroundHelper) {
            function getDefaultColor() {
                return "#FFFFFF";
            }
            function getDefaultValues() {
                return {
                    color: getDefaultColor()
                };
            }
            CanvasBackgroundHelper.getDefaultColor = getDefaultColor, CanvasBackgroundHelper.getDefaultValues = getDefaultValues;
        })(CanvasBackgroundHelper = visuals.CanvasBackgroundHelper || (visuals.CanvasBackgroundHelper = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var defaultMaxValue = 100, DateRange = (function() {
            function DateRange(min, max, start, end) {
                this.scale = d3.time.scale().domain([ min, max ]).range([ 0, defaultMaxValue ]), 
                this.value = {
                    min: start || min,
                    max: end || max
                }, this.setValue(this.value);
            }
            return DateRange.prototype.getScaledValue = function() {
                return this.scaledValue;
            }, DateRange.prototype.setValue = function(original) {
                this.value = original, this.scaledValue = {
                    min: this.scale(original.min),
                    max: this.scale(original.max)
                };
            }, DateRange.prototype.getValue = function() {
                return this.value;
            }, DateRange.prototype.setScaledValue = function(value) {
                this.scaledValue = value, this.value = {
                    min: this.scale.invert(value.min),
                    max: this.scale.invert(value.max)
                };
            }, DateRange;
        })();
        visuals.DateRange = DateRange;
        var NumericRange = (function() {
            function NumericRange(min, max, start, end) {
                this.scale = d3.scale.linear().domain([ min, max ]).range([ 0, defaultMaxValue ]), 
                this.value = {
                    min: void 0 === start ? min : start,
                    max: void 0 === end ? max : end
                }, this.setValue(this.value);
            }
            return NumericRange.prototype.getScaledValue = function() {
                return this.scaledValue;
            }, NumericRange.prototype.setValue = function(original) {
                this.value = original, this.scaledValue = {
                    min: this.scale(original.min),
                    max: this.scale(original.max)
                };
            }, NumericRange.prototype.getValue = function() {
                return this.value;
            }, NumericRange.prototype.setScaledValue = function(value) {
                this.scaledValue = value, this.value = {
                    min: this.scale.invert(value.min),
                    max: this.scale.invert(value.max)
                };
            }, NumericRange;
        })();
        visuals.NumericRange = NumericRange;
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var stylePresets;
        !(function(stylePresets) {
            function getTablixStylePresetElements(stylePresetName, theme) {
                var gridColor, backColor = theme.colorPalette.background.value, foreColor = theme.colorPalette.foreground.value, accent = theme.colorPalette.tableAccent.value;
                switch (stylePresetName) {
                  case TablixStylePresetsName.None:
                    return {
                        outlineColor: TablixObjects.PropGridOutlineColor.defaultValue,
                        gridColor: TablixObjects.PropGridVerticalColor.defaultValue,
                        gridVerticalEnabledTable: TablixObjects.PropGridVertical.defaultValue,
                        gridVerticalEnabledMatrix: TablixObjects.PropGridVertical.defaultValue,
                        gridHorizontalEnabledTable: TablixObjects.PropGridHorizontalTable.defaultValue,
                        gridHorizontalEnabledMatrix: TablixObjects.PropGridHorizontalMatrix.defaultValue,
                        rowPadding: TablixObjects.PropGridRowPadding.defaultValue,
                        fontColorHeaders: TablixObjects.PropColumnsFontColor.defaultValue,
                        backColorHeaders: TablixObjects.PropColumnsBackColor.defaultValue,
                        fontColorValues1: TablixObjects.PropValuesFontColorPrimary.defaultValue,
                        backColorValues1: TablixObjects.PropValuesBackColorPrimary.defaultValue,
                        fontColorValues2: TablixObjects.PropValuesFontColorSecondary.defaultValue,
                        backColorValues2: TablixObjects.PropValuesBackColorSecondary.defaultValue,
                        fontColorTotals: TablixObjects.PropTotalFontColor.defaultValue,
                        backColorTotals: TablixObjects.PropTotalBackColor.defaultValue
                    };

                  case TablixStylePresetsName.Default:
                    return backColor = theme.colorPalette.background.value, foreColor = theme.colorPalette.foreground.value, 
                    accent = theme.colorPalette.tableAccent.value, gridColor = Color.hexBlend(foreColor, .12, backColor), 
                    {
                        outlineColor: accent,
                        gridColor: gridColor,
                        gridVerticalEnabledTable: !1,
                        gridVerticalEnabledMatrix: !1,
                        gridHorizontalEnabledTable: TablixObjects.PropGridHorizontalTable.defaultValue,
                        gridHorizontalEnabledMatrix: TablixObjects.PropGridHorizontalMatrix.defaultValue,
                        rowPadding: 1,
                        fontColorHeaders: foreColor,
                        backColorHeaders: backColor,
                        fontColorValues1: foreColor,
                        backColorValues1: backColor,
                        fontColorValues2: foreColor,
                        backColorValues2: Color.hexBlend(foreColor, .08, backColor),
                        fontColorTotals: void 0,
                        backColorTotals: void 0
                    };

                  case TablixStylePresetsName.Minimal:
                    return gridColor = Color.hexBlend(foreColor, .12, backColor), {
                        outlineColor: accent,
                        gridColor: gridColor,
                        gridVerticalEnabledTable: !1,
                        gridVerticalEnabledMatrix: !1,
                        gridHorizontalEnabledTable: !0,
                        gridHorizontalEnabledMatrix: !0,
                        rowPadding: TablixStylePresetDefaults.rowPaddingNormal,
                        fontColorHeaders: foreColor,
                        backColorHeaders: backColor,
                        fontColorValues1: foreColor,
                        backColorValues1: backColor,
                        fontColorValues2: foreColor,
                        backColorValues2: backColor,
                        fontColorTotals: foreColor,
                        backColorTotals: backColor
                    };

                  case TablixStylePresetsName.BoldHeader:
                    return backColor = theme.colorPalette.background.value, foreColor = theme.colorPalette.foreground.value, 
                    accent = theme.colorPalette.tableAccent.value, gridColor = Color.hexBlend(foreColor, .12, backColor), 
                    {
                        outlineColor: accent,
                        gridColor: gridColor,
                        gridVerticalEnabledTable: !1,
                        gridVerticalEnabledMatrix: !1,
                        gridHorizontalEnabledTable: !0,
                        gridHorizontalEnabledMatrix: !0,
                        rowPadding: TablixStylePresetDefaults.rowPaddingNormal,
                        backColorHeaders: foreColor,
                        fontColorHeaders: backColor,
                        fontColorValues1: foreColor,
                        backColorValues1: backColor,
                        fontColorValues2: foreColor,
                        backColorValues2: backColor,
                        fontColorTotals: foreColor,
                        backColorTotals: backColor
                    };

                  case TablixStylePresetsName.AlternatingRows:
                    return backColor = theme.colorPalette.background.value, foreColor = theme.colorPalette.foreground.value, 
                    accent = theme.colorPalette.tableAccent.value, gridColor = Color.hexBlend(foreColor, .12, backColor), 
                    {
                        outlineColor: accent,
                        gridColor: gridColor,
                        gridVerticalEnabledTable: !1,
                        gridVerticalEnabledMatrix: !1,
                        gridHorizontalEnabledTable: !0,
                        gridHorizontalEnabledMatrix: !0,
                        rowPadding: TablixStylePresetDefaults.rowPaddingNormal,
                        fontColorHeaders: backColor,
                        backColorHeaders: foreColor,
                        fontColorValues1: foreColor,
                        backColorValues1: backColor,
                        fontColorValues2: foreColor,
                        backColorValues2: Color.hexBlend(foreColor, .08, backColor),
                        fontColorTotals: backColor,
                        backColorTotals: foreColor
                    };

                  case TablixStylePresetsName.ContrastAlternatingRows:
                    return backColor = theme.colorPalette.background.value, foreColor = theme.colorPalette.foreground.value, 
                    accent = theme.colorPalette.tableAccent.value, gridColor = Color.hexBlend(foreColor, .12, backColor), 
                    {
                        outlineColor: accent,
                        gridColor: gridColor,
                        gridVerticalEnabledTable: !1,
                        gridVerticalEnabledMatrix: !1,
                        gridHorizontalEnabledTable: !0,
                        gridHorizontalEnabledMatrix: !0,
                        rowPadding: TablixStylePresetDefaults.rowPaddingNormal,
                        fontColorHeaders: backColor,
                        backColorHeaders: foreColor,
                        fontColorValues1: backColor,
                        backColorValues1: Color.hexBlend(foreColor, .75, backColor),
                        fontColorValues2: foreColor,
                        backColorValues2: Color.hexBlend(foreColor, .25, backColor),
                        fontColorTotals: backColor,
                        backColorTotals: foreColor
                    };

                  case TablixStylePresetsName.FlashyRows:
                    return backColor = theme.colorPalette.background.value, foreColor = theme.colorPalette.foreground.value, 
                    accent = theme.colorPalette.tableAccent.value, gridColor = backColor, {
                        outlineColor: foreColor,
                        gridColor: gridColor,
                        gridVerticalEnabledTable: !1,
                        gridVerticalEnabledMatrix: !1,
                        gridHorizontalEnabledTable: !1,
                        gridHorizontalEnabledMatrix: !1,
                        rowPadding: TablixStylePresetDefaults.rowPaddingNormal,
                        fontColorHeaders: foreColor,
                        backColorHeaders: backColor,
                        fontColorValues1: foreColor,
                        backColorValues1: Color.hexBlend(accent, .4, backColor),
                        fontColorValues2: foreColor,
                        backColorValues2: Color.hexBlend(accent, .8, backColor),
                        fontColorTotals: foreColor,
                        backColorTotals: backColor
                    };

                  case TablixStylePresetsName.BoldHeaderFlashyRows:
                    return backColor = theme.colorPalette.background.value, foreColor = theme.colorPalette.foreground.value, 
                    accent = theme.colorPalette.tableAccent.value, gridColor = backColor, {
                        outlineColor: backColor,
                        gridColor: gridColor,
                        gridVerticalEnabledTable: !1,
                        gridVerticalEnabledMatrix: !1,
                        gridHorizontalEnabledTable: !1,
                        gridHorizontalEnabledMatrix: !1,
                        rowPadding: TablixStylePresetDefaults.rowPaddingNormal,
                        fontColorHeaders: backColor,
                        backColorHeaders: foreColor,
                        fontColorValues1: foreColor,
                        backColorValues1: Color.hexBlend(accent, .4, backColor),
                        fontColorValues2: foreColor,
                        backColorValues2: Color.hexBlend(accent, .8, backColor),
                        fontColorTotals: backColor,
                        backColorTotals: foreColor
                    };

                  case TablixStylePresetsName.Sparse:
                    return backColor = theme.colorPalette.background.value, foreColor = theme.colorPalette.foreground.value, 
                    accent = theme.colorPalette.tableAccent.value, gridColor = Color.hexBlend(foreColor, .2, backColor), 
                    {
                        outlineColor: accent,
                        gridColor: gridColor,
                        gridVerticalEnabledTable: !1,
                        gridVerticalEnabledMatrix: !1,
                        gridHorizontalEnabledTable: !1,
                        gridHorizontalEnabledMatrix: !1,
                        rowPadding: TablixStylePresetDefaults.rowPaddingSparse,
                        fontColorHeaders: backColor,
                        backColorHeaders: foreColor,
                        fontColorValues1: foreColor,
                        backColorValues1: backColor,
                        fontColorValues2: foreColor,
                        backColorValues2: backColor,
                        fontColorTotals: backColor,
                        backColorTotals: foreColor
                    };

                  case TablixStylePresetsName.Condensed:
                    return backColor = theme.colorPalette.background.value, foreColor = theme.colorPalette.foreground.value, 
                    accent = theme.colorPalette.tableAccent.value, gridColor = Color.hexBlend(foreColor, .2, backColor), 
                    {
                        outlineColor: accent,
                        gridColor: gridColor,
                        gridVerticalEnabledTable: !0,
                        gridVerticalEnabledMatrix: !0,
                        gridHorizontalEnabledTable: !0,
                        gridHorizontalEnabledMatrix: !0,
                        rowPadding: TablixStylePresetDefaults.rowPaddingCondensed,
                        fontColorHeaders: backColor,
                        backColorHeaders: foreColor,
                        fontColorValues1: foreColor,
                        backColorValues1: backColor,
                        fontColorValues2: foreColor,
                        backColorValues2: backColor,
                        fontColorTotals: backColor,
                        backColorTotals: foreColor
                    };

                  default:
                    return;
                }
            }
            var TablixStylePresetDefaults, TablixObjects = visuals.controls.internal.TablixObjects, Color = jsCommon.Color;
            !(function(TablixStylePresetDefaults) {
                TablixStylePresetDefaults.outlineWeight = TablixObjects.PropGridOutlineWeight.defaultValue, 
                TablixStylePresetDefaults.columnsOutline = TablixObjects.PropColumnsOutline.defaultValue, 
                TablixStylePresetDefaults.rowsOutline = TablixObjects.PropRowsOutline.defaultValue, 
                TablixStylePresetDefaults.valuesOutline = TablixObjects.PropValuesOutline.defaultValue, 
                TablixStylePresetDefaults.tableTotalOutline = TablixObjects.PropTotalOutline.defaultValue, 
                TablixStylePresetDefaults.gridHorizontalWeight = TablixObjects.PropGridHorizontalWeight.defaultValue, 
                TablixStylePresetDefaults.gridlineVerticalWeight = TablixObjects.PropGridVerticalWeight.defaultValue, 
                TablixStylePresetDefaults.rowPaddingCondensed = 0, TablixStylePresetDefaults.rowPaddingNormal = 3, 
                TablixStylePresetDefaults.rowPaddingSparse = 6;
            })(TablixStylePresetDefaults = stylePresets.TablixStylePresetDefaults || (stylePresets.TablixStylePresetDefaults = {}));
            var TablixStylePresetsName;
            !(function(TablixStylePresetsName) {
                TablixStylePresetsName.None = "None", TablixStylePresetsName.Default = "Default", 
                TablixStylePresetsName.Minimal = "Minimal", TablixStylePresetsName.BoldHeader = "BoldHeader", 
                TablixStylePresetsName.AlternatingRows = "AlternatingRows", TablixStylePresetsName.ContrastAlternatingRows = "ContrastAlternatingRows", 
                TablixStylePresetsName.FlashyRows = "FlashyRows", TablixStylePresetsName.BoldHeaderFlashyRows = "BoldHeaderFlashyRows", 
                TablixStylePresetsName.Sparse = "Sparse", TablixStylePresetsName.Condensed = "Condensed";
            })(TablixStylePresetsName = stylePresets.TablixStylePresetsName || (stylePresets.TablixStylePresetsName = {})), 
            stylePresets.getTablixStylePresetElements = getTablixStylePresetElements;
        })(stylePresets = visuals.stylePresets || (visuals.stylePresets = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var stylePresets;
        !(function(stylePresets) {
            function wrapTableStylePresetElements(stylePresetName, theme) {
                var elements = stylePresets.getTablixStylePresetElements(stylePresetName, theme);
                return elements ? {
                    grid: [ {
                        properties: {
                            outlineColor: createSolidFillDefinition(elements.outlineColor),
                            outlineWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.outlineWeight, stylePresets.TablixStylePresetDefaults.outlineWeight)),
                            gridVertical: SQExprBuilder.boolean(elements.gridVerticalEnabledTable),
                            gridVerticalColor: createSolidFillDefinition(elements.gridColor),
                            gridVerticalWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.gridVerticalWeight, stylePresets.TablixStylePresetDefaults.gridlineVerticalWeight)),
                            gridHorizontal: SQExprBuilder.boolean(elements.gridHorizontalEnabledTable),
                            gridHorizontalColor: createSolidFillDefinition(elements.gridColor),
                            gridHorizontalWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.gridHorizontalWeight, stylePresets.TablixStylePresetDefaults.gridHorizontalWeight)),
                            rowPadding: SQExprBuilder.integer(elements.rowPadding)
                        }
                    } ],
                    columnHeaders: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeColumnHeaders, stylePresets.TablixStylePresetDefaults.columnsOutline)),
                            fontColor: createSolidFillDefinition(elements.fontColorHeaders),
                            backColor: createSolidFillDefinition(elements.backColorHeaders)
                        }
                    } ],
                    values: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeValues, stylePresets.TablixStylePresetDefaults.valuesOutline)),
                            fontColorPrimary: createSolidFillDefinition(elements.fontColorValues1),
                            backColorPrimary: createSolidFillDefinition(elements.backColorValues1),
                            fontColorSecondary: createSolidFillDefinition(elements.fontColorValues2),
                            backColorSecondary: createSolidFillDefinition(elements.backColorValues2)
                        }
                    } ],
                    total: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeTotals, stylePresets.TablixStylePresetDefaults.tableTotalOutline)),
                            fontColor: createSolidFillDefinition(elements.fontColorTotals),
                            backColor: createSolidFillDefinition(elements.backColorTotals)
                        }
                    } ]
                } : {};
            }
            function tableStylePresets() {
                return {
                    sectionTitle: createDisplayNameGetter("Visual_Table_StylePreset_SectionTitle"),
                    sliceTitle: createDisplayNameGetter("Visual_Table_StylePreset_SliceTitle"),
                    defaultPresetName: stylePresets.TablixStylePresetsName.None,
                    presets: (_a = {}, _a[stylePresets.TablixStylePresetsName.None] = {
                        name: stylePresets.TablixStylePresetsName.None,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_None"),
                        evaluate: function(theme) {
                            return wrapTableStylePresetElements(stylePresets.TablixStylePresetsName.None, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Minimal] = {
                        name: stylePresets.TablixStylePresetsName.Minimal,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Minimal"),
                        evaluate: function(theme) {
                            return wrapTableStylePresetElements(stylePresets.TablixStylePresetsName.Minimal, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.BoldHeader] = {
                        name: stylePresets.TablixStylePresetsName.BoldHeader,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_BoldHeader"),
                        evaluate: function(theme) {
                            return wrapTableStylePresetElements(stylePresets.TablixStylePresetsName.BoldHeader, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.AlternatingRows] = {
                        name: stylePresets.TablixStylePresetsName.AlternatingRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_AlternatingRows"),
                        evaluate: function(theme) {
                            return wrapTableStylePresetElements(stylePresets.TablixStylePresetsName.AlternatingRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.ContrastAlternatingRows] = {
                        name: stylePresets.TablixStylePresetsName.ContrastAlternatingRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_ContrastAlternatingRows"),
                        evaluate: function(theme) {
                            return wrapTableStylePresetElements(stylePresets.TablixStylePresetsName.ContrastAlternatingRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.FlashyRows] = {
                        name: stylePresets.TablixStylePresetsName.FlashyRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_FlashyRows"),
                        evaluate: function(theme) {
                            return wrapTableStylePresetElements(stylePresets.TablixStylePresetsName.FlashyRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows] = {
                        name: stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_BoldHeaderFlashyRows"),
                        evaluate: function(theme) {
                            return wrapTableStylePresetElements(stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Sparse] = {
                        name: stylePresets.TablixStylePresetsName.Sparse,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Sparse"),
                        evaluate: function(theme) {
                            return wrapTableStylePresetElements(stylePresets.TablixStylePresetsName.Sparse, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Condensed] = {
                        name: stylePresets.TablixStylePresetsName.Condensed,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Condensed"),
                        evaluate: function(theme) {
                            return wrapTableStylePresetElements(stylePresets.TablixStylePresetsName.Condensed, theme);
                        }
                    }, _a)
                };
                var _a;
            }
            var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, SQExprBuilder = powerbi.data.SQExprBuilder, Utility = jsCommon.Utility, createSolidFillDefinition = powerbi.fillDefinitionHelpers.createSolidFillDefinition;
            stylePresets.tableStylePresets = tableStylePresets;
        })(stylePresets = visuals.stylePresets || (visuals.stylePresets = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var stylePresets;
        !(function(stylePresets) {
            function wrapMatrixStylePresetElements(stylePresetName, theme) {
                var elements = stylePresets.getTablixStylePresetElements(stylePresetName, theme);
                return elements ? {
                    grid: [ {
                        properties: {
                            outlineColor: createSolidFillDefinition(elements.outlineColor),
                            outlineWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.outlineWeight, stylePresets.TablixStylePresetDefaults.outlineWeight)),
                            gridVertical: SQExprBuilder.boolean(elements.gridVerticalEnabledMatrix),
                            gridVerticalColor: createSolidFillDefinition(elements.gridColor),
                            gridVerticalWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.gridVerticalWeight, stylePresets.TablixStylePresetDefaults.gridlineVerticalWeight)),
                            gridHorizontal: SQExprBuilder.boolean(elements.gridHorizontalEnabledMatrix),
                            gridHorizontalColor: createSolidFillDefinition(elements.gridColor),
                            gridHorizontalWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.gridHorizontalWeight, stylePresets.TablixStylePresetDefaults.gridHorizontalWeight)),
                            rowPadding: SQExprBuilder.integer(elements.rowPadding)
                        }
                    } ],
                    columnHeaders: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeColumnHeaders, stylePresets.TablixStylePresetDefaults.columnsOutline)),
                            fontColor: createSolidFillDefinition(elements.fontColorHeaders),
                            backColor: createSolidFillDefinition(elements.backColorHeaders)
                        }
                    } ],
                    rowHeaders: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeRowHeaders, stylePresets.TablixStylePresetDefaults.rowsOutline)),
                            fontColor: createSolidFillDefinition(elements.fontColorHeaders),
                            backColor: createSolidFillDefinition(elements.backColorHeaders)
                        }
                    } ],
                    values: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeValues, stylePresets.TablixStylePresetDefaults.valuesOutline)),
                            fontColorPrimary: createSolidFillDefinition(elements.fontColorValues1),
                            backColorPrimary: createSolidFillDefinition(elements.backColorValues1),
                            fontColorSecondary: createSolidFillDefinition(elements.fontColorValues2),
                            backColorSecondary: createSolidFillDefinition(elements.backColorValues2)
                        }
                    } ],
                    subTotals: [ {
                        properties: {
                            fontColor: void 0,
                            backColor: void 0
                        }
                    } ],
                    total: [ {
                        properties: {
                            fontColor: createSolidFillDefinition(elements.fontColorTotals),
                            backColor: createSolidFillDefinition(elements.backColorTotals),
                            applyToHeaders: SQExprBuilder.boolean(!1)
                        }
                    } ]
                } : {};
            }
            function matrixStylePresets() {
                return {
                    sectionTitle: createDisplayNameGetter("Visual_Matrix_StylePreset_SectionTitle"),
                    sliceTitle: createDisplayNameGetter("Visual_Table_StylePreset_SliceTitle"),
                    defaultPresetName: stylePresets.TablixStylePresetsName.None,
                    presets: (_a = {}, _a[stylePresets.TablixStylePresetsName.None] = {
                        name: stylePresets.TablixStylePresetsName.None,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_None"),
                        evaluate: function(theme) {
                            return wrapMatrixStylePresetElements(stylePresets.TablixStylePresetsName.None, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Minimal] = {
                        name: stylePresets.TablixStylePresetsName.Minimal,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Minimal"),
                        evaluate: function(theme) {
                            return wrapMatrixStylePresetElements(stylePresets.TablixStylePresetsName.Minimal, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.BoldHeader] = {
                        name: stylePresets.TablixStylePresetsName.BoldHeader,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_BoldHeader"),
                        evaluate: function(theme) {
                            return wrapMatrixStylePresetElements(stylePresets.TablixStylePresetsName.BoldHeader, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.AlternatingRows] = {
                        name: stylePresets.TablixStylePresetsName.AlternatingRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_AlternatingRows"),
                        evaluate: function(theme) {
                            return wrapMatrixStylePresetElements(stylePresets.TablixStylePresetsName.AlternatingRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.ContrastAlternatingRows] = {
                        name: stylePresets.TablixStylePresetsName.ContrastAlternatingRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_ContrastAlternatingRows"),
                        evaluate: function(theme) {
                            return wrapMatrixStylePresetElements(stylePresets.TablixStylePresetsName.ContrastAlternatingRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.FlashyRows] = {
                        name: stylePresets.TablixStylePresetsName.FlashyRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_FlashyRows"),
                        evaluate: function(theme) {
                            return wrapMatrixStylePresetElements(stylePresets.TablixStylePresetsName.FlashyRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows] = {
                        name: stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_BoldHeaderFlashyRows"),
                        evaluate: function(theme) {
                            return wrapMatrixStylePresetElements(stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Sparse] = {
                        name: stylePresets.TablixStylePresetsName.Sparse,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Sparse"),
                        evaluate: function(theme) {
                            return wrapMatrixStylePresetElements(stylePresets.TablixStylePresetsName.Sparse, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Condensed] = {
                        name: stylePresets.TablixStylePresetsName.Condensed,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Condensed"),
                        evaluate: function(theme) {
                            return wrapMatrixStylePresetElements(stylePresets.TablixStylePresetsName.Condensed, theme);
                        }
                    }, _a)
                };
                var _a;
            }
            var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, SQExprBuilder = powerbi.data.SQExprBuilder, Utility = jsCommon.Utility, createSolidFillDefinition = powerbi.fillDefinitionHelpers.createSolidFillDefinition;
            stylePresets.matrixStylePresets = matrixStylePresets;
        })(stylePresets = visuals.stylePresets || (visuals.stylePresets = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var stylePresets;
        !(function(stylePresets) {
            function wrapPivotTableStylePresetElements(stylePresetName, theme) {
                var elements = stylePresets.getTablixStylePresetElements(stylePresetName, theme);
                return elements ? {
                    grid: [ {
                        properties: {
                            outlineColor: createSolidFillDefinition(elements.outlineColor),
                            outlineWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.outlineWeight, stylePresets.TablixStylePresetDefaults.outlineWeight)),
                            gridVertical: SQExprBuilder.boolean(elements.gridVerticalEnabledMatrix),
                            gridVerticalColor: createSolidFillDefinition(elements.gridColor),
                            gridVerticalWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.gridVerticalWeight, stylePresets.TablixStylePresetDefaults.gridlineVerticalWeight)),
                            gridHorizontal: SQExprBuilder.boolean(elements.gridHorizontalEnabledMatrix),
                            gridHorizontalColor: createSolidFillDefinition(elements.gridColor),
                            gridHorizontalWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.gridHorizontalWeight, stylePresets.TablixStylePresetDefaults.gridHorizontalWeight)),
                            rowPadding: SQExprBuilder.integer(elements.rowPadding)
                        }
                    } ],
                    columnHeaders: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeColumnHeaders, stylePresets.TablixStylePresetDefaults.columnsOutline)),
                            fontColor: createSolidFillDefinition(elements.fontColorHeaders),
                            backColor: createSolidFillDefinition(elements.backColorHeaders)
                        }
                    } ],
                    rowHeaders: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeRowHeaders, stylePresets.TablixStylePresetDefaults.rowsOutline)),
                            fontColor: createSolidFillDefinition(elements.fontColorHeaders),
                            backColor: createSolidFillDefinition(elements.backColorHeaders),
                            applyAlternation: SQExprBuilder.boolean(!0)
                        }
                    } ],
                    values: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeValues, stylePresets.TablixStylePresetDefaults.valuesOutline)),
                            fontColorPrimary: createSolidFillDefinition(elements.fontColorValues1),
                            backColorPrimary: createSolidFillDefinition(elements.backColorValues1),
                            fontColorSecondary: createSolidFillDefinition(elements.fontColorValues2),
                            backColorSecondary: createSolidFillDefinition(elements.backColorValues2)
                        }
                    } ],
                    subTotals: [ {
                        properties: {
                            fontColor: void 0,
                            backColor: void 0
                        }
                    } ],
                    total: [ {
                        properties: {
                            fontColor: createSolidFillDefinition(elements.fontColorTotals),
                            backColor: createSolidFillDefinition(elements.backColorTotals),
                            applyToHeaders: SQExprBuilder.boolean(!1)
                        }
                    } ]
                } : {};
            }
            function pivotTableStylePresets() {
                return {
                    sectionTitle: createDisplayNameGetter("Visual_Matrix_StylePreset_SectionTitle"),
                    sliceTitle: createDisplayNameGetter("Visual_Table_StylePreset_SliceTitle"),
                    defaultPresetName: stylePresets.TablixStylePresetsName.Default,
                    presets: (_a = {}, _a[stylePresets.TablixStylePresetsName.Default] = {
                        name: stylePresets.TablixStylePresetsName.Default,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Default"),
                        evaluate: function(theme) {
                            return wrapPivotTableStylePresetElements(stylePresets.TablixStylePresetsName.Default, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.None] = {
                        name: stylePresets.TablixStylePresetsName.None,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_None"),
                        evaluate: function(theme) {
                            return wrapPivotTableStylePresetElements(stylePresets.TablixStylePresetsName.None, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Minimal] = {
                        name: stylePresets.TablixStylePresetsName.Minimal,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Minimal"),
                        evaluate: function(theme) {
                            return wrapPivotTableStylePresetElements(stylePresets.TablixStylePresetsName.Minimal, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.BoldHeader] = {
                        name: stylePresets.TablixStylePresetsName.BoldHeader,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_BoldHeader"),
                        evaluate: function(theme) {
                            return wrapPivotTableStylePresetElements(stylePresets.TablixStylePresetsName.BoldHeader, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.AlternatingRows] = {
                        name: stylePresets.TablixStylePresetsName.AlternatingRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_AlternatingRows"),
                        evaluate: function(theme) {
                            return wrapPivotTableStylePresetElements(stylePresets.TablixStylePresetsName.AlternatingRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.ContrastAlternatingRows] = {
                        name: stylePresets.TablixStylePresetsName.ContrastAlternatingRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_ContrastAlternatingRows"),
                        evaluate: function(theme) {
                            return wrapPivotTableStylePresetElements(stylePresets.TablixStylePresetsName.ContrastAlternatingRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.FlashyRows] = {
                        name: stylePresets.TablixStylePresetsName.FlashyRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_FlashyRows"),
                        evaluate: function(theme) {
                            return wrapPivotTableStylePresetElements(stylePresets.TablixStylePresetsName.FlashyRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows] = {
                        name: stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_BoldHeaderFlashyRows"),
                        evaluate: function(theme) {
                            return wrapPivotTableStylePresetElements(stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Sparse] = {
                        name: stylePresets.TablixStylePresetsName.Sparse,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Sparse"),
                        evaluate: function(theme) {
                            return wrapPivotTableStylePresetElements(stylePresets.TablixStylePresetsName.Sparse, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Condensed] = {
                        name: stylePresets.TablixStylePresetsName.Condensed,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Condensed"),
                        evaluate: function(theme) {
                            return wrapPivotTableStylePresetElements(stylePresets.TablixStylePresetsName.Condensed, theme);
                        }
                    }, _a)
                };
                var _a;
            }
            var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, SQExprBuilder = powerbi.data.SQExprBuilder, Utility = jsCommon.Utility, createSolidFillDefinition = powerbi.fillDefinitionHelpers.createSolidFillDefinition;
            stylePresets.pivotTableStylePresets = pivotTableStylePresets;
        })(stylePresets = visuals.stylePresets || (visuals.stylePresets = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));

var powerbi;

!(function(powerbi) {
    var visuals;
    !(function(visuals) {
        var stylePresets;
        !(function(stylePresets) {
            function wrapTableExStylePresetElements(stylePresetName, theme) {
                var elements = stylePresets.getTablixStylePresetElements(stylePresetName, theme);
                return elements ? {
                    grid: [ {
                        properties: {
                            outlineColor: createSolidFillDefinition(elements.outlineColor),
                            outlineWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.outlineWeight, stylePresets.TablixStylePresetDefaults.outlineWeight)),
                            gridVertical: SQExprBuilder.boolean(elements.gridVerticalEnabledTable),
                            gridVerticalColor: createSolidFillDefinition(elements.gridColor),
                            gridVerticalWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.gridVerticalWeight, stylePresets.TablixStylePresetDefaults.gridlineVerticalWeight)),
                            gridHorizontal: SQExprBuilder.boolean(elements.gridHorizontalEnabledTable),
                            gridHorizontalColor: createSolidFillDefinition(elements.gridColor),
                            gridHorizontalWeight: SQExprBuilder.integer(Utility.valueOrDefault(elements.gridHorizontalWeight, stylePresets.TablixStylePresetDefaults.gridHorizontalWeight)),
                            rowPadding: SQExprBuilder.integer(elements.rowPadding)
                        }
                    } ],
                    columnHeaders: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeColumnHeaders, stylePresets.TablixStylePresetDefaults.columnsOutline)),
                            fontColor: createSolidFillDefinition(elements.fontColorHeaders),
                            backColor: createSolidFillDefinition(elements.backColorHeaders)
                        }
                    } ],
                    values: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeValues, stylePresets.TablixStylePresetDefaults.valuesOutline)),
                            fontColorPrimary: createSolidFillDefinition(elements.fontColorValues1),
                            backColorPrimary: createSolidFillDefinition(elements.backColorValues1),
                            fontColorSecondary: createSolidFillDefinition(elements.fontColorValues2),
                            backColorSecondary: createSolidFillDefinition(elements.backColorValues2)
                        }
                    } ],
                    total: [ {
                        properties: {
                            outline: SQExprBuilder.text(Utility.valueOrDefault(elements.outlineModeTotals, stylePresets.TablixStylePresetDefaults.tableTotalOutline)),
                            fontColor: createSolidFillDefinition(elements.fontColorTotals),
                            backColor: createSolidFillDefinition(elements.backColorTotals)
                        }
                    } ]
                } : {};
            }
            function tableExStylePresets() {
                return {
                    sectionTitle: createDisplayNameGetter("Visual_Table_StylePreset_SectionTitle"),
                    sliceTitle: createDisplayNameGetter("Visual_Table_StylePreset_SliceTitle"),
                    defaultPresetName: stylePresets.TablixStylePresetsName.Default,
                    presets: (_a = {}, _a[stylePresets.TablixStylePresetsName.Default] = {
                        name: stylePresets.TablixStylePresetsName.Default,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Default"),
                        evaluate: function(theme) {
                            return wrapTableExStylePresetElements(stylePresets.TablixStylePresetsName.Default, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.None] = {
                        name: stylePresets.TablixStylePresetsName.None,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_None"),
                        evaluate: function(theme) {
                            return wrapTableExStylePresetElements(stylePresets.TablixStylePresetsName.None, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Minimal] = {
                        name: stylePresets.TablixStylePresetsName.Minimal,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Minimal"),
                        evaluate: function(theme) {
                            return wrapTableExStylePresetElements(stylePresets.TablixStylePresetsName.Minimal, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.BoldHeader] = {
                        name: stylePresets.TablixStylePresetsName.BoldHeader,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_BoldHeader"),
                        evaluate: function(theme) {
                            return wrapTableExStylePresetElements(stylePresets.TablixStylePresetsName.BoldHeader, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.AlternatingRows] = {
                        name: stylePresets.TablixStylePresetsName.AlternatingRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_AlternatingRows"),
                        evaluate: function(theme) {
                            return wrapTableExStylePresetElements(stylePresets.TablixStylePresetsName.AlternatingRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.ContrastAlternatingRows] = {
                        name: stylePresets.TablixStylePresetsName.ContrastAlternatingRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_ContrastAlternatingRows"),
                        evaluate: function(theme) {
                            return wrapTableExStylePresetElements(stylePresets.TablixStylePresetsName.ContrastAlternatingRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.FlashyRows] = {
                        name: stylePresets.TablixStylePresetsName.FlashyRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_FlashyRows"),
                        evaluate: function(theme) {
                            return wrapTableExStylePresetElements(stylePresets.TablixStylePresetsName.FlashyRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows] = {
                        name: stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_BoldHeaderFlashyRows"),
                        evaluate: function(theme) {
                            return wrapTableExStylePresetElements(stylePresets.TablixStylePresetsName.BoldHeaderFlashyRows, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Sparse] = {
                        name: stylePresets.TablixStylePresetsName.Sparse,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Sparse"),
                        evaluate: function(theme) {
                            return wrapTableExStylePresetElements(stylePresets.TablixStylePresetsName.Sparse, theme);
                        }
                    }, _a[stylePresets.TablixStylePresetsName.Condensed] = {
                        name: stylePresets.TablixStylePresetsName.Condensed,
                        displayName: createDisplayNameGetter("Visual_Table_StylePreset_Condensed"),
                        evaluate: function(theme) {
                            return wrapTableExStylePresetElements(stylePresets.TablixStylePresetsName.Condensed, theme);
                        }
                    }, _a)
                };
                var _a;
            }
            var createDisplayNameGetter = powerbi.data.createDisplayNameGetter, SQExprBuilder = powerbi.data.SQExprBuilder, Utility = jsCommon.Utility, createSolidFillDefinition = powerbi.fillDefinitionHelpers.createSolidFillDefinition;
            stylePresets.tableExStylePresets = tableExStylePresets;
        })(stylePresets = visuals.stylePresets || (visuals.stylePresets = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));;var module;(module||{}).exports=window.renderjson=(function(){function n(c,f,y,d,p,_){var v=y?"":f,h=function(n,o,u,c,f){var y,p=i(c),_=function(){y||e(p.parentNode,y=r(f(),s(l.hide,"disclosure",(function(){y.style.display="none",p.style.display="inline"})))),y.style.display="inline",p.style.display="none"};e(p,s(l.show,"disclosure",_),t(c+" syntax",n),s(o,null,_),t(c+" syntax",u));var h=e(i(),a(v.slice(0,-1)),p);return d>0&&_(),h};return null===c?t(null,v,"keyword","null"):void 0===c?t(null,v,"keyword","undefined"):"string"==typeof c&&c.length>p?h('"',c.substr(0,p)+" ...",'"',"string",(function(){return e(i("string"),t(null,v,"string",JSON.stringify(c)))})):l.js_mode&&"function"==typeof c?h("function() {","...","}","function",(function(){var n=c.toString().match(/^([^{]*{)([\s\S]*)(})\s?$/),r=n&&n[1]?n[1]:"function() {",o=n&&n[2]?n[2]:"";return e(i("function"),t("function syntax",r,null,"\n"),t(null,f,"function",o),a("\n"),t(null,f,"function syntax","}"))})):"object"!=typeof c?t(null,v,typeof c,JSON.stringify(c)):c.constructor==Array?0==c.length?t(null,v,"array syntax","[]"):h("["," ... ","]","array",(function(){for(var r=e(i("array"),t("array syntax","[",null,"\n")),o=0;o<c.length;o++)e(r,n(c[o],f+"    ",!1,d-1,p,_),o!=c.length-1?t("syntax",","):[],a("\n"));return e(r,t(null,f,"array syntax","]")),r})):(l.js_mode&&(c=u(c)),o(c)?t(null,v,"object syntax","{}"):h("{","...","}","object",(function(){var r=e(i("object"),t("object syntax","{",null,"\n"));for(var o in c)var s=o;var u=Object.keys(c);_&&(u=u.sort());for(var l in u){var o=u[l];e(r,t(null,f+"    ","key",'"'+o+'"',"object syntax",": "),n(c[o],f+"    ",!0,d-1,p,_),o!=s?t("syntax",","):[],a("\n"))}return e(r,t(null,f,"object syntax","}")),r})))}var t=function(){for(var n=[];arguments.length;)n.push(e(i(Array.prototype.shift.call(arguments)),a(Array.prototype.shift.call(arguments))));return n},e=function(){for(var n=Array.prototype.shift.call(arguments),t=0;t<arguments.length;t++)arguments[t].constructor==Array?e.apply(this,[n].concat(arguments[t])):n.appendChild(arguments[t]);return n},r=function(n,t){return n.insertBefore(t,n.firstChild),n},o=function(n){for(var t in n)if(Object.hasOwnProperty.call(n,t))return!1;return!0},a=function(n){return document.createTextNode(n)},i=function(n){var t=document.createElement("span");return n&&(t.className=n),t},s=function(n,t,e){var r=document.createElement("a");return t&&(r.className=t),r.appendChild(a(n)),r.href="#",r.onclick=function(n){return e(),n&&n.stopPropagation(),!1},r},u=function(n){for(var t={},e=n;null!=e;e=Object.getPrototypeOf(e))for(var r=Object.getOwnPropertyNames(e),o=0;o<r.length;o++){var a=r[o];"undefined"==typeof t[a]&&(t[a]=n[a])}return t},l=function c(t){var r=e(document.createElement("pre"),n(t,"",!1,c.show_to_level,c.max_string_length,c.sort_objects));return r.className="renderjson",r};return l.set_js_mode=function(n){return l.js_mode=n,l},l.set_icons=function(n,t){return l.show=n,l.hide=t,l},l.set_show_to_level=function(n){return l.show_to_level="string"==typeof n&&"all"===n.toLowerCase()?Number.MAX_VALUE:n,l},l.set_max_string_length=function(n){return l.max_string_length="string"==typeof n&&"none"===n.toLowerCase()?Number.MAX_VALUE:n,l},l.set_sort_objects=function(n){return l.sort_objects=n,l},l.set_show_by_default=function(n){return l.show_to_level=n?Number.MAX_VALUE:0,l},l.set_icons("⊕","⊖"),l.set_show_by_default(!1),l.set_sort_objects(!1),l.set_max_string_length("none"),l.set_js_mode(!1),l})();!(function(n){var t;!(function(t){var e;!(function(t){var e;!(function(t){var e=(function(){function t(n){var t=this.container=$("<div>");t.addClass("jsonViewScrollPane"),$(n.element).append(t),renderjson.set_js_mode(!0)}return t.prototype.update=function(t){t.type&n.VisualUpdateType.Data&&this.container.empty().append(renderjson(t.dataViews))},t})();t.Visual=e})(e=t.dataViewer||(t.dataViewer={}))})(e=t.visual||(t.visual={}))})(t=n.extensibility||(n.extensibility={}))})(powerbi||(powerbi={}));!(function(n){var t;!(function(t){var e;!(function(t){t.dataViewer={name:"dataViewer",displayName:"data viewer","class":"Visual",version:"1.0.0",apiVersion:"1.0.0",create:function(t){return new n.extensibility.visual.dataViewer.Visual(t)},custom:!0}})(e=t.plugins||(t.plugins={}))})(t=n.visuals||(n.visuals={}))})(powerbi||(powerbi={})); 

window.parseTimeMarkers['powerbi-visuals.nonmin.js'].end = Date.now();
